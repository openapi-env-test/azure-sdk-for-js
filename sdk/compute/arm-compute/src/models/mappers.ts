/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const DiskSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PurchasePlan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PurchasePlan",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        required: true,
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "product",
        required: true,
        type: {
          name: "String"
        }
      },
      promotionCode: {
        serializedName: "promotionCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedCapabilities: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedCapabilities",
    modelProperties: {
      acceleratedNetwork: {
        serializedName: "acceleratedNetwork",
        type: {
          name: "Boolean"
        }
      },
      architecture: {
        serializedName: "architecture",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreationData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreationData",
    modelProperties: {
      createOption: {
        serializedName: "createOption",
        required: true,
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageDiskReference"
        }
      },
      galleryImageReference: {
        serializedName: "galleryImageReference",
        type: {
          name: "Composite",
          className: "ImageDiskReference"
        }
      },
      sourceUri: {
        serializedName: "sourceUri",
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      },
      sourceUniqueId: {
        serializedName: "sourceUniqueId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uploadSizeBytes: {
        serializedName: "uploadSizeBytes",
        type: {
          name: "Number"
        }
      },
      logicalSectorSize: {
        serializedName: "logicalSectorSize",
        type: {
          name: "Number"
        }
      },
      securityDataUri: {
        serializedName: "securityDataUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageDiskReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageDiskReference",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      lun: {
        serializedName: "lun",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EncryptionSettingsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionSettingsCollection",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      encryptionSettings: {
        serializedName: "encryptionSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EncryptionSettingsElement"
            }
          }
        }
      },
      encryptionSettingsVersion: {
        serializedName: "encryptionSettingsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionSettingsElement: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionSettingsElement",
    modelProperties: {
      diskEncryptionKey: {
        serializedName: "diskEncryptionKey",
        type: {
          name: "Composite",
          className: "KeyVaultAndSecretReference"
        }
      },
      keyEncryptionKey: {
        serializedName: "keyEncryptionKey",
        type: {
          name: "Composite",
          className: "KeyVaultAndKeyReference"
        }
      }
    }
  }
};

export const KeyVaultAndSecretReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultAndSecretReference",
    modelProperties: {
      sourceVault: {
        serializedName: "sourceVault",
        type: {
          name: "Composite",
          className: "SourceVault"
        }
      },
      secretUrl: {
        serializedName: "secretUrl",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceVault: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceVault",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultAndKeyReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultAndKeyReference",
    modelProperties: {
      sourceVault: {
        serializedName: "sourceVault",
        type: {
          name: "Composite",
          className: "SourceVault"
        }
      },
      keyUrl: {
        serializedName: "keyUrl",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Encryption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Encryption",
    modelProperties: {
      diskEncryptionSetId: {
        serializedName: "diskEncryptionSetId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareInfoElement: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShareInfoElement",
    modelProperties: {
      vmUri: {
        serializedName: "vmUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PropertyUpdatesInProgress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PropertyUpdatesInProgress",
    modelProperties: {
      targetTier: {
        serializedName: "targetTier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskSecurityProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskSecurityProfile",
    modelProperties: {
      securityType: {
        serializedName: "securityType",
        type: {
          name: "String"
        }
      },
      secureVMDiskEncryptionSetId: {
        serializedName: "secureVMDiskEncryptionSetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DiskUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "DiskSku"
        }
      },
      osType: {
        serializedName: "properties.osType",
        type: {
          name: "Enum",
          allowedValues: ["Windows", "Linux"]
        }
      },
      diskSizeGB: {
        serializedName: "properties.diskSizeGB",
        type: {
          name: "Number"
        }
      },
      encryptionSettingsCollection: {
        serializedName: "properties.encryptionSettingsCollection",
        type: {
          name: "Composite",
          className: "EncryptionSettingsCollection"
        }
      },
      diskIopsReadWrite: {
        serializedName: "properties.diskIOPSReadWrite",
        type: {
          name: "Number"
        }
      },
      diskMBpsReadWrite: {
        serializedName: "properties.diskMBpsReadWrite",
        type: {
          name: "Number"
        }
      },
      diskIopsReadOnly: {
        serializedName: "properties.diskIOPSReadOnly",
        type: {
          name: "Number"
        }
      },
      diskMBpsReadOnly: {
        serializedName: "properties.diskMBpsReadOnly",
        type: {
          name: "Number"
        }
      },
      maxShares: {
        serializedName: "properties.maxShares",
        type: {
          name: "Number"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      networkAccessPolicy: {
        serializedName: "properties.networkAccessPolicy",
        type: {
          name: "String"
        }
      },
      diskAccessId: {
        serializedName: "properties.diskAccessId",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "properties.tier",
        type: {
          name: "String"
        }
      },
      burstingEnabled: {
        serializedName: "properties.burstingEnabled",
        type: {
          name: "Boolean"
        }
      },
      purchasePlan: {
        serializedName: "properties.purchasePlan",
        type: {
          name: "Composite",
          className: "PurchasePlan"
        }
      },
      supportedCapabilities: {
        serializedName: "properties.supportedCapabilities",
        type: {
          name: "Composite",
          className: "SupportedCapabilities"
        }
      },
      propertyUpdatesInProgress: {
        serializedName: "properties.propertyUpdatesInProgress",
        type: {
          name: "Composite",
          className: "PropertyUpdatesInProgress"
        }
      },
      supportsHibernation: {
        serializedName: "properties.supportsHibernation",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      dataAccessAuthMode: {
        serializedName: "properties.dataAccessAuthMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Disk"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GrantAccessData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GrantAccessData",
    modelProperties: {
      access: {
        serializedName: "access",
        required: true,
        type: {
          name: "String"
        }
      },
      durationInSeconds: {
        serializedName: "durationInSeconds",
        required: true,
        type: {
          name: "Number"
        }
      },
      getSecureVMGuestStateSAS: {
        serializedName: "getSecureVMGuestStateSAS",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AccessUri: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessUri",
    modelProperties: {
      accessSAS: {
        serializedName: "accessSAS",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      securityDataAccessSAS: {
        serializedName: "securityDataAccessSAS",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SnapshotSku"
        }
      },
      osType: {
        serializedName: "properties.osType",
        type: {
          name: "Enum",
          allowedValues: ["Windows", "Linux"]
        }
      },
      diskSizeGB: {
        serializedName: "properties.diskSizeGB",
        type: {
          name: "Number"
        }
      },
      encryptionSettingsCollection: {
        serializedName: "properties.encryptionSettingsCollection",
        type: {
          name: "Composite",
          className: "EncryptionSettingsCollection"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      networkAccessPolicy: {
        serializedName: "properties.networkAccessPolicy",
        type: {
          name: "String"
        }
      },
      diskAccessId: {
        serializedName: "properties.diskAccessId",
        type: {
          name: "String"
        }
      },
      supportsHibernation: {
        serializedName: "properties.supportsHibernation",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      dataAccessAuthMode: {
        serializedName: "properties.dataAccessAuthMode",
        type: {
          name: "String"
        }
      },
      supportedCapabilities: {
        serializedName: "properties.supportedCapabilities",
        type: {
          name: "Composite",
          className: "SupportedCapabilities"
        }
      }
    }
  }
};

export const SnapshotList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Snapshot"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionSetIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionSetIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyForDiskEncryptionSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyForDiskEncryptionSet",
    modelProperties: {
      sourceVault: {
        serializedName: "sourceVault",
        type: {
          name: "Composite",
          className: "SourceVault"
        }
      },
      keyUrl: {
        serializedName: "keyUrl",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiError",
    modelProperties: {
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApiErrorBase"
            }
          }
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiErrorBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiErrorBase",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      exceptiontype: {
        serializedName: "exceptiontype",
        type: {
          name: "String"
        }
      },
      errordetail: {
        serializedName: "errordetail",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ApiError"
        }
      }
    }
  }
};

export const DiskEncryptionSetUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskEncryptionSetUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EncryptionSetIdentity"
        }
      },
      encryptionType: {
        serializedName: "properties.encryptionType",
        type: {
          name: "String"
        }
      },
      activeKey: {
        serializedName: "properties.activeKey",
        type: {
          name: "Composite",
          className: "KeyForDiskEncryptionSet"
        }
      },
      rotationToLatestKeyVersionEnabled: {
        serializedName: "properties.rotationToLatestKeyVersionEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DiskEncryptionSetList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskEncryptionSetList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskEncryptionSet"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceUriList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceUriList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskAccessUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskAccessUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DiskAccessList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskAccessList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskAccess"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyOnlyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyOnlyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskRestorePointList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskRestorePointList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskRestorePoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Disk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Disk",
    modelProperties: {
      ...Resource.type.modelProperties,
      managedBy: {
        serializedName: "managedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedByExtended: {
        serializedName: "managedByExtended",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "DiskSku"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      timeCreated: {
        serializedName: "properties.timeCreated",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      osType: {
        serializedName: "properties.osType",
        type: {
          name: "Enum",
          allowedValues: ["Windows", "Linux"]
        }
      },
      hyperVGeneration: {
        serializedName: "properties.hyperVGeneration",
        type: {
          name: "String"
        }
      },
      purchasePlan: {
        serializedName: "properties.purchasePlan",
        type: {
          name: "Composite",
          className: "PurchasePlan"
        }
      },
      supportedCapabilities: {
        serializedName: "properties.supportedCapabilities",
        type: {
          name: "Composite",
          className: "SupportedCapabilities"
        }
      },
      creationData: {
        serializedName: "properties.creationData",
        type: {
          name: "Composite",
          className: "CreationData"
        }
      },
      diskSizeGB: {
        serializedName: "properties.diskSizeGB",
        type: {
          name: "Number"
        }
      },
      diskSizeBytes: {
        serializedName: "properties.diskSizeBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      uniqueId: {
        serializedName: "properties.uniqueId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryptionSettingsCollection: {
        serializedName: "properties.encryptionSettingsCollection",
        type: {
          name: "Composite",
          className: "EncryptionSettingsCollection"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskIopsReadWrite: {
        serializedName: "properties.diskIOPSReadWrite",
        type: {
          name: "Number"
        }
      },
      diskMBpsReadWrite: {
        serializedName: "properties.diskMBpsReadWrite",
        type: {
          name: "Number"
        }
      },
      diskIopsReadOnly: {
        serializedName: "properties.diskIOPSReadOnly",
        type: {
          name: "Number"
        }
      },
      diskMBpsReadOnly: {
        serializedName: "properties.diskMBpsReadOnly",
        type: {
          name: "Number"
        }
      },
      diskState: {
        serializedName: "properties.diskState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      maxShares: {
        serializedName: "properties.maxShares",
        type: {
          name: "Number"
        }
      },
      shareInfo: {
        serializedName: "properties.shareInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShareInfoElement"
            }
          }
        }
      },
      networkAccessPolicy: {
        serializedName: "properties.networkAccessPolicy",
        type: {
          name: "String"
        }
      },
      diskAccessId: {
        serializedName: "properties.diskAccessId",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "properties.tier",
        type: {
          name: "String"
        }
      },
      burstingEnabled: {
        serializedName: "properties.burstingEnabled",
        type: {
          name: "Boolean"
        }
      },
      propertyUpdatesInProgress: {
        serializedName: "properties.propertyUpdatesInProgress",
        type: {
          name: "Composite",
          className: "PropertyUpdatesInProgress"
        }
      },
      supportsHibernation: {
        serializedName: "properties.supportsHibernation",
        type: {
          name: "Boolean"
        }
      },
      securityProfile: {
        serializedName: "properties.securityProfile",
        type: {
          name: "Composite",
          className: "DiskSecurityProfile"
        }
      },
      completionPercent: {
        serializedName: "properties.completionPercent",
        type: {
          name: "Number"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      dataAccessAuthMode: {
        serializedName: "properties.dataAccessAuthMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Snapshot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Snapshot",
    modelProperties: {
      ...Resource.type.modelProperties,
      managedBy: {
        serializedName: "managedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SnapshotSku"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      timeCreated: {
        serializedName: "properties.timeCreated",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      osType: {
        serializedName: "properties.osType",
        type: {
          name: "Enum",
          allowedValues: ["Windows", "Linux"]
        }
      },
      hyperVGeneration: {
        serializedName: "properties.hyperVGeneration",
        type: {
          name: "String"
        }
      },
      purchasePlan: {
        serializedName: "properties.purchasePlan",
        type: {
          name: "Composite",
          className: "PurchasePlan"
        }
      },
      supportedCapabilities: {
        serializedName: "properties.supportedCapabilities",
        type: {
          name: "Composite",
          className: "SupportedCapabilities"
        }
      },
      creationData: {
        serializedName: "properties.creationData",
        type: {
          name: "Composite",
          className: "CreationData"
        }
      },
      diskSizeGB: {
        serializedName: "properties.diskSizeGB",
        type: {
          name: "Number"
        }
      },
      diskSizeBytes: {
        serializedName: "properties.diskSizeBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      diskState: {
        serializedName: "properties.diskState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uniqueId: {
        serializedName: "properties.uniqueId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryptionSettingsCollection: {
        serializedName: "properties.encryptionSettingsCollection",
        type: {
          name: "Composite",
          className: "EncryptionSettingsCollection"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      incremental: {
        serializedName: "properties.incremental",
        type: {
          name: "Boolean"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      networkAccessPolicy: {
        serializedName: "properties.networkAccessPolicy",
        type: {
          name: "String"
        }
      },
      diskAccessId: {
        serializedName: "properties.diskAccessId",
        type: {
          name: "String"
        }
      },
      securityProfile: {
        serializedName: "properties.securityProfile",
        type: {
          name: "Composite",
          className: "DiskSecurityProfile"
        }
      },
      supportsHibernation: {
        serializedName: "properties.supportsHibernation",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      completionPercent: {
        serializedName: "properties.completionPercent",
        type: {
          name: "Number"
        }
      },
      dataAccessAuthMode: {
        serializedName: "properties.dataAccessAuthMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskEncryptionSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskEncryptionSet",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "EncryptionSetIdentity"
        }
      },
      encryptionType: {
        serializedName: "properties.encryptionType",
        type: {
          name: "String"
        }
      },
      activeKey: {
        serializedName: "properties.activeKey",
        type: {
          name: "Composite",
          className: "KeyForDiskEncryptionSet"
        }
      },
      previousKeys: {
        serializedName: "properties.previousKeys",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyForDiskEncryptionSet"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rotationToLatestKeyVersionEnabled: {
        serializedName: "properties.rotationToLatestKeyVersionEnabled",
        type: {
          name: "Boolean"
        }
      },
      lastKeyRotationTimestamp: {
        serializedName: "properties.lastKeyRotationTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      autoKeyRotationError: {
        serializedName: "properties.autoKeyRotationError",
        type: {
          name: "Composite",
          className: "ApiError"
        }
      }
    }
  }
};

export const DiskAccess: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskAccess",
    modelProperties: {
      ...Resource.type.modelProperties,
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timeCreated: {
        serializedName: "properties.timeCreated",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DiskRestorePoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskRestorePoint",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      timeCreated: {
        serializedName: "properties.timeCreated",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      sourceResourceId: {
        serializedName: "properties.sourceResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "properties.osType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Windows", "Linux"]
        }
      },
      hyperVGeneration: {
        serializedName: "properties.hyperVGeneration",
        type: {
          name: "String"
        }
      },
      purchasePlan: {
        serializedName: "properties.purchasePlan",
        type: {
          name: "Composite",
          className: "PurchasePlan"
        }
      },
      supportedCapabilities: {
        serializedName: "properties.supportedCapabilities",
        type: {
          name: "Composite",
          className: "SupportedCapabilities"
        }
      },
      familyId: {
        serializedName: "properties.familyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceUniqueId: {
        serializedName: "properties.sourceUniqueId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      },
      supportsHibernation: {
        serializedName: "properties.supportsHibernation",
        type: {
          name: "Boolean"
        }
      },
      networkAccessPolicy: {
        serializedName: "properties.networkAccessPolicy",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      diskAccessId: {
        serializedName: "properties.diskAccessId",
        type: {
          name: "String"
        }
      },
      completionPercent: {
        serializedName: "properties.completionPercent",
        type: {
          name: "Number"
        }
      },
      replicationState: {
        serializedName: "properties.replicationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceResourceLocation: {
        serializedName: "properties.sourceResourceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
