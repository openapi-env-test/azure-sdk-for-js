/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const VirtualMachineExtensionInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineExtensionInstanceView",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      typeHandlerVersion: {
        serializedName: "typeHandlerVersion",
        type: {
          name: "String"
        }
      },
      substatuses: {
        serializedName: "substatuses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceViewStatus"
            }
          }
        }
      },
      statuses: {
        serializedName: "statuses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceViewStatus"
            }
          }
        }
      }
    }
  }
};

export const InstanceViewStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceViewStatus",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "level",
        type: {
          name: "Enum",
          allowedValues: ["Info", "Warning", "Error"]
        }
      },
      displayStatus: {
        serializedName: "displayStatus",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "time",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ResourceWithOptionalLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceWithOptionalLocation",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ApiError"
        }
      }
    }
  }
};

export const ApiError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiError",
    modelProperties: {
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApiErrorBase"
            }
          }
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiErrorBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiErrorBase",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      exceptiontype: {
        serializedName: "exceptiontype",
        type: {
          name: "String"
        }
      },
      errordetail: {
        serializedName: "errordetail",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateResource",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualMachineExtensionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineExtensionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineExtension"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachine"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Plan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Plan",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "product",
        type: {
          name: "String"
        }
      },
      promotionCode: {
        serializedName: "promotionCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HardwareProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HardwareProfile",
    modelProperties: {
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      vmSizeProperties: {
        serializedName: "vmSizeProperties",
        type: {
          name: "Composite",
          className: "VMSizeProperties"
        }
      }
    }
  }
};

export const VMSizeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMSizeProperties",
    modelProperties: {
      vCPUsAvailable: {
        serializedName: "vCPUsAvailable",
        type: {
          name: "Number"
        }
      },
      vCPUsPerCore: {
        serializedName: "vCPUsPerCore",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageProfile",
    modelProperties: {
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      osDisk: {
        serializedName: "osDisk",
        type: {
          name: "Composite",
          className: "OSDisk"
        }
      },
      dataDisks: {
        serializedName: "dataDisks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataDisk"
            }
          }
        }
      }
    }
  }
};

export const SubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OSDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSDisk",
    modelProperties: {
      osType: {
        serializedName: "osType",
        type: {
          name: "Enum",
          allowedValues: ["Windows", "Linux"]
        }
      },
      encryptionSettings: {
        serializedName: "encryptionSettings",
        type: {
          name: "Composite",
          className: "DiskEncryptionSettings"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      vhd: {
        serializedName: "vhd",
        type: {
          name: "Composite",
          className: "VirtualHardDisk"
        }
      },
      image: {
        serializedName: "image",
        type: {
          name: "Composite",
          className: "VirtualHardDisk"
        }
      },
      caching: {
        serializedName: "caching",
        type: {
          name: "Enum",
          allowedValues: ["None", "ReadOnly", "ReadWrite"]
        }
      },
      writeAcceleratorEnabled: {
        serializedName: "writeAcceleratorEnabled",
        type: {
          name: "Boolean"
        }
      },
      diffDiskSettings: {
        serializedName: "diffDiskSettings",
        type: {
          name: "Composite",
          className: "DiffDiskSettings"
        }
      },
      createOption: {
        serializedName: "createOption",
        required: true,
        type: {
          name: "String"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        type: {
          name: "Number"
        }
      },
      managedDisk: {
        serializedName: "managedDisk",
        type: {
          name: "Composite",
          className: "ManagedDiskParameters"
        }
      },
      deleteOption: {
        serializedName: "deleteOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskEncryptionSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskEncryptionSettings",
    modelProperties: {
      diskEncryptionKey: {
        serializedName: "diskEncryptionKey",
        type: {
          name: "Composite",
          className: "KeyVaultSecretReference"
        }
      },
      keyEncryptionKey: {
        serializedName: "keyEncryptionKey",
        type: {
          name: "Composite",
          className: "KeyVaultKeyReference"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const KeyVaultSecretReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultSecretReference",
    modelProperties: {
      secretUrl: {
        serializedName: "secretUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceVault: {
        serializedName: "sourceVault",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const KeyVaultKeyReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultKeyReference",
    modelProperties: {
      keyUrl: {
        serializedName: "keyUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceVault: {
        serializedName: "sourceVault",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const VirtualHardDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualHardDisk",
    modelProperties: {
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiffDiskSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiffDiskSettings",
    modelProperties: {
      option: {
        serializedName: "option",
        type: {
          name: "String"
        }
      },
      placement: {
        serializedName: "placement",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMDiskSecurityProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMDiskSecurityProfile",
    modelProperties: {
      securityEncryptionType: {
        serializedName: "securityEncryptionType",
        type: {
          name: "String"
        }
      },
      diskEncryptionSet: {
        serializedName: "diskEncryptionSet",
        type: {
          name: "Composite",
          className: "DiskEncryptionSetParameters"
        }
      }
    }
  }
};

export const DataDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataDisk",
    modelProperties: {
      lun: {
        serializedName: "lun",
        required: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      vhd: {
        serializedName: "vhd",
        type: {
          name: "Composite",
          className: "VirtualHardDisk"
        }
      },
      image: {
        serializedName: "image",
        type: {
          name: "Composite",
          className: "VirtualHardDisk"
        }
      },
      caching: {
        serializedName: "caching",
        type: {
          name: "Enum",
          allowedValues: ["None", "ReadOnly", "ReadWrite"]
        }
      },
      writeAcceleratorEnabled: {
        serializedName: "writeAcceleratorEnabled",
        type: {
          name: "Boolean"
        }
      },
      createOption: {
        serializedName: "createOption",
        required: true,
        type: {
          name: "String"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        type: {
          name: "Number"
        }
      },
      managedDisk: {
        serializedName: "managedDisk",
        type: {
          name: "Composite",
          className: "ManagedDiskParameters"
        }
      },
      toBeDetached: {
        serializedName: "toBeDetached",
        type: {
          name: "Boolean"
        }
      },
      diskIopsReadWrite: {
        serializedName: "diskIOPSReadWrite",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      diskMBpsReadWrite: {
        serializedName: "diskMBpsReadWrite",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      detachOption: {
        serializedName: "detachOption",
        type: {
          name: "String"
        }
      },
      deleteOption: {
        serializedName: "deleteOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdditionalCapabilities: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdditionalCapabilities",
    modelProperties: {
      ultraSSDEnabled: {
        serializedName: "ultraSSDEnabled",
        type: {
          name: "Boolean"
        }
      },
      hibernationEnabled: {
        serializedName: "hibernationEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OSProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSProfile",
    modelProperties: {
      computerName: {
        serializedName: "computerName",
        type: {
          name: "String"
        }
      },
      adminUsername: {
        serializedName: "adminUsername",
        type: {
          name: "String"
        }
      },
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String"
        }
      },
      customData: {
        serializedName: "customData",
        type: {
          name: "String"
        }
      },
      windowsConfiguration: {
        serializedName: "windowsConfiguration",
        type: {
          name: "Composite",
          className: "WindowsConfiguration"
        }
      },
      linuxConfiguration: {
        serializedName: "linuxConfiguration",
        type: {
          name: "Composite",
          className: "LinuxConfiguration"
        }
      },
      secrets: {
        serializedName: "secrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VaultSecretGroup"
            }
          }
        }
      },
      allowExtensionOperations: {
        serializedName: "allowExtensionOperations",
        type: {
          name: "Boolean"
        }
      },
      requireGuestProvisionSignal: {
        serializedName: "requireGuestProvisionSignal",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WindowsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsConfiguration",
    modelProperties: {
      provisionVMAgent: {
        serializedName: "provisionVMAgent",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticUpdates: {
        serializedName: "enableAutomaticUpdates",
        type: {
          name: "Boolean"
        }
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      additionalUnattendContent: {
        serializedName: "additionalUnattendContent",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AdditionalUnattendContent"
            }
          }
        }
      },
      patchSettings: {
        serializedName: "patchSettings",
        type: {
          name: "Composite",
          className: "PatchSettings"
        }
      },
      winRM: {
        serializedName: "winRM",
        type: {
          name: "Composite",
          className: "WinRMConfiguration"
        }
      }
    }
  }
};

export const AdditionalUnattendContent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdditionalUnattendContent",
    modelProperties: {
      passName: {
        defaultValue: "OobeSystem",
        isConstant: true,
        serializedName: "passName",
        type: {
          name: "String"
        }
      },
      componentName: {
        defaultValue: "Microsoft-Windows-Shell-Setup",
        isConstant: true,
        serializedName: "componentName",
        type: {
          name: "String"
        }
      },
      settingName: {
        serializedName: "settingName",
        type: {
          name: "Enum",
          allowedValues: ["AutoLogon", "FirstLogonCommands"]
        }
      },
      content: {
        serializedName: "content",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchSettings",
    modelProperties: {
      patchMode: {
        serializedName: "patchMode",
        type: {
          name: "String"
        }
      },
      enableHotpatching: {
        serializedName: "enableHotpatching",
        type: {
          name: "Boolean"
        }
      },
      assessmentMode: {
        serializedName: "assessmentMode",
        type: {
          name: "String"
        }
      },
      automaticByPlatformSettings: {
        serializedName: "automaticByPlatformSettings",
        type: {
          name: "Composite",
          className: "WindowsVMGuestPatchAutomaticByPlatformSettings"
        }
      }
    }
  }
};

export const WindowsVMGuestPatchAutomaticByPlatformSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsVMGuestPatchAutomaticByPlatformSettings",
    modelProperties: {
      rebootSetting: {
        serializedName: "rebootSetting",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WinRMConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WinRMConfiguration",
    modelProperties: {
      listeners: {
        serializedName: "listeners",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WinRMListener"
            }
          }
        }
      }
    }
  }
};

export const WinRMListener: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WinRMListener",
    modelProperties: {
      protocol: {
        serializedName: "protocol",
        type: {
          name: "Enum",
          allowedValues: ["Http", "Https"]
        }
      },
      certificateUrl: {
        serializedName: "certificateUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LinuxConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxConfiguration",
    modelProperties: {
      disablePasswordAuthentication: {
        serializedName: "disablePasswordAuthentication",
        type: {
          name: "Boolean"
        }
      },
      ssh: {
        serializedName: "ssh",
        type: {
          name: "Composite",
          className: "SshConfiguration"
        }
      },
      provisionVMAgent: {
        serializedName: "provisionVMAgent",
        type: {
          name: "Boolean"
        }
      },
      patchSettings: {
        serializedName: "patchSettings",
        type: {
          name: "Composite",
          className: "LinuxPatchSettings"
        }
      }
    }
  }
};

export const SshConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshConfiguration",
    modelProperties: {
      publicKeys: {
        serializedName: "publicKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SshPublicKey"
            }
          }
        }
      }
    }
  }
};

export const SshPublicKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SshPublicKey",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      keyData: {
        serializedName: "keyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LinuxPatchSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxPatchSettings",
    modelProperties: {
      patchMode: {
        serializedName: "patchMode",
        type: {
          name: "String"
        }
      },
      assessmentMode: {
        serializedName: "assessmentMode",
        type: {
          name: "String"
        }
      },
      automaticByPlatformSettings: {
        serializedName: "automaticByPlatformSettings",
        type: {
          name: "Composite",
          className: "LinuxVMGuestPatchAutomaticByPlatformSettings"
        }
      }
    }
  }
};

export const LinuxVMGuestPatchAutomaticByPlatformSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxVMGuestPatchAutomaticByPlatformSettings",
    modelProperties: {
      rebootSetting: {
        serializedName: "rebootSetting",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultSecretGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultSecretGroup",
    modelProperties: {
      sourceVault: {
        serializedName: "sourceVault",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      vaultCertificates: {
        serializedName: "vaultCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VaultCertificate"
            }
          }
        }
      }
    }
  }
};

export const VaultCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultCertificate",
    modelProperties: {
      certificateUrl: {
        serializedName: "certificateUrl",
        type: {
          name: "String"
        }
      },
      certificateStore: {
        serializedName: "certificateStore",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfile",
    modelProperties: {
      networkInterfaces: {
        serializedName: "networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceReference"
            }
          }
        }
      },
      networkApiVersion: {
        serializedName: "networkApiVersion",
        type: {
          name: "String"
        }
      },
      networkInterfaceConfigurations: {
        serializedName: "networkInterfaceConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineNetworkInterfaceConfiguration"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineNetworkInterfaceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineNetworkInterfaceConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      primary: {
        serializedName: "properties.primary",
        type: {
          name: "Boolean"
        }
      },
      deleteOption: {
        serializedName: "properties.deleteOption",
        type: {
          name: "String"
        }
      },
      enableAcceleratedNetworking: {
        serializedName: "properties.enableAcceleratedNetworking",
        type: {
          name: "Boolean"
        }
      },
      enableFpga: {
        serializedName: "properties.enableFpga",
        type: {
          name: "Boolean"
        }
      },
      enableIPForwarding: {
        serializedName: "properties.enableIPForwarding",
        type: {
          name: "Boolean"
        }
      },
      networkSecurityGroup: {
        serializedName: "properties.networkSecurityGroup",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      dnsSettings: {
        serializedName: "properties.dnsSettings",
        type: {
          name: "Composite",
          className: "VirtualMachineNetworkInterfaceDnsSettingsConfiguration"
        }
      },
      ipConfigurations: {
        serializedName: "properties.ipConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineNetworkInterfaceIPConfiguration"
            }
          }
        }
      },
      dscpConfiguration: {
        serializedName: "properties.dscpConfiguration",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const VirtualMachineNetworkInterfaceDnsSettingsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineNetworkInterfaceDnsSettingsConfiguration",
    modelProperties: {
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineNetworkInterfaceIPConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineNetworkInterfaceIPConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "properties.subnet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      primary: {
        serializedName: "properties.primary",
        type: {
          name: "Boolean"
        }
      },
      publicIPAddressConfiguration: {
        serializedName: "properties.publicIPAddressConfiguration",
        type: {
          name: "Composite",
          className: "VirtualMachinePublicIPAddressConfiguration"
        }
      },
      privateIPAddressVersion: {
        serializedName: "properties.privateIPAddressVersion",
        type: {
          name: "String"
        }
      },
      applicationSecurityGroups: {
        serializedName: "properties.applicationSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      applicationGatewayBackendAddressPools: {
        serializedName: "properties.applicationGatewayBackendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      loadBalancerBackendAddressPools: {
        serializedName: "properties.loadBalancerBackendAddressPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachinePublicIPAddressConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinePublicIPAddressConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "PublicIPAddressSku"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "properties.idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      deleteOption: {
        serializedName: "properties.deleteOption",
        type: {
          name: "String"
        }
      },
      dnsSettings: {
        serializedName: "properties.dnsSettings",
        type: {
          name: "Composite",
          className: "VirtualMachinePublicIPAddressDnsSettingsConfiguration"
        }
      },
      ipTags: {
        serializedName: "properties.ipTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineIpTag"
            }
          }
        }
      },
      publicIPPrefix: {
        serializedName: "properties.publicIPPrefix",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      publicIPAddressVersion: {
        serializedName: "properties.publicIPAddressVersion",
        type: {
          name: "String"
        }
      },
      publicIPAllocationMethod: {
        serializedName: "properties.publicIPAllocationMethod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachinePublicIPAddressDnsSettingsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinePublicIPAddressDnsSettingsConfiguration",
    modelProperties: {
      domainNameLabel: {
        serializedName: "domainNameLabel",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineIpTag: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineIpTag",
    modelProperties: {
      ipTagType: {
        serializedName: "ipTagType",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicIPAddressSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PublicIPAddressSku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityProfile",
    modelProperties: {
      uefiSettings: {
        serializedName: "uefiSettings",
        type: {
          name: "Composite",
          className: "UefiSettings"
        }
      },
      encryptionAtHost: {
        serializedName: "encryptionAtHost",
        type: {
          name: "Boolean"
        }
      },
      securityType: {
        serializedName: "securityType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UefiSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UefiSettings",
    modelProperties: {
      secureBootEnabled: {
        serializedName: "secureBootEnabled",
        type: {
          name: "Boolean"
        }
      },
      vTpmEnabled: {
        serializedName: "vTpmEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DiagnosticsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticsProfile",
    modelProperties: {
      bootDiagnostics: {
        serializedName: "bootDiagnostics",
        type: {
          name: "Composite",
          className: "BootDiagnostics"
        }
      }
    }
  }
};

export const BootDiagnostics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BootDiagnostics",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      storageUri: {
        serializedName: "storageUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BillingProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingProfile",
    modelProperties: {
      maxPrice: {
        serializedName: "maxPrice",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualMachineInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstanceView",
    modelProperties: {
      platformUpdateDomain: {
        serializedName: "platformUpdateDomain",
        type: {
          name: "Number"
        }
      },
      platformFaultDomain: {
        serializedName: "platformFaultDomain",
        type: {
          name: "Number"
        }
      },
      computerName: {
        serializedName: "computerName",
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "osVersion",
        type: {
          name: "String"
        }
      },
      hyperVGeneration: {
        serializedName: "hyperVGeneration",
        type: {
          name: "String"
        }
      },
      rdpThumbPrint: {
        serializedName: "rdpThumbPrint",
        type: {
          name: "String"
        }
      },
      vmAgent: {
        serializedName: "vmAgent",
        type: {
          name: "Composite",
          className: "VirtualMachineAgentInstanceView"
        }
      },
      maintenanceRedeployStatus: {
        serializedName: "maintenanceRedeployStatus",
        type: {
          name: "Composite",
          className: "MaintenanceRedeployStatus"
        }
      },
      disks: {
        serializedName: "disks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskInstanceView"
            }
          }
        }
      },
      extensions: {
        serializedName: "extensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineExtensionInstanceView"
            }
          }
        }
      },
      vmHealth: {
        serializedName: "vmHealth",
        type: {
          name: "Composite",
          className: "VirtualMachineHealthStatus"
        }
      },
      bootDiagnostics: {
        serializedName: "bootDiagnostics",
        type: {
          name: "Composite",
          className: "BootDiagnosticsInstanceView"
        }
      },
      assignedHost: {
        serializedName: "assignedHost",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statuses: {
        serializedName: "statuses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceViewStatus"
            }
          }
        }
      },
      patchStatus: {
        serializedName: "patchStatus",
        type: {
          name: "Composite",
          className: "VirtualMachinePatchStatus"
        }
      }
    }
  }
};

export const VirtualMachineAgentInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineAgentInstanceView",
    modelProperties: {
      vmAgentVersion: {
        serializedName: "vmAgentVersion",
        type: {
          name: "String"
        }
      },
      extensionHandlers: {
        serializedName: "extensionHandlers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineExtensionHandlerInstanceView"
            }
          }
        }
      },
      statuses: {
        serializedName: "statuses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceViewStatus"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineExtensionHandlerInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineExtensionHandlerInstanceView",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      typeHandlerVersion: {
        serializedName: "typeHandlerVersion",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "InstanceViewStatus"
        }
      }
    }
  }
};

export const MaintenanceRedeployStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceRedeployStatus",
    modelProperties: {
      isCustomerInitiatedMaintenanceAllowed: {
        serializedName: "isCustomerInitiatedMaintenanceAllowed",
        type: {
          name: "Boolean"
        }
      },
      preMaintenanceWindowStartTime: {
        serializedName: "preMaintenanceWindowStartTime",
        type: {
          name: "DateTime"
        }
      },
      preMaintenanceWindowEndTime: {
        serializedName: "preMaintenanceWindowEndTime",
        type: {
          name: "DateTime"
        }
      },
      maintenanceWindowStartTime: {
        serializedName: "maintenanceWindowStartTime",
        type: {
          name: "DateTime"
        }
      },
      maintenanceWindowEndTime: {
        serializedName: "maintenanceWindowEndTime",
        type: {
          name: "DateTime"
        }
      },
      lastOperationResultCode: {
        serializedName: "lastOperationResultCode",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "RetryLater",
            "MaintenanceAborted",
            "MaintenanceCompleted"
          ]
        }
      },
      lastOperationMessage: {
        serializedName: "lastOperationMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskInstanceView",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      encryptionSettings: {
        serializedName: "encryptionSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskEncryptionSettings"
            }
          }
        }
      },
      statuses: {
        serializedName: "statuses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceViewStatus"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineHealthStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineHealthStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "InstanceViewStatus"
        }
      }
    }
  }
};

export const BootDiagnosticsInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BootDiagnosticsInstanceView",
    modelProperties: {
      consoleScreenshotBlobUri: {
        serializedName: "consoleScreenshotBlobUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serialConsoleLogBlobUri: {
        serializedName: "serialConsoleLogBlobUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "InstanceViewStatus"
        }
      }
    }
  }
};

export const VirtualMachinePatchStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinePatchStatus",
    modelProperties: {
      availablePatchSummary: {
        serializedName: "availablePatchSummary",
        type: {
          name: "Composite",
          className: "AvailablePatchSummary"
        }
      },
      lastPatchInstallationSummary: {
        serializedName: "lastPatchInstallationSummary",
        type: {
          name: "Composite",
          className: "LastPatchInstallationSummary"
        }
      },
      configurationStatuses: {
        serializedName: "configurationStatuses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceViewStatus"
            }
          }
        }
      }
    }
  }
};

export const AvailablePatchSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailablePatchSummary",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      assessmentActivityId: {
        serializedName: "assessmentActivityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rebootPending: {
        serializedName: "rebootPending",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      criticalAndSecurityPatchCount: {
        serializedName: "criticalAndSecurityPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      otherPatchCount: {
        serializedName: "otherPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ApiError"
        }
      }
    }
  }
};

export const LastPatchInstallationSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LastPatchInstallationSummary",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      installationActivityId: {
        serializedName: "installationActivityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maintenanceWindowExceeded: {
        serializedName: "maintenanceWindowExceeded",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      notSelectedPatchCount: {
        serializedName: "notSelectedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      excludedPatchCount: {
        serializedName: "excludedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      pendingPatchCount: {
        serializedName: "pendingPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      installedPatchCount: {
        serializedName: "installedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      failedPatchCount: {
        serializedName: "failedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ApiError"
        }
      }
    }
  }
};

export const ScheduledEventsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduledEventsProfile",
    modelProperties: {
      terminateNotificationProfile: {
        serializedName: "terminateNotificationProfile",
        type: {
          name: "Composite",
          className: "TerminateNotificationProfile"
        }
      }
    }
  }
};

export const TerminateNotificationProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TerminateNotificationProfile",
    modelProperties: {
      notBeforeTimeout: {
        serializedName: "notBeforeTimeout",
        type: {
          name: "String"
        }
      },
      enable: {
        serializedName: "enable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CapacityReservationProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapacityReservationProfile",
    modelProperties: {
      capacityReservationGroup: {
        serializedName: "capacityReservationGroup",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const ApplicationProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationProfile",
    modelProperties: {
      galleryApplications: {
        serializedName: "galleryApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMGalleryApplication"
            }
          }
        }
      }
    }
  }
};

export const VMGalleryApplication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMGalleryApplication",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "Number"
        }
      },
      packageReferenceId: {
        serializedName: "packageReferenceId",
        required: true,
        type: {
          name: "String"
        }
      },
      configurationReference: {
        serializedName: "configurationReference",
        type: {
          name: "String"
        }
      },
      treatFailureAsDeploymentFailure: {
        serializedName: "treatFailureAsDeploymentFailure",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticUpgrade: {
        serializedName: "enableAutomaticUpgrade",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VirtualMachineIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "UserAssignedIdentitiesValue"
            }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentitiesValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentitiesValue",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const VirtualMachineCaptureParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineCaptureParameters",
    modelProperties: {
      vhdPrefix: {
        serializedName: "vhdPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationContainerName: {
        serializedName: "destinationContainerName",
        required: true,
        type: {
          name: "String"
        }
      },
      overwriteVhds: {
        serializedName: "overwriteVhds",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VirtualMachineSizeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSizeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineSize"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineSize: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSize",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      numberOfCores: {
        serializedName: "numberOfCores",
        type: {
          name: "Number"
        }
      },
      osDiskSizeInMB: {
        serializedName: "osDiskSizeInMB",
        type: {
          name: "Number"
        }
      },
      resourceDiskSizeInMB: {
        serializedName: "resourceDiskSizeInMB",
        type: {
          name: "Number"
        }
      },
      memoryInMB: {
        serializedName: "memoryInMB",
        type: {
          name: "Number"
        }
      },
      maxDataDiskCount: {
        serializedName: "maxDataDiskCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualMachineReimageParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineReimageParameters",
    modelProperties: {
      tempDisk: {
        serializedName: "tempDisk",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RetrieveBootDiagnosticsDataResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetrieveBootDiagnosticsDataResult",
    modelProperties: {
      consoleScreenshotBlobUri: {
        serializedName: "consoleScreenshotBlobUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serialConsoleLogBlobUri: {
        serializedName: "serialConsoleLogBlobUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineAssessPatchesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineAssessPatchesResult",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      assessmentActivityId: {
        serializedName: "assessmentActivityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rebootPending: {
        serializedName: "rebootPending",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      criticalAndSecurityPatchCount: {
        serializedName: "criticalAndSecurityPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      otherPatchCount: {
        serializedName: "otherPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startDateTime: {
        serializedName: "startDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      availablePatches: {
        serializedName: "availablePatches",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineSoftwarePatchProperties"
            }
          }
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ApiError"
        }
      }
    }
  }
};

export const VirtualMachineSoftwarePatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSoftwarePatchProperties",
    modelProperties: {
      patchId: {
        serializedName: "patchId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kbId: {
        serializedName: "kbId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      classifications: {
        serializedName: "classifications",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      rebootBehavior: {
        serializedName: "rebootBehavior",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      activityId: {
        serializedName: "activityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publishedDate: {
        serializedName: "publishedDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedDateTime: {
        serializedName: "lastModifiedDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      assessmentState: {
        serializedName: "assessmentState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstallPatchesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstallPatchesParameters",
    modelProperties: {
      maximumDuration: {
        serializedName: "maximumDuration",
        type: {
          name: "String"
        }
      },
      rebootSetting: {
        serializedName: "rebootSetting",
        required: true,
        type: {
          name: "String"
        }
      },
      windowsParameters: {
        serializedName: "windowsParameters",
        type: {
          name: "Composite",
          className: "WindowsParameters"
        }
      },
      linuxParameters: {
        serializedName: "linuxParameters",
        type: {
          name: "Composite",
          className: "LinuxParameters"
        }
      }
    }
  }
};

export const WindowsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsParameters",
    modelProperties: {
      classificationsToInclude: {
        serializedName: "classificationsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kbNumbersToInclude: {
        serializedName: "kbNumbersToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kbNumbersToExclude: {
        serializedName: "kbNumbersToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      excludeKbsRequiringReboot: {
        serializedName: "excludeKbsRequiringReboot",
        type: {
          name: "Boolean"
        }
      },
      maxPatchPublishDate: {
        serializedName: "maxPatchPublishDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const LinuxParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxParameters",
    modelProperties: {
      classificationsToInclude: {
        serializedName: "classificationsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      packageNameMasksToInclude: {
        serializedName: "packageNameMasksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      packageNameMasksToExclude: {
        serializedName: "packageNameMasksToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      maintenanceRunId: {
        serializedName: "maintenanceRunId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineInstallPatchesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstallPatchesResult",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      installationActivityId: {
        serializedName: "installationActivityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rebootStatus: {
        serializedName: "rebootStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maintenanceWindowExceeded: {
        serializedName: "maintenanceWindowExceeded",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      excludedPatchCount: {
        serializedName: "excludedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      notSelectedPatchCount: {
        serializedName: "notSelectedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      pendingPatchCount: {
        serializedName: "pendingPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      installedPatchCount: {
        serializedName: "installedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      failedPatchCount: {
        serializedName: "failedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      patches: {
        serializedName: "patches",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PatchInstallationDetail"
            }
          }
        }
      },
      startDateTime: {
        serializedName: "startDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ApiError"
        }
      }
    }
  }
};

export const PatchInstallationDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchInstallationDetail",
    modelProperties: {
      patchId: {
        serializedName: "patchId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kbId: {
        serializedName: "kbId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      classifications: {
        serializedName: "classifications",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      installationState: {
        serializedName: "installationState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunCommandListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RunCommandDocumentBase"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunCommandDocumentBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandDocumentBase",
    modelProperties: {
      schema: {
        serializedName: "$schema",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Windows", "Linux"]
        }
      },
      label: {
        serializedName: "label",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunCommandParameterDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandParameterDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "defaultValue",
        type: {
          name: "String"
        }
      },
      required: {
        defaultValue: false,
        serializedName: "required",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RunCommandInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandInput",
    modelProperties: {
      commandId: {
        serializedName: "commandId",
        required: true,
        type: {
          name: "String"
        }
      },
      script: {
        serializedName: "script",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RunCommandInputParameter"
            }
          }
        }
      }
    }
  }
};

export const RunCommandInputParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandInputParameter",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunCommandResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceViewStatus"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineRunCommandScriptSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineRunCommandScriptSource",
    modelProperties: {
      script: {
        serializedName: "script",
        type: {
          name: "String"
        }
      },
      scriptUri: {
        serializedName: "scriptUri",
        type: {
          name: "String"
        }
      },
      commandId: {
        serializedName: "commandId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineRunCommandInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineRunCommandInstanceView",
    modelProperties: {
      executionState: {
        serializedName: "executionState",
        type: {
          name: "String"
        }
      },
      executionMessage: {
        serializedName: "executionMessage",
        type: {
          name: "String"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      output: {
        serializedName: "output",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      statuses: {
        serializedName: "statuses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceViewStatus"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineRunCommandsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineRunCommandsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineRunCommand"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubResourceReadOnly: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResourceReadOnly",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineExtension",
    modelProperties: {
      ...ResourceWithOptionalLocation.type.modelProperties,
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "properties.publisher",
        type: {
          name: "String"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      typeHandlerVersion: {
        serializedName: "properties.typeHandlerVersion",
        type: {
          name: "String"
        }
      },
      autoUpgradeMinorVersion: {
        serializedName: "properties.autoUpgradeMinorVersion",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticUpgrade: {
        serializedName: "properties.enableAutomaticUpgrade",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      protectedSettings: {
        serializedName: "properties.protectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceView: {
        serializedName: "properties.instanceView",
        type: {
          name: "Composite",
          className: "VirtualMachineExtensionInstanceView"
        }
      },
      suppressFailures: {
        serializedName: "properties.suppressFailures",
        type: {
          name: "Boolean"
        }
      },
      protectedSettingsFromKeyVault: {
        serializedName: "properties.protectedSettingsFromKeyVault",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const VirtualMachineExtensionUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineExtensionUpdate",
    modelProperties: {
      ...UpdateResource.type.modelProperties,
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "properties.publisher",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      typeHandlerVersion: {
        serializedName: "properties.typeHandlerVersion",
        type: {
          name: "String"
        }
      },
      autoUpgradeMinorVersion: {
        serializedName: "properties.autoUpgradeMinorVersion",
        type: {
          name: "Boolean"
        }
      },
      enableAutomaticUpgrade: {
        serializedName: "properties.enableAutomaticUpgrade",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      protectedSettings: {
        serializedName: "properties.protectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      suppressFailures: {
        serializedName: "properties.suppressFailures",
        type: {
          name: "Boolean"
        }
      },
      protectedSettingsFromKeyVault: {
        serializedName: "properties.protectedSettingsFromKeyVault",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const VirtualMachineUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineUpdate",
    modelProperties: {
      ...UpdateResource.type.modelProperties,
      plan: {
        serializedName: "plan",
        type: {
          name: "Composite",
          className: "Plan"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "VirtualMachineIdentity"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hardwareProfile: {
        serializedName: "properties.hardwareProfile",
        type: {
          name: "Composite",
          className: "HardwareProfile"
        }
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfile"
        }
      },
      additionalCapabilities: {
        serializedName: "properties.additionalCapabilities",
        type: {
          name: "Composite",
          className: "AdditionalCapabilities"
        }
      },
      osProfile: {
        serializedName: "properties.osProfile",
        type: {
          name: "Composite",
          className: "OSProfile"
        }
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfile"
        }
      },
      securityProfile: {
        serializedName: "properties.securityProfile",
        type: {
          name: "Composite",
          className: "SecurityProfile"
        }
      },
      diagnosticsProfile: {
        serializedName: "properties.diagnosticsProfile",
        type: {
          name: "Composite",
          className: "DiagnosticsProfile"
        }
      },
      availabilitySet: {
        serializedName: "properties.availabilitySet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      virtualMachineScaleSet: {
        serializedName: "properties.virtualMachineScaleSet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      proximityPlacementGroup: {
        serializedName: "properties.proximityPlacementGroup",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      priority: {
        serializedName: "properties.priority",
        type: {
          name: "String"
        }
      },
      evictionPolicy: {
        serializedName: "properties.evictionPolicy",
        type: {
          name: "String"
        }
      },
      billingProfile: {
        serializedName: "properties.billingProfile",
        type: {
          name: "Composite",
          className: "BillingProfile"
        }
      },
      host: {
        serializedName: "properties.host",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      hostGroup: {
        serializedName: "properties.hostGroup",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceView: {
        serializedName: "properties.instanceView",
        type: {
          name: "Composite",
          className: "VirtualMachineInstanceView"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      vmId: {
        serializedName: "properties.vmId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      extensionsTimeBudget: {
        serializedName: "properties.extensionsTimeBudget",
        type: {
          name: "String"
        }
      },
      platformFaultDomain: {
        serializedName: "properties.platformFaultDomain",
        type: {
          name: "Number"
        }
      },
      scheduledEventsProfile: {
        serializedName: "properties.scheduledEventsProfile",
        type: {
          name: "Composite",
          className: "ScheduledEventsProfile"
        }
      },
      userData: {
        serializedName: "properties.userData",
        type: {
          name: "String"
        }
      },
      capacityReservation: {
        serializedName: "properties.capacityReservation",
        type: {
          name: "Composite",
          className: "CapacityReservationProfile"
        }
      },
      applicationProfile: {
        serializedName: "properties.applicationProfile",
        type: {
          name: "Composite",
          className: "ApplicationProfile"
        }
      },
      timeCreated: {
        serializedName: "properties.timeCreated",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const VirtualMachineRunCommandUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineRunCommandUpdate",
    modelProperties: {
      ...UpdateResource.type.modelProperties,
      source: {
        serializedName: "properties.source",
        type: {
          name: "Composite",
          className: "VirtualMachineRunCommandScriptSource"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RunCommandInputParameter"
            }
          }
        }
      },
      protectedParameters: {
        serializedName: "properties.protectedParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RunCommandInputParameter"
            }
          }
        }
      },
      asyncExecution: {
        defaultValue: false,
        serializedName: "properties.asyncExecution",
        type: {
          name: "Boolean"
        }
      },
      runAsUser: {
        serializedName: "properties.runAsUser",
        type: {
          name: "String"
        }
      },
      runAsPassword: {
        serializedName: "properties.runAsPassword",
        type: {
          name: "String"
        }
      },
      timeoutInSeconds: {
        serializedName: "properties.timeoutInSeconds",
        type: {
          name: "Number"
        }
      },
      outputBlobUri: {
        serializedName: "properties.outputBlobUri",
        type: {
          name: "String"
        }
      },
      errorBlobUri: {
        serializedName: "properties.errorBlobUri",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceView: {
        serializedName: "properties.instanceView",
        type: {
          name: "Composite",
          className: "VirtualMachineRunCommandInstanceView"
        }
      }
    }
  }
};

export const ImageReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageReference",
    modelProperties: {
      ...SubResource.type.modelProperties,
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "offer",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      exactVersion: {
        serializedName: "exactVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sharedGalleryImageId: {
        serializedName: "sharedGalleryImageId",
        type: {
          name: "String"
        }
      },
      communityGalleryImageId: {
        serializedName: "communityGalleryImageId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskEncryptionSetParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskEncryptionSetParameters",
    modelProperties: {
      ...SubResource.type.modelProperties
    }
  }
};

export const ManagedDiskParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedDiskParameters",
    modelProperties: {
      ...SubResource.type.modelProperties,
      storageAccountType: {
        serializedName: "storageAccountType",
        type: {
          name: "String"
        }
      },
      diskEncryptionSet: {
        serializedName: "diskEncryptionSet",
        type: {
          name: "Composite",
          className: "DiskEncryptionSetParameters"
        }
      },
      securityProfile: {
        serializedName: "securityProfile",
        type: {
          name: "Composite",
          className: "VMDiskSecurityProfile"
        }
      }
    }
  }
};

export const NetworkInterfaceReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceReference",
    modelProperties: {
      ...SubResource.type.modelProperties,
      primary: {
        serializedName: "properties.primary",
        type: {
          name: "Boolean"
        }
      },
      deleteOption: {
        serializedName: "properties.deleteOption",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineCaptureResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineCaptureResult",
    modelProperties: {
      ...SubResource.type.modelProperties,
      schema: {
        serializedName: "$schema",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      contentVersion: {
        serializedName: "contentVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      resources: {
        serializedName: "resources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      }
    }
  }
};

export const VirtualMachine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachine",
    modelProperties: {
      ...Resource.type.modelProperties,
      plan: {
        serializedName: "plan",
        type: {
          name: "Composite",
          className: "Plan"
        }
      },
      resources: {
        serializedName: "resources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineExtension"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "VirtualMachineIdentity"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      hardwareProfile: {
        serializedName: "properties.hardwareProfile",
        type: {
          name: "Composite",
          className: "HardwareProfile"
        }
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfile"
        }
      },
      additionalCapabilities: {
        serializedName: "properties.additionalCapabilities",
        type: {
          name: "Composite",
          className: "AdditionalCapabilities"
        }
      },
      osProfile: {
        serializedName: "properties.osProfile",
        type: {
          name: "Composite",
          className: "OSProfile"
        }
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfile"
        }
      },
      securityProfile: {
        serializedName: "properties.securityProfile",
        type: {
          name: "Composite",
          className: "SecurityProfile"
        }
      },
      diagnosticsProfile: {
        serializedName: "properties.diagnosticsProfile",
        type: {
          name: "Composite",
          className: "DiagnosticsProfile"
        }
      },
      availabilitySet: {
        serializedName: "properties.availabilitySet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      virtualMachineScaleSet: {
        serializedName: "properties.virtualMachineScaleSet",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      proximityPlacementGroup: {
        serializedName: "properties.proximityPlacementGroup",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      priority: {
        serializedName: "properties.priority",
        type: {
          name: "String"
        }
      },
      evictionPolicy: {
        serializedName: "properties.evictionPolicy",
        type: {
          name: "String"
        }
      },
      billingProfile: {
        serializedName: "properties.billingProfile",
        type: {
          name: "Composite",
          className: "BillingProfile"
        }
      },
      host: {
        serializedName: "properties.host",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      hostGroup: {
        serializedName: "properties.hostGroup",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceView: {
        serializedName: "properties.instanceView",
        type: {
          name: "Composite",
          className: "VirtualMachineInstanceView"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      vmId: {
        serializedName: "properties.vmId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      extensionsTimeBudget: {
        serializedName: "properties.extensionsTimeBudget",
        type: {
          name: "String"
        }
      },
      platformFaultDomain: {
        serializedName: "properties.platformFaultDomain",
        type: {
          name: "Number"
        }
      },
      scheduledEventsProfile: {
        serializedName: "properties.scheduledEventsProfile",
        type: {
          name: "Composite",
          className: "ScheduledEventsProfile"
        }
      },
      userData: {
        serializedName: "properties.userData",
        type: {
          name: "String"
        }
      },
      capacityReservation: {
        serializedName: "properties.capacityReservation",
        type: {
          name: "Composite",
          className: "CapacityReservationProfile"
        }
      },
      applicationProfile: {
        serializedName: "properties.applicationProfile",
        type: {
          name: "Composite",
          className: "ApplicationProfile"
        }
      },
      timeCreated: {
        serializedName: "properties.timeCreated",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const VirtualMachineRunCommand: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineRunCommand",
    modelProperties: {
      ...Resource.type.modelProperties,
      source: {
        serializedName: "properties.source",
        type: {
          name: "Composite",
          className: "VirtualMachineRunCommandScriptSource"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RunCommandInputParameter"
            }
          }
        }
      },
      protectedParameters: {
        serializedName: "properties.protectedParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RunCommandInputParameter"
            }
          }
        }
      },
      asyncExecution: {
        defaultValue: false,
        serializedName: "properties.asyncExecution",
        type: {
          name: "Boolean"
        }
      },
      runAsUser: {
        serializedName: "properties.runAsUser",
        type: {
          name: "String"
        }
      },
      runAsPassword: {
        serializedName: "properties.runAsPassword",
        type: {
          name: "String"
        }
      },
      timeoutInSeconds: {
        serializedName: "properties.timeoutInSeconds",
        type: {
          name: "Number"
        }
      },
      outputBlobUri: {
        serializedName: "properties.outputBlobUri",
        type: {
          name: "String"
        }
      },
      errorBlobUri: {
        serializedName: "properties.errorBlobUri",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceView: {
        serializedName: "properties.instanceView",
        type: {
          name: "Composite",
          className: "VirtualMachineRunCommandInstanceView"
        }
      }
    }
  }
};

export const RunCommandDocument: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandDocument",
    modelProperties: {
      ...RunCommandDocumentBase.type.modelProperties,
      script: {
        serializedName: "script",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RunCommandParameterDefinition"
            }
          }
        }
      }
    }
  }
};
