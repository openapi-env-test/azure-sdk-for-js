/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** The instance view of a virtual machine extension. */
export interface VirtualMachineExtensionInstanceView {
  /** The virtual machine extension name. */
  name?: string;
  /** Specifies the type of the extension; an example is "CustomScriptExtension". */
  type?: string;
  /** Specifies the version of the script handler. */
  typeHandlerVersion?: string;
  /** The resource status information. */
  substatuses?: InstanceViewStatus[];
  /** The resource status information. */
  statuses?: InstanceViewStatus[];
}

/** Instance view status. */
export interface InstanceViewStatus {
  /** The status code. */
  code?: string;
  /** The level code. */
  level?: StatusLevelTypes;
  /** The short localizable label for the status. */
  displayStatus?: string;
  /** The detailed status message, including for alerts and error messages. */
  message?: string;
  /** The time of the status. */
  time?: Date;
}

/** The Resource model definition with location property as optional. */
export interface ResourceWithOptionalLocation {
  /** Resource location */
  location?: string;
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** An error response from the Compute service. */
export interface CloudError {
  /** Api error. */
  error?: ApiError;
}

/** Api error. */
export interface ApiError {
  /** The Api error details */
  details?: ApiErrorBase[];
  /** The Api inner error */
  innererror?: InnerError;
  /** The error code. */
  code?: string;
  /** The target of the particular error. */
  target?: string;
  /** The error message. */
  message?: string;
}

/** Api error base. */
export interface ApiErrorBase {
  /** The error code. */
  code?: string;
  /** The target of the particular error. */
  target?: string;
  /** The error message. */
  message?: string;
}

/** Inner error details. */
export interface InnerError {
  /** The exception type. */
  exceptiontype?: string;
  /** The internal error message or exception dump. */
  errordetail?: string;
}

/** The Update Resource model definition. */
export interface UpdateResource {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** The List Extension operation response */
export interface VirtualMachineExtensionsListResult {
  /** The list of extensions */
  value?: VirtualMachineExtension[];
}

/** The List Virtual Machine operation response. */
export interface VirtualMachineListResult {
  /** The list of virtual machines. */
  value: VirtualMachine[];
  /** The URI to fetch the next page of VMs. Call ListNext() with this URI to fetch the next page of Virtual Machines. */
  nextLink?: string;
}

/** Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**. */
export interface Plan {
  /** The plan ID. */
  name?: string;
  /** The publisher ID. */
  publisher?: string;
  /** Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element. */
  product?: string;
  /** The promotion code. */
  promotionCode?: string;
}

/** Specifies the hardware settings for the virtual machine. */
export interface HardwareProfile {
  /** Specifies the size of the virtual machine. <br><br> The enum data type is currently deprecated and will be removed by December 23rd 2023. <br><br> Recommended way to get the list of available sizes is using these APIs: <br><br> [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes) <br><br> [List all available virtual machine sizes in a region]( https://docs.microsoft.com/rest/api/compute/resourceskus/list) <br><br> [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). <br><br> The available VM sizes depend on region and availability set. */
  vmSize?: VirtualMachineSizeTypes;
  /** Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. <br><br> This feature is still in preview mode and is not supported for VirtualMachineScaleSet. <br><br> Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details. */
  vmSizeProperties?: VMSizeProperties;
}

/** Specifies VM Size Property settings on the virtual machine. */
export interface VMSizeProperties {
  /** Specifies the number of vCPUs available for the VM. <br><br> When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list) . */
  vCPUsAvailable?: number;
  /** Specifies the vCPU to physical core ratio. <br><br> When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list) <br><br> Setting this property to 1 also means that hyper-threading is disabled. */
  vCPUsPerCore?: number;
}

/** Specifies the storage settings for the virtual machine disks. */
export interface StorageProfile {
  /** Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. */
  imageReference?: ImageReference;
  /** Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). */
  osDisk?: OSDisk;
  /** Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). */
  dataDisks?: DataDisk[];
}

export interface SubResource {
  /** Resource Id */
  id?: string;
}

/** Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). */
export interface OSDisk {
  /** This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. <br><br> Possible values are: <br><br> **Windows** <br><br> **Linux** */
  osType?: OperatingSystemTypes;
  /** Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15 */
  encryptionSettings?: DiskEncryptionSettings;
  /** The disk name. */
  name?: string;
  /** The virtual hard disk. */
  vhd?: VirtualHardDisk;
  /** The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist. */
  image?: VirtualHardDisk;
  /** Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None** for Standard storage. **ReadOnly** for Premium storage. */
  caching?: CachingTypes;
  /** Specifies whether writeAccelerator should be enabled or disabled on the disk. */
  writeAcceleratorEnabled?: boolean;
  /** Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine. */
  diffDiskSettings?: DiffDiskSettings;
  /** Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. */
  createOption: DiskCreateOptionTypes;
  /** Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB */
  diskSizeGB?: number;
  /** The managed disk parameters. */
  managedDisk?: ManagedDiskParameters;
  /** Specifies whether OS Disk should be deleted or detached upon VM deletion. <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VM is deleted.<br><br> **Detach** If this value is used, the os disk is retained after VM is deleted. <br><br> The default value is set to **detach**. For an ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for ephemeral OS Disk. */
  deleteOption?: DiskDeleteOptionTypes;
}

/** Describes a Encryption Settings for a Disk */
export interface DiskEncryptionSettings {
  /** Specifies the location of the disk encryption key, which is a Key Vault Secret. */
  diskEncryptionKey?: KeyVaultSecretReference;
  /** Specifies the location of the key encryption key in Key Vault. */
  keyEncryptionKey?: KeyVaultKeyReference;
  /** Specifies whether disk encryption should be enabled on the virtual machine. */
  enabled?: boolean;
}

/** Describes a reference to Key Vault Secret */
export interface KeyVaultSecretReference {
  /** The URL referencing a secret in a Key Vault. */
  secretUrl: string;
  /** The relative URL of the Key Vault containing the secret. */
  sourceVault: SubResource;
}

/** Describes a reference to Key Vault Key */
export interface KeyVaultKeyReference {
  /** The URL referencing a key encryption key in Key Vault. */
  keyUrl: string;
  /** The relative URL of the Key Vault containing the key. */
  sourceVault: SubResource;
}

/** Describes the uri of a disk. */
export interface VirtualHardDisk {
  /** Specifies the virtual hard disk's uri. */
  uri?: string;
}

/** Describes the parameters of ephemeral disk settings that can be specified for operating system disk. <br><br> NOTE: The ephemeral disk settings can only be specified for managed disk. */
export interface DiffDiskSettings {
  /** Specifies the ephemeral disk settings for operating system disk. */
  option?: DiffDiskOptions;
  /** Specifies the ephemeral disk placement for operating system disk.<br><br> Possible values are: <br><br> **CacheDisk** <br><br> **ResourceDisk** <br><br> Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.<br><br> Refer to VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. */
  placement?: DiffDiskPlacement;
}

/** Specifies the security profile settings for the managed disk. <br><br> NOTE: It can only be set for Confidential VMs */
export interface VMDiskSecurityProfile {
  /** Specifies the EncryptionType of the managed disk. <br> It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, and VMGuestStateOnly for encryption of just the VMGuestState blob. <br><br> NOTE: It can be set for only Confidential VMs. */
  securityEncryptionType?: SecurityEncryptionTypes;
  /** Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob. */
  diskEncryptionSet?: DiskEncryptionSetParameters;
}

/** Describes a data disk. */
export interface DataDisk {
  /** Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. */
  lun: number;
  /** The disk name. */
  name?: string;
  /** The virtual hard disk. */
  vhd?: VirtualHardDisk;
  /** The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist. */
  image?: VirtualHardDisk;
  /** Specifies the caching requirements. <br><br> Possible values are: <br><br> **None** <br><br> **ReadOnly** <br><br> **ReadWrite** <br><br> Default: **None for Standard storage. ReadOnly for Premium storage** */
  caching?: CachingTypes;
  /** Specifies whether writeAccelerator should be enabled or disabled on the disk. */
  writeAcceleratorEnabled?: boolean;
  /** Specifies how the virtual machine should be created.<br><br> Possible values are:<br><br> **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.<br><br> **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. */
  createOption: DiskCreateOptionTypes;
  /** Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. <br><br> This value cannot be larger than 1023 GB */
  diskSizeGB?: number;
  /** The managed disk parameters. */
  managedDisk?: ManagedDiskParameters;
  /** Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset */
  toBeDetached?: boolean;
  /**
   * Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskIopsReadWrite?: number;
  /**
   * Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskMBpsReadWrite?: number;
  /** Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach**. <br><br> detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. <br><br> This feature is still in preview mode and is not supported for VirtualMachineScaleSet. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'. */
  detachOption?: DiskDetachOptionTypes;
  /** Specifies whether data disk should be deleted or detached upon VM deletion.<br><br> Possible values: <br><br> **Delete** If this value is used, the data disk is deleted when VM is deleted.<br><br> **Detach** If this value is used, the data disk is retained after VM is deleted.<br><br> The default value is set to **detach** */
  deleteOption?: DiskDeleteOptionTypes;
}

/** Enables or disables a capability on the virtual machine or virtual machine scale set. */
export interface AdditionalCapabilities {
  /** The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled. */
  ultraSSDEnabled?: boolean;
  /** The flag that enables or disables hibernation capability on the VM. */
  hibernationEnabled?: boolean;
}

/** Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned. */
export interface OSProfile {
  /** Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules). */
  computerName?: string;
  /** Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters. */
  adminUsername?: string;
  /** Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection) */
  adminPassword?: string;
  /** Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. <br><br> **Note: Do not pass any secrets or passwords in customData property** <br><br> This property cannot be updated after the VM is created. <br><br> customData is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/) <br><br> For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init) */
  customData?: string;
  /** Specifies Windows operating system settings on the virtual machine. */
  windowsConfiguration?: WindowsConfiguration;
  /** Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros). */
  linuxConfiguration?: LinuxConfiguration;
  /** Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). */
  secrets?: VaultSecretGroup[];
  /** Specifies whether extension operations should be allowed on the virtual machine. <br><br>This may only be set to False when no extensions are present on the virtual machine. */
  allowExtensionOperations?: boolean;
  /** Optional property which must either be set to True or omitted. */
  requireGuestProvisionSignal?: boolean;
}

/** Specifies Windows operating system settings on the virtual machine. */
export interface WindowsConfiguration {
  /** Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later. */
  provisionVMAgent?: boolean;
  /** Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. <br><br> For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning. */
  enableAutomaticUpdates?: boolean;
  /** Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". <br><br> Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones). */
  timeZone?: string;
  /** Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. */
  additionalUnattendContent?: AdditionalUnattendContent[];
  /** [Preview Feature] Specifies settings related to VM Guest Patching on Windows. */
  patchSettings?: PatchSettings;
  /** Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. */
  winRM?: WinRMConfiguration;
}

/** Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied. */
export interface AdditionalUnattendContent {
  /** The pass name. Currently, the only allowable value is OobeSystem. */
  passName?: "OobeSystem";
  /** The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup. */
  componentName?: "Microsoft-Windows-Shell-Setup";
  /** Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon. */
  settingName?: SettingNames;
  /** Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted. */
  content?: string;
}

/** Specifies settings related to VM Guest Patching on Windows. */
export interface PatchSettings {
  /** Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true */
  patchMode?: WindowsVMGuestPatchMode;
  /** Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'. */
  enableHotpatching?: boolean;
  /** Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true. */
  assessmentMode?: WindowsPatchAssessmentMode;
  /** Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows. */
  automaticByPlatformSettings?: WindowsVMGuestPatchAutomaticByPlatformSettings;
}

/** Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Windows patch settings. */
export interface WindowsVMGuestPatchAutomaticByPlatformSettings {
  /** Specifies the reboot setting for all AutomaticByPlatform patch installation operations. */
  rebootSetting?: WindowsVMGuestPatchAutomaticByPlatformRebootSetting;
}

/** Describes Windows Remote Management configuration of the VM */
export interface WinRMConfiguration {
  /** The list of Windows Remote Management listeners */
  listeners?: WinRMListener[];
}

/** Describes Protocol and thumbprint of Windows Remote Management listener */
export interface WinRMListener {
  /** Specifies the protocol of WinRM listener. <br><br> Possible values are: <br>**http** <br><br> **https** */
  protocol?: ProtocolTypes;
  /** This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). */
  certificateUrl?: string;
}

/** Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros). */
export interface LinuxConfiguration {
  /** Specifies whether password authentication should be disabled. */
  disablePasswordAuthentication?: boolean;
  /** Specifies the ssh key configuration for a Linux OS. */
  ssh?: SshConfiguration;
  /** Indicates whether virtual machine agent should be provisioned on the virtual machine. <br><br> When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later. */
  provisionVMAgent?: boolean;
  /** [Preview Feature] Specifies settings related to VM Guest Patching on Linux. */
  patchSettings?: LinuxPatchSettings;
}

/** SSH configuration for Linux based VMs running on Azure */
export interface SshConfiguration {
  /** The list of SSH public keys used to authenticate with linux based VMs. */
  publicKeys?: SshPublicKey[];
}

/** Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed. */
export interface SshPublicKey {
  /** Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys */
  path?: string;
  /** SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed). */
  keyData?: string;
}

/** Specifies settings related to VM Guest Patching on Linux. */
export interface LinuxPatchSettings {
  /** Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - The virtual machine's default patching configuration is used. <br /><br /> **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true */
  patchMode?: LinuxVMGuestPatchMode;
  /** Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine. <br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true. */
  assessmentMode?: LinuxPatchAssessmentMode;
  /** Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux. */
  automaticByPlatformSettings?: LinuxVMGuestPatchAutomaticByPlatformSettings;
}

/** Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Linux patch settings. */
export interface LinuxVMGuestPatchAutomaticByPlatformSettings {
  /** Specifies the reboot setting for all AutomaticByPlatform patch installation operations. */
  rebootSetting?: LinuxVMGuestPatchAutomaticByPlatformRebootSetting;
}

/** Describes a set of certificates which are all in the same Key Vault. */
export interface VaultSecretGroup {
  /** The relative URL of the Key Vault containing all of the certificates in VaultCertificates. */
  sourceVault?: SubResource;
  /** The list of key vault references in SourceVault which contain certificates. */
  vaultCertificates?: VaultCertificate[];
}

/** Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM. */
export interface VaultCertificate {
  /** This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). */
  certificateUrl?: string;
  /** For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. <br><br>For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted. */
  certificateStore?: string;
}

/** Specifies the network interfaces or the networking configuration of the virtual machine. */
export interface NetworkProfile {
  /** Specifies the list of resource Ids for the network interfaces associated with the virtual machine. */
  networkInterfaces?: NetworkInterfaceReference[];
  /** specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations */
  networkApiVersion?: NetworkApiVersion;
  /** Specifies the networking configurations that will be used to create the virtual machine networking resources. */
  networkInterfaceConfigurations?: VirtualMachineNetworkInterfaceConfiguration[];
}

/** Describes a virtual machine network interface configurations. */
export interface VirtualMachineNetworkInterfaceConfiguration {
  /** The network interface configuration name. */
  name: string;
  /** Specifies the primary network interface in case the virtual machine has more than 1 network interface. */
  primary?: boolean;
  /** Specify what happens to the network interface when the VM is deleted */
  deleteOption?: DeleteOptions;
  /** Specifies whether the network interface is accelerated networking-enabled. */
  enableAcceleratedNetworking?: boolean;
  /** Specifies whether the network interface is FPGA networking-enabled. */
  enableFpga?: boolean;
  /** Whether IP forwarding enabled on this NIC. */
  enableIPForwarding?: boolean;
  /** The network security group. */
  networkSecurityGroup?: SubResource;
  /** The dns settings to be applied on the network interfaces. */
  dnsSettings?: VirtualMachineNetworkInterfaceDnsSettingsConfiguration;
  /** Specifies the IP configurations of the network interface. */
  ipConfigurations?: VirtualMachineNetworkInterfaceIPConfiguration[];
  dscpConfiguration?: SubResource;
}

/** Describes a virtual machines network configuration's DNS settings. */
export interface VirtualMachineNetworkInterfaceDnsSettingsConfiguration {
  /** List of DNS servers IP addresses */
  dnsServers?: string[];
}

/** Describes a virtual machine network profile's IP configuration. */
export interface VirtualMachineNetworkInterfaceIPConfiguration {
  /** The IP configuration name. */
  name: string;
  /** Specifies the identifier of the subnet. */
  subnet?: SubResource;
  /** Specifies the primary network interface in case the virtual machine has more than 1 network interface. */
  primary?: boolean;
  /** The publicIPAddressConfiguration. */
  publicIPAddressConfiguration?: VirtualMachinePublicIPAddressConfiguration;
  /** Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'. */
  privateIPAddressVersion?: IPVersions;
  /** Specifies an array of references to application security group. */
  applicationSecurityGroups?: SubResource[];
  /** Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway. */
  applicationGatewayBackendAddressPools?: SubResource[];
  /** Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer]. */
  loadBalancerBackendAddressPools?: SubResource[];
}

/** Describes a virtual machines IP Configuration's PublicIPAddress configuration */
export interface VirtualMachinePublicIPAddressConfiguration {
  /** The publicIP address configuration name. */
  name: string;
  /** Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible. */
  sku?: PublicIPAddressSku;
  /** The idle timeout of the public IP address. */
  idleTimeoutInMinutes?: number;
  /** Specify what happens to the public IP address when the VM is deleted */
  deleteOption?: DeleteOptions;
  /** The dns settings to be applied on the publicIP addresses . */
  dnsSettings?: VirtualMachinePublicIPAddressDnsSettingsConfiguration;
  /** The list of IP tags associated with the public IP address. */
  ipTags?: VirtualMachineIpTag[];
  /** The PublicIPPrefix from which to allocate publicIP addresses. */
  publicIPPrefix?: SubResource;
  /** Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'. */
  publicIPAddressVersion?: IPVersions;
  /** Specify the public IP allocation type */
  publicIPAllocationMethod?: PublicIPAllocationMethod;
}

/** Describes a virtual machines network configuration's DNS settings. */
export interface VirtualMachinePublicIPAddressDnsSettingsConfiguration {
  /** The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the domain name label and vm network profile unique ID. */
  domainNameLabel: string;
}

/** Contains the IP tag associated with the public IP address. */
export interface VirtualMachineIpTag {
  /** IP tag type. Example: FirstPartyUsage. */
  ipTagType?: string;
  /** IP tag associated with the public IP. Example: SQL, Storage etc. */
  tag?: string;
}

/** Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible. */
export interface PublicIPAddressSku {
  /** Specify public IP sku name */
  name?: PublicIPAddressSkuName;
  /** Specify public IP sku tier */
  tier?: PublicIPAddressSkuTier;
}

/** Specifies the Security profile settings for the virtual machine or virtual machine scale set. */
export interface SecurityProfile {
  /** Specifies the security settings like secure boot and vTPM used while creating the virtual machine. <br><br>Minimum api-version: 2020-12-01 */
  uefiSettings?: UefiSettings;
  /** This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. <br><br> Default: The Encryption at host will be disabled unless this property is set to true for the resource. */
  encryptionAtHost?: boolean;
  /** Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. <br><br> Default: UefiSettings will not be enabled unless this property is set. */
  securityType?: SecurityTypes;
}

/** Specifies the security settings like secure boot and vTPM used while creating the virtual machine. <br><br>Minimum api-version: 2020-12-01 */
export interface UefiSettings {
  /** Specifies whether secure boot should be enabled on the virtual machine. <br><br>Minimum api-version: 2020-12-01 */
  secureBootEnabled?: boolean;
  /** Specifies whether vTPM should be enabled on the virtual machine. <br><br>Minimum api-version: 2020-12-01 */
  vTpmEnabled?: boolean;
}

/** Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15. */
export interface DiagnosticsProfile {
  /** Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br>**NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor. */
  bootDiagnostics?: BootDiagnostics;
}

/** Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor. */
export interface BootDiagnostics {
  /** Whether boot diagnostics should be enabled on the Virtual Machine. */
  enabled?: boolean;
  /** Uri of the storage account to use for placing the console output and screenshot. <br><br>If storageUri is not specified while enabling boot diagnostics, managed storage will be used. */
  storageUri?: string;
}

/** Specifies the billing related details of a Azure Spot VM or VMSS. <br><br>Minimum api-version: 2019-03-01. */
export interface BillingProfile {
  /** Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01. */
  maxPrice?: number;
}

/** The instance view of a virtual machine. */
export interface VirtualMachineInstanceView {
  /** Specifies the update domain of the virtual machine. */
  platformUpdateDomain?: number;
  /** Specifies the fault domain of the virtual machine. */
  platformFaultDomain?: number;
  /** The computer name assigned to the virtual machine. */
  computerName?: string;
  /** The Operating System running on the virtual machine. */
  osName?: string;
  /** The version of Operating System running on the virtual machine. */
  osVersion?: string;
  /** Specifies the HyperVGeneration Type associated with a resource */
  hyperVGeneration?: HyperVGenerationType;
  /** The Remote desktop certificate thumbprint. */
  rdpThumbPrint?: string;
  /** The VM Agent running on the virtual machine. */
  vmAgent?: VirtualMachineAgentInstanceView;
  /** The Maintenance Operation status on the virtual machine. */
  maintenanceRedeployStatus?: MaintenanceRedeployStatus;
  /** The virtual machine disk information. */
  disks?: DiskInstanceView[];
  /** The extensions information. */
  extensions?: VirtualMachineExtensionInstanceView[];
  /**
   * The health status for the VM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmHealth?: VirtualMachineHealthStatus;
  /** Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. <br><br> You can easily view the output of your console log. <br><br> Azure also enables you to see a screenshot of the VM from the hypervisor. */
  bootDiagnostics?: BootDiagnosticsInstanceView;
  /**
   * Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. <br><br>Minimum api-version: 2020-06-01.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignedHost?: string;
  /** The resource status information. */
  statuses?: InstanceViewStatus[];
  /** [Preview Feature] The status of virtual machine patch operations. */
  patchStatus?: VirtualMachinePatchStatus;
}

/** The instance view of the VM Agent running on the virtual machine. */
export interface VirtualMachineAgentInstanceView {
  /** The VM Agent full version. */
  vmAgentVersion?: string;
  /** The virtual machine extension handler instance view. */
  extensionHandlers?: VirtualMachineExtensionHandlerInstanceView[];
  /** The resource status information. */
  statuses?: InstanceViewStatus[];
}

/** The instance view of a virtual machine extension handler. */
export interface VirtualMachineExtensionHandlerInstanceView {
  /** Specifies the type of the extension; an example is "CustomScriptExtension". */
  type?: string;
  /** Specifies the version of the script handler. */
  typeHandlerVersion?: string;
  /** The extension handler status. */
  status?: InstanceViewStatus;
}

/** Maintenance Operation Status. */
export interface MaintenanceRedeployStatus {
  /** True, if customer is allowed to perform Maintenance. */
  isCustomerInitiatedMaintenanceAllowed?: boolean;
  /** Start Time for the Pre Maintenance Window. */
  preMaintenanceWindowStartTime?: Date;
  /** End Time for the Pre Maintenance Window. */
  preMaintenanceWindowEndTime?: Date;
  /** Start Time for the Maintenance Window. */
  maintenanceWindowStartTime?: Date;
  /** End Time for the Maintenance Window. */
  maintenanceWindowEndTime?: Date;
  /** The Last Maintenance Operation Result Code. */
  lastOperationResultCode?: MaintenanceOperationResultCodeTypes;
  /** Message returned for the last Maintenance Operation. */
  lastOperationMessage?: string;
}

/** The instance view of the disk. */
export interface DiskInstanceView {
  /** The disk name. */
  name?: string;
  /** Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15 */
  encryptionSettings?: DiskEncryptionSettings[];
  /** The resource status information. */
  statuses?: InstanceViewStatus[];
}

/** The health status of the VM. */
export interface VirtualMachineHealthStatus {
  /**
   * The health status information for the VM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: InstanceViewStatus;
}

/** The instance view of a virtual machine boot diagnostics. */
export interface BootDiagnosticsInstanceView {
  /**
   * The console screenshot blob URI. <br><br>NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly consoleScreenshotBlobUri?: string;
  /**
   * The serial console log blob Uri. <br><br>NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serialConsoleLogBlobUri?: string;
  /**
   * The boot diagnostics status information for the VM. <br><br> NOTE: It will be set only if there are errors encountered in enabling boot diagnostics.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: InstanceViewStatus;
}

/** The status of virtual machine patch operations. */
export interface VirtualMachinePatchStatus {
  /** The available patch summary of the latest assessment operation for the virtual machine. */
  availablePatchSummary?: AvailablePatchSummary;
  /** The installation summary of the latest installation operation for the virtual machine. */
  lastPatchInstallationSummary?: LastPatchInstallationSummary;
  /**
   * The enablement status of the specified patchMode
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationStatuses?: InstanceViewStatus[];
}

/** Describes the properties of an virtual machine instance view for available patch summary. */
export interface AvailablePatchSummary {
  /**
   * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PatchOperationStatus;
  /**
   * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assessmentActivityId?: string;
  /**
   * The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rebootPending?: boolean;
  /**
   * The number of critical or security patches that have been detected as available and not yet installed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly criticalAndSecurityPatchCount?: number;
  /**
   * The number of all available patches excluding critical and security.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly otherPatchCount?: number;
  /**
   * The UTC timestamp when the operation began.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * The UTC timestamp when the operation began.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /**
   * The errors that were encountered during execution of the operation. The details array contains the list of them.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ApiError;
}

/** Describes the properties of the last installed patch summary. */
export interface LastPatchInstallationSummary {
  /**
   * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PatchOperationStatus;
  /**
   * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installationActivityId?: string;
  /**
   * Describes whether the operation ran out of time before it completed all its intended actions
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maintenanceWindowExceeded?: boolean;
  /**
   * The number of all available patches but not going to be installed because it didn't match a classification or inclusion list entry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly notSelectedPatchCount?: number;
  /**
   * The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly excludedPatchCount?: number;
  /**
   * The number of all available patches expected to be installed over the course of the patch installation operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly pendingPatchCount?: number;
  /**
   * The count of patches that successfully installed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installedPatchCount?: number;
  /**
   * The count of patches that failed installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failedPatchCount?: number;
  /**
   * The UTC timestamp when the operation began.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * The UTC timestamp when the operation began.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
  /**
   * The errors that were encountered during execution of the operation. The details array contains the list of them.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ApiError;
}

export interface ScheduledEventsProfile {
  /** Specifies Terminate Scheduled Event related configurations. */
  terminateNotificationProfile?: TerminateNotificationProfile;
}

export interface TerminateNotificationProfile {
  /** Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M) */
  notBeforeTimeout?: string;
  /** Specifies whether the Terminate Scheduled event is enabled or disabled. */
  enable?: boolean;
}

/** The parameters of a capacity reservation Profile. */
export interface CapacityReservationProfile {
  /** Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset vm instances provided enough capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more details. */
  capacityReservationGroup?: SubResource;
}

/** Contains the list of gallery applications that should be made available to the VM/VMSS */
export interface ApplicationProfile {
  /** Specifies the gallery applications that should be made available to the VM/VMSS */
  galleryApplications?: VMGalleryApplication[];
}

/** Specifies the required information to reference a compute gallery application version */
export interface VMGalleryApplication {
  /** Optional, Specifies a passthrough value for more generic context. */
  tags?: string;
  /** Optional, Specifies the order in which the packages have to be installed */
  order?: number;
  /** Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version} */
  packageReferenceId: string;
  /** Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided */
  configurationReference?: string;
  /** Optional, If true, any failure for any operation in the VmApplication will fail the deployment */
  treatFailureAsDeploymentFailure?: boolean;
  /** If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS */
  enableAutomaticUpgrade?: boolean;
}

/** Identity for the virtual machine. */
export interface VirtualMachineIdentity {
  /**
   * The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine. */
  type?: ResourceIdentityType;
  /** The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
  userAssignedIdentities?: {
    [propertyName: string]: UserAssignedIdentitiesValue;
  };
}

export interface UserAssignedIdentitiesValue {
  /**
   * The principal id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** The complex type of the extended location. */
export interface ExtendedLocation {
  /** The name of the extended location. */
  name?: string;
  /** The type of the extended location. */
  type?: ExtendedLocationTypes;
}

/** The Resource model definition. */
export interface Resource {
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location */
  location: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** Capture Virtual Machine parameters. */
export interface VirtualMachineCaptureParameters {
  /** The captured virtual hard disk's name prefix. */
  vhdPrefix: string;
  /** The destination container name. */
  destinationContainerName: string;
  /** Specifies whether to overwrite the destination virtual hard disk, in case of conflict. */
  overwriteVhds: boolean;
}

/** The List Virtual Machine operation response. */
export interface VirtualMachineSizeListResult {
  /** The list of virtual machine sizes. */
  value?: VirtualMachineSize[];
}

/** Describes the properties of a VM size. */
export interface VirtualMachineSize {
  /** The name of the virtual machine size. */
  name?: string;
  /** The number of cores supported by the virtual machine size. For Constrained vCPU capable VM sizes, this number represents the total vCPUs of quota that the VM uses. For accurate vCPU count, please refer to https://docs.microsoft.com/azure/virtual-machines/constrained-vcpu or https://docs.microsoft.com/rest/api/compute/resourceskus/list */
  numberOfCores?: number;
  /** The OS disk size, in MB, allowed by the virtual machine size. */
  osDiskSizeInMB?: number;
  /** The resource disk size, in MB, allowed by the virtual machine size. */
  resourceDiskSizeInMB?: number;
  /** The amount of memory, in MB, supported by the virtual machine size. */
  memoryInMB?: number;
  /** The maximum number of data disks that can be attached to the virtual machine size. */
  maxDataDiskCount?: number;
}

/** Parameters for Reimaging Virtual Machine. NOTE: Virtual Machine OS disk will always be reimaged */
export interface VirtualMachineReimageParameters {
  /** Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk. */
  tempDisk?: boolean;
}

/** The SAS URIs of the console screenshot and serial log blobs. */
export interface RetrieveBootDiagnosticsDataResult {
  /**
   * The console screenshot blob URI
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly consoleScreenshotBlobUri?: string;
  /**
   * The serial console log blob URI.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serialConsoleLogBlobUri?: string;
}

/** Describes the properties of an AssessPatches result. */
export interface VirtualMachineAssessPatchesResult {
  /**
   * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PatchOperationStatus;
  /**
   * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assessmentActivityId?: string;
  /**
   * The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rebootPending?: boolean;
  /**
   * The number of critical or security patches that have been detected as available and not yet installed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly criticalAndSecurityPatchCount?: number;
  /**
   * The number of all available patches excluding critical and security.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly otherPatchCount?: number;
  /**
   * The UTC timestamp when the operation began.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startDateTime?: Date;
  /**
   * The list of patches that have been detected as available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly availablePatches?: VirtualMachineSoftwarePatchProperties[];
  /**
   * The errors that were encountered during execution of the operation. The details array contains the list of them.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ApiError;
}

/** Describes the properties of a Virtual Machine software patch. */
export interface VirtualMachineSoftwarePatchProperties {
  /**
   * A unique identifier for the patch.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly patchId?: string;
  /**
   * The friendly name of the patch.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The version number of the patch. This property applies only to Linux patches.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * The KBID of the patch. Only applies to Windows patches.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kbId?: string;
  /**
   * The classification(s) of the patch as provided by the patch publisher.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly classifications?: string[];
  /**
   * Describes the reboot requirements of the patch.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rebootBehavior?: VMGuestPatchRebootBehavior;
  /**
   * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activityId?: string;
  /**
   * The UTC timestamp when the repository published this patch.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publishedDate?: Date;
  /**
   * The UTC timestamp of the last update to this patch record.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedDateTime?: Date;
  /**
   * Describes the availability of a given patch.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assessmentState?: PatchAssessmentState;
}

/** Input for InstallPatches as directly received by the API */
export interface VirtualMachineInstallPatchesParameters {
  /** Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such as PT4H (4 hours) */
  maximumDuration?: string;
  /** Defines when it is acceptable to reboot a VM during a software update operation. */
  rebootSetting: VMGuestPatchRebootSetting;
  /** Input for InstallPatches on a Windows VM, as directly received by the API */
  windowsParameters?: WindowsParameters;
  /** Input for InstallPatches on a Linux VM, as directly received by the API */
  linuxParameters?: LinuxParameters;
}

/** Input for InstallPatches on a Windows VM, as directly received by the API */
export interface WindowsParameters {
  /** The update classifications to select when installing patches for Windows. */
  classificationsToInclude?: VMGuestPatchClassificationWindows[];
  /** Kbs to include in the patch operation */
  kbNumbersToInclude?: string[];
  /** Kbs to exclude in the patch operation */
  kbNumbersToExclude?: string[];
  /** Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true. */
  excludeKbsRequiringReboot?: boolean;
  /** This is used to install patches that were published on or before this given max published date. */
  maxPatchPublishDate?: Date;
}

/** Input for InstallPatches on a Linux VM, as directly received by the API */
export interface LinuxParameters {
  /** The update classifications to select when installing patches for Linux. */
  classificationsToInclude?: VMGuestPatchClassificationLinux[];
  /** packages to include in the patch operation. Format: packageName_packageVersion */
  packageNameMasksToInclude?: string[];
  /** packages to exclude in the patch operation. Format: packageName_packageVersion */
  packageNameMasksToExclude?: string[];
  /** This is used as a maintenance run identifier for Auto VM Guest Patching in Linux. */
  maintenanceRunId?: string;
}

/** The result summary of an installation operation. */
export interface VirtualMachineInstallPatchesResult {
  /**
   * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Failed", "Succeeded", "Unknown" or "CompletedWithWarnings."
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PatchOperationStatus;
  /**
   * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installationActivityId?: string;
  /**
   * The reboot state of the VM following completion of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rebootStatus?: VMGuestPatchRebootStatus;
  /**
   * Whether the operation ran out of time before it completed all its intended actions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maintenanceWindowExceeded?: boolean;
  /**
   * The number of patches that were not installed due to the user blocking their installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly excludedPatchCount?: number;
  /**
   * The number of patches that were detected as available for install, but did not meet the operation's criteria.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly notSelectedPatchCount?: number;
  /**
   * The number of patches that were identified as meeting the installation criteria, but were not able to be installed. Typically this happens when maintenanceWindowExceeded == true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly pendingPatchCount?: number;
  /**
   * The number of patches successfully installed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installedPatchCount?: number;
  /**
   * The number of patches that could not be installed due to some issue. See errors for details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failedPatchCount?: number;
  /**
   * The patches that were installed during the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly patches?: PatchInstallationDetail[];
  /**
   * The UTC timestamp when the operation began.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startDateTime?: Date;
  /**
   * The errors that were encountered during execution of the operation. The details array contains the list of them.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ApiError;
}

/** Information about a specific patch that was encountered during an installation action. */
export interface PatchInstallationDetail {
  /**
   * A unique identifier for the patch.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly patchId?: string;
  /**
   * The friendly name of the patch.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The version string of the package. It may conform to Semantic Versioning. Only applies to Linux.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * The KBID of the patch. Only applies to Windows patches.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kbId?: string;
  /**
   * The classification(s) of the patch as provided by the patch publisher.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly classifications?: string[];
  /**
   * The state of the patch after the installation operation completed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installationState?: PatchInstallationState;
}

/** The List Virtual Machine operation response. */
export interface RunCommandListResult {
  /** The list of virtual machine run commands. */
  value: RunCommandDocumentBase[];
  /** The uri to fetch the next page of run commands. Call ListNext() with this to fetch the next page of run commands. */
  nextLink?: string;
}

/** Describes the properties of a Run Command metadata. */
export interface RunCommandDocumentBase {
  /** The VM run command schema. */
  schema: string;
  /** The VM run command id. */
  id: string;
  /** The Operating System type. */
  osType: OperatingSystemTypes;
  /** The VM run command label. */
  label: string;
  /** The VM run command description. */
  description: string;
}

/** Describes the properties of a run command parameter. */
export interface RunCommandParameterDefinition {
  /** The run command parameter name. */
  name: string;
  /** The run command parameter type. */
  type: string;
  /** The run command parameter default value. */
  defaultValue?: string;
  /** The run command parameter required. */
  required?: boolean;
}

/** Capture Virtual Machine parameters. */
export interface RunCommandInput {
  /** The run command id. */
  commandId: string;
  /** Optional. The script to be executed.  When this value is given, the given script will override the default script of the command. */
  script?: string[];
  /** The run command parameters. */
  parameters?: RunCommandInputParameter[];
}

/** Describes the properties of a run command parameter. */
export interface RunCommandInputParameter {
  /** The run command parameter name. */
  name: string;
  /** The run command parameter value. */
  value: string;
}

export interface RunCommandResult {
  /** Run command operation response. */
  value?: InstanceViewStatus[];
}

/** Describes the script sources for run command. */
export interface VirtualMachineRunCommandScriptSource {
  /** Specifies the script content to be executed on the VM. */
  script?: string;
  /** Specifies the script download location. */
  scriptUri?: string;
  /** Specifies a commandId of predefined built-in script. */
  commandId?: string;
}

/** The instance view of a virtual machine run command. */
export interface VirtualMachineRunCommandInstanceView {
  /** Script execution status. */
  executionState?: ExecutionState;
  /** Communicate script configuration errors or execution messages. */
  executionMessage?: string;
  /** Exit code returned from script execution. */
  exitCode?: number;
  /** Script output stream. */
  output?: string;
  /** Script error stream. */
  error?: string;
  /** Script start time. */
  startTime?: Date;
  /** Script end time. */
  endTime?: Date;
  /** The resource status information. */
  statuses?: InstanceViewStatus[];
}

/** The List run command operation response */
export interface VirtualMachineRunCommandsListResult {
  /** The list of run commands */
  value: VirtualMachineRunCommand[];
  /** The uri to fetch the next page of run commands. */
  nextLink?: string;
}

export interface SubResourceReadOnly {
  /**
   * Resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Describes a Virtual Machine Extension. */
export type VirtualMachineExtension = ResourceWithOptionalLocation & {
  /** How the extension handler should be forced to update even if the extension configuration has not changed. */
  forceUpdateTag?: string;
  /** The name of the extension handler publisher. */
  publisher?: string;
  /** Specifies the type of the extension; an example is "CustomScriptExtension". */
  typePropertiesType?: string;
  /** Specifies the version of the script handler. */
  typeHandlerVersion?: string;
  /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
  autoUpgradeMinorVersion?: boolean;
  /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. */
  enableAutomaticUpgrade?: boolean;
  /** Json formatted public settings for the extension. */
  settings?: Record<string, unknown>;
  /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
  protectedSettings?: Record<string, unknown>;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The virtual machine extension instance view. */
  instanceView?: VirtualMachineExtensionInstanceView;
  /** Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. */
  suppressFailures?: boolean;
  /** The extensions protected settings that are passed by reference, and consumed from key vault */
  protectedSettingsFromKeyVault?: Record<string, unknown>;
};

/** Describes a Virtual Machine Extension. */
export type VirtualMachineExtensionUpdate = UpdateResource & {
  /** How the extension handler should be forced to update even if the extension configuration has not changed. */
  forceUpdateTag?: string;
  /** The name of the extension handler publisher. */
  publisher?: string;
  /** Specifies the type of the extension; an example is "CustomScriptExtension". */
  type?: string;
  /** Specifies the version of the script handler. */
  typeHandlerVersion?: string;
  /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
  autoUpgradeMinorVersion?: boolean;
  /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. */
  enableAutomaticUpgrade?: boolean;
  /** Json formatted public settings for the extension. */
  settings?: Record<string, unknown>;
  /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
  protectedSettings?: Record<string, unknown>;
  /** Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. */
  suppressFailures?: boolean;
  /** The extensions protected settings that are passed by reference, and consumed from key vault */
  protectedSettingsFromKeyVault?: Record<string, unknown>;
};

/** Describes a Virtual Machine Update. */
export type VirtualMachineUpdate = UpdateResource & {
  /** Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**. */
  plan?: Plan;
  /** The identity of the virtual machine, if configured. */
  identity?: VirtualMachineIdentity;
  /** The virtual machine zones. */
  zones?: string[];
  /** Specifies the hardware settings for the virtual machine. */
  hardwareProfile?: HardwareProfile;
  /** Specifies the storage settings for the virtual machine disks. */
  storageProfile?: StorageProfile;
  /** Specifies additional capabilities enabled or disabled on the virtual machine. */
  additionalCapabilities?: AdditionalCapabilities;
  /** Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed once VM is provisioned. */
  osProfile?: OSProfile;
  /** Specifies the network interfaces of the virtual machine. */
  networkProfile?: NetworkProfile;
  /** Specifies the Security related profile settings for the virtual machine. */
  securityProfile?: SecurityProfile;
  /** Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15. */
  diagnosticsProfile?: DiagnosticsProfile;
  /** Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). <br><br> For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) <br><br> Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added should be under the same resource group as the availability set resource. An existing VM cannot be added to an availability set. <br><br>This property cannot exist along with a non-null properties.virtualMachineScaleSet reference. */
  availabilitySet?: SubResource;
  /** Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set. <br><br>This property cannot exist along with a non-null properties.availabilitySet reference. <br><br>Minimum api‐version: 2019‐03‐01 */
  virtualMachineScaleSet?: SubResource;
  /** Specifies information about the proximity placement group that the virtual machine should be assigned to. <br><br>Minimum api-version: 2018-04-01. */
  proximityPlacementGroup?: SubResource;
  /** Specifies the priority for the virtual machine. <br><br>Minimum api-version: 2019-03-01 */
  priority?: VirtualMachinePriorityTypes;
  /** Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview. */
  evictionPolicy?: VirtualMachineEvictionPolicyTypes;
  /** Specifies the billing related details of a Azure Spot virtual machine. <br><br>Minimum api-version: 2019-03-01. */
  billingProfile?: BillingProfile;
  /** Specifies information about the dedicated host that the virtual machine resides in. <br><br>Minimum api-version: 2018-10-01. */
  host?: SubResource;
  /** Specifies information about the dedicated host group that the virtual machine resides in. <br><br>Minimum api-version: 2020-06-01. <br><br>NOTE: User cannot specify both host and hostGroup properties. */
  hostGroup?: SubResource;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The virtual machine instance view.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceView?: VirtualMachineInstanceView;
  /** Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15 */
  licenseType?: string;
  /**
   * Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmId?: string;
  /** Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01 */
  extensionsTimeBudget?: string;
  /** Specifies the scale set logical fault domain into which the Virtual Machine will be created. By default, the Virtual Machine will by automatically assigned to a fault domain that best maintains balance across available fault domains.<br><li>This is applicable only if the 'virtualMachineScaleSet' property of this Virtual Machine is set.<li>The Virtual Machine Scale Set that is referenced, must have 'platformFaultDomainCount' &gt; 1.<li>This property cannot be updated once the Virtual Machine is created.<li>Fault domain assignment can be viewed in the Virtual Machine Instance View.<br><br>Minimum api‐version: 2020‐12‐01 */
  platformFaultDomain?: number;
  /** Specifies Scheduled Event related configurations. */
  scheduledEventsProfile?: ScheduledEventsProfile;
  /** UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. <br><br>Minimum api-version: 2021-03-01 */
  userData?: string;
  /** Specifies information about the capacity reservation that is used to allocate virtual machine. <br><br>Minimum api-version: 2021-04-01. */
  capacityReservation?: CapacityReservationProfile;
  /** Specifies the gallery applications that should be made available to the VM/VMSS */
  applicationProfile?: ApplicationProfile;
  /**
   * Specifies the time at which the Virtual Machine resource was created.<br><br>Minimum api-version: 2022-03-01.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeCreated?: Date;
};

/** Describes a Virtual Machine run command. */
export type VirtualMachineRunCommandUpdate = UpdateResource & {
  /** The source of the run command script. */
  source?: VirtualMachineRunCommandScriptSource;
  /** The parameters used by the script. */
  parameters?: RunCommandInputParameter[];
  /** The parameters used by the script. */
  protectedParameters?: RunCommandInputParameter[];
  /** Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete. */
  asyncExecution?: boolean;
  /** Specifies the user account on the VM when executing the run command. */
  runAsUser?: string;
  /** Specifies the user account password on the VM when executing the run command. */
  runAsPassword?: string;
  /** The timeout in seconds to execute the run command. */
  timeoutInSeconds?: number;
  /** Specifies the Azure storage blob where script output stream will be uploaded. */
  outputBlobUri?: string;
  /** Specifies the Azure storage blob where script error stream will be uploaded. */
  errorBlobUri?: string;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The virtual machine run command instance view.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceView?: VirtualMachineRunCommandInstanceView;
};

/** Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set. */
export type ImageReference = SubResource & {
  /** The image publisher. */
  publisher?: string;
  /** Specifies the offer of the platform image or marketplace image used to create the virtual machine. */
  offer?: string;
  /** The image SKU. */
  sku?: string;
  /** Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input. */
  version?: string;
  /**
   * Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exactVersion?: string;
  /** Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call. */
  sharedGalleryImageId?: string;
  /** Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call. */
  communityGalleryImageId?: string;
};

/** Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. <br><br> NOTE: The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details. */
export type DiskEncryptionSetParameters = SubResource;

/** The parameters of a managed disk. */
export type ManagedDiskParameters = SubResource & {
  /** Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. */
  storageAccountType?: StorageAccountTypes;
  /** Specifies the customer managed disk encryption set resource id for the managed disk. */
  diskEncryptionSet?: DiskEncryptionSetParameters;
  /** Specifies the security profile for the managed disk. */
  securityProfile?: VMDiskSecurityProfile;
};

/** Describes a network interface reference. */
export type NetworkInterfaceReference = SubResource & {
  /** Specifies the primary network interface in case the virtual machine has more than 1 network interface. */
  primary?: boolean;
  /** Specify what happens to the network interface when the VM is deleted */
  deleteOption?: DeleteOptions;
};

/** Output of virtual machine capture operation. */
export type VirtualMachineCaptureResult = SubResource & {
  /**
   * the schema of the captured virtual machine
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly schema?: string;
  /**
   * the version of the content
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly contentVersion?: string;
  /**
   * parameters of the captured virtual machine
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly parameters?: Record<string, unknown>;
  /**
   * a list of resource items of the captured virtual machine
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resources?: Record<string, unknown>[];
};

/** Describes a Virtual Machine. */
export type VirtualMachine = Resource & {
  /** Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**. */
  plan?: Plan;
  /**
   * The virtual machine child extension resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resources?: VirtualMachineExtension[];
  /** The identity of the virtual machine, if configured. */
  identity?: VirtualMachineIdentity;
  /** The virtual machine zones. */
  zones?: string[];
  /** The extended location of the Virtual Machine. */
  extendedLocation?: ExtendedLocation;
  /** Specifies the hardware settings for the virtual machine. */
  hardwareProfile?: HardwareProfile;
  /** Specifies the storage settings for the virtual machine disks. */
  storageProfile?: StorageProfile;
  /** Specifies additional capabilities enabled or disabled on the virtual machine. */
  additionalCapabilities?: AdditionalCapabilities;
  /** Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed once VM is provisioned. */
  osProfile?: OSProfile;
  /** Specifies the network interfaces of the virtual machine. */
  networkProfile?: NetworkProfile;
  /** Specifies the Security related profile settings for the virtual machine. */
  securityProfile?: SecurityProfile;
  /** Specifies the boot diagnostic settings state. <br><br>Minimum api-version: 2015-06-15. */
  diagnosticsProfile?: DiagnosticsProfile;
  /** Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). <br><br> For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) <br><br> Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added should be under the same resource group as the availability set resource. An existing VM cannot be added to an availability set. <br><br>This property cannot exist along with a non-null properties.virtualMachineScaleSet reference. */
  availabilitySet?: SubResource;
  /** Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set. <br><br>This property cannot exist along with a non-null properties.availabilitySet reference. <br><br>Minimum api‐version: 2019‐03‐01 */
  virtualMachineScaleSet?: SubResource;
  /** Specifies information about the proximity placement group that the virtual machine should be assigned to. <br><br>Minimum api-version: 2018-04-01. */
  proximityPlacementGroup?: SubResource;
  /** Specifies the priority for the virtual machine. <br><br>Minimum api-version: 2019-03-01 */
  priority?: VirtualMachinePriorityTypes;
  /** Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. <br><br>For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. <br><br>For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview. */
  evictionPolicy?: VirtualMachineEvictionPolicyTypes;
  /** Specifies the billing related details of a Azure Spot virtual machine. <br><br>Minimum api-version: 2019-03-01. */
  billingProfile?: BillingProfile;
  /** Specifies information about the dedicated host that the virtual machine resides in. <br><br>Minimum api-version: 2018-10-01. */
  host?: SubResource;
  /** Specifies information about the dedicated host group that the virtual machine resides in. <br><br>Minimum api-version: 2020-06-01. <br><br>NOTE: User cannot specify both host and hostGroup properties. */
  hostGroup?: SubResource;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The virtual machine instance view.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceView?: VirtualMachineInstanceView;
  /** Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15 */
  licenseType?: string;
  /**
   * Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmId?: string;
  /** Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). <br><br> Minimum api-version: 2020-06-01 */
  extensionsTimeBudget?: string;
  /** Specifies the scale set logical fault domain into which the Virtual Machine will be created. By default, the Virtual Machine will by automatically assigned to a fault domain that best maintains balance across available fault domains.<br><li>This is applicable only if the 'virtualMachineScaleSet' property of this Virtual Machine is set.<li>The Virtual Machine Scale Set that is referenced, must have 'platformFaultDomainCount' &gt; 1.<li>This property cannot be updated once the Virtual Machine is created.<li>Fault domain assignment can be viewed in the Virtual Machine Instance View.<br><br>Minimum api‐version: 2020‐12‐01 */
  platformFaultDomain?: number;
  /** Specifies Scheduled Event related configurations. */
  scheduledEventsProfile?: ScheduledEventsProfile;
  /** UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. <br><br>Minimum api-version: 2021-03-01 */
  userData?: string;
  /** Specifies information about the capacity reservation that is used to allocate virtual machine. <br><br>Minimum api-version: 2021-04-01. */
  capacityReservation?: CapacityReservationProfile;
  /** Specifies the gallery applications that should be made available to the VM/VMSS */
  applicationProfile?: ApplicationProfile;
  /**
   * Specifies the time at which the Virtual Machine resource was created.<br><br>Minimum api-version: 2022-03-01.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeCreated?: Date;
};

/** Describes a Virtual Machine run command. */
export type VirtualMachineRunCommand = Resource & {
  /** The source of the run command script. */
  source?: VirtualMachineRunCommandScriptSource;
  /** The parameters used by the script. */
  parameters?: RunCommandInputParameter[];
  /** The parameters used by the script. */
  protectedParameters?: RunCommandInputParameter[];
  /** Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete. */
  asyncExecution?: boolean;
  /** Specifies the user account on the VM when executing the run command. */
  runAsUser?: string;
  /** Specifies the user account password on the VM when executing the run command. */
  runAsPassword?: string;
  /** The timeout in seconds to execute the run command. */
  timeoutInSeconds?: number;
  /** Specifies the Azure storage blob where script output stream will be uploaded. */
  outputBlobUri?: string;
  /** Specifies the Azure storage blob where script error stream will be uploaded. */
  errorBlobUri?: string;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The virtual machine run command instance view.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceView?: VirtualMachineRunCommandInstanceView;
};

/** Describes the properties of a Run Command. */
export type RunCommandDocument = RunCommandDocumentBase & {
  /** The script to be executed. */
  script: string[];
  /** The parameters used by the script. */
  parameters?: RunCommandParameterDefinition[];
};

/** Known values of {@link VirtualMachineSizeTypes} that the service accepts. */
export enum KnownVirtualMachineSizeTypes {
  BasicA0 = "Basic_A0",
  BasicA1 = "Basic_A1",
  BasicA2 = "Basic_A2",
  BasicA3 = "Basic_A3",
  BasicA4 = "Basic_A4",
  StandardA0 = "Standard_A0",
  StandardA1 = "Standard_A1",
  StandardA2 = "Standard_A2",
  StandardA3 = "Standard_A3",
  StandardA4 = "Standard_A4",
  StandardA5 = "Standard_A5",
  StandardA6 = "Standard_A6",
  StandardA7 = "Standard_A7",
  StandardA8 = "Standard_A8",
  StandardA9 = "Standard_A9",
  StandardA10 = "Standard_A10",
  StandardA11 = "Standard_A11",
  StandardA1V2 = "Standard_A1_v2",
  StandardA2V2 = "Standard_A2_v2",
  StandardA4V2 = "Standard_A4_v2",
  StandardA8V2 = "Standard_A8_v2",
  StandardA2MV2 = "Standard_A2m_v2",
  StandardA4MV2 = "Standard_A4m_v2",
  StandardA8MV2 = "Standard_A8m_v2",
  StandardB1S = "Standard_B1s",
  StandardB1Ms = "Standard_B1ms",
  StandardB2S = "Standard_B2s",
  StandardB2Ms = "Standard_B2ms",
  StandardB4Ms = "Standard_B4ms",
  StandardB8Ms = "Standard_B8ms",
  StandardD1 = "Standard_D1",
  StandardD2 = "Standard_D2",
  StandardD3 = "Standard_D3",
  StandardD4 = "Standard_D4",
  StandardD11 = "Standard_D11",
  StandardD12 = "Standard_D12",
  StandardD13 = "Standard_D13",
  StandardD14 = "Standard_D14",
  StandardD1V2 = "Standard_D1_v2",
  StandardD2V2 = "Standard_D2_v2",
  StandardD3V2 = "Standard_D3_v2",
  StandardD4V2 = "Standard_D4_v2",
  StandardD5V2 = "Standard_D5_v2",
  StandardD2V3 = "Standard_D2_v3",
  StandardD4V3 = "Standard_D4_v3",
  StandardD8V3 = "Standard_D8_v3",
  StandardD16V3 = "Standard_D16_v3",
  StandardD32V3 = "Standard_D32_v3",
  StandardD64V3 = "Standard_D64_v3",
  StandardD2SV3 = "Standard_D2s_v3",
  StandardD4SV3 = "Standard_D4s_v3",
  StandardD8SV3 = "Standard_D8s_v3",
  StandardD16SV3 = "Standard_D16s_v3",
  StandardD32SV3 = "Standard_D32s_v3",
  StandardD64SV3 = "Standard_D64s_v3",
  StandardD11V2 = "Standard_D11_v2",
  StandardD12V2 = "Standard_D12_v2",
  StandardD13V2 = "Standard_D13_v2",
  StandardD14V2 = "Standard_D14_v2",
  StandardD15V2 = "Standard_D15_v2",
  StandardDS1 = "Standard_DS1",
  StandardDS2 = "Standard_DS2",
  StandardDS3 = "Standard_DS3",
  StandardDS4 = "Standard_DS4",
  StandardDS11 = "Standard_DS11",
  StandardDS12 = "Standard_DS12",
  StandardDS13 = "Standard_DS13",
  StandardDS14 = "Standard_DS14",
  StandardDS1V2 = "Standard_DS1_v2",
  StandardDS2V2 = "Standard_DS2_v2",
  StandardDS3V2 = "Standard_DS3_v2",
  StandardDS4V2 = "Standard_DS4_v2",
  StandardDS5V2 = "Standard_DS5_v2",
  StandardDS11V2 = "Standard_DS11_v2",
  StandardDS12V2 = "Standard_DS12_v2",
  StandardDS13V2 = "Standard_DS13_v2",
  StandardDS14V2 = "Standard_DS14_v2",
  StandardDS15V2 = "Standard_DS15_v2",
  StandardDS134V2 = "Standard_DS13-4_v2",
  StandardDS132V2 = "Standard_DS13-2_v2",
  StandardDS148V2 = "Standard_DS14-8_v2",
  StandardDS144V2 = "Standard_DS14-4_v2",
  StandardE2V3 = "Standard_E2_v3",
  StandardE4V3 = "Standard_E4_v3",
  StandardE8V3 = "Standard_E8_v3",
  StandardE16V3 = "Standard_E16_v3",
  StandardE32V3 = "Standard_E32_v3",
  StandardE64V3 = "Standard_E64_v3",
  StandardE2SV3 = "Standard_E2s_v3",
  StandardE4SV3 = "Standard_E4s_v3",
  StandardE8SV3 = "Standard_E8s_v3",
  StandardE16SV3 = "Standard_E16s_v3",
  StandardE32SV3 = "Standard_E32s_v3",
  StandardE64SV3 = "Standard_E64s_v3",
  StandardE3216V3 = "Standard_E32-16_v3",
  StandardE328SV3 = "Standard_E32-8s_v3",
  StandardE6432SV3 = "Standard_E64-32s_v3",
  StandardE6416SV3 = "Standard_E64-16s_v3",
  StandardF1 = "Standard_F1",
  StandardF2 = "Standard_F2",
  StandardF4 = "Standard_F4",
  StandardF8 = "Standard_F8",
  StandardF16 = "Standard_F16",
  StandardF1S = "Standard_F1s",
  StandardF2S = "Standard_F2s",
  StandardF4S = "Standard_F4s",
  StandardF8S = "Standard_F8s",
  StandardF16S = "Standard_F16s",
  StandardF2SV2 = "Standard_F2s_v2",
  StandardF4SV2 = "Standard_F4s_v2",
  StandardF8SV2 = "Standard_F8s_v2",
  StandardF16SV2 = "Standard_F16s_v2",
  StandardF32SV2 = "Standard_F32s_v2",
  StandardF64SV2 = "Standard_F64s_v2",
  StandardF72SV2 = "Standard_F72s_v2",
  StandardG1 = "Standard_G1",
  StandardG2 = "Standard_G2",
  StandardG3 = "Standard_G3",
  StandardG4 = "Standard_G4",
  StandardG5 = "Standard_G5",
  StandardGS1 = "Standard_GS1",
  StandardGS2 = "Standard_GS2",
  StandardGS3 = "Standard_GS3",
  StandardGS4 = "Standard_GS4",
  StandardGS5 = "Standard_GS5",
  StandardGS48 = "Standard_GS4-8",
  StandardGS44 = "Standard_GS4-4",
  StandardGS516 = "Standard_GS5-16",
  StandardGS58 = "Standard_GS5-8",
  StandardH8 = "Standard_H8",
  StandardH16 = "Standard_H16",
  StandardH8M = "Standard_H8m",
  StandardH16M = "Standard_H16m",
  StandardH16R = "Standard_H16r",
  StandardH16Mr = "Standard_H16mr",
  StandardL4S = "Standard_L4s",
  StandardL8S = "Standard_L8s",
  StandardL16S = "Standard_L16s",
  StandardL32S = "Standard_L32s",
  StandardM64S = "Standard_M64s",
  StandardM64Ms = "Standard_M64ms",
  StandardM128S = "Standard_M128s",
  StandardM128Ms = "Standard_M128ms",
  StandardM6432Ms = "Standard_M64-32ms",
  StandardM6416Ms = "Standard_M64-16ms",
  StandardM12864Ms = "Standard_M128-64ms",
  StandardM12832Ms = "Standard_M128-32ms",
  StandardNC6 = "Standard_NC6",
  StandardNC12 = "Standard_NC12",
  StandardNC24 = "Standard_NC24",
  StandardNC24R = "Standard_NC24r",
  StandardNC6SV2 = "Standard_NC6s_v2",
  StandardNC12SV2 = "Standard_NC12s_v2",
  StandardNC24SV2 = "Standard_NC24s_v2",
  StandardNC24RsV2 = "Standard_NC24rs_v2",
  StandardNC6SV3 = "Standard_NC6s_v3",
  StandardNC12SV3 = "Standard_NC12s_v3",
  StandardNC24SV3 = "Standard_NC24s_v3",
  StandardNC24RsV3 = "Standard_NC24rs_v3",
  StandardND6S = "Standard_ND6s",
  StandardND12S = "Standard_ND12s",
  StandardND24S = "Standard_ND24s",
  StandardND24Rs = "Standard_ND24rs",
  StandardNV6 = "Standard_NV6",
  StandardNV12 = "Standard_NV12",
  StandardNV24 = "Standard_NV24"
}

/**
 * Defines values for VirtualMachineSizeTypes. \
 * {@link KnownVirtualMachineSizeTypes} can be used interchangeably with VirtualMachineSizeTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic_A0** \
 * **Basic_A1** \
 * **Basic_A2** \
 * **Basic_A3** \
 * **Basic_A4** \
 * **Standard_A0** \
 * **Standard_A1** \
 * **Standard_A2** \
 * **Standard_A3** \
 * **Standard_A4** \
 * **Standard_A5** \
 * **Standard_A6** \
 * **Standard_A7** \
 * **Standard_A8** \
 * **Standard_A9** \
 * **Standard_A10** \
 * **Standard_A11** \
 * **Standard_A1_v2** \
 * **Standard_A2_v2** \
 * **Standard_A4_v2** \
 * **Standard_A8_v2** \
 * **Standard_A2m_v2** \
 * **Standard_A4m_v2** \
 * **Standard_A8m_v2** \
 * **Standard_B1s** \
 * **Standard_B1ms** \
 * **Standard_B2s** \
 * **Standard_B2ms** \
 * **Standard_B4ms** \
 * **Standard_B8ms** \
 * **Standard_D1** \
 * **Standard_D2** \
 * **Standard_D3** \
 * **Standard_D4** \
 * **Standard_D11** \
 * **Standard_D12** \
 * **Standard_D13** \
 * **Standard_D14** \
 * **Standard_D1_v2** \
 * **Standard_D2_v2** \
 * **Standard_D3_v2** \
 * **Standard_D4_v2** \
 * **Standard_D5_v2** \
 * **Standard_D2_v3** \
 * **Standard_D4_v3** \
 * **Standard_D8_v3** \
 * **Standard_D16_v3** \
 * **Standard_D32_v3** \
 * **Standard_D64_v3** \
 * **Standard_D2s_v3** \
 * **Standard_D4s_v3** \
 * **Standard_D8s_v3** \
 * **Standard_D16s_v3** \
 * **Standard_D32s_v3** \
 * **Standard_D64s_v3** \
 * **Standard_D11_v2** \
 * **Standard_D12_v2** \
 * **Standard_D13_v2** \
 * **Standard_D14_v2** \
 * **Standard_D15_v2** \
 * **Standard_DS1** \
 * **Standard_DS2** \
 * **Standard_DS3** \
 * **Standard_DS4** \
 * **Standard_DS11** \
 * **Standard_DS12** \
 * **Standard_DS13** \
 * **Standard_DS14** \
 * **Standard_DS1_v2** \
 * **Standard_DS2_v2** \
 * **Standard_DS3_v2** \
 * **Standard_DS4_v2** \
 * **Standard_DS5_v2** \
 * **Standard_DS11_v2** \
 * **Standard_DS12_v2** \
 * **Standard_DS13_v2** \
 * **Standard_DS14_v2** \
 * **Standard_DS15_v2** \
 * **Standard_DS13-4_v2** \
 * **Standard_DS13-2_v2** \
 * **Standard_DS14-8_v2** \
 * **Standard_DS14-4_v2** \
 * **Standard_E2_v3** \
 * **Standard_E4_v3** \
 * **Standard_E8_v3** \
 * **Standard_E16_v3** \
 * **Standard_E32_v3** \
 * **Standard_E64_v3** \
 * **Standard_E2s_v3** \
 * **Standard_E4s_v3** \
 * **Standard_E8s_v3** \
 * **Standard_E16s_v3** \
 * **Standard_E32s_v3** \
 * **Standard_E64s_v3** \
 * **Standard_E32-16_v3** \
 * **Standard_E32-8s_v3** \
 * **Standard_E64-32s_v3** \
 * **Standard_E64-16s_v3** \
 * **Standard_F1** \
 * **Standard_F2** \
 * **Standard_F4** \
 * **Standard_F8** \
 * **Standard_F16** \
 * **Standard_F1s** \
 * **Standard_F2s** \
 * **Standard_F4s** \
 * **Standard_F8s** \
 * **Standard_F16s** \
 * **Standard_F2s_v2** \
 * **Standard_F4s_v2** \
 * **Standard_F8s_v2** \
 * **Standard_F16s_v2** \
 * **Standard_F32s_v2** \
 * **Standard_F64s_v2** \
 * **Standard_F72s_v2** \
 * **Standard_G1** \
 * **Standard_G2** \
 * **Standard_G3** \
 * **Standard_G4** \
 * **Standard_G5** \
 * **Standard_GS1** \
 * **Standard_GS2** \
 * **Standard_GS3** \
 * **Standard_GS4** \
 * **Standard_GS5** \
 * **Standard_GS4-8** \
 * **Standard_GS4-4** \
 * **Standard_GS5-16** \
 * **Standard_GS5-8** \
 * **Standard_H8** \
 * **Standard_H16** \
 * **Standard_H8m** \
 * **Standard_H16m** \
 * **Standard_H16r** \
 * **Standard_H16mr** \
 * **Standard_L4s** \
 * **Standard_L8s** \
 * **Standard_L16s** \
 * **Standard_L32s** \
 * **Standard_M64s** \
 * **Standard_M64ms** \
 * **Standard_M128s** \
 * **Standard_M128ms** \
 * **Standard_M64-32ms** \
 * **Standard_M64-16ms** \
 * **Standard_M128-64ms** \
 * **Standard_M128-32ms** \
 * **Standard_NC6** \
 * **Standard_NC12** \
 * **Standard_NC24** \
 * **Standard_NC24r** \
 * **Standard_NC6s_v2** \
 * **Standard_NC12s_v2** \
 * **Standard_NC24s_v2** \
 * **Standard_NC24rs_v2** \
 * **Standard_NC6s_v3** \
 * **Standard_NC12s_v3** \
 * **Standard_NC24s_v3** \
 * **Standard_NC24rs_v3** \
 * **Standard_ND6s** \
 * **Standard_ND12s** \
 * **Standard_ND24s** \
 * **Standard_ND24rs** \
 * **Standard_NV6** \
 * **Standard_NV12** \
 * **Standard_NV24**
 */
export type VirtualMachineSizeTypes = string;

/** Known values of {@link DiffDiskOptions} that the service accepts. */
export enum KnownDiffDiskOptions {
  Local = "Local"
}

/**
 * Defines values for DiffDiskOptions. \
 * {@link KnownDiffDiskOptions} can be used interchangeably with DiffDiskOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Local**
 */
export type DiffDiskOptions = string;

/** Known values of {@link DiffDiskPlacement} that the service accepts. */
export enum KnownDiffDiskPlacement {
  CacheDisk = "CacheDisk",
  ResourceDisk = "ResourceDisk"
}

/**
 * Defines values for DiffDiskPlacement. \
 * {@link KnownDiffDiskPlacement} can be used interchangeably with DiffDiskPlacement,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CacheDisk** \
 * **ResourceDisk**
 */
export type DiffDiskPlacement = string;

/** Known values of {@link DiskCreateOptionTypes} that the service accepts. */
export enum KnownDiskCreateOptionTypes {
  FromImage = "FromImage",
  Empty = "Empty",
  Attach = "Attach"
}

/**
 * Defines values for DiskCreateOptionTypes. \
 * {@link KnownDiskCreateOptionTypes} can be used interchangeably with DiskCreateOptionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FromImage** \
 * **Empty** \
 * **Attach**
 */
export type DiskCreateOptionTypes = string;

/** Known values of {@link StorageAccountTypes} that the service accepts. */
export enum KnownStorageAccountTypes {
  StandardLRS = "Standard_LRS",
  PremiumLRS = "Premium_LRS",
  StandardSSDLRS = "StandardSSD_LRS",
  UltraSSDLRS = "UltraSSD_LRS",
  PremiumZRS = "Premium_ZRS",
  StandardSSDZRS = "StandardSSD_ZRS",
  PremiumV2LRS = "PremiumV2_LRS"
}

/**
 * Defines values for StorageAccountTypes. \
 * {@link KnownStorageAccountTypes} can be used interchangeably with StorageAccountTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS** \
 * **Premium_LRS** \
 * **StandardSSD_LRS** \
 * **UltraSSD_LRS** \
 * **Premium_ZRS** \
 * **StandardSSD_ZRS** \
 * **PremiumV2_LRS**
 */
export type StorageAccountTypes = string;

/** Known values of {@link SecurityEncryptionTypes} that the service accepts. */
export enum KnownSecurityEncryptionTypes {
  VMGuestStateOnly = "VMGuestStateOnly",
  DiskWithVMGuestState = "DiskWithVMGuestState"
}

/**
 * Defines values for SecurityEncryptionTypes. \
 * {@link KnownSecurityEncryptionTypes} can be used interchangeably with SecurityEncryptionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **VMGuestStateOnly** \
 * **DiskWithVMGuestState**
 */
export type SecurityEncryptionTypes = string;

/** Known values of {@link DiskDeleteOptionTypes} that the service accepts. */
export enum KnownDiskDeleteOptionTypes {
  Delete = "Delete",
  Detach = "Detach"
}

/**
 * Defines values for DiskDeleteOptionTypes. \
 * {@link KnownDiskDeleteOptionTypes} can be used interchangeably with DiskDeleteOptionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete** \
 * **Detach**
 */
export type DiskDeleteOptionTypes = string;

/** Known values of {@link DiskDetachOptionTypes} that the service accepts. */
export enum KnownDiskDetachOptionTypes {
  ForceDetach = "ForceDetach"
}

/**
 * Defines values for DiskDetachOptionTypes. \
 * {@link KnownDiskDetachOptionTypes} can be used interchangeably with DiskDetachOptionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ForceDetach**
 */
export type DiskDetachOptionTypes = string;

/** Known values of {@link WindowsVMGuestPatchMode} that the service accepts. */
export enum KnownWindowsVMGuestPatchMode {
  Manual = "Manual",
  AutomaticByOS = "AutomaticByOS",
  AutomaticByPlatform = "AutomaticByPlatform"
}

/**
 * Defines values for WindowsVMGuestPatchMode. \
 * {@link KnownWindowsVMGuestPatchMode} can be used interchangeably with WindowsVMGuestPatchMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual** \
 * **AutomaticByOS** \
 * **AutomaticByPlatform**
 */
export type WindowsVMGuestPatchMode = string;

/** Known values of {@link WindowsPatchAssessmentMode} that the service accepts. */
export enum KnownWindowsPatchAssessmentMode {
  ImageDefault = "ImageDefault",
  AutomaticByPlatform = "AutomaticByPlatform"
}

/**
 * Defines values for WindowsPatchAssessmentMode. \
 * {@link KnownWindowsPatchAssessmentMode} can be used interchangeably with WindowsPatchAssessmentMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ImageDefault** \
 * **AutomaticByPlatform**
 */
export type WindowsPatchAssessmentMode = string;

/** Known values of {@link WindowsVMGuestPatchAutomaticByPlatformRebootSetting} that the service accepts. */
export enum KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting {
  Unknown = "Unknown",
  IfRequired = "IfRequired",
  Never = "Never",
  Always = "Always"
}

/**
 * Defines values for WindowsVMGuestPatchAutomaticByPlatformRebootSetting. \
 * {@link KnownWindowsVMGuestPatchAutomaticByPlatformRebootSetting} can be used interchangeably with WindowsVMGuestPatchAutomaticByPlatformRebootSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **IfRequired** \
 * **Never** \
 * **Always**
 */
export type WindowsVMGuestPatchAutomaticByPlatformRebootSetting = string;

/** Known values of {@link LinuxVMGuestPatchMode} that the service accepts. */
export enum KnownLinuxVMGuestPatchMode {
  ImageDefault = "ImageDefault",
  AutomaticByPlatform = "AutomaticByPlatform"
}

/**
 * Defines values for LinuxVMGuestPatchMode. \
 * {@link KnownLinuxVMGuestPatchMode} can be used interchangeably with LinuxVMGuestPatchMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ImageDefault** \
 * **AutomaticByPlatform**
 */
export type LinuxVMGuestPatchMode = string;

/** Known values of {@link LinuxPatchAssessmentMode} that the service accepts. */
export enum KnownLinuxPatchAssessmentMode {
  ImageDefault = "ImageDefault",
  AutomaticByPlatform = "AutomaticByPlatform"
}

/**
 * Defines values for LinuxPatchAssessmentMode. \
 * {@link KnownLinuxPatchAssessmentMode} can be used interchangeably with LinuxPatchAssessmentMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ImageDefault** \
 * **AutomaticByPlatform**
 */
export type LinuxPatchAssessmentMode = string;

/** Known values of {@link LinuxVMGuestPatchAutomaticByPlatformRebootSetting} that the service accepts. */
export enum KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting {
  Unknown = "Unknown",
  IfRequired = "IfRequired",
  Never = "Never",
  Always = "Always"
}

/**
 * Defines values for LinuxVMGuestPatchAutomaticByPlatformRebootSetting. \
 * {@link KnownLinuxVMGuestPatchAutomaticByPlatformRebootSetting} can be used interchangeably with LinuxVMGuestPatchAutomaticByPlatformRebootSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **IfRequired** \
 * **Never** \
 * **Always**
 */
export type LinuxVMGuestPatchAutomaticByPlatformRebootSetting = string;

/** Known values of {@link DeleteOptions} that the service accepts. */
export enum KnownDeleteOptions {
  Delete = "Delete",
  Detach = "Detach"
}

/**
 * Defines values for DeleteOptions. \
 * {@link KnownDeleteOptions} can be used interchangeably with DeleteOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete** \
 * **Detach**
 */
export type DeleteOptions = string;

/** Known values of {@link NetworkApiVersion} that the service accepts. */
export enum KnownNetworkApiVersion {
  TwoThousandTwenty1101 = "2020-11-01"
}

/**
 * Defines values for NetworkApiVersion. \
 * {@link KnownNetworkApiVersion} can be used interchangeably with NetworkApiVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **2020-11-01**
 */
export type NetworkApiVersion = string;

/** Known values of {@link IPVersions} that the service accepts. */
export enum KnownIPVersions {
  IPv4 = "IPv4",
  IPv6 = "IPv6"
}

/**
 * Defines values for IPVersions. \
 * {@link KnownIPVersions} can be used interchangeably with IPVersions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4** \
 * **IPv6**
 */
export type IPVersions = string;

/** Known values of {@link PublicIPAllocationMethod} that the service accepts. */
export enum KnownPublicIPAllocationMethod {
  Dynamic = "Dynamic",
  Static = "Static"
}

/**
 * Defines values for PublicIPAllocationMethod. \
 * {@link KnownPublicIPAllocationMethod} can be used interchangeably with PublicIPAllocationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Dynamic** \
 * **Static**
 */
export type PublicIPAllocationMethod = string;

/** Known values of {@link PublicIPAddressSkuName} that the service accepts. */
export enum KnownPublicIPAddressSkuName {
  Basic = "Basic",
  Standard = "Standard"
}

/**
 * Defines values for PublicIPAddressSkuName. \
 * {@link KnownPublicIPAddressSkuName} can be used interchangeably with PublicIPAddressSkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard**
 */
export type PublicIPAddressSkuName = string;

/** Known values of {@link PublicIPAddressSkuTier} that the service accepts. */
export enum KnownPublicIPAddressSkuTier {
  Regional = "Regional",
  Global = "Global"
}

/**
 * Defines values for PublicIPAddressSkuTier. \
 * {@link KnownPublicIPAddressSkuTier} can be used interchangeably with PublicIPAddressSkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Regional** \
 * **Global**
 */
export type PublicIPAddressSkuTier = string;

/** Known values of {@link SecurityTypes} that the service accepts. */
export enum KnownSecurityTypes {
  TrustedLaunch = "TrustedLaunch",
  ConfidentialVM = "ConfidentialVM"
}

/**
 * Defines values for SecurityTypes. \
 * {@link KnownSecurityTypes} can be used interchangeably with SecurityTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TrustedLaunch** \
 * **ConfidentialVM**
 */
export type SecurityTypes = string;

/** Known values of {@link VirtualMachinePriorityTypes} that the service accepts. */
export enum KnownVirtualMachinePriorityTypes {
  Regular = "Regular",
  Low = "Low",
  Spot = "Spot"
}

/**
 * Defines values for VirtualMachinePriorityTypes. \
 * {@link KnownVirtualMachinePriorityTypes} can be used interchangeably with VirtualMachinePriorityTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Regular** \
 * **Low** \
 * **Spot**
 */
export type VirtualMachinePriorityTypes = string;

/** Known values of {@link VirtualMachineEvictionPolicyTypes} that the service accepts. */
export enum KnownVirtualMachineEvictionPolicyTypes {
  Deallocate = "Deallocate",
  Delete = "Delete"
}

/**
 * Defines values for VirtualMachineEvictionPolicyTypes. \
 * {@link KnownVirtualMachineEvictionPolicyTypes} can be used interchangeably with VirtualMachineEvictionPolicyTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Deallocate** \
 * **Delete**
 */
export type VirtualMachineEvictionPolicyTypes = string;

/** Known values of {@link HyperVGenerationType} that the service accepts. */
export enum KnownHyperVGenerationType {
  V1 = "V1",
  V2 = "V2"
}

/**
 * Defines values for HyperVGenerationType. \
 * {@link KnownHyperVGenerationType} can be used interchangeably with HyperVGenerationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **V1** \
 * **V2**
 */
export type HyperVGenerationType = string;

/** Known values of {@link PatchOperationStatus} that the service accepts. */
export enum KnownPatchOperationStatus {
  Unknown = "Unknown",
  InProgress = "InProgress",
  Failed = "Failed",
  Succeeded = "Succeeded",
  CompletedWithWarnings = "CompletedWithWarnings"
}

/**
 * Defines values for PatchOperationStatus. \
 * {@link KnownPatchOperationStatus} can be used interchangeably with PatchOperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **InProgress** \
 * **Failed** \
 * **Succeeded** \
 * **CompletedWithWarnings**
 */
export type PatchOperationStatus = string;

/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export enum KnownExtendedLocationTypes {
  EdgeZone = "EdgeZone"
}

/**
 * Defines values for ExtendedLocationTypes. \
 * {@link KnownExtendedLocationTypes} can be used interchangeably with ExtendedLocationTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EdgeZone**
 */
export type ExtendedLocationTypes = string;

/** Known values of {@link VMGuestPatchRebootBehavior} that the service accepts. */
export enum KnownVMGuestPatchRebootBehavior {
  Unknown = "Unknown",
  NeverReboots = "NeverReboots",
  AlwaysRequiresReboot = "AlwaysRequiresReboot",
  CanRequestReboot = "CanRequestReboot"
}

/**
 * Defines values for VMGuestPatchRebootBehavior. \
 * {@link KnownVMGuestPatchRebootBehavior} can be used interchangeably with VMGuestPatchRebootBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **NeverReboots** \
 * **AlwaysRequiresReboot** \
 * **CanRequestReboot**
 */
export type VMGuestPatchRebootBehavior = string;

/** Known values of {@link PatchAssessmentState} that the service accepts. */
export enum KnownPatchAssessmentState {
  Unknown = "Unknown",
  Available = "Available"
}

/**
 * Defines values for PatchAssessmentState. \
 * {@link KnownPatchAssessmentState} can be used interchangeably with PatchAssessmentState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Available**
 */
export type PatchAssessmentState = string;

/** Known values of {@link VMGuestPatchRebootSetting} that the service accepts. */
export enum KnownVMGuestPatchRebootSetting {
  IfRequired = "IfRequired",
  Never = "Never",
  Always = "Always"
}

/**
 * Defines values for VMGuestPatchRebootSetting. \
 * {@link KnownVMGuestPatchRebootSetting} can be used interchangeably with VMGuestPatchRebootSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IfRequired** \
 * **Never** \
 * **Always**
 */
export type VMGuestPatchRebootSetting = string;

/** Known values of {@link VMGuestPatchClassificationWindows} that the service accepts. */
export enum KnownVMGuestPatchClassificationWindows {
  Critical = "Critical",
  Security = "Security",
  UpdateRollUp = "UpdateRollUp",
  FeaturePack = "FeaturePack",
  ServicePack = "ServicePack",
  Definition = "Definition",
  Tools = "Tools",
  Updates = "Updates"
}

/**
 * Defines values for VMGuestPatchClassificationWindows. \
 * {@link KnownVMGuestPatchClassificationWindows} can be used interchangeably with VMGuestPatchClassificationWindows,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Security** \
 * **UpdateRollUp** \
 * **FeaturePack** \
 * **ServicePack** \
 * **Definition** \
 * **Tools** \
 * **Updates**
 */
export type VMGuestPatchClassificationWindows = string;

/** Known values of {@link VMGuestPatchClassificationLinux} that the service accepts. */
export enum KnownVMGuestPatchClassificationLinux {
  Critical = "Critical",
  Security = "Security",
  Other = "Other"
}

/**
 * Defines values for VMGuestPatchClassificationLinux. \
 * {@link KnownVMGuestPatchClassificationLinux} can be used interchangeably with VMGuestPatchClassificationLinux,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Security** \
 * **Other**
 */
export type VMGuestPatchClassificationLinux = string;

/** Known values of {@link VMGuestPatchRebootStatus} that the service accepts. */
export enum KnownVMGuestPatchRebootStatus {
  Unknown = "Unknown",
  NotNeeded = "NotNeeded",
  Required = "Required",
  Started = "Started",
  Failed = "Failed",
  Completed = "Completed"
}

/**
 * Defines values for VMGuestPatchRebootStatus. \
 * {@link KnownVMGuestPatchRebootStatus} can be used interchangeably with VMGuestPatchRebootStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **NotNeeded** \
 * **Required** \
 * **Started** \
 * **Failed** \
 * **Completed**
 */
export type VMGuestPatchRebootStatus = string;

/** Known values of {@link PatchInstallationState} that the service accepts. */
export enum KnownPatchInstallationState {
  Unknown = "Unknown",
  Installed = "Installed",
  Failed = "Failed",
  Excluded = "Excluded",
  NotSelected = "NotSelected",
  Pending = "Pending"
}

/**
 * Defines values for PatchInstallationState. \
 * {@link KnownPatchInstallationState} can be used interchangeably with PatchInstallationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Installed** \
 * **Failed** \
 * **Excluded** \
 * **NotSelected** \
 * **Pending**
 */
export type PatchInstallationState = string;

/** Known values of {@link ExecutionState} that the service accepts. */
export enum KnownExecutionState {
  Unknown = "Unknown",
  Pending = "Pending",
  Running = "Running",
  Failed = "Failed",
  Succeeded = "Succeeded",
  TimedOut = "TimedOut",
  Canceled = "Canceled"
}

/**
 * Defines values for ExecutionState. \
 * {@link KnownExecutionState} can be used interchangeably with ExecutionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Pending** \
 * **Running** \
 * **Failed** \
 * **Succeeded** \
 * **TimedOut** \
 * **Canceled**
 */
export type ExecutionState = string;
/** Defines values for StatusLevelTypes. */
export type StatusLevelTypes = "Info" | "Warning" | "Error";
/** Defines values for OperatingSystemTypes. */
export type OperatingSystemTypes = "Windows" | "Linux";
/** Defines values for CachingTypes. */
export type CachingTypes = "None" | "ReadOnly" | "ReadWrite";
/** Defines values for SettingNames. */
export type SettingNames = "AutoLogon" | "FirstLogonCommands";
/** Defines values for ProtocolTypes. */
export type ProtocolTypes = "Http" | "Https";
/** Defines values for MaintenanceOperationResultCodeTypes. */
export type MaintenanceOperationResultCodeTypes =
  | "None"
  | "RetryLater"
  | "MaintenanceAborted"
  | "MaintenanceCompleted";
/** Defines values for ResourceIdentityType. */
export type ResourceIdentityType =
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned"
  | "None";
/** Defines values for InstanceViewTypes. */
export type InstanceViewTypes = "instanceView" | "userData";

/** Optional parameters. */
export interface VirtualMachineExtensionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachineExtensionsCreateOrUpdateResponse = VirtualMachineExtension;

/** Optional parameters. */
export interface VirtualMachineExtensionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualMachineExtensionsUpdateResponse = VirtualMachineExtension;

/** Optional parameters. */
export interface VirtualMachineExtensionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachineExtensionsGetOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type VirtualMachineExtensionsGetResponse = VirtualMachineExtension;

/** Optional parameters. */
export interface VirtualMachineExtensionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the list operation. */
export type VirtualMachineExtensionsListResponse = VirtualMachineExtensionsListResult;

/** Optional parameters. */
export interface VirtualMachinesListByLocationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocation operation. */
export type VirtualMachinesListByLocationResponse = VirtualMachineListResult;

/** Optional parameters. */
export interface VirtualMachinesCaptureOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the capture operation. */
export type VirtualMachinesCaptureResponse = VirtualMachineCaptureResult;

/** Optional parameters. */
export interface VirtualMachinesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachinesCreateOrUpdateResponse = VirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualMachinesUpdateResponse = VirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Optional parameter to force delete virtual machines. */
  forceDeletion?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesGetOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. 'InstanceView' retrieves a snapshot of the runtime properties of the virtual machine that is managed by the platform and can change outside of control plane operations. 'UserData' retrieves the UserData property as part of the VM model view that was provided by the user during the VM Create/Update operation. */
  expand?: InstanceViewTypes;
}

/** Contains response data for the get operation. */
export type VirtualMachinesGetResponse = VirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesInstanceViewOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the instanceView operation. */
export type VirtualMachinesInstanceViewResponse = VirtualMachineInstanceView;

/** Optional parameters. */
export interface VirtualMachinesConvertToManagedDisksOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesDeallocateOptionalParams
  extends coreClient.OperationOptions {
  /** Optional parameter to hibernate a virtual machine. (Feature in Preview) */
  hibernate?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesGeneralizeOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VirtualMachinesListOptionalParams
  extends coreClient.OperationOptions {
  /** The system query option to filter VMs returned in the response. Allowed value is 'virtualMachineScaleSet/id' eq /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}' */
  filter?: string;
}

/** Contains response data for the list operation. */
export type VirtualMachinesListResponse = VirtualMachineListResult;

/** Optional parameters. */
export interface VirtualMachinesListAllOptionalParams
  extends coreClient.OperationOptions {
  /** The system query option to filter VMs returned in the response. Allowed value is 'virtualMachineScaleSet/id' eq /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}' */
  filter?: string;
  /** statusOnly=true enables fetching run time status of all Virtual Machines in the subscription. */
  statusOnly?: string;
}

/** Contains response data for the listAll operation. */
export type VirtualMachinesListAllResponse = VirtualMachineListResult;

/** Optional parameters. */
export interface VirtualMachinesListAvailableSizesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAvailableSizes operation. */
export type VirtualMachinesListAvailableSizesResponse = VirtualMachineSizeListResult;

/** Optional parameters. */
export interface VirtualMachinesPowerOffOptionalParams
  extends coreClient.OperationOptions {
  /** The parameter to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Default value for this flag is false if not specified */
  skipShutdown?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesReapplyOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesRedeployOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesReimageOptionalParams
  extends coreClient.OperationOptions {
  /** Parameters supplied to the Reimage Virtual Machine operation. */
  parameters?: VirtualMachineReimageParameters;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesRetrieveBootDiagnosticsDataOptionalParams
  extends coreClient.OperationOptions {
  /** Expiration duration in minutes for the SAS URIs with a value between 1 to 1440 minutes. <br><br>NOTE: If not specified, SAS URIs will be generated with a default expiration duration of 120 minutes. */
  sasUriExpirationTimeInMinutes?: number;
}

/** Contains response data for the retrieveBootDiagnosticsData operation. */
export type VirtualMachinesRetrieveBootDiagnosticsDataResponse = RetrieveBootDiagnosticsDataResult;

/** Optional parameters. */
export interface VirtualMachinesPerformMaintenanceOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesSimulateEvictionOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VirtualMachinesAssessPatchesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the assessPatches operation. */
export type VirtualMachinesAssessPatchesResponse = VirtualMachineAssessPatchesResult;

/** Optional parameters. */
export interface VirtualMachinesInstallPatchesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the installPatches operation. */
export type VirtualMachinesInstallPatchesResponse = VirtualMachineInstallPatchesResult;

/** Optional parameters. */
export interface VirtualMachinesRunCommandOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the runCommand operation. */
export type VirtualMachinesRunCommandResponse = RunCommandResult;

/** Optional parameters. */
export interface VirtualMachinesListByLocationNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocationNext operation. */
export type VirtualMachinesListByLocationNextResponse = VirtualMachineListResult;

/** Optional parameters. */
export interface VirtualMachinesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The system query option to filter VMs returned in the response. Allowed value is 'virtualMachineScaleSet/id' eq /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}' */
  filter?: string;
}

/** Contains response data for the listNext operation. */
export type VirtualMachinesListNextResponse = VirtualMachineListResult;

/** Optional parameters. */
export interface VirtualMachinesListAllNextOptionalParams
  extends coreClient.OperationOptions {
  /** The system query option to filter VMs returned in the response. Allowed value is 'virtualMachineScaleSet/id' eq /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmssName}' */
  filter?: string;
  /** statusOnly=true enables fetching run time status of all Virtual Machines in the subscription. */
  statusOnly?: string;
}

/** Contains response data for the listAllNext operation. */
export type VirtualMachinesListAllNextResponse = VirtualMachineListResult;

/** Optional parameters. */
export interface VirtualMachineRunCommandsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualMachineRunCommandsListResponse = RunCommandListResult;

/** Optional parameters. */
export interface VirtualMachineRunCommandsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualMachineRunCommandsGetResponse = RunCommandDocument;

/** Optional parameters. */
export interface VirtualMachineRunCommandsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachineRunCommandsCreateOrUpdateResponse = VirtualMachineRunCommand;

/** Optional parameters. */
export interface VirtualMachineRunCommandsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualMachineRunCommandsUpdateResponse = VirtualMachineRunCommand;

/** Optional parameters. */
export interface VirtualMachineRunCommandsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachineRunCommandsGetByVirtualMachineOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the getByVirtualMachine operation. */
export type VirtualMachineRunCommandsGetByVirtualMachineResponse = VirtualMachineRunCommand;

/** Optional parameters. */
export interface VirtualMachineRunCommandsListByVirtualMachineOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the listByVirtualMachine operation. */
export type VirtualMachineRunCommandsListByVirtualMachineResponse = VirtualMachineRunCommandsListResult;

/** Optional parameters. */
export interface VirtualMachineRunCommandsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualMachineRunCommandsListNextResponse = RunCommandListResult;

/** Optional parameters. */
export interface VirtualMachineRunCommandsListByVirtualMachineNextOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the listByVirtualMachineNext operation. */
export type VirtualMachineRunCommandsListByVirtualMachineNextResponse = VirtualMachineRunCommandsListResult;

/** Optional parameters. */
export interface VirtualMachineScaleSetVMsRunCommandOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the runCommand operation. */
export type VirtualMachineScaleSetVMsRunCommandResponse = RunCommandResult;

/** Optional parameters. */
export interface VirtualMachineScaleSetVMRunCommandsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachineScaleSetVMRunCommandsCreateOrUpdateResponse = VirtualMachineRunCommand;

/** Optional parameters. */
export interface VirtualMachineScaleSetVMRunCommandsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualMachineScaleSetVMRunCommandsUpdateResponse = VirtualMachineRunCommand;

/** Optional parameters. */
export interface VirtualMachineScaleSetVMRunCommandsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachineScaleSetVMRunCommandsGetOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type VirtualMachineScaleSetVMRunCommandsGetResponse = VirtualMachineRunCommand;

/** Optional parameters. */
export interface VirtualMachineScaleSetVMRunCommandsListOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the list operation. */
export type VirtualMachineScaleSetVMRunCommandsListResponse = VirtualMachineRunCommandsListResult;

/** Optional parameters. */
export interface VirtualMachineScaleSetVMRunCommandsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the listNext operation. */
export type VirtualMachineScaleSetVMRunCommandsListNextResponse = VirtualMachineRunCommandsListResult;

/** Optional parameters. */
export interface ComputeManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
