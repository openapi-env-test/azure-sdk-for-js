/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const AvailableCluster: msRest.CompositeMapper = {
  serializedName: "AvailableCluster",
  type: {
    name: "Composite",
    className: "AvailableCluster",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableClustersList: msRest.CompositeMapper = {
  serializedName: "AvailableClustersList",
  type: {
    name: "Composite",
    className: "AvailableClustersList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableCluster"
            }
          }
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterSku: msRest.CompositeMapper = {
  serializedName: "ClusterSku",
  type: {
    name: "Composite",
    className: "ClusterSku",
    modelProperties: {
      name: {
        required: true,
        isConstant: true,
        serializedName: "name",
        defaultValue: 'Dedicated',
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        constraints: {
          InclusiveMaximum: 32,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Cluster: msRest.CompositeMapper = {
  serializedName: "Cluster",
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ClusterSku"
        }
      },
      created: {
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "String"
        }
      },
      updated: {
        readOnly: true,
        serializedName: "properties.updated",
        type: {
          name: "String"
        }
      },
      metricId: {
        readOnly: true,
        serializedName: "properties.metricId",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EHNamespaceIdContainer: msRest.CompositeMapper = {
  serializedName: "EHNamespaceIdContainer",
  type: {
    name: "Composite",
    className: "EHNamespaceIdContainer",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EHNamespaceIdListResult: msRest.CompositeMapper = {
  serializedName: "EHNamespaceIdListResult",
  type: {
    name: "Composite",
    className: "EHNamespaceIdListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EHNamespaceIdContainer"
            }
          }
        }
      }
    }
  }
};

export const IpFilterRule: msRest.CompositeMapper = {
  serializedName: "IpFilterRule",
  type: {
    name: "Composite",
    className: "IpFilterRule",
    modelProperties: {
      ...Resource.type.modelProperties,
      ipMask: {
        serializedName: "properties.ipMask",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "properties.action",
        type: {
          name: "String"
        }
      },
      filterName: {
        serializedName: "properties.filterName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        constraints: {
          InclusiveMaximum: 20,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Identity: msRest.CompositeMapper = {
  serializedName: "Identity",
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        defaultValue: 'SystemAssigned',
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned"
          ]
        }
      }
    }
  }
};

export const KeyVaultProperties: msRest.CompositeMapper = {
  serializedName: "KeyVaultProperties",
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Encryption: msRest.CompositeMapper = {
  serializedName: "Encryption",
  type: {
    name: "Composite",
    className: "Encryption",
    modelProperties: {
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      keySource: {
        serializedName: "keySource",
        defaultValue: 'Microsoft.KeyVault',
        type: {
          name: "Enum",
          allowedValues: [
            "Microsoft.KeyVault"
          ]
        }
      }
    }
  }
};

export const EHNamespace: msRest.CompositeMapper = {
  serializedName: "EHNamespace",
  type: {
    name: "Composite",
    className: "EHNamespace",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      createdAt: {
        readOnly: true,
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime"
        }
      },
      updatedAt: {
        readOnly: true,
        serializedName: "properties.updatedAt",
        type: {
          name: "DateTime"
        }
      },
      serviceBusEndpoint: {
        readOnly: true,
        serializedName: "properties.serviceBusEndpoint",
        type: {
          name: "String"
        }
      },
      clusterArmId: {
        serializedName: "properties.clusterArmId",
        type: {
          name: "String"
        }
      },
      metricId: {
        readOnly: true,
        serializedName: "properties.metricId",
        type: {
          name: "String"
        }
      },
      isAutoInflateEnabled: {
        serializedName: "properties.isAutoInflateEnabled",
        type: {
          name: "Boolean"
        }
      },
      maximumThroughputUnits: {
        serializedName: "properties.maximumThroughputUnits",
        constraints: {
          InclusiveMaximum: 20,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      kafkaEnabled: {
        serializedName: "properties.kafkaEnabled",
        type: {
          name: "Boolean"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "Encryption"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const ClusterQuotaConfigurationProperties: msRest.CompositeMapper = {
  serializedName: "ClusterQuotaConfigurationProperties",
  type: {
    name: "Composite",
    className: "ClusterQuotaConfigurationProperties",
    modelProperties: {
      settings: {
        serializedName: "settings",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetworkRule: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      ...Resource.type.modelProperties,
      virtualNetworkSubnetId: {
        serializedName: "properties.virtualNetworkSubnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Subnet: msRest.CompositeMapper = {
  serializedName: "Subnet",
  type: {
    name: "Composite",
    className: "Subnet",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NWRuleSetIpRules: msRest.CompositeMapper = {
  serializedName: "NWRuleSetIpRules",
  type: {
    name: "Composite",
    className: "NWRuleSetIpRules",
    modelProperties: {
      ipMask: {
        serializedName: "ipMask",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NWRuleSetVirtualNetworkRules: msRest.CompositeMapper = {
  serializedName: "NWRuleSetVirtualNetworkRules",
  type: {
    name: "Composite",
    className: "NWRuleSetVirtualNetworkRules",
    modelProperties: {
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "Subnet"
        }
      },
      ignoreMissingVnetServiceEndpoint: {
        serializedName: "ignoreMissingVnetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NetworkRuleSet: msRest.CompositeMapper = {
  serializedName: "NetworkRuleSet",
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      ...Resource.type.modelProperties,
      defaultAction: {
        serializedName: "properties.defaultAction",
        type: {
          name: "String"
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NWRuleSetVirtualNetworkRules"
            }
          }
        }
      },
      ipRules: {
        serializedName: "properties.ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NWRuleSetIpRules"
            }
          }
        }
      }
    }
  }
};

export const ClusterListResult: msRest.CompositeMapper = {
  serializedName: "ClusterListResult",
  type: {
    name: "Composite",
    className: "ClusterListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cluster"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpFilterRuleListResult: msRest.CompositeMapper = {
  serializedName: "IpFilterRuleListResult",
  type: {
    name: "Composite",
    className: "IpFilterRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpFilterRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EHNamespaceListResult: msRest.CompositeMapper = {
  serializedName: "EHNamespaceListResult",
  type: {
    name: "Composite",
    className: "EHNamespaceListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EHNamespace"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRuleListResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRuleListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
