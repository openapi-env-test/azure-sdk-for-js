/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  PolicyEvent,
  PolicyEventsResourceType,
  PolicyEventsListQueryResultsForManagementGroupOptionalParams,
  PolicyEventsListQueryResultsForSubscriptionOptionalParams,
  PolicyEventsListQueryResultsForResourceGroupOptionalParams,
  PolicyEventsListQueryResultsForResourceOptionalParams,
  PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams,
  PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams,
  PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams,
  PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PolicyEvents. */
export interface PolicyEvents {
  /**
   * Queries policy events for the resources under the management group.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param managementGroupName Management group name.
   * @param options The options parameters.
   */
  listQueryResultsForManagementGroup(
    policyEventsResource: PolicyEventsResourceType,
    managementGroupName: string,
    options?: PolicyEventsListQueryResultsForManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent>;
  /**
   * Queries policy events for the resources under the subscription.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param options The options parameters.
   */
  listQueryResultsForSubscription(
    policyEventsResource: PolicyEventsResourceType,
    options?: PolicyEventsListQueryResultsForSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent>;
  /**
   * Queries policy events for the resources under the resource group.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listQueryResultsForResourceGroup(
    policyEventsResource: PolicyEventsResourceType,
    resourceGroupName: string,
    options?: PolicyEventsListQueryResultsForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent>;
  /**
   * Queries policy events for the resource.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param resourceId Resource ID.
   * @param options The options parameters.
   */
  listQueryResultsForResource(
    policyEventsResource: PolicyEventsResourceType,
    resourceId: string,
    options?: PolicyEventsListQueryResultsForResourceOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent>;
  /**
   * Queries policy events for the subscription level policy set definition.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param policySetDefinitionName Policy set definition name.
   * @param options The options parameters.
   */
  listQueryResultsForPolicySetDefinition(
    policyEventsResource: PolicyEventsResourceType,
    policySetDefinitionName: string,
    options?: PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent>;
  /**
   * Queries policy events for the subscription level policy definition.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param policyDefinitionName Policy definition name.
   * @param options The options parameters.
   */
  listQueryResultsForPolicyDefinition(
    policyEventsResource: PolicyEventsResourceType,
    policyDefinitionName: string,
    options?: PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent>;
  /**
   * Queries policy events for the subscription level policy assignment.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  listQueryResultsForSubscriptionLevelPolicyAssignment(
    policyEventsResource: PolicyEventsResourceType,
    policyAssignmentName: string,
    options?: PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent>;
  /**
   * Queries policy events for the resource group level policy assignment.
   * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only
   *                             "default" is allowed.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  listQueryResultsForResourceGroupLevelPolicyAssignment(
    policyEventsResource: PolicyEventsResourceType,
    resourceGroupName: string,
    policyAssignmentName: string,
    options?: PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams
  ): PagedAsyncIterableIterator<PolicyEvent>;
}
