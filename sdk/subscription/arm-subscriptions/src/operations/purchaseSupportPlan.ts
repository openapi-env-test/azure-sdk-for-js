/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/purchaseSupportPlanMappers";
import * as Parameters from "../models/parameters";
import { SubscriptionClientContext } from "../subscriptionClientContext";

/** Class representing a PurchaseSupportPlan. */
export class PurchaseSupportPlan {
  private readonly client: SubscriptionClientContext;

  /**
   * Create a PurchaseSupportPlan.
   * @param {SubscriptionClientContext} client Reference to the service client.
   */
  constructor(client: SubscriptionClientContext) {
    this.client = client;
  }

  /**
   * The operation to purchase/convert/cancel support plan.
   * @param subscriptionId Subscription Id.
   * @param body SupportPlan Name
   * @param [options] The optional parameters
   * @returns Promise<Models.PurchaseSupportPlanPostResponse>
   */
  post(subscriptionId: string, body: Models.SupportPlanName, options?: msRest.RequestOptionsBase): Promise<Models.PurchaseSupportPlanPostResponse> {
    return this.beginPost(subscriptionId,body,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PurchaseSupportPlanPostResponse>;
  }

  /**
   * The operation to purchase/convert/cancel support plan.
   * @param subscriptionId Subscription Id.
   * @param body SupportPlan Name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPost(subscriptionId: string, body: Models.SupportPlanName, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        subscriptionId,
        body,
        options
      },
      beginPostOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const beginPostOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Subscription/PurchaseSupport",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.SupportPlanName,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PurchaseSupportResponseResult,
      headersMapper: Mappers.PurchaseSupportPlanPostHeaders
    },
    202: {
      headersMapper: Mappers.PurchaseSupportPlanPostHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
