/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { SecurityInsightsContext } from "./securityInsightsContext";


class SecurityInsights extends SecurityInsightsContext {
  // Operation groups
  operations: operations.Operations;
  alertRules: operations.AlertRules;
  actions: operations.Actions;
  alertRuleTemplates: operations.AlertRuleTemplates;
  cases: operations.Cases;
  comments: operations.Comments;
  caseComments: operations.CaseComments;
  bookmarks: operations.Bookmarks;
  caseRelations: operations.CaseRelations;
  bookmarkRelations: operations.BookmarkRelations;
  bookmark: operations.BookmarkOperations;
  dataConnectors: operations.DataConnectors;
  dataConnectorsCheckRequirements: operations.DataConnectorsCheckRequirementsOperations;
  entities: operations.Entities;
  entitiesGetTimeline: operations.EntitiesGetTimeline;
  entitiesRelations: operations.EntitiesRelations;
  entityRelations: operations.EntityRelations;
  officeConsents: operations.OfficeConsents;
  productSettings: operations.ProductSettings;
  casesAggregations: operations.CasesAggregations;
  entityQueries: operations.EntityQueries;
  incidents: operations.Incidents;
  incidentComments: operations.IncidentComments;
  incidentRelations: operations.IncidentRelations;
  watchlists: operations.Watchlists;
  watchlistItem: operations.WatchlistItemOperations;
  threatIntelligenceIndicator: operations.ThreatIntelligenceIndicator;
  threatIntelligenceIndicators: operations.ThreatIntelligenceIndicators;
  threatIntelligenceIndicatorMetrics: operations.ThreatIntelligenceIndicatorMetrics;

  /**
   * Initializes a new instance of the SecurityInsights class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId Azure subscription ID
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.SecurityInsightsOptions) {
    super(credentials, subscriptionId, options);
    this.operations = new operations.Operations(this);
    this.alertRules = new operations.AlertRules(this);
    this.actions = new operations.Actions(this);
    this.alertRuleTemplates = new operations.AlertRuleTemplates(this);
    this.cases = new operations.Cases(this);
    this.comments = new operations.Comments(this);
    this.caseComments = new operations.CaseComments(this);
    this.bookmarks = new operations.Bookmarks(this);
    this.caseRelations = new operations.CaseRelations(this);
    this.bookmarkRelations = new operations.BookmarkRelations(this);
    this.bookmark = new operations.BookmarkOperations(this);
    this.dataConnectors = new operations.DataConnectors(this);
    this.dataConnectorsCheckRequirements = new operations.DataConnectorsCheckRequirementsOperations(this);
    this.entities = new operations.Entities(this);
    this.entitiesGetTimeline = new operations.EntitiesGetTimeline(this);
    this.entitiesRelations = new operations.EntitiesRelations(this);
    this.entityRelations = new operations.EntityRelations(this);
    this.officeConsents = new operations.OfficeConsents(this);
    this.productSettings = new operations.ProductSettings(this);
    this.casesAggregations = new operations.CasesAggregations(this);
    this.entityQueries = new operations.EntityQueries(this);
    this.incidents = new operations.Incidents(this);
    this.incidentComments = new operations.IncidentComments(this);
    this.incidentRelations = new operations.IncidentRelations(this);
    this.watchlists = new operations.Watchlists(this);
    this.watchlistItem = new operations.WatchlistItemOperations(this);
    this.threatIntelligenceIndicator = new operations.ThreatIntelligenceIndicator(this);
    this.threatIntelligenceIndicators = new operations.ThreatIntelligenceIndicators(this);
    this.threatIntelligenceIndicatorMetrics = new operations.ThreatIntelligenceIndicatorMetrics(this);
  }
}

// Operation Specifications

export {
  SecurityInsights,
  SecurityInsightsContext,
  Models as SecurityInsightsModels,
  Mappers as SecurityInsightsMappers
};
export * from "./operations";
