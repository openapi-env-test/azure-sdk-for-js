/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const DataConnectorDataTypeCommon: msRest.CompositeMapper = {
  serializedName: "DataConnectorDataTypeCommon",
  type: {
    name: "Composite",
    className: "DataConnectorDataTypeCommon",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertsDataTypeOfDataConnectorAlerts: msRest.CompositeMapper = {
  serializedName: "AlertsDataTypeOfDataConnector_alerts",
  type: {
    name: "Composite",
    className: "AlertsDataTypeOfDataConnectorAlerts",
    modelProperties: {
      ...DataConnectorDataTypeCommon.type.modelProperties
    }
  }
};

export const AlertsDataTypeOfDataConnector: msRest.CompositeMapper = {
  serializedName: "AlertsDataTypeOfDataConnector",
  type: {
    name: "Composite",
    className: "AlertsDataTypeOfDataConnector",
    modelProperties: {
      alerts: {
        serializedName: "alerts",
        type: {
          name: "Composite",
          className: "AlertsDataTypeOfDataConnectorAlerts"
        }
      }
    }
  }
};

export const DataConnector: msRest.CompositeMapper = {
  serializedName: "DataConnector",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "DataConnector",
    className: "DataConnector",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AADDataConnector: msRest.CompositeMapper = {
  serializedName: "AzureActiveDirectory",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "AADDataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "AlertsDataTypeOfDataConnector"
        }
      }
    }
  }
};

export const DataConnectorsCheckRequirements: msRest.CompositeMapper = {
  serializedName: "DataConnectorsCheckRequirements",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "DataConnectorsCheckRequirements",
    className: "DataConnectorsCheckRequirements",
    modelProperties: {
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AADCheckRequirements: msRest.CompositeMapper = {
  serializedName: "AzureActiveDirectory",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
    uberParent: "DataConnectorsCheckRequirements",
    className: "AADCheckRequirements",
    modelProperties: {
      ...DataConnectorsCheckRequirements.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AATPDataConnector: msRest.CompositeMapper = {
  serializedName: "AzureAdvancedThreatProtection",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "AATPDataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "AlertsDataTypeOfDataConnector"
        }
      }
    }
  }
};

export const AATPCheckRequirements: msRest.CompositeMapper = {
  serializedName: "AzureAdvancedThreatProtection",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
    uberParent: "DataConnectorsCheckRequirements",
    className: "AATPCheckRequirements",
    modelProperties: {
      ...DataConnectorsCheckRequirements.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ASCDataConnector: msRest.CompositeMapper = {
  serializedName: "AzureSecurityCenter",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "ASCDataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "AlertsDataTypeOfDataConnector"
        }
      },
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ASCCheckRequirements: msRest.CompositeMapper = {
  serializedName: "AzureSecurityCenter",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
    uberParent: "DataConnectorsCheckRequirements",
    className: "ASCCheckRequirements",
    modelProperties: {
      ...DataConnectorsCheckRequirements.type.modelProperties,
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Entity: msRest.CompositeMapper = {
  serializedName: "Entity",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "Entity",
    className: "Entity",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountEntity: msRest.CompositeMapper = {
  serializedName: "Account",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "AccountEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      aadTenantId: {
        readOnly: true,
        serializedName: "properties.aadTenantId",
        type: {
          name: "String"
        }
      },
      aadUserId: {
        readOnly: true,
        serializedName: "properties.aadUserId",
        type: {
          name: "String"
        }
      },
      accountName: {
        readOnly: true,
        serializedName: "properties.accountName",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      hostEntityId: {
        readOnly: true,
        serializedName: "properties.hostEntityId",
        type: {
          name: "String"
        }
      },
      isDomainJoined: {
        readOnly: true,
        serializedName: "properties.isDomainJoined",
        type: {
          name: "Boolean"
        }
      },
      ntDomain: {
        readOnly: true,
        serializedName: "properties.ntDomain",
        type: {
          name: "String"
        }
      },
      objectGuid: {
        readOnly: true,
        serializedName: "properties.objectGuid",
        type: {
          name: "Uuid"
        }
      },
      puid: {
        readOnly: true,
        serializedName: "properties.puid",
        type: {
          name: "String"
        }
      },
      sid: {
        readOnly: true,
        serializedName: "properties.sid",
        type: {
          name: "String"
        }
      },
      upnSuffix: {
        readOnly: true,
        serializedName: "properties.upnSuffix",
        type: {
          name: "String"
        }
      },
      dnsDomain: {
        readOnly: true,
        serializedName: "properties.dnsDomain",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceWithEtag: msRest.CompositeMapper = {
  serializedName: "ResourceWithEtag",
  type: {
    name: "Composite",
    className: "ResourceWithEtag",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActionRequest: msRest.CompositeMapper = {
  serializedName: "ActionRequest",
  type: {
    name: "Composite",
    className: "ActionRequest",
    modelProperties: {
      ...ResourceWithEtag.type.modelProperties,
      logicAppResourceId: {
        serializedName: "properties.logicAppResourceId",
        type: {
          name: "String"
        }
      },
      triggerUri: {
        serializedName: "properties.triggerUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActionPropertiesBase: msRest.CompositeMapper = {
  serializedName: "ActionPropertiesBase",
  type: {
    name: "Composite",
    className: "ActionPropertiesBase",
    modelProperties: {
      logicAppResourceId: {
        serializedName: "logicAppResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActionResponse: msRest.CompositeMapper = {
  serializedName: "ActionResponse",
  type: {
    name: "Composite",
    className: "ActionResponse",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      logicAppResourceId: {
        serializedName: "properties.logicAppResourceId",
        type: {
          name: "String"
        }
      },
      workflowId: {
        serializedName: "properties.workflowId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Aggregations: msRest.CompositeMapper = {
  serializedName: "Aggregations",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "Aggregations",
    className: "Aggregations",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AggregationsKind: msRest.CompositeMapper = {
  serializedName: "AggregationsKind",
  type: {
    name: "Composite",
    className: "AggregationsKind",
    modelProperties: {
      kind: {
        required: true,
        isConstant: true,
        serializedName: "kind",
        defaultValue: 'CasesAggregation',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertRule: msRest.CompositeMapper = {
  serializedName: "AlertRule",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "AlertRule",
    className: "AlertRule",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertRuleKind1: msRest.CompositeMapper = {
  serializedName: "AlertRuleKind",
  type: {
    name: "Composite",
    className: "AlertRuleKind1",
    modelProperties: {
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertRuleTemplate: msRest.CompositeMapper = {
  serializedName: "AlertRuleTemplate",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "AlertRuleTemplate",
    className: "AlertRuleTemplate",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertRuleTemplateDataSource: msRest.CompositeMapper = {
  serializedName: "AlertRuleTemplateDataSource",
  type: {
    name: "Composite",
    className: "AlertRuleTemplateDataSource",
    modelProperties: {
      connectorId: {
        serializedName: "connectorId",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "dataTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AlertRuleTemplatePropertiesBase: msRest.CompositeMapper = {
  serializedName: "AlertRuleTemplatePropertiesBase",
  type: {
    name: "Composite",
    className: "AlertRuleTemplatePropertiesBase",
    modelProperties: {
      alertRulesCreatedByTemplateCount: {
        serializedName: "alertRulesCreatedByTemplateCount",
        type: {
          name: "Number"
        }
      },
      lastUpdatedDateUTC: {
        readOnly: true,
        serializedName: "lastUpdatedDateUTC",
        type: {
          name: "DateTime"
        }
      },
      createdDateUTC: {
        readOnly: true,
        serializedName: "createdDateUTC",
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      requiredDataConnectors: {
        serializedName: "requiredDataConnectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertRuleTemplateDataSource"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AwsCloudTrailDataConnectorDataTypesLogs: msRest.CompositeMapper = {
  serializedName: "AwsCloudTrailDataConnectorDataTypes_logs",
  type: {
    name: "Composite",
    className: "AwsCloudTrailDataConnectorDataTypesLogs",
    modelProperties: {
      ...DataConnectorDataTypeCommon.type.modelProperties
    }
  }
};

export const AwsCloudTrailDataConnectorDataTypes: msRest.CompositeMapper = {
  serializedName: "AwsCloudTrailDataConnectorDataTypes",
  type: {
    name: "Composite",
    className: "AwsCloudTrailDataConnectorDataTypes",
    modelProperties: {
      logs: {
        serializedName: "logs",
        type: {
          name: "Composite",
          className: "AwsCloudTrailDataConnectorDataTypesLogs"
        }
      }
    }
  }
};

export const AwsCloudTrailDataConnector: msRest.CompositeMapper = {
  serializedName: "AmazonWebServicesCloudTrail",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "AwsCloudTrailDataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      awsRoleArn: {
        serializedName: "properties.awsRoleArn",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "AwsCloudTrailDataConnectorDataTypes"
        }
      }
    }
  }
};

export const AwsCloudTrailCheckRequirements: msRest.CompositeMapper = {
  serializedName: "AmazonWebServicesCloudTrail",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
    uberParent: "DataConnectorsCheckRequirements",
    className: "AwsCloudTrailCheckRequirements",
    modelProperties: {
      ...DataConnectorsCheckRequirements.type.modelProperties
    }
  }
};

export const AzureResourceEntity: msRest.CompositeMapper = {
  serializedName: "AzureResource",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "AzureResourceEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      resourceId: {
        readOnly: true,
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        readOnly: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RelationBase: msRest.CompositeMapper = {
  serializedName: "RelationBase",
  type: {
    name: "Composite",
    className: "RelationBase",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CaseRelation: msRest.CompositeMapper = {
  serializedName: "CaseRelation",
  type: {
    name: "Composite",
    className: "CaseRelation",
    modelProperties: {
      ...RelationBase.type.modelProperties,
      relationName: {
        required: true,
        serializedName: "properties.relationName",
        type: {
          name: "String"
        }
      },
      bookmarkId: {
        required: true,
        serializedName: "properties.bookmarkId",
        type: {
          name: "String"
        }
      },
      caseIdentifier: {
        required: true,
        serializedName: "properties.caseIdentifier",
        type: {
          name: "String"
        }
      },
      bookmarkName: {
        serializedName: "properties.bookmarkName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RelationNode: msRest.CompositeMapper = {
  serializedName: "RelationNode",
  type: {
    name: "Composite",
    className: "RelationNode",
    modelProperties: {
      relationNodeId: {
        serializedName: "relationNodeId",
        type: {
          name: "String"
        }
      },
      relationNodeKind: {
        readOnly: true,
        serializedName: "relationNodeKind",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      relationAdditionalProperties: {
        serializedName: "relationAdditionalProperties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RelationsModelInput: msRest.CompositeMapper = {
  serializedName: "RelationsModelInput",
  type: {
    name: "Composite",
    className: "RelationsModelInput",
    modelProperties: {
      ...RelationBase.type.modelProperties,
      relationName: {
        serializedName: "properties.relationName",
        type: {
          name: "String"
        }
      },
      sourceRelationNode: {
        serializedName: "properties.sourceRelationNode",
        type: {
          name: "Composite",
          className: "RelationNode"
        }
      },
      targetRelationNode: {
        serializedName: "properties.targetRelationNode",
        type: {
          name: "Composite",
          className: "RelationNode"
        }
      }
    }
  }
};

export const UserInfo: msRest.CompositeMapper = {
  serializedName: "UserInfo",
  type: {
    name: "Composite",
    className: "UserInfo",
    modelProperties: {
      email: {
        readOnly: true,
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      objectId: {
        nullable: true,
        serializedName: "objectId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const IncidentInfo: msRest.CompositeMapper = {
  serializedName: "IncidentInfo",
  type: {
    name: "Composite",
    className: "IncidentInfo",
    modelProperties: {
      incidentId: {
        required: true,
        serializedName: "incidentId",
        type: {
          name: "String"
        }
      },
      severity: {
        required: true,
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      title: {
        required: true,
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      relationName: {
        required: true,
        serializedName: "relationName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Bookmark: msRest.CompositeMapper = {
  serializedName: "Bookmark",
  type: {
    name: "Composite",
    className: "Bookmark",
    modelProperties: {
      ...ResourceWithEtag.type.modelProperties,
      created: {
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      createdBy: {
        serializedName: "properties.createdBy",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      },
      displayName: {
        required: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      labels: {
        serializedName: "properties.labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      notes: {
        serializedName: "properties.notes",
        type: {
          name: "String"
        }
      },
      query: {
        required: true,
        serializedName: "properties.query",
        type: {
          name: "String"
        }
      },
      queryResult: {
        serializedName: "properties.queryResult",
        type: {
          name: "String"
        }
      },
      updated: {
        serializedName: "properties.updated",
        type: {
          name: "DateTime"
        }
      },
      updatedBy: {
        serializedName: "properties.updatedBy",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      },
      incidentInfo: {
        serializedName: "properties.incidentInfo",
        type: {
          name: "Composite",
          className: "IncidentInfo"
        }
      }
    }
  }
};

export const BookmarkExpandParameters: msRest.CompositeMapper = {
  serializedName: "BookmarkExpandParameters",
  type: {
    name: "Composite",
    className: "BookmarkExpandParameters",
    modelProperties: {
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      expansionId: {
        serializedName: "expansionId",
        type: {
          name: "Uuid"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ExpansionResultAggregation: msRest.CompositeMapper = {
  serializedName: "ExpansionResultAggregation",
  type: {
    name: "Composite",
    className: "ExpansionResultAggregation",
    modelProperties: {
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      count: {
        required: true,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      entityKind: {
        required: true,
        serializedName: "entityKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpansionResultsMetadata: msRest.CompositeMapper = {
  serializedName: "ExpansionResultsMetadata",
  type: {
    name: "Composite",
    className: "ExpansionResultsMetadata",
    modelProperties: {
      aggregations: {
        serializedName: "aggregations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpansionResultAggregation"
            }
          }
        }
      }
    }
  }
};

export const BookmarkExpandResponseValue: msRest.CompositeMapper = {
  serializedName: "BookmarkExpandResponse_value",
  type: {
    name: "Composite",
    className: "BookmarkExpandResponseValue",
    modelProperties: {
      entities: {
        serializedName: "entities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Entity"
            }
          }
        }
      }
    }
  }
};

export const BookmarkExpandResponse: msRest.CompositeMapper = {
  serializedName: "BookmarkExpandResponse",
  type: {
    name: "Composite",
    className: "BookmarkExpandResponse",
    modelProperties: {
      metaData: {
        serializedName: "metaData",
        type: {
          name: "Composite",
          className: "ExpansionResultsMetadata"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "BookmarkExpandResponseValue"
        }
      }
    }
  }
};

export const CaseModel: msRest.CompositeMapper = {
  serializedName: "Case",
  type: {
    name: "Composite",
    className: "CaseModel",
    modelProperties: {
      ...ResourceWithEtag.type.modelProperties,
      caseNumber: {
        readOnly: true,
        serializedName: "properties.caseNumber",
        type: {
          name: "Number"
        }
      },
      closeReason: {
        serializedName: "properties.closeReason",
        type: {
          name: "String"
        }
      },
      closedReasonText: {
        serializedName: "properties.closedReasonText",
        type: {
          name: "String"
        }
      },
      createdTimeUtc: {
        readOnly: true,
        serializedName: "properties.createdTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      endTimeUtc: {
        serializedName: "properties.endTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      labels: {
        serializedName: "properties.labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      lastComment: {
        readOnly: true,
        serializedName: "properties.lastComment",
        type: {
          name: "String"
        }
      },
      lastUpdatedTimeUtc: {
        readOnly: true,
        serializedName: "properties.lastUpdatedTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      owner: {
        serializedName: "properties.owner",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      },
      relatedAlertIds: {
        readOnly: true,
        serializedName: "properties.relatedAlertIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tactics: {
        readOnly: true,
        serializedName: "properties.tactics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      severity: {
        required: true,
        serializedName: "properties.severity",
        type: {
          name: "String"
        }
      },
      startTimeUtc: {
        required: true,
        serializedName: "properties.startTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      title: {
        required: true,
        serializedName: "properties.title",
        type: {
          name: "String"
        }
      },
      totalComments: {
        readOnly: true,
        serializedName: "properties.totalComments",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CaseComment: msRest.CompositeMapper = {
  serializedName: "CaseComment",
  type: {
    name: "Composite",
    className: "CaseComment",
    modelProperties: {
      ...Resource.type.modelProperties,
      createdTimeUtc: {
        readOnly: true,
        serializedName: "properties.createdTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      message: {
        required: true,
        serializedName: "properties.message",
        type: {
          name: "String"
        }
      },
      userInfo: {
        readOnly: true,
        serializedName: "properties.userInfo",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      }
    }
  }
};

export const CasesAggregationBySeverityProperties: msRest.CompositeMapper = {
  serializedName: "CasesAggregationBySeverityProperties",
  type: {
    name: "Composite",
    className: "CasesAggregationBySeverityProperties",
    modelProperties: {
      totalCriticalSeverity: {
        readOnly: true,
        serializedName: "totalCriticalSeverity",
        type: {
          name: "Number"
        }
      },
      totalHighSeverity: {
        readOnly: true,
        serializedName: "totalHighSeverity",
        type: {
          name: "Number"
        }
      },
      totalInformationalSeverity: {
        readOnly: true,
        serializedName: "totalInformationalSeverity",
        type: {
          name: "Number"
        }
      },
      totalLowSeverity: {
        readOnly: true,
        serializedName: "totalLowSeverity",
        type: {
          name: "Number"
        }
      },
      totalMediumSeverity: {
        readOnly: true,
        serializedName: "totalMediumSeverity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CasesAggregationByStatusProperties: msRest.CompositeMapper = {
  serializedName: "CasesAggregationByStatusProperties",
  type: {
    name: "Composite",
    className: "CasesAggregationByStatusProperties",
    modelProperties: {
      totalDismissedStatus: {
        readOnly: true,
        serializedName: "totalDismissedStatus",
        type: {
          name: "Number"
        }
      },
      totalInProgressStatus: {
        readOnly: true,
        serializedName: "totalInProgressStatus",
        type: {
          name: "Number"
        }
      },
      totalNewStatus: {
        readOnly: true,
        serializedName: "totalNewStatus",
        type: {
          name: "Number"
        }
      },
      totalResolvedStatus: {
        readOnly: true,
        serializedName: "totalResolvedStatus",
        type: {
          name: "Number"
        }
      },
      totalFalsePositiveStatus: {
        readOnly: true,
        serializedName: "totalFalsePositiveStatus",
        type: {
          name: "Number"
        }
      },
      totalTruePositiveStatus: {
        readOnly: true,
        serializedName: "totalTruePositiveStatus",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CasesAggregation: msRest.CompositeMapper = {
  serializedName: "CasesAggregation",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Aggregations.type.polymorphicDiscriminator,
    uberParent: "Aggregations",
    className: "CasesAggregation",
    modelProperties: {
      ...Aggregations.type.modelProperties,
      aggregationBySeverity: {
        serializedName: "properties.aggregationBySeverity",
        type: {
          name: "Composite",
          className: "CasesAggregationBySeverityProperties"
        }
      },
      aggregationByStatus: {
        serializedName: "properties.aggregationByStatus",
        type: {
          name: "Composite",
          className: "CasesAggregationByStatusProperties"
        }
      }
    }
  }
};

export const ClientInfo: msRest.CompositeMapper = {
  serializedName: "ClientInfo",
  type: {
    name: "Composite",
    className: "ClientInfo",
    modelProperties: {
      email: {
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "Uuid"
        }
      },
      userPrincipalName: {
        serializedName: "userPrincipalName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudApplicationEntity: msRest.CompositeMapper = {
  serializedName: "CloudApplication",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "CloudApplicationEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      appId: {
        readOnly: true,
        serializedName: "properties.appId",
        type: {
          name: "Number"
        }
      },
      appName: {
        readOnly: true,
        serializedName: "properties.appName",
        type: {
          name: "String"
        }
      },
      instanceName: {
        readOnly: true,
        serializedName: "properties.instanceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectorKind1: msRest.CompositeMapper = {
  serializedName: "DataConnectorKind",
  type: {
    name: "Composite",
    className: "DataConnectorKind1",
    modelProperties: {
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectorRequirementsState: msRest.CompositeMapper = {
  serializedName: "DataConnectorRequirementsState",
  type: {
    name: "Composite",
    className: "DataConnectorRequirementsState",
    modelProperties: {
      authorizationState: {
        serializedName: "authorizationState",
        type: {
          name: "String"
        }
      },
      licenseState: {
        serializedName: "licenseState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectorTenantId: msRest.CompositeMapper = {
  serializedName: "DataConnectorTenantId",
  type: {
    name: "Composite",
    className: "DataConnectorTenantId",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectorWithAlertsProperties: msRest.CompositeMapper = {
  serializedName: "DataConnectorWithAlertsProperties",
  type: {
    name: "Composite",
    className: "DataConnectorWithAlertsProperties",
    modelProperties: {
      dataTypes: {
        serializedName: "dataTypes",
        type: {
          name: "Composite",
          className: "AlertsDataTypeOfDataConnector"
        }
      }
    }
  }
};

export const DnsEntity: msRest.CompositeMapper = {
  serializedName: "DnsResolution",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "DnsEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      dnsServerIpEntityId: {
        readOnly: true,
        serializedName: "properties.dnsServerIpEntityId",
        type: {
          name: "String"
        }
      },
      domainName: {
        readOnly: true,
        serializedName: "properties.domainName",
        type: {
          name: "String"
        }
      },
      hostIpAddressEntityId: {
        readOnly: true,
        serializedName: "properties.hostIpAddressEntityId",
        type: {
          name: "String"
        }
      },
      ipAddressEntityIds: {
        readOnly: true,
        serializedName: "properties.ipAddressEntityIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Dynamics365DataConnectorDataTypesDynamics365CdsActivities: msRest.CompositeMapper = {
  serializedName: "Dynamics365DataConnectorDataTypes_dynamics365CdsActivities",
  type: {
    name: "Composite",
    className: "Dynamics365DataConnectorDataTypesDynamics365CdsActivities",
    modelProperties: {
      ...DataConnectorDataTypeCommon.type.modelProperties
    }
  }
};

export const Dynamics365DataConnectorDataTypes: msRest.CompositeMapper = {
  serializedName: "Dynamics365DataConnectorDataTypes",
  type: {
    name: "Composite",
    className: "Dynamics365DataConnectorDataTypes",
    modelProperties: {
      dynamics365CdsActivities: {
        serializedName: "dynamics365CdsActivities",
        type: {
          name: "Composite",
          className: "Dynamics365DataConnectorDataTypesDynamics365CdsActivities"
        }
      }
    }
  }
};

export const Dynamics365DataConnector: msRest.CompositeMapper = {
  serializedName: "Dynamics365",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "Dynamics365DataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "Dynamics365DataConnectorDataTypes"
        }
      }
    }
  }
};

export const Dynamics365CheckRequirements: msRest.CompositeMapper = {
  serializedName: "Dynamics365",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
    uberParent: "DataConnectorsCheckRequirements",
    className: "Dynamics365CheckRequirements",
    modelProperties: {
      ...DataConnectorsCheckRequirements.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityCommonProperties: msRest.CompositeMapper = {
  serializedName: "EntityCommonProperties",
  type: {
    name: "Composite",
    className: "EntityCommonProperties",
    modelProperties: {
      additionalData: {
        readOnly: true,
        serializedName: "additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityExpandParameters: msRest.CompositeMapper = {
  serializedName: "EntityExpandParameters",
  type: {
    name: "Composite",
    className: "EntityExpandParameters",
    modelProperties: {
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      expansionId: {
        serializedName: "expansionId",
        type: {
          name: "Uuid"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EntityTimelineParameters: msRest.CompositeMapper = {
  serializedName: "EntityTimelineParameters",
  type: {
    name: "Composite",
    className: "EntityTimelineParameters",
    modelProperties: {
      kinds: {
        serializedName: "kinds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        required: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      numberOfBucket: {
        serializedName: "numberOfBucket",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EntityExpandResponseValue: msRest.CompositeMapper = {
  serializedName: "EntityExpandResponse_value",
  type: {
    name: "Composite",
    className: "EntityExpandResponseValue",
    modelProperties: {
      entities: {
        serializedName: "entities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Entity"
            }
          }
        }
      }
    }
  }
};

export const EntityExpandResponse: msRest.CompositeMapper = {
  serializedName: "EntityExpandResponse",
  type: {
    name: "Composite",
    className: "EntityExpandResponse",
    modelProperties: {
      metaData: {
        serializedName: "metaData",
        type: {
          name: "Composite",
          className: "ExpansionResultsMetadata"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "EntityExpandResponseValue"
        }
      }
    }
  }
};

export const TimelineAggregation: msRest.CompositeMapper = {
  serializedName: "TimelineAggregation",
  type: {
    name: "Composite",
    className: "TimelineAggregation",
    modelProperties: {
      count: {
        required: true,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimelineError: msRest.CompositeMapper = {
  serializedName: "TimelineError",
  type: {
    name: "Composite",
    className: "TimelineError",
    modelProperties: {
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      queryId: {
        serializedName: "queryId",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        required: true,
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimelineResultsMetadata: msRest.CompositeMapper = {
  serializedName: "TimelineResultsMetadata",
  type: {
    name: "Composite",
    className: "TimelineResultsMetadata",
    modelProperties: {
      totalCount: {
        required: true,
        serializedName: "totalCount",
        type: {
          name: "Number"
        }
      },
      aggregations: {
        required: true,
        serializedName: "aggregations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimelineAggregation"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimelineError"
            }
          }
        }
      }
    }
  }
};

export const EntityTimelineItem: msRest.CompositeMapper = {
  serializedName: "EntityTimelineItem",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "EntityTimelineItem",
    className: "EntityTimelineItem",
    modelProperties: {
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityTimelineResponse: msRest.CompositeMapper = {
  serializedName: "EntityTimelineResponse",
  type: {
    name: "Composite",
    className: "EntityTimelineResponse",
    modelProperties: {
      metaData: {
        serializedName: "metaData",
        type: {
          name: "Composite",
          className: "TimelineResultsMetadata"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityTimelineItem"
            }
          }
        }
      }
    }
  }
};

export const EntityQueryItem: msRest.CompositeMapper = {
  serializedName: "EntityQueryItem",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "EntityQueryItem",
    className: "EntityQueryItem",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetQueriesResponse: msRest.CompositeMapper = {
  serializedName: "GetQueriesResponse",
  type: {
    name: "Composite",
    className: "GetQueriesResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityQueryItem"
            }
          }
        }
      }
    }
  }
};

export const EntityKind1: msRest.CompositeMapper = {
  serializedName: "EntityKind",
  type: {
    name: "Composite",
    className: "EntityKind1",
    modelProperties: {
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityQueryKind1: msRest.CompositeMapper = {
  serializedName: "EntityQueryKind",
  type: {
    name: "Composite",
    className: "EntityQueryKind1",
    modelProperties: {
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityQuery: msRest.CompositeMapper = {
  serializedName: "EntityQuery",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "EntityQuery",
    className: "EntityQuery",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpansionEntityQuery: msRest.CompositeMapper = {
  serializedName: "Expansion",
  type: {
    name: "Composite",
    polymorphicDiscriminator: EntityQuery.type.polymorphicDiscriminator,
    uberParent: "EntityQuery",
    className: "ExpansionEntityQuery",
    modelProperties: {
      ...EntityQuery.type.modelProperties,
      dataSources: {
        serializedName: "properties.dataSources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      inputEntityType: {
        serializedName: "properties.inputEntityType",
        type: {
          name: "String"
        }
      },
      inputFields: {
        serializedName: "properties.inputFields",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      outputEntityTypes: {
        serializedName: "properties.outputEntityTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      queryTemplate: {
        serializedName: "properties.queryTemplate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileEntity: msRest.CompositeMapper = {
  serializedName: "File",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "FileEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      directory: {
        readOnly: true,
        serializedName: "properties.directory",
        type: {
          name: "String"
        }
      },
      fileHashEntityIds: {
        readOnly: true,
        serializedName: "properties.fileHashEntityIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      fileName: {
        readOnly: true,
        serializedName: "properties.fileName",
        type: {
          name: "String"
        }
      },
      hostEntityId: {
        readOnly: true,
        serializedName: "properties.hostEntityId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileHashEntity: msRest.CompositeMapper = {
  serializedName: "FileHash",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "FileHashEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      algorithm: {
        readOnly: true,
        serializedName: "properties.algorithm",
        type: {
          name: "String"
        }
      },
      hashValue: {
        readOnly: true,
        serializedName: "properties.hashValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem: msRest.CompositeMapper = {
  serializedName: "InsightQueryItemProperties_tableQuery_columnsDefinitionsItem",
  type: {
    name: "Composite",
    className: "InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem",
    modelProperties: {
      header: {
        serializedName: "header",
        type: {
          name: "String"
        }
      },
      outputType: {
        serializedName: "outputType",
        type: {
          name: "String"
        }
      },
      supportDeepLink: {
        serializedName: "supportDeepLink",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const InsightQueryItemPropertiesTableQueryQueriesDefinitionsItemLinkColumnsDefinitionsItem: msRest.CompositeMapper = {
  serializedName: "InsightQueryItemProperties_tableQuery_queriesDefinitionsItem_linkColumnsDefinitionsItem",
  type: {
    name: "Composite",
    className: "InsightQueryItemPropertiesTableQueryQueriesDefinitionsItemLinkColumnsDefinitionsItem",
    modelProperties: {
      projectedName: {
        serializedName: "projectedName",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "Query",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem: msRest.CompositeMapper = {
  serializedName: "InsightQueryItemProperties_tableQuery_queriesDefinitionsItem",
  type: {
    name: "Composite",
    className: "InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem",
    modelProperties: {
      filter: {
        serializedName: "filter",
        type: {
          name: "String"
        }
      },
      summarize: {
        serializedName: "summarize",
        type: {
          name: "String"
        }
      },
      project: {
        serializedName: "project",
        type: {
          name: "String"
        }
      },
      linkColumnsDefinitions: {
        serializedName: "linkColumnsDefinitions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InsightQueryItemPropertiesTableQueryQueriesDefinitionsItemLinkColumnsDefinitionsItem"
            }
          }
        }
      }
    }
  }
};

export const InsightQueryItemPropertiesTableQuery: msRest.CompositeMapper = {
  serializedName: "InsightQueryItemProperties_tableQuery",
  type: {
    name: "Composite",
    className: "InsightQueryItemPropertiesTableQuery",
    modelProperties: {
      columnsDefinitions: {
        serializedName: "columnsDefinitions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InsightQueryItemPropertiesTableQueryColumnsDefinitionsItem"
            }
          }
        }
      },
      queriesDefinitions: {
        serializedName: "queriesDefinitions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InsightQueryItemPropertiesTableQueryQueriesDefinitionsItem"
            }
          }
        }
      }
    }
  }
};

export const InsightQueryItemPropertiesAdditionalQuery: msRest.CompositeMapper = {
  serializedName: "InsightQueryItemProperties_additionalQuery",
  type: {
    name: "Composite",
    className: "InsightQueryItemPropertiesAdditionalQuery",
    modelProperties: {
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      },
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InsightQueryItemPropertiesDefaultTimeRange: msRest.CompositeMapper = {
  serializedName: "InsightQueryItemProperties_defaultTimeRange",
  type: {
    name: "Composite",
    className: "InsightQueryItemPropertiesDefaultTimeRange",
    modelProperties: {
      beforeRange: {
        serializedName: "beforeRange",
        type: {
          name: "String"
        }
      },
      afterRange: {
        serializedName: "afterRange",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InsightQueryItemPropertiesReferenceTimeRange: msRest.CompositeMapper = {
  serializedName: "InsightQueryItemProperties_referenceTimeRange",
  type: {
    name: "Composite",
    className: "InsightQueryItemPropertiesReferenceTimeRange",
    modelProperties: {
      beforeRange: {
        serializedName: "beforeRange",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityQueryItemProperties: msRest.CompositeMapper = {
  serializedName: "EntityQueryItemProperties",
  type: {
    name: "Composite",
    className: "EntityQueryItemProperties",
    modelProperties: {
      dataTypes: {
        serializedName: "dataTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityQueryItemPropertiesDataTypesItem"
            }
          }
        }
      },
      inputEntityType: {
        serializedName: "inputEntityType",
        type: {
          name: "String"
        }
      },
      requiredInputFieldsSets: {
        serializedName: "requiredInputFieldsSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      },
      entitiesFilter: {
        serializedName: "entitiesFilter",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const InsightQueryItemProperties: msRest.CompositeMapper = {
  serializedName: "Insight",
  type: {
    name: "Composite",
    className: "InsightQueryItemProperties",
    modelProperties: {
      ...EntityQueryItemProperties.type.modelProperties,
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      baseQuery: {
        serializedName: "baseQuery",
        type: {
          name: "String"
        }
      },
      tableQuery: {
        serializedName: "tableQuery",
        type: {
          name: "Composite",
          className: "InsightQueryItemPropertiesTableQuery"
        }
      },
      chartQuery: {
        serializedName: "chartQuery",
        type: {
          name: "Object"
        }
      },
      additionalQuery: {
        serializedName: "additionalQuery",
        type: {
          name: "Composite",
          className: "InsightQueryItemPropertiesAdditionalQuery"
        }
      },
      defaultTimeRange: {
        serializedName: "defaultTimeRange",
        type: {
          name: "Composite",
          className: "InsightQueryItemPropertiesDefaultTimeRange"
        }
      },
      referenceTimeRange: {
        serializedName: "referenceTimeRange",
        type: {
          name: "Composite",
          className: "InsightQueryItemPropertiesReferenceTimeRange"
        }
      }
    }
  }
};

export const InsightQueryItem: msRest.CompositeMapper = {
  serializedName: "Insight",
  type: {
    name: "Composite",
    polymorphicDiscriminator: EntityQueryItem.type.polymorphicDiscriminator,
    uberParent: "EntityQueryItem",
    className: "InsightQueryItem",
    modelProperties: {
      ...EntityQueryItem.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "InsightQueryItemProperties"
        }
      }
    }
  }
};

export const ActivityTimelineItem: msRest.CompositeMapper = {
  serializedName: "Activity",
  type: {
    name: "Composite",
    polymorphicDiscriminator: EntityTimelineItem.type.polymorphicDiscriminator,
    uberParent: "EntityTimelineItem",
    className: "ActivityTimelineItem",
    modelProperties: {
      ...EntityTimelineItem.type.modelProperties,
      queryId: {
        required: true,
        serializedName: "queryId",
        type: {
          name: "String"
        }
      },
      bucketStartTimeUTC: {
        required: true,
        serializedName: "bucketStartTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      bucketEndTimeUTC: {
        required: true,
        serializedName: "bucketEndTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      firstActivityTimeUTC: {
        required: true,
        serializedName: "firstActivityTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      lastActivityTimeUTC: {
        required: true,
        serializedName: "lastActivityTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      content: {
        required: true,
        serializedName: "content",
        type: {
          name: "String"
        }
      },
      title: {
        required: true,
        serializedName: "title",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityAlertTimelineItem: msRest.CompositeMapper = {
  serializedName: "SecurityAlert",
  type: {
    name: "Composite",
    polymorphicDiscriminator: EntityTimelineItem.type.polymorphicDiscriminator,
    uberParent: "EntityTimelineItem",
    className: "SecurityAlertTimelineItem",
    modelProperties: {
      ...EntityTimelineItem.type.modelProperties,
      azureResourceId: {
        required: true,
        serializedName: "azureResourceId",
        type: {
          name: "String"
        }
      },
      productName: {
        required: true,
        serializedName: "productName",
        type: {
          name: "String"
        }
      },
      displayName: {
        required: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      severity: {
        required: true,
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      endTimeUtc: {
        required: true,
        serializedName: "endTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      startTimeUtc: {
        required: true,
        serializedName: "startTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      timeGenerated: {
        required: true,
        serializedName: "timeGenerated",
        type: {
          name: "DateTime"
        }
      },
      alertType: {
        required: true,
        serializedName: "alertType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BookmarkTimelineItem: msRest.CompositeMapper = {
  serializedName: "Bookmark",
  type: {
    name: "Composite",
    polymorphicDiscriminator: EntityTimelineItem.type.polymorphicDiscriminator,
    uberParent: "EntityTimelineItem",
    className: "BookmarkTimelineItem",
    modelProperties: {
      ...EntityTimelineItem.type.modelProperties,
      azureResourceId: {
        required: true,
        serializedName: "azureResourceId",
        type: {
          name: "String"
        }
      },
      displayName: {
        required: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      notes: {
        required: true,
        serializedName: "notes",
        type: {
          name: "String"
        }
      },
      endTimeUtc: {
        required: true,
        serializedName: "endTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      startTimeUtc: {
        required: true,
        serializedName: "startTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      eventTime: {
        serializedName: "eventTime",
        type: {
          name: "DateTime"
        }
      },
      createdBy: {
        required: true,
        serializedName: "createdBy",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      },
      labels: {
        required: true,
        serializedName: "labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FusionAlertRule: msRest.CompositeMapper = {
  serializedName: "Fusion",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AlertRule.type.polymorphicDiscriminator,
    uberParent: "AlertRule",
    className: "FusionAlertRule",
    modelProperties: {
      ...AlertRule.type.modelProperties,
      alertRuleTemplateName: {
        required: true,
        serializedName: "properties.alertRuleTemplateName",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      enabled: {
        required: true,
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      lastModifiedUtc: {
        readOnly: true,
        serializedName: "properties.lastModifiedUtc",
        type: {
          name: "DateTime"
        }
      },
      severity: {
        readOnly: true,
        serializedName: "properties.severity",
        type: {
          name: "String"
        }
      },
      tactics: {
        readOnly: true,
        serializedName: "properties.tactics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FusionAlertRuleTemplate: msRest.CompositeMapper = {
  serializedName: "Fusion",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AlertRuleTemplate.type.polymorphicDiscriminator,
    uberParent: "AlertRuleTemplate",
    className: "FusionAlertRuleTemplate",
    modelProperties: {
      ...AlertRuleTemplate.type.modelProperties,
      alertRulesCreatedByTemplateCount: {
        serializedName: "properties.alertRulesCreatedByTemplateCount",
        type: {
          name: "Number"
        }
      },
      lastUpdatedDateUTC: {
        readOnly: true,
        serializedName: "properties.lastUpdatedDateUTC",
        type: {
          name: "DateTime"
        }
      },
      createdDateUTC: {
        readOnly: true,
        serializedName: "properties.createdDateUTC",
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      requiredDataConnectors: {
        serializedName: "properties.requiredDataConnectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertRuleTemplateDataSource"
            }
          }
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      severity: {
        required: true,
        serializedName: "properties.severity",
        type: {
          name: "String"
        }
      },
      tactics: {
        serializedName: "properties.tactics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GeoLocation: msRest.CompositeMapper = {
  serializedName: "GeoLocation",
  type: {
    name: "Composite",
    className: "GeoLocation",
    modelProperties: {
      asn: {
        readOnly: true,
        serializedName: "asn",
        type: {
          name: "Number"
        }
      },
      city: {
        readOnly: true,
        serializedName: "city",
        type: {
          name: "String"
        }
      },
      countryCode: {
        readOnly: true,
        serializedName: "countryCode",
        type: {
          name: "String"
        }
      },
      countryName: {
        readOnly: true,
        serializedName: "countryName",
        type: {
          name: "String"
        }
      },
      latitude: {
        readOnly: true,
        serializedName: "latitude",
        type: {
          name: "Number"
        }
      },
      longitude: {
        readOnly: true,
        serializedName: "longitude",
        type: {
          name: "Number"
        }
      },
      state: {
        readOnly: true,
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostEntity: msRest.CompositeMapper = {
  serializedName: "Host",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "HostEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      azureID: {
        readOnly: true,
        serializedName: "properties.azureID",
        type: {
          name: "String"
        }
      },
      dnsDomain: {
        readOnly: true,
        serializedName: "properties.dnsDomain",
        type: {
          name: "String"
        }
      },
      hostName: {
        readOnly: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      isDomainJoined: {
        readOnly: true,
        serializedName: "properties.isDomainJoined",
        type: {
          name: "Boolean"
        }
      },
      netBiosName: {
        readOnly: true,
        serializedName: "properties.netBiosName",
        type: {
          name: "String"
        }
      },
      ntDomain: {
        readOnly: true,
        serializedName: "properties.ntDomain",
        type: {
          name: "String"
        }
      },
      omsAgentID: {
        readOnly: true,
        serializedName: "properties.omsAgentID",
        type: {
          name: "String"
        }
      },
      osFamily: {
        serializedName: "properties.osFamily",
        type: {
          name: "Enum",
          allowedValues: [
            "Linux",
            "Windows",
            "Android",
            "IOS",
            "Unknown"
          ]
        }
      },
      osVersion: {
        readOnly: true,
        serializedName: "properties.osVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IncidentAdditionalData: msRest.CompositeMapper = {
  serializedName: "IncidentAdditionalData",
  type: {
    name: "Composite",
    className: "IncidentAdditionalData",
    modelProperties: {
      alertsCount: {
        readOnly: true,
        serializedName: "alertsCount",
        type: {
          name: "Number"
        }
      },
      bookmarksCount: {
        readOnly: true,
        serializedName: "bookmarksCount",
        type: {
          name: "Number"
        }
      },
      commentsCount: {
        readOnly: true,
        serializedName: "commentsCount",
        type: {
          name: "Number"
        }
      },
      alertProductNames: {
        readOnly: true,
        serializedName: "alertProductNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tactics: {
        readOnly: true,
        serializedName: "tactics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IncidentLabel: msRest.CompositeMapper = {
  serializedName: "IncidentLabel",
  type: {
    name: "Composite",
    className: "IncidentLabel",
    modelProperties: {
      labelName: {
        required: true,
        serializedName: "labelName",
        type: {
          name: "String"
        }
      },
      labelType: {
        readOnly: true,
        serializedName: "labelType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IncidentOwnerInfo: msRest.CompositeMapper = {
  serializedName: "IncidentOwnerInfo",
  type: {
    name: "Composite",
    className: "IncidentOwnerInfo",
    modelProperties: {
      email: {
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      assignedTo: {
        serializedName: "assignedTo",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "Uuid"
        }
      },
      userPrincipalName: {
        serializedName: "userPrincipalName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Incident: msRest.CompositeMapper = {
  serializedName: "Incident",
  type: {
    name: "Composite",
    className: "Incident",
    modelProperties: {
      ...ResourceWithEtag.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Composite",
          className: "IncidentAdditionalData"
        }
      },
      classification: {
        serializedName: "properties.classification",
        type: {
          name: "String"
        }
      },
      classificationComment: {
        serializedName: "properties.classificationComment",
        type: {
          name: "String"
        }
      },
      classificationReason: {
        serializedName: "properties.classificationReason",
        type: {
          name: "String"
        }
      },
      createdTimeUtc: {
        readOnly: true,
        serializedName: "properties.createdTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      firstActivityTimeUtc: {
        serializedName: "properties.firstActivityTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      incidentUrl: {
        readOnly: true,
        serializedName: "properties.incidentUrl",
        type: {
          name: "String"
        }
      },
      incidentNumber: {
        readOnly: true,
        serializedName: "properties.incidentNumber",
        type: {
          name: "Number"
        }
      },
      labels: {
        serializedName: "properties.labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IncidentLabel"
            }
          }
        }
      },
      lastActivityTimeUtc: {
        serializedName: "properties.lastActivityTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTimeUtc: {
        readOnly: true,
        serializedName: "properties.lastModifiedTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      owner: {
        serializedName: "properties.owner",
        type: {
          name: "Composite",
          className: "IncidentOwnerInfo"
        }
      },
      relatedAnalyticRuleIds: {
        readOnly: true,
        serializedName: "properties.relatedAnalyticRuleIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      severity: {
        required: true,
        serializedName: "properties.severity",
        type: {
          name: "String"
        }
      },
      status: {
        required: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      title: {
        required: true,
        serializedName: "properties.title",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HuntingBookmark: msRest.CompositeMapper = {
  serializedName: "Bookmark",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "HuntingBookmark",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      createdBy: {
        serializedName: "properties.createdBy",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      },
      displayName: {
        required: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      eventTime: {
        serializedName: "properties.eventTime",
        type: {
          name: "DateTime"
        }
      },
      labels: {
        serializedName: "properties.labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      notes: {
        serializedName: "properties.notes",
        type: {
          name: "String"
        }
      },
      query: {
        required: true,
        serializedName: "properties.query",
        type: {
          name: "String"
        }
      },
      queryResult: {
        serializedName: "properties.queryResult",
        type: {
          name: "String"
        }
      },
      updated: {
        serializedName: "properties.updated",
        type: {
          name: "DateTime"
        }
      },
      updatedBy: {
        serializedName: "properties.updatedBy",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      },
      incidentInfo: {
        serializedName: "properties.incidentInfo",
        type: {
          name: "Composite",
          className: "IncidentInfo"
        }
      }
    }
  }
};

export const SecurityAlertPropertiesConfidenceReasonsItem: msRest.CompositeMapper = {
  serializedName: "SecurityAlertProperties_confidenceReasonsItem",
  type: {
    name: "Composite",
    className: "SecurityAlertPropertiesConfidenceReasonsItem",
    modelProperties: {
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      reasonType: {
        readOnly: true,
        serializedName: "reasonType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityAlert: msRest.CompositeMapper = {
  serializedName: "SecurityAlert",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "SecurityAlert",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      alertDisplayName: {
        readOnly: true,
        serializedName: "properties.alertDisplayName",
        type: {
          name: "String"
        }
      },
      alertType: {
        readOnly: true,
        serializedName: "properties.alertType",
        type: {
          name: "String"
        }
      },
      compromisedEntity: {
        readOnly: true,
        serializedName: "properties.compromisedEntity",
        type: {
          name: "String"
        }
      },
      confidenceLevel: {
        readOnly: true,
        serializedName: "properties.confidenceLevel",
        type: {
          name: "String"
        }
      },
      confidenceReasons: {
        readOnly: true,
        serializedName: "properties.confidenceReasons",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityAlertPropertiesConfidenceReasonsItem"
            }
          }
        }
      },
      confidenceScore: {
        readOnly: true,
        serializedName: "properties.confidenceScore",
        type: {
          name: "Number"
        }
      },
      confidenceScoreStatus: {
        readOnly: true,
        serializedName: "properties.confidenceScoreStatus",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      endTimeUtc: {
        readOnly: true,
        serializedName: "properties.endTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      intent: {
        readOnly: true,
        serializedName: "properties.intent",
        type: {
          name: "String"
        }
      },
      providerAlertId: {
        readOnly: true,
        serializedName: "properties.providerAlertId",
        type: {
          name: "String"
        }
      },
      processingEndTime: {
        readOnly: true,
        serializedName: "properties.processingEndTime",
        type: {
          name: "DateTime"
        }
      },
      productComponentName: {
        readOnly: true,
        serializedName: "properties.productComponentName",
        type: {
          name: "String"
        }
      },
      productName: {
        readOnly: true,
        serializedName: "properties.productName",
        type: {
          name: "String"
        }
      },
      productVersion: {
        readOnly: true,
        serializedName: "properties.productVersion",
        type: {
          name: "String"
        }
      },
      remediationSteps: {
        readOnly: true,
        serializedName: "properties.remediationSteps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      severity: {
        serializedName: "properties.severity",
        type: {
          name: "String"
        }
      },
      startTimeUtc: {
        readOnly: true,
        serializedName: "properties.startTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      systemAlertId: {
        readOnly: true,
        serializedName: "properties.systemAlertId",
        type: {
          name: "String"
        }
      },
      tactics: {
        readOnly: true,
        serializedName: "properties.tactics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      timeGenerated: {
        readOnly: true,
        serializedName: "properties.timeGenerated",
        type: {
          name: "DateTime"
        }
      },
      vendorName: {
        readOnly: true,
        serializedName: "properties.vendorName",
        type: {
          name: "String"
        }
      },
      alertLink: {
        readOnly: true,
        serializedName: "properties.alertLink",
        type: {
          name: "String"
        }
      },
      resourceIdentifiers: {
        readOnly: true,
        serializedName: "properties.resourceIdentifiers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const IncidentAlertList: msRest.CompositeMapper = {
  serializedName: "IncidentAlertList",
  type: {
    name: "Composite",
    className: "IncidentAlertList",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityAlert"
            }
          }
        }
      }
    }
  }
};

export const IncidentBookmarkList: msRest.CompositeMapper = {
  serializedName: "IncidentBookmarkList",
  type: {
    name: "Composite",
    className: "IncidentBookmarkList",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HuntingBookmark"
            }
          }
        }
      }
    }
  }
};

export const IncidentComment: msRest.CompositeMapper = {
  serializedName: "IncidentComment",
  type: {
    name: "Composite",
    className: "IncidentComment",
    modelProperties: {
      ...ResourceWithEtag.type.modelProperties,
      createdTimeUtc: {
        readOnly: true,
        serializedName: "properties.createdTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTimeUtc: {
        readOnly: true,
        serializedName: "properties.lastModifiedTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      message: {
        required: true,
        serializedName: "properties.message",
        type: {
          name: "String"
        }
      },
      author: {
        readOnly: true,
        serializedName: "properties.author",
        type: {
          name: "Composite",
          className: "ClientInfo"
        }
      }
    }
  }
};

export const IncidentEntitiesResultsMetadata: msRest.CompositeMapper = {
  serializedName: "IncidentEntitiesResultsMetadata",
  type: {
    name: "Composite",
    className: "IncidentEntitiesResultsMetadata",
    modelProperties: {
      count: {
        required: true,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      entityKind: {
        required: true,
        serializedName: "entityKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IncidentEntitiesResponse: msRest.CompositeMapper = {
  serializedName: "IncidentEntitiesResponse",
  type: {
    name: "Composite",
    className: "IncidentEntitiesResponse",
    modelProperties: {
      entities: {
        serializedName: "entities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Entity"
            }
          }
        }
      },
      metaData: {
        serializedName: "metaData",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IncidentEntitiesResultsMetadata"
            }
          }
        }
      }
    }
  }
};

export const ThreatIntelligence: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligence",
  type: {
    name: "Composite",
    className: "ThreatIntelligence",
    modelProperties: {
      confidence: {
        readOnly: true,
        serializedName: "confidence",
        type: {
          name: "Number"
        }
      },
      providerName: {
        readOnly: true,
        serializedName: "providerName",
        type: {
          name: "String"
        }
      },
      reportLink: {
        readOnly: true,
        serializedName: "reportLink",
        type: {
          name: "String"
        }
      },
      threatDescription: {
        readOnly: true,
        serializedName: "threatDescription",
        type: {
          name: "String"
        }
      },
      threatName: {
        readOnly: true,
        serializedName: "threatName",
        type: {
          name: "String"
        }
      },
      threatType: {
        readOnly: true,
        serializedName: "threatType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpEntity: msRest.CompositeMapper = {
  serializedName: "Ip",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "IpEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      address: {
        readOnly: true,
        serializedName: "properties.address",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "properties.location",
        type: {
          name: "Composite",
          className: "GeoLocation"
        }
      },
      threatIntelligence: {
        readOnly: true,
        serializedName: "properties.threatIntelligence",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligence"
            }
          }
        }
      }
    }
  }
};

export const MailboxEntity: msRest.CompositeMapper = {
  serializedName: "Mailbox",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "MailboxEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      mailboxPrimaryAddress: {
        readOnly: true,
        serializedName: "properties.mailboxPrimaryAddress",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      upn: {
        readOnly: true,
        serializedName: "properties.upn",
        type: {
          name: "String"
        }
      },
      externalDirectoryObjectId: {
        readOnly: true,
        serializedName: "properties.externalDirectoryObjectId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const MailClusterEntity: msRest.CompositeMapper = {
  serializedName: "MailCluster",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "MailClusterEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      networkMessageIds: {
        readOnly: true,
        serializedName: "properties.networkMessageIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      countByDeliveryStatus: {
        readOnly: true,
        serializedName: "properties.countByDeliveryStatus",
        type: {
          name: "Object"
        }
      },
      countByThreatType: {
        readOnly: true,
        serializedName: "properties.countByThreatType",
        type: {
          name: "Object"
        }
      },
      countByProtectionStatus: {
        readOnly: true,
        serializedName: "properties.countByProtectionStatus",
        type: {
          name: "Object"
        }
      },
      threats: {
        readOnly: true,
        serializedName: "properties.threats",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      query: {
        readOnly: true,
        serializedName: "properties.query",
        type: {
          name: "String"
        }
      },
      queryTime: {
        readOnly: true,
        serializedName: "properties.queryTime",
        type: {
          name: "DateTime"
        }
      },
      mailCount: {
        readOnly: true,
        serializedName: "properties.mailCount",
        type: {
          name: "Number"
        }
      },
      isVolumeAnomaly: {
        readOnly: true,
        serializedName: "properties.isVolumeAnomaly",
        type: {
          name: "Boolean"
        }
      },
      source: {
        readOnly: true,
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      clusterSourceIdentifier: {
        readOnly: true,
        serializedName: "properties.clusterSourceIdentifier",
        type: {
          name: "String"
        }
      },
      clusterSourceType: {
        readOnly: true,
        serializedName: "properties.clusterSourceType",
        type: {
          name: "String"
        }
      },
      clusterQueryStartTime: {
        readOnly: true,
        serializedName: "properties.clusterQueryStartTime",
        type: {
          name: "DateTime"
        }
      },
      clusterQueryEndTime: {
        readOnly: true,
        serializedName: "properties.clusterQueryEndTime",
        type: {
          name: "DateTime"
        }
      },
      clusterGroup: {
        readOnly: true,
        serializedName: "properties.clusterGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MailMessageEntity: msRest.CompositeMapper = {
  serializedName: "MailMessage",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "MailMessageEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      fileEntityIds: {
        readOnly: true,
        serializedName: "properties.fileEntityIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      recipient: {
        readOnly: true,
        serializedName: "properties.recipient",
        type: {
          name: "String"
        }
      },
      urls: {
        readOnly: true,
        serializedName: "properties.urls",
        type: {
          name: "String"
        }
      },
      threats: {
        readOnly: true,
        serializedName: "properties.threats",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      p1Sender: {
        readOnly: true,
        serializedName: "properties.p1Sender",
        type: {
          name: "String"
        }
      },
      p1SenderDisplayName: {
        readOnly: true,
        serializedName: "properties.p1SenderDisplayName",
        type: {
          name: "String"
        }
      },
      p1SenderDomain: {
        readOnly: true,
        serializedName: "properties.p1SenderDomain",
        type: {
          name: "String"
        }
      },
      senderIP: {
        readOnly: true,
        serializedName: "properties.senderIP",
        type: {
          name: "String"
        }
      },
      p2Sender: {
        readOnly: true,
        serializedName: "properties.p2Sender",
        type: {
          name: "String"
        }
      },
      p2SenderDisplayName: {
        readOnly: true,
        serializedName: "properties.p2SenderDisplayName",
        type: {
          name: "String"
        }
      },
      p2SenderDomain: {
        readOnly: true,
        serializedName: "properties.p2SenderDomain",
        type: {
          name: "String"
        }
      },
      receivedDate: {
        readOnly: true,
        serializedName: "properties.receivedDate",
        type: {
          name: "DateTime"
        }
      },
      networkMessageId: {
        readOnly: true,
        serializedName: "properties.networkMessageId",
        type: {
          name: "Uuid"
        }
      },
      internetMessageId: {
        readOnly: true,
        serializedName: "properties.internetMessageId",
        type: {
          name: "String"
        }
      },
      subject: {
        readOnly: true,
        serializedName: "properties.subject",
        type: {
          name: "String"
        }
      },
      language: {
        readOnly: true,
        serializedName: "properties.language",
        type: {
          name: "String"
        }
      },
      threatDetectionMethods: {
        readOnly: true,
        serializedName: "properties.threatDetectionMethods",
        type: {
          name: "String"
        }
      },
      bodyFingerprintBin1: {
        serializedName: "properties.bodyFingerprintBin1",
        type: {
          name: "Number"
        }
      },
      bodyFingerprintBin2: {
        serializedName: "properties.bodyFingerprintBin2",
        type: {
          name: "Number"
        }
      },
      bodyFingerprintBin3: {
        serializedName: "properties.bodyFingerprintBin3",
        type: {
          name: "Number"
        }
      },
      bodyFingerprintBin4: {
        serializedName: "properties.bodyFingerprintBin4",
        type: {
          name: "Number"
        }
      },
      bodyFingerprintBin5: {
        serializedName: "properties.bodyFingerprintBin5",
        type: {
          name: "Number"
        }
      },
      antispamDirection: {
        serializedName: "properties.antispamDirection",
        type: {
          name: "String"
        }
      },
      deliveryAction: {
        serializedName: "properties.deliveryAction",
        type: {
          name: "Enum",
          allowedValues: [
            "Unknown",
            "DeliveredAsSpam",
            "Delivered",
            "Blocked",
            "Replaced"
          ]
        }
      },
      deliveryLocation: {
        serializedName: "properties.deliveryLocation",
        type: {
          name: "Enum",
          allowedValues: [
            "Unknown",
            "Inbox",
            "JunkFolder",
            "DeletedFolder",
            "Quarantine",
            "External",
            "Failed",
            "Dropped",
            "Forwarded"
          ]
        }
      }
    }
  }
};

export const SubmissionMailEntity: msRest.CompositeMapper = {
  serializedName: "SubmissionMail",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "SubmissionMailEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      networkMessageId: {
        readOnly: true,
        serializedName: "properties.networkMessageId",
        type: {
          name: "Uuid"
        }
      },
      timestamp: {
        readOnly: true,
        serializedName: "properties.timestamp",
        type: {
          name: "DateTime"
        }
      },
      recipient: {
        readOnly: true,
        serializedName: "properties.recipient",
        type: {
          name: "String"
        }
      },
      sender: {
        readOnly: true,
        serializedName: "properties.sender",
        type: {
          name: "String"
        }
      },
      senderIp: {
        readOnly: true,
        serializedName: "properties.senderIp",
        type: {
          name: "String"
        }
      },
      subject: {
        readOnly: true,
        serializedName: "properties.subject",
        type: {
          name: "String"
        }
      },
      reportType: {
        readOnly: true,
        serializedName: "properties.reportType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MCASDataConnectorDataTypesDiscoveryLogs: msRest.CompositeMapper = {
  serializedName: "MCASDataConnectorDataTypes_discoveryLogs",
  type: {
    name: "Composite",
    className: "MCASDataConnectorDataTypesDiscoveryLogs",
    modelProperties: {
      ...DataConnectorDataTypeCommon.type.modelProperties
    }
  }
};

export const MCASDataConnectorDataTypes: msRest.CompositeMapper = {
  serializedName: "MCASDataConnectorDataTypes",
  type: {
    name: "Composite",
    className: "MCASDataConnectorDataTypes",
    modelProperties: {
      ...AlertsDataTypeOfDataConnector.type.modelProperties,
      discoveryLogs: {
        serializedName: "discoveryLogs",
        type: {
          name: "Composite",
          className: "MCASDataConnectorDataTypesDiscoveryLogs"
        }
      }
    }
  }
};

export const MCASDataConnector: msRest.CompositeMapper = {
  serializedName: "MicrosoftCloudAppSecurity",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "MCASDataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "MCASDataConnectorDataTypes"
        }
      }
    }
  }
};

export const MCASCheckRequirements: msRest.CompositeMapper = {
  serializedName: "MicrosoftCloudAppSecurity",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
    uberParent: "DataConnectorsCheckRequirements",
    className: "MCASCheckRequirements",
    modelProperties: {
      ...DataConnectorsCheckRequirements.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MDATPDataConnector: msRest.CompositeMapper = {
  serializedName: "MicrosoftDefenderAdvancedThreatProtection",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "MDATPDataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "AlertsDataTypeOfDataConnector"
        }
      }
    }
  }
};

export const MDATPCheckRequirements: msRest.CompositeMapper = {
  serializedName: "MicrosoftDefenderAdvancedThreatProtection",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
    uberParent: "DataConnectorsCheckRequirements",
    className: "MDATPCheckRequirements",
    modelProperties: {
      ...DataConnectorsCheckRequirements.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MalwareEntity: msRest.CompositeMapper = {
  serializedName: "Malware",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "MalwareEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      category: {
        readOnly: true,
        serializedName: "properties.category",
        type: {
          name: "String"
        }
      },
      fileEntityIds: {
        readOnly: true,
        serializedName: "properties.fileEntityIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      malwareName: {
        readOnly: true,
        serializedName: "properties.malwareName",
        type: {
          name: "String"
        }
      },
      processEntityIds: {
        readOnly: true,
        serializedName: "properties.processEntityIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MicrosoftSecurityIncidentCreationAlertRule: msRest.CompositeMapper = {
  serializedName: "MicrosoftSecurityIncidentCreation",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AlertRule.type.polymorphicDiscriminator,
    uberParent: "AlertRule",
    className: "MicrosoftSecurityIncidentCreationAlertRule",
    modelProperties: {
      ...AlertRule.type.modelProperties,
      displayNamesFilter: {
        serializedName: "properties.displayNamesFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      displayNamesExcludeFilter: {
        serializedName: "properties.displayNamesExcludeFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      productFilter: {
        required: true,
        serializedName: "properties.productFilter",
        type: {
          name: "String"
        }
      },
      severitiesFilter: {
        serializedName: "properties.severitiesFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      alertRuleTemplateName: {
        serializedName: "properties.alertRuleTemplateName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      displayName: {
        required: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      enabled: {
        required: true,
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      lastModifiedUtc: {
        readOnly: true,
        serializedName: "properties.lastModifiedUtc",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MicrosoftSecurityIncidentCreationAlertRuleCommonProperties: msRest.CompositeMapper = {
  serializedName: "MicrosoftSecurityIncidentCreationAlertRuleCommonProperties",
  type: {
    name: "Composite",
    className: "MicrosoftSecurityIncidentCreationAlertRuleCommonProperties",
    modelProperties: {
      displayNamesFilter: {
        serializedName: "displayNamesFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      displayNamesExcludeFilter: {
        serializedName: "displayNamesExcludeFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      productFilter: {
        required: true,
        serializedName: "productFilter",
        type: {
          name: "String"
        }
      },
      severitiesFilter: {
        serializedName: "severitiesFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MicrosoftSecurityIncidentCreationAlertRuleTemplate: msRest.CompositeMapper = {
  serializedName: "MicrosoftSecurityIncidentCreation",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AlertRuleTemplate.type.polymorphicDiscriminator,
    uberParent: "AlertRuleTemplate",
    className: "MicrosoftSecurityIncidentCreationAlertRuleTemplate",
    modelProperties: {
      ...AlertRuleTemplate.type.modelProperties,
      alertRulesCreatedByTemplateCount: {
        required: true,
        serializedName: "properties.alertRulesCreatedByTemplateCount",
        type: {
          name: "Number"
        }
      },
      lastUpdatedDateUTC: {
        readOnly: true,
        serializedName: "properties.lastUpdatedDateUTC",
        type: {
          name: "DateTime"
        }
      },
      createdDateUTC: {
        required: true,
        readOnly: true,
        serializedName: "properties.createdDateUTC",
        type: {
          name: "DateTime"
        }
      },
      description: {
        required: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      displayName: {
        required: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      requiredDataConnectors: {
        serializedName: "properties.requiredDataConnectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertRuleTemplateDataSource"
            }
          }
        }
      },
      status: {
        required: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      displayNamesFilter: {
        serializedName: "properties.displayNamesFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      displayNamesExcludeFilter: {
        serializedName: "properties.displayNamesExcludeFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      productFilter: {
        required: true,
        serializedName: "properties.productFilter",
        type: {
          name: "String"
        }
      },
      severitiesFilter: {
        serializedName: "properties.severitiesFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OfficeATPDataConnector: msRest.CompositeMapper = {
  serializedName: "OfficeATP",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "OfficeATPDataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "AlertsDataTypeOfDataConnector"
        }
      }
    }
  }
};

export const OfficeATPCheckRequirements: msRest.CompositeMapper = {
  serializedName: "OfficeATP",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
    uberParent: "DataConnectorsCheckRequirements",
    className: "OfficeATPCheckRequirements",
    modelProperties: {
      ...DataConnectorsCheckRequirements.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OfficeConsent: msRest.CompositeMapper = {
  serializedName: "OfficeConsent",
  type: {
    name: "Composite",
    className: "OfficeConsent",
    modelProperties: {
      ...Resource.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      tenantName: {
        readOnly: true,
        serializedName: "properties.tenantName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OfficeDataConnectorDataTypesExchange: msRest.CompositeMapper = {
  serializedName: "OfficeDataConnectorDataTypes_exchange",
  type: {
    name: "Composite",
    className: "OfficeDataConnectorDataTypesExchange",
    modelProperties: {
      ...DataConnectorDataTypeCommon.type.modelProperties
    }
  }
};

export const OfficeDataConnectorDataTypesSharePoint: msRest.CompositeMapper = {
  serializedName: "OfficeDataConnectorDataTypes_sharePoint",
  type: {
    name: "Composite",
    className: "OfficeDataConnectorDataTypesSharePoint",
    modelProperties: {
      ...DataConnectorDataTypeCommon.type.modelProperties
    }
  }
};

export const OfficeDataConnectorDataTypesTeams: msRest.CompositeMapper = {
  serializedName: "OfficeDataConnectorDataTypes_teams",
  type: {
    name: "Composite",
    className: "OfficeDataConnectorDataTypesTeams",
    modelProperties: {
      ...DataConnectorDataTypeCommon.type.modelProperties
    }
  }
};

export const OfficeDataConnectorDataTypes: msRest.CompositeMapper = {
  serializedName: "OfficeDataConnectorDataTypes",
  type: {
    name: "Composite",
    className: "OfficeDataConnectorDataTypes",
    modelProperties: {
      exchange: {
        serializedName: "exchange",
        type: {
          name: "Composite",
          className: "OfficeDataConnectorDataTypesExchange"
        }
      },
      sharePoint: {
        serializedName: "sharePoint",
        type: {
          name: "Composite",
          className: "OfficeDataConnectorDataTypesSharePoint"
        }
      },
      teams: {
        serializedName: "teams",
        type: {
          name: "Composite",
          className: "OfficeDataConnectorDataTypesTeams"
        }
      }
    }
  }
};

export const OfficeDataConnector: msRest.CompositeMapper = {
  serializedName: "Office365",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "OfficeDataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "OfficeDataConnectorDataTypes"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessEntity: msRest.CompositeMapper = {
  serializedName: "Process",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "ProcessEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      accountEntityId: {
        readOnly: true,
        serializedName: "properties.accountEntityId",
        type: {
          name: "String"
        }
      },
      commandLine: {
        readOnly: true,
        serializedName: "properties.commandLine",
        type: {
          name: "String"
        }
      },
      creationTimeUtc: {
        readOnly: true,
        serializedName: "properties.creationTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      elevationToken: {
        serializedName: "properties.elevationToken",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Full",
            "Limited"
          ]
        }
      },
      hostEntityId: {
        readOnly: true,
        serializedName: "properties.hostEntityId",
        type: {
          name: "String"
        }
      },
      hostLogonSessionEntityId: {
        readOnly: true,
        serializedName: "properties.hostLogonSessionEntityId",
        type: {
          name: "String"
        }
      },
      imageFileEntityId: {
        readOnly: true,
        serializedName: "properties.imageFileEntityId",
        type: {
          name: "String"
        }
      },
      parentProcessEntityId: {
        readOnly: true,
        serializedName: "properties.parentProcessEntityId",
        type: {
          name: "String"
        }
      },
      processId: {
        readOnly: true,
        serializedName: "properties.processId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryKeyEntity: msRest.CompositeMapper = {
  serializedName: "RegistryKey",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "RegistryKeyEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      hive: {
        readOnly: true,
        serializedName: "properties.hive",
        type: {
          name: "String"
        }
      },
      key: {
        readOnly: true,
        serializedName: "properties.key",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryValueEntity: msRest.CompositeMapper = {
  serializedName: "RegistryValue",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "RegistryValueEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      keyEntityId: {
        readOnly: true,
        serializedName: "properties.keyEntityId",
        type: {
          name: "String"
        }
      },
      valueData: {
        readOnly: true,
        serializedName: "properties.valueData",
        type: {
          name: "String"
        }
      },
      valueName: {
        readOnly: true,
        serializedName: "properties.valueName",
        type: {
          name: "String"
        }
      },
      valueType: {
        readOnly: true,
        serializedName: "properties.valueType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Relation: msRest.CompositeMapper = {
  serializedName: "Relation",
  type: {
    name: "Composite",
    className: "Relation",
    modelProperties: {
      ...ResourceWithEtag.type.modelProperties,
      relatedResourceId: {
        required: true,
        serializedName: "properties.relatedResourceId",
        type: {
          name: "String"
        }
      },
      relatedResourceName: {
        readOnly: true,
        serializedName: "properties.relatedResourceName",
        type: {
          name: "String"
        }
      },
      relatedResourceType: {
        readOnly: true,
        serializedName: "properties.relatedResourceType",
        type: {
          name: "String"
        }
      },
      relatedResourceKind: {
        readOnly: true,
        serializedName: "properties.relatedResourceKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupingConfiguration: msRest.CompositeMapper = {
  serializedName: "GroupingConfiguration",
  type: {
    name: "Composite",
    className: "GroupingConfiguration",
    modelProperties: {
      enabled: {
        required: true,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      reopenClosedIncident: {
        required: true,
        serializedName: "reopenClosedIncident",
        type: {
          name: "Boolean"
        }
      },
      lookbackDuration: {
        required: true,
        serializedName: "lookbackDuration",
        type: {
          name: "TimeSpan"
        }
      },
      entitiesMatchingMethod: {
        required: true,
        serializedName: "entitiesMatchingMethod",
        type: {
          name: "String"
        }
      },
      groupByEntities: {
        serializedName: "groupByEntities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IncidentConfiguration: msRest.CompositeMapper = {
  serializedName: "IncidentConfiguration",
  type: {
    name: "Composite",
    className: "IncidentConfiguration",
    modelProperties: {
      createIncident: {
        required: true,
        serializedName: "createIncident",
        type: {
          name: "Boolean"
        }
      },
      groupingConfiguration: {
        serializedName: "groupingConfiguration",
        type: {
          name: "Composite",
          className: "GroupingConfiguration"
        }
      }
    }
  }
};

export const ScheduledAlertRule: msRest.CompositeMapper = {
  serializedName: "Scheduled",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AlertRule.type.polymorphicDiscriminator,
    uberParent: "AlertRule",
    className: "ScheduledAlertRule",
    modelProperties: {
      ...AlertRule.type.modelProperties,
      query: {
        serializedName: "properties.query",
        type: {
          name: "String"
        }
      },
      queryFrequency: {
        serializedName: "properties.queryFrequency",
        type: {
          name: "TimeSpan"
        }
      },
      queryPeriod: {
        serializedName: "properties.queryPeriod",
        type: {
          name: "TimeSpan"
        }
      },
      severity: {
        serializedName: "properties.severity",
        type: {
          name: "String"
        }
      },
      triggerOperator: {
        serializedName: "properties.triggerOperator",
        type: {
          name: "Enum",
          allowedValues: [
            "GreaterThan",
            "LessThan",
            "Equal",
            "NotEqual"
          ]
        }
      },
      triggerThreshold: {
        serializedName: "properties.triggerThreshold",
        type: {
          name: "Number"
        }
      },
      eventGroupingSettings: {
        serializedName: "properties.eventGroupingSettings",
        type: {
          name: "Composite",
          className: "EventGroupingSettings"
        }
      },
      alertRuleTemplateName: {
        serializedName: "properties.alertRuleTemplateName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      displayName: {
        required: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      enabled: {
        required: true,
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      lastModifiedUtc: {
        readOnly: true,
        serializedName: "properties.lastModifiedUtc",
        type: {
          name: "DateTime"
        }
      },
      suppressionDuration: {
        required: true,
        serializedName: "properties.suppressionDuration",
        type: {
          name: "TimeSpan"
        }
      },
      suppressionEnabled: {
        required: true,
        serializedName: "properties.suppressionEnabled",
        type: {
          name: "Boolean"
        }
      },
      tactics: {
        serializedName: "properties.tactics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      incidentConfiguration: {
        serializedName: "properties.incidentConfiguration",
        type: {
          name: "Composite",
          className: "IncidentConfiguration"
        }
      }
    }
  }
};

export const EventGroupingSettings: msRest.CompositeMapper = {
  serializedName: "EventGroupingSettings",
  type: {
    name: "Composite",
    className: "EventGroupingSettings",
    modelProperties: {
      aggregationKind: {
        serializedName: "aggregationKind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduledAlertRuleCommonProperties: msRest.CompositeMapper = {
  serializedName: "ScheduledAlertRuleCommonProperties",
  type: {
    name: "Composite",
    className: "ScheduledAlertRuleCommonProperties",
    modelProperties: {
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      },
      queryFrequency: {
        serializedName: "queryFrequency",
        type: {
          name: "TimeSpan"
        }
      },
      queryPeriod: {
        serializedName: "queryPeriod",
        type: {
          name: "TimeSpan"
        }
      },
      severity: {
        serializedName: "severity",
        type: {
          name: "String"
        }
      },
      triggerOperator: {
        serializedName: "triggerOperator",
        type: {
          name: "Enum",
          allowedValues: [
            "GreaterThan",
            "LessThan",
            "Equal",
            "NotEqual"
          ]
        }
      },
      triggerThreshold: {
        serializedName: "triggerThreshold",
        type: {
          name: "Number"
        }
      },
      eventGroupingSettings: {
        serializedName: "eventGroupingSettings",
        type: {
          name: "Composite",
          className: "EventGroupingSettings"
        }
      }
    }
  }
};

export const ScheduledAlertRuleTemplate: msRest.CompositeMapper = {
  serializedName: "Scheduled",
  type: {
    name: "Composite",
    polymorphicDiscriminator: AlertRuleTemplate.type.polymorphicDiscriminator,
    uberParent: "AlertRuleTemplate",
    className: "ScheduledAlertRuleTemplate",
    modelProperties: {
      ...AlertRuleTemplate.type.modelProperties,
      alertRulesCreatedByTemplateCount: {
        required: true,
        serializedName: "properties.alertRulesCreatedByTemplateCount",
        type: {
          name: "Number"
        }
      },
      lastUpdatedDateUTC: {
        readOnly: true,
        serializedName: "properties.lastUpdatedDateUTC",
        type: {
          name: "DateTime"
        }
      },
      createdDateUTC: {
        readOnly: true,
        serializedName: "properties.createdDateUTC",
        type: {
          name: "DateTime"
        }
      },
      description: {
        required: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      displayName: {
        required: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      requiredDataConnectors: {
        serializedName: "properties.requiredDataConnectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertRuleTemplateDataSource"
            }
          }
        }
      },
      status: {
        required: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      query: {
        required: true,
        serializedName: "properties.query",
        type: {
          name: "String"
        }
      },
      queryFrequency: {
        required: true,
        serializedName: "properties.queryFrequency",
        type: {
          name: "TimeSpan"
        }
      },
      queryPeriod: {
        required: true,
        serializedName: "properties.queryPeriod",
        type: {
          name: "TimeSpan"
        }
      },
      severity: {
        required: true,
        serializedName: "properties.severity",
        type: {
          name: "String"
        }
      },
      triggerOperator: {
        required: true,
        serializedName: "properties.triggerOperator",
        type: {
          name: "Enum",
          allowedValues: [
            "GreaterThan",
            "LessThan",
            "Equal",
            "NotEqual"
          ]
        }
      },
      triggerThreshold: {
        required: true,
        serializedName: "properties.triggerThreshold",
        type: {
          name: "Number"
        }
      },
      eventGroupingSettings: {
        serializedName: "properties.eventGroupingSettings",
        type: {
          name: "Composite",
          className: "EventGroupingSettings"
        }
      },
      tactics: {
        serializedName: "properties.tactics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SecurityGroupEntity: msRest.CompositeMapper = {
  serializedName: "SecurityGroup",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "SecurityGroupEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      distinguishedName: {
        readOnly: true,
        serializedName: "properties.distinguishedName",
        type: {
          name: "String"
        }
      },
      objectGuid: {
        readOnly: true,
        serializedName: "properties.objectGuid",
        type: {
          name: "Uuid"
        }
      },
      sid: {
        readOnly: true,
        serializedName: "properties.sid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Settings: msRest.CompositeMapper = {
  serializedName: "Settings",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "Settings",
    className: "Settings",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SettingList: msRest.CompositeMapper = {
  serializedName: "SettingList",
  type: {
    name: "Composite",
    className: "SettingList",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Settings"
            }
          }
        }
      }
    }
  }
};

export const SettingsKind: msRest.CompositeMapper = {
  serializedName: "SettingsKind",
  type: {
    name: "Composite",
    className: "SettingsKind",
    modelProperties: {
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TIDataConnectorDataTypesIndicators: msRest.CompositeMapper = {
  serializedName: "TIDataConnectorDataTypes_indicators",
  type: {
    name: "Composite",
    className: "TIDataConnectorDataTypesIndicators",
    modelProperties: {
      ...DataConnectorDataTypeCommon.type.modelProperties
    }
  }
};

export const TIDataConnectorDataTypes: msRest.CompositeMapper = {
  serializedName: "TIDataConnectorDataTypes",
  type: {
    name: "Composite",
    className: "TIDataConnectorDataTypes",
    modelProperties: {
      indicators: {
        serializedName: "indicators",
        type: {
          name: "Composite",
          className: "TIDataConnectorDataTypesIndicators"
        }
      }
    }
  }
};

export const TIDataConnector: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligence",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "TIDataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "TIDataConnectorDataTypes"
        }
      }
    }
  }
};

export const TICheckRequirements: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligence",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
    uberParent: "DataConnectorsCheckRequirements",
    className: "TICheckRequirements",
    modelProperties: {
      ...DataConnectorsCheckRequirements.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TiTaxiiDataConnectorDataTypesTaxiiClient: msRest.CompositeMapper = {
  serializedName: "TiTaxiiDataConnectorDataTypes_taxiiClient",
  type: {
    name: "Composite",
    className: "TiTaxiiDataConnectorDataTypesTaxiiClient",
    modelProperties: {
      ...DataConnectorDataTypeCommon.type.modelProperties
    }
  }
};

export const TiTaxiiDataConnectorDataTypes: msRest.CompositeMapper = {
  serializedName: "TiTaxiiDataConnectorDataTypes",
  type: {
    name: "Composite",
    className: "TiTaxiiDataConnectorDataTypes",
    modelProperties: {
      taxiiClient: {
        serializedName: "taxiiClient",
        type: {
          name: "Composite",
          className: "TiTaxiiDataConnectorDataTypesTaxiiClient"
        }
      }
    }
  }
};

export const TiTaxiiDataConnector: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceTaxii",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnector.type.polymorphicDiscriminator,
    uberParent: "DataConnector",
    className: "TiTaxiiDataConnector",
    modelProperties: {
      ...DataConnector.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      workspaceId: {
        serializedName: "properties.workspaceId",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      taxiiServer: {
        serializedName: "properties.taxiiServer",
        type: {
          name: "String"
        }
      },
      collectionId: {
        serializedName: "properties.collectionId",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      dataTypes: {
        serializedName: "properties.dataTypes",
        type: {
          name: "Composite",
          className: "TiTaxiiDataConnectorDataTypes"
        }
      }
    }
  }
};

export const TiTaxiiCheckRequirements: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceTaxii",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataConnectorsCheckRequirements.type.polymorphicDiscriminator,
    uberParent: "DataConnectorsCheckRequirements",
    className: "TiTaxiiCheckRequirements",
    modelProperties: {
      ...DataConnectorsCheckRequirements.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EyesOn: msRest.CompositeMapper = {
  serializedName: "EyesOn",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Settings.type.polymorphicDiscriminator,
    uberParent: "Settings",
    className: "EyesOn",
    modelProperties: {
      ...Settings.type.modelProperties,
      isEnabled: {
        readOnly: true,
        serializedName: "properties.isEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const EntityAnalytics: msRest.CompositeMapper = {
  serializedName: "EntityAnalytics",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Settings.type.polymorphicDiscriminator,
    uberParent: "Settings",
    className: "EntityAnalytics",
    modelProperties: {
      ...Settings.type.modelProperties,
      isEnabled: {
        readOnly: true,
        serializedName: "properties.isEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Ueba: msRest.CompositeMapper = {
  serializedName: "Ueba",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Settings.type.polymorphicDiscriminator,
    uberParent: "Settings",
    className: "Ueba",
    modelProperties: {
      ...Settings.type.modelProperties,
      dataSources: {
        serializedName: "properties.dataSources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UrlEntity: msRest.CompositeMapper = {
  serializedName: "Url",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "UrlEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      url: {
        readOnly: true,
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IoTDeviceEntity: msRest.CompositeMapper = {
  serializedName: "IoTDevice",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Entity.type.polymorphicDiscriminator,
    uberParent: "Entity",
    className: "IoTDeviceEntity",
    modelProperties: {
      ...Entity.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      deviceId: {
        readOnly: true,
        serializedName: "properties.deviceId",
        type: {
          name: "String"
        }
      },
      deviceName: {
        readOnly: true,
        serializedName: "properties.deviceName",
        type: {
          name: "String"
        }
      },
      source: {
        readOnly: true,
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      iotSecurityAgentId: {
        readOnly: true,
        serializedName: "properties.iotSecurityAgentId",
        type: {
          name: "Uuid"
        }
      },
      deviceType: {
        readOnly: true,
        serializedName: "properties.deviceType",
        type: {
          name: "String"
        }
      },
      vendor: {
        readOnly: true,
        serializedName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      edgeId: {
        readOnly: true,
        serializedName: "properties.edgeId",
        type: {
          name: "String"
        }
      },
      macAddress: {
        readOnly: true,
        serializedName: "properties.macAddress",
        type: {
          name: "String"
        }
      },
      model: {
        readOnly: true,
        serializedName: "properties.model",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        readOnly: true,
        serializedName: "properties.serialNumber",
        type: {
          name: "String"
        }
      },
      firmwareVersion: {
        readOnly: true,
        serializedName: "properties.firmwareVersion",
        type: {
          name: "String"
        }
      },
      operatingSystem: {
        readOnly: true,
        serializedName: "properties.operatingSystem",
        type: {
          name: "String"
        }
      },
      iotHubEntityId: {
        readOnly: true,
        serializedName: "properties.iotHubEntityId",
        type: {
          name: "String"
        }
      },
      hostEntityId: {
        readOnly: true,
        serializedName: "properties.hostEntityId",
        type: {
          name: "String"
        }
      },
      ipAddressEntityId: {
        readOnly: true,
        serializedName: "properties.ipAddressEntityId",
        type: {
          name: "String"
        }
      },
      threatIntelligence: {
        readOnly: true,
        serializedName: "properties.threatIntelligence",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligence"
            }
          }
        }
      },
      protocols: {
        readOnly: true,
        serializedName: "properties.protocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Watchlist: msRest.CompositeMapper = {
  serializedName: "Watchlist",
  type: {
    name: "Composite",
    className: "Watchlist",
    modelProperties: {
      ...ResourceWithEtag.type.modelProperties,
      watchlistId: {
        serializedName: "properties.watchlistId",
        type: {
          name: "String"
        }
      },
      displayName: {
        required: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      provider: {
        required: true,
        serializedName: "properties.provider",
        type: {
          name: "String"
        }
      },
      source: {
        required: true,
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      updated: {
        serializedName: "properties.updated",
        type: {
          name: "DateTime"
        }
      },
      createdBy: {
        serializedName: "properties.createdBy",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      },
      updatedBy: {
        serializedName: "properties.updatedBy",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      watchlistType: {
        serializedName: "properties.watchlistType",
        type: {
          name: "String"
        }
      },
      watchlistAlias: {
        serializedName: "properties.watchlistAlias",
        type: {
          name: "String"
        }
      },
      isDeleted: {
        serializedName: "properties.isDeleted",
        type: {
          name: "Boolean"
        }
      },
      labels: {
        serializedName: "properties.labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      defaultDuration: {
        serializedName: "properties.defaultDuration",
        type: {
          name: "TimeSpan"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      numberOfLinesToSkip: {
        serializedName: "properties.numberOfLinesToSkip",
        type: {
          name: "Number"
        }
      },
      rawContent: {
        serializedName: "properties.rawContent",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "properties.contentType",
        type: {
          name: "String"
        }
      },
      uploadStatus: {
        serializedName: "properties.uploadStatus",
        type: {
          name: "String"
        }
      },
      watchlistItemsCount: {
        serializedName: "properties.watchlistItemsCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WatchlistItem: msRest.CompositeMapper = {
  serializedName: "WatchlistItem",
  type: {
    name: "Composite",
    className: "WatchlistItem",
    modelProperties: {
      ...ResourceWithEtag.type.modelProperties,
      watchlistItemType: {
        serializedName: "properties.watchlistItemType",
        type: {
          name: "String"
        }
      },
      watchlistItemId: {
        serializedName: "properties.watchlistItemId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      isDeleted: {
        serializedName: "properties.isDeleted",
        type: {
          name: "Boolean"
        }
      },
      created: {
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      updated: {
        serializedName: "properties.updated",
        type: {
          name: "DateTime"
        }
      },
      createdBy: {
        serializedName: "properties.createdBy",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      },
      updatedBy: {
        serializedName: "properties.updatedBy",
        type: {
          name: "Composite",
          className: "UserInfo"
        }
      },
      itemsKeyValue: {
        required: true,
        serializedName: "properties.itemsKeyValue",
        type: {
          name: "Object"
        }
      },
      entityMapping: {
        serializedName: "properties.entityMapping",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const ThreatIntelligenceInformation: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceInformation",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "ThreatIntelligenceInformation",
    className: "ThreatIntelligenceInformation",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThreatIntelligenceKillChainPhase: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceKillChainPhase",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceKillChainPhase",
    modelProperties: {
      killChainName: {
        serializedName: "killChainName",
        type: {
          name: "String"
        }
      },
      phaseName: {
        serializedName: "phaseName",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ThreatIntelligenceGranularMarkingModel: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceGranularMarkingModel",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceGranularMarkingModel",
    modelProperties: {
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      markingRef: {
        serializedName: "markingRef",
        type: {
          name: "Number"
        }
      },
      selectors: {
        serializedName: "selectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ThreatIntelligenceIndicatorModel: msRest.CompositeMapper = {
  serializedName: "indicator",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ThreatIntelligenceInformation.type.polymorphicDiscriminator,
    uberParent: "ThreatIntelligenceInformation",
    className: "ThreatIntelligenceIndicatorModel",
    modelProperties: {
      ...ThreatIntelligenceInformation.type.modelProperties,
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      threatIntelligenceTags: {
        serializedName: "properties.threatIntelligenceTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      lastUpdatedTimeUtc: {
        serializedName: "properties.lastUpdatedTimeUtc",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      indicatorTypes: {
        serializedName: "properties.indicatorTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pattern: {
        serializedName: "properties.pattern",
        type: {
          name: "String"
        }
      },
      patternType: {
        serializedName: "properties.patternType",
        type: {
          name: "String"
        }
      },
      killChainPhases: {
        serializedName: "properties.killChainPhases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligenceKillChainPhase"
            }
          }
        }
      },
      externalId: {
        serializedName: "properties.externalId",
        type: {
          name: "String"
        }
      },
      createdByRef: {
        serializedName: "properties.createdByRef",
        type: {
          name: "String"
        }
      },
      externalReferences: {
        serializedName: "properties.externalReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      granularMarkings: {
        serializedName: "properties.granularMarkings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligenceGranularMarkingModel"
            }
          }
        }
      },
      revoked: {
        serializedName: "properties.revoked",
        type: {
          name: "Boolean"
        }
      },
      confidence: {
        serializedName: "properties.confidence",
        type: {
          name: "Number"
        }
      },
      labels: {
        serializedName: "properties.labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      threatTypes: {
        serializedName: "properties.threatTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      validFrom: {
        serializedName: "properties.validFrom",
        type: {
          name: "String"
        }
      },
      validUntil: {
        serializedName: "properties.validUntil",
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "properties.created",
        type: {
          name: "String"
        }
      },
      modified: {
        serializedName: "properties.modified",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThreatIntelligenceResourceKind1: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceResourceKind",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceResourceKind1",
    modelProperties: {
      kind: {
        required: true,
        isConstant: true,
        serializedName: "kind",
        defaultValue: 'indicator',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThreatIntelligenceIndicatorModelForRequestBody: msRest.CompositeMapper = {
  serializedName: "indicator",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceIndicatorModelForRequestBody",
    modelProperties: {
      ...ThreatIntelligenceResourceKind1.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      additionalData: {
        readOnly: true,
        serializedName: "properties.additionalData",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      threatIntelligenceTags: {
        serializedName: "properties.threatIntelligenceTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      lastUpdatedTimeUtc: {
        serializedName: "properties.lastUpdatedTimeUtc",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      indicatorTypes: {
        serializedName: "properties.indicatorTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pattern: {
        serializedName: "properties.pattern",
        type: {
          name: "String"
        }
      },
      patternType: {
        serializedName: "properties.patternType",
        type: {
          name: "String"
        }
      },
      killChainPhases: {
        serializedName: "properties.killChainPhases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligenceKillChainPhase"
            }
          }
        }
      },
      externalId: {
        serializedName: "properties.externalId",
        type: {
          name: "String"
        }
      },
      createdByRef: {
        serializedName: "properties.createdByRef",
        type: {
          name: "String"
        }
      },
      externalReferences: {
        serializedName: "properties.externalReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      granularMarkings: {
        serializedName: "properties.granularMarkings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligenceGranularMarkingModel"
            }
          }
        }
      },
      revoked: {
        serializedName: "properties.revoked",
        type: {
          name: "Boolean"
        }
      },
      confidence: {
        serializedName: "properties.confidence",
        type: {
          name: "Number"
        }
      },
      labels: {
        serializedName: "properties.labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      threatTypes: {
        serializedName: "properties.threatTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      validFrom: {
        serializedName: "properties.validFrom",
        type: {
          name: "String"
        }
      },
      validUntil: {
        serializedName: "properties.validUntil",
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "properties.created",
        type: {
          name: "String"
        }
      },
      modified: {
        serializedName: "properties.modified",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThreatIntelligenceSortingCriteria1: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceSortingCriteria",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceSortingCriteria1",
    modelProperties: {
      itemKey: {
        serializedName: "itemKey",
        type: {
          name: "String"
        }
      },
      sortOrder: {
        serializedName: "sortOrder",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThreatIntelligenceFilteringCriteria: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceFilteringCriteria",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceFilteringCriteria",
    modelProperties: {
      pageSize: {
        serializedName: "pageSize",
        type: {
          name: "Number"
        }
      },
      minConfidence: {
        serializedName: "minConfidence",
        type: {
          name: "Number"
        }
      },
      maxConfidence: {
        serializedName: "maxConfidence",
        type: {
          name: "Number"
        }
      },
      minValidUntil: {
        serializedName: "minValidUntil",
        type: {
          name: "String"
        }
      },
      maxValidUntil: {
        serializedName: "maxValidUntil",
        type: {
          name: "String"
        }
      },
      includeDisabled: {
        serializedName: "includeDisabled",
        type: {
          name: "Boolean"
        }
      },
      sortBy: {
        serializedName: "sortBy",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligenceSortingCriteria1"
            }
          }
        }
      },
      sources: {
        serializedName: "sources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      patternTypes: {
        serializedName: "patternTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      threatTypes: {
        serializedName: "threatTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ids: {
        serializedName: "ids",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      keywords: {
        serializedName: "keywords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      skipToken: {
        serializedName: "skipToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ThreatIntelligenceAppendTags: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceAppendTags",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceAppendTags",
    modelProperties: {
      threatIntelligenceTags: {
        serializedName: "threatIntelligenceTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ThreatIntelligenceMetricEntity: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceMetricEntity",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceMetricEntity",
    modelProperties: {
      metricName: {
        serializedName: "metricName",
        type: {
          name: "String"
        }
      },
      metricValue: {
        serializedName: "metricValue",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ThreatIntelligenceMetric: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceMetric",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceMetric",
    modelProperties: {
      lastUpdatedTimeUtc: {
        serializedName: "lastUpdatedTimeUtc",
        type: {
          name: "String"
        }
      },
      threatTypeMetrics: {
        serializedName: "threatTypeMetrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligenceMetricEntity"
            }
          }
        }
      },
      patternTypeMetrics: {
        serializedName: "patternTypeMetrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligenceMetricEntity"
            }
          }
        }
      },
      sourceMetrics: {
        serializedName: "sourceMetrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligenceMetricEntity"
            }
          }
        }
      }
    }
  }
};

export const ThreatIntelligenceMetrics: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceMetrics",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceMetrics",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ThreatIntelligenceMetric"
        }
      }
    }
  }
};

export const ThreatIntelligenceMetricsList: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceMetricsList",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceMetricsList",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligenceMetrics"
            }
          }
        }
      }
    }
  }
};

export const EntityGetInsightsParameters: msRest.CompositeMapper = {
  serializedName: "EntityGetInsightsParameters",
  type: {
    name: "Composite",
    className: "EntityGetInsightsParameters",
    modelProperties: {
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        required: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      addDefaultExtendedTimeRange: {
        serializedName: "addDefaultExtendedTimeRange",
        type: {
          name: "Boolean"
        }
      },
      insightQueryIds: {
        serializedName: "insightQueryIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Uuid"
            }
          }
        }
      }
    }
  }
};

export const GetInsightsError: msRest.CompositeMapper = {
  serializedName: "GetInsightsError",
  type: {
    name: "Composite",
    className: "GetInsightsError",
    modelProperties: {
      kind: {
        required: true,
        isConstant: true,
        serializedName: "kind",
        defaultValue: 'Insight',
        type: {
          name: "String"
        }
      },
      queryId: {
        serializedName: "queryId",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        required: true,
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetInsightsResultsMetadata: msRest.CompositeMapper = {
  serializedName: "GetInsightsResultsMetadata",
  type: {
    name: "Composite",
    className: "GetInsightsResultsMetadata",
    modelProperties: {
      totalCount: {
        required: true,
        serializedName: "totalCount",
        type: {
          name: "Number"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GetInsightsError"
            }
          }
        }
      }
    }
  }
};

export const EntityInsightItemQueryTimeInterval: msRest.CompositeMapper = {
  serializedName: "EntityInsightItem_queryTimeInterval",
  type: {
    name: "Composite",
    className: "EntityInsightItemQueryTimeInterval",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const InsightsTableResultColumnsItem: msRest.CompositeMapper = {
  serializedName: "InsightsTableResult_columnsItem",
  type: {
    name: "Composite",
    className: "InsightsTableResultColumnsItem",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InsightsTableResult: msRest.CompositeMapper = {
  serializedName: "InsightsTableResult",
  type: {
    name: "Composite",
    className: "InsightsTableResult",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InsightsTableResultColumnsItem"
            }
          }
        }
      },
      rows: {
        serializedName: "rows",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const EntityInsightItem: msRest.CompositeMapper = {
  serializedName: "EntityInsightItem",
  type: {
    name: "Composite",
    className: "EntityInsightItem",
    modelProperties: {
      queryId: {
        serializedName: "queryId",
        type: {
          name: "String"
        }
      },
      queryTimeInterval: {
        serializedName: "queryTimeInterval",
        type: {
          name: "Composite",
          className: "EntityInsightItemQueryTimeInterval"
        }
      },
      tableQueryResults: {
        serializedName: "tableQueryResults",
        type: {
          name: "Composite",
          className: "InsightsTableResult"
        }
      },
      chartQueryResults: {
        serializedName: "chartQueryResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InsightsTableResult"
            }
          }
        }
      }
    }
  }
};

export const EntityGetInsightsResponse: msRest.CompositeMapper = {
  serializedName: "EntityGetInsightsResponse",
  type: {
    name: "Composite",
    className: "EntityGetInsightsResponse",
    modelProperties: {
      metaData: {
        serializedName: "metaData",
        type: {
          name: "Composite",
          className: "GetInsightsResultsMetadata"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityInsightItem"
            }
          }
        }
      }
    }
  }
};

export const EntityQueryItemPropertiesDataTypesItem: msRest.CompositeMapper = {
  serializedName: "EntityQueryItemProperties_dataTypesItem",
  type: {
    name: "Composite",
    className: "EntityQueryItemPropertiesDataTypesItem",
    modelProperties: {
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsList: msRest.CompositeMapper = {
  serializedName: "OperationsList",
  type: {
    name: "Composite",
    className: "OperationsList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const AlertRulesList: msRest.CompositeMapper = {
  serializedName: "AlertRulesList",
  type: {
    name: "Composite",
    className: "AlertRulesList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertRule"
            }
          }
        }
      }
    }
  }
};

export const ActionsList: msRest.CompositeMapper = {
  serializedName: "ActionsList",
  type: {
    name: "Composite",
    className: "ActionsList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActionResponse"
            }
          }
        }
      }
    }
  }
};

export const AlertRuleTemplatesList: msRest.CompositeMapper = {
  serializedName: "AlertRuleTemplatesList",
  type: {
    name: "Composite",
    className: "AlertRuleTemplatesList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertRuleTemplate"
            }
          }
        }
      }
    }
  }
};

export const CaseList: msRest.CompositeMapper = {
  serializedName: "CaseList",
  type: {
    name: "Composite",
    className: "CaseList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CaseModel"
            }
          }
        }
      }
    }
  }
};

export const CaseCommentList: msRest.CompositeMapper = {
  serializedName: "CaseCommentList",
  type: {
    name: "Composite",
    className: "CaseCommentList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CaseComment"
            }
          }
        }
      }
    }
  }
};

export const BookmarkList: msRest.CompositeMapper = {
  serializedName: "BookmarkList",
  type: {
    name: "Composite",
    className: "BookmarkList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Bookmark"
            }
          }
        }
      }
    }
  }
};

export const CaseRelationList: msRest.CompositeMapper = {
  serializedName: "CaseRelationList",
  type: {
    name: "Composite",
    className: "CaseRelationList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CaseRelation"
            }
          }
        }
      }
    }
  }
};

export const RelationList: msRest.CompositeMapper = {
  serializedName: "RelationList",
  type: {
    name: "Composite",
    className: "RelationList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Relation"
            }
          }
        }
      }
    }
  }
};

export const DataConnectorList: msRest.CompositeMapper = {
  serializedName: "DataConnectorList",
  type: {
    name: "Composite",
    className: "DataConnectorList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataConnector"
            }
          }
        }
      }
    }
  }
};

export const EntityList: msRest.CompositeMapper = {
  serializedName: "EntityList",
  type: {
    name: "Composite",
    className: "EntityList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Entity"
            }
          }
        }
      }
    }
  }
};

export const OfficeConsentList: msRest.CompositeMapper = {
  serializedName: "OfficeConsentList",
  type: {
    name: "Composite",
    className: "OfficeConsentList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OfficeConsent"
            }
          }
        }
      }
    }
  }
};

export const EntityQueryList: msRest.CompositeMapper = {
  serializedName: "EntityQueryList",
  type: {
    name: "Composite",
    className: "EntityQueryList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityQuery"
            }
          }
        }
      }
    }
  }
};

export const IncidentList: msRest.CompositeMapper = {
  serializedName: "IncidentList",
  type: {
    name: "Composite",
    className: "IncidentList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Incident"
            }
          }
        }
      }
    }
  }
};

export const IncidentCommentList: msRest.CompositeMapper = {
  serializedName: "IncidentCommentList",
  type: {
    name: "Composite",
    className: "IncidentCommentList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IncidentComment"
            }
          }
        }
      }
    }
  }
};

export const WatchlistList: msRest.CompositeMapper = {
  serializedName: "WatchlistList",
  type: {
    name: "Composite",
    className: "WatchlistList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Watchlist"
            }
          }
        }
      }
    }
  }
};

export const ThreatIntelligenceInformationList: msRest.CompositeMapper = {
  serializedName: "ThreatIntelligenceInformationList",
  type: {
    name: "Composite",
    className: "ThreatIntelligenceInformationList",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ThreatIntelligenceInformation"
            }
          }
        }
      }
    }
  }
};

export const discriminators = {
  'DataConnector.AzureActiveDirectory' : AADDataConnector,
  'DataConnectorsCheckRequirements.AzureActiveDirectory' : AADCheckRequirements,
  'DataConnector.AzureAdvancedThreatProtection' : AATPDataConnector,
  'DataConnectorsCheckRequirements.AzureAdvancedThreatProtection' : AATPCheckRequirements,
  'DataConnector.AzureSecurityCenter' : ASCDataConnector,
  'DataConnectorsCheckRequirements.AzureSecurityCenter' : ASCCheckRequirements,
  'Entity.Account' : AccountEntity,
  'Aggregations' : Aggregations,
  'AlertRule' : AlertRule,
  'AlertRuleTemplate' : AlertRuleTemplate,
  'DataConnector.AmazonWebServicesCloudTrail' : AwsCloudTrailDataConnector,
  'DataConnectorsCheckRequirements.AmazonWebServicesCloudTrail' : AwsCloudTrailCheckRequirements,
  'Entity.AzureResource' : AzureResourceEntity,
  'Entity' : Entity,
  'Aggregations.CasesAggregation' : CasesAggregation,
  'Entity.CloudApplication' : CloudApplicationEntity,
  'DataConnector' : DataConnector,
  'DataConnectorsCheckRequirements' : DataConnectorsCheckRequirements,
  'Entity.DnsResolution' : DnsEntity,
  'DataConnector.Dynamics365' : Dynamics365DataConnector,
  'DataConnectorsCheckRequirements.Dynamics365' : Dynamics365CheckRequirements,
  'EntityTimelineItem' : EntityTimelineItem,
  'EntityQueryItem' : EntityQueryItem,
  'EntityQuery' : EntityQuery,
  'EntityQuery.Expansion' : ExpansionEntityQuery,
  'Entity.File' : FileEntity,
  'Entity.FileHash' : FileHashEntity,
  'EntityQueryItem.Insight' : InsightQueryItem,
  'EntityTimelineItem.Activity' : ActivityTimelineItem,
  'EntityTimelineItem.SecurityAlert' : SecurityAlertTimelineItem,
  'EntityTimelineItem.Bookmark' : BookmarkTimelineItem,
  'AlertRule.Fusion' : FusionAlertRule,
  'AlertRuleTemplate.Fusion' : FusionAlertRuleTemplate,
  'Entity.Host' : HostEntity,
  'Entity.Bookmark' : HuntingBookmark,
  'Entity.SecurityAlert' : SecurityAlert,
  'Entity.Ip' : IpEntity,
  'Entity.Mailbox' : MailboxEntity,
  'Entity.MailCluster' : MailClusterEntity,
  'Entity.MailMessage' : MailMessageEntity,
  'Entity.SubmissionMail' : SubmissionMailEntity,
  'DataConnector.MicrosoftCloudAppSecurity' : MCASDataConnector,
  'DataConnectorsCheckRequirements.MicrosoftCloudAppSecurity' : MCASCheckRequirements,
  'DataConnector.MicrosoftDefenderAdvancedThreatProtection' : MDATPDataConnector,
  'DataConnectorsCheckRequirements.MicrosoftDefenderAdvancedThreatProtection' : MDATPCheckRequirements,
  'Entity.Malware' : MalwareEntity,
  'AlertRule.MicrosoftSecurityIncidentCreation' : MicrosoftSecurityIncidentCreationAlertRule,
  'AlertRuleTemplate.MicrosoftSecurityIncidentCreation' : MicrosoftSecurityIncidentCreationAlertRuleTemplate,
  'DataConnector.OfficeATP' : OfficeATPDataConnector,
  'DataConnectorsCheckRequirements.OfficeATP' : OfficeATPCheckRequirements,
  'DataConnector.Office365' : OfficeDataConnector,
  'Entity.Process' : ProcessEntity,
  'Entity.RegistryKey' : RegistryKeyEntity,
  'Entity.RegistryValue' : RegistryValueEntity,
  'AlertRule.Scheduled' : ScheduledAlertRule,
  'AlertRuleTemplate.Scheduled' : ScheduledAlertRuleTemplate,
  'Entity.SecurityGroup' : SecurityGroupEntity,
  'Settings' : Settings,
  'DataConnector.ThreatIntelligence' : TIDataConnector,
  'DataConnectorsCheckRequirements.ThreatIntelligence' : TICheckRequirements,
  'DataConnector.ThreatIntelligenceTaxii' : TiTaxiiDataConnector,
  'DataConnectorsCheckRequirements.ThreatIntelligenceTaxii' : TiTaxiiCheckRequirements,
  'Settings.EyesOn' : EyesOn,
  'Settings.EntityAnalytics' : EntityAnalytics,
  'Settings.Ueba' : Ueba,
  'Entity.Url' : UrlEntity,
  'Entity.IoTDevice' : IoTDeviceEntity,
  'ThreatIntelligenceInformation' : ThreatIntelligenceInformation,
  'ThreatIntelligenceInformation.indicator' : ThreatIntelligenceIndicatorModel

};
