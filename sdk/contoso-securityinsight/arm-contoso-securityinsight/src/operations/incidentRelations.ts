/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/incidentRelationsMappers";
import * as Parameters from "../models/parameters";
import { SecurityInsightsContext } from "../securityInsightsContext";

/** Class representing a IncidentRelations. */
export class IncidentRelations {
  private readonly client: SecurityInsightsContext;

  /**
   * Create a IncidentRelations.
   * @param {SecurityInsightsContext} client Reference to the service client.
   */
  constructor(client: SecurityInsightsContext) {
    this.client = client;
  }

  /**
   * Gets all incident relations.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param [options] The optional parameters
   * @returns Promise<Models.IncidentRelationsListResponse>
   */
  list(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, options?: Models.IncidentRelationsListOptionalParams): Promise<Models.IncidentRelationsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param callback The callback
   */
  list(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, callback: msRest.ServiceCallback<Models.RelationList>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, options: Models.IncidentRelationsListOptionalParams, callback: msRest.ServiceCallback<Models.RelationList>): void;
  list(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, options?: Models.IncidentRelationsListOptionalParams | msRest.ServiceCallback<Models.RelationList>, callback?: msRest.ServiceCallback<Models.RelationList>): Promise<Models.IncidentRelationsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        incidentId,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.IncidentRelationsListResponse>;
  }

  /**
   * Gets an incident relation.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param relationName Relation Name
   * @param [options] The optional parameters
   * @returns Promise<Models.IncidentRelationsGetRelationResponse>
   */
  getRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, options?: msRest.RequestOptionsBase): Promise<Models.IncidentRelationsGetRelationResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param relationName Relation Name
   * @param callback The callback
   */
  getRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, callback: msRest.ServiceCallback<Models.Relation>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param relationName Relation Name
   * @param options The optional parameters
   * @param callback The callback
   */
  getRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Relation>): void;
  getRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Relation>, callback?: msRest.ServiceCallback<Models.Relation>): Promise<Models.IncidentRelationsGetRelationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        incidentId,
        relationName,
        options
      },
      getRelationOperationSpec,
      callback) as Promise<Models.IncidentRelationsGetRelationResponse>;
  }

  /**
   * Creates or updates the incident relation.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param relationName Relation Name
   * @param relation The relation model
   * @param [options] The optional parameters
   * @returns Promise<Models.IncidentRelationsCreateOrUpdateRelationResponse>
   */
  createOrUpdateRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, relation: Models.Relation, options?: msRest.RequestOptionsBase): Promise<Models.IncidentRelationsCreateOrUpdateRelationResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param relationName Relation Name
   * @param relation The relation model
   * @param callback The callback
   */
  createOrUpdateRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, relation: Models.Relation, callback: msRest.ServiceCallback<Models.Relation>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param relationName Relation Name
   * @param relation The relation model
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, relation: Models.Relation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Relation>): void;
  createOrUpdateRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, relation: Models.Relation, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Relation>, callback?: msRest.ServiceCallback<Models.Relation>): Promise<Models.IncidentRelationsCreateOrUpdateRelationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        incidentId,
        relationName,
        relation,
        options
      },
      createOrUpdateRelationOperationSpec,
      callback) as Promise<Models.IncidentRelationsCreateOrUpdateRelationResponse>;
  }

  /**
   * Delete the incident relation.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param relationName Relation Name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param relationName Relation Name
   * @param callback The callback
   */
  deleteRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param relationName Relation Name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteRelation(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, incidentId: string, relationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        incidentId,
        relationName,
        options
      },
      deleteRelationOperationSpec,
      callback);
  }

  /**
   * Gets all incident relations.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IncidentRelationsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.IncidentRelationsListNextOptionalParams): Promise<Models.IncidentRelationsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RelationList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.IncidentRelationsListNextOptionalParams, callback: msRest.ServiceCallback<Models.RelationList>): void;
  listNext(nextPageLink: string, options?: Models.IncidentRelationsListNextOptionalParams | msRest.ServiceCallback<Models.RelationList>, callback?: msRest.ServiceCallback<Models.RelationList>): Promise<Models.IncidentRelationsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.IncidentRelationsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/relations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.incidentId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderby,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelationList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getRelationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/relations/{relationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.incidentId,
    Parameters.relationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Relation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateRelationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/relations/{relationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.incidentId,
    Parameters.relationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "relation",
    mapper: {
      ...Mappers.Relation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Relation
    },
    201: {
      bodyMapper: Mappers.Relation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteRelationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/relations/{relationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.incidentId,
    Parameters.relationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderby,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelationList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
