/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ReservationRecommendations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClient } from "../consumptionManagementClient";
import {
  ReservationRecommendationUnion,
  ReservationRecommendationsListNextOptionalParams,
  ReservationRecommendationsListOptionalParams,
  ReservationRecommendationsListResponse,
  ReservationRecommendationsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ReservationRecommendations operations. */
export class ReservationRecommendationsImpl
  implements ReservationRecommendations {
  private readonly client: ConsumptionManagementClient;

  /**
   * Initialize a new instance of the class ReservationRecommendations class.
   * @param client Reference to the service client
   */
  constructor(client: ConsumptionManagementClient) {
    this.client = client;
  }

  /**
   * List of recommendations for purchasing reserved instances.
   * @param resourceScope The scope associated with reservation recommendations operations. This includes
   *                      '/subscriptions/{subscriptionId}/' for subscription scope,
   *                      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
   *                      '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope, and
   *                      '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *                      for billingProfile scope
   * @param options The options parameters.
   */
  public list(
    resourceScope: string,
    options?: ReservationRecommendationsListOptionalParams
  ): PagedAsyncIterableIterator<ReservationRecommendationUnion> {
    const iter = this.listPagingAll(resourceScope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceScope, options);
      }
    };
  }

  private async *listPagingPage(
    resourceScope: string,
    options?: ReservationRecommendationsListOptionalParams
  ): AsyncIterableIterator<ReservationRecommendationUnion[]> {
    let result = await this._list(resourceScope, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(resourceScope, continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceScope: string,
    options?: ReservationRecommendationsListOptionalParams
  ): AsyncIterableIterator<ReservationRecommendationUnion> {
    for await (const page of this.listPagingPage(resourceScope, options)) {
      yield* page;
    }
  }

  /**
   * List of recommendations for purchasing reserved instances.
   * @param resourceScope The scope associated with reservation recommendations operations. This includes
   *                      '/subscriptions/{subscriptionId}/' for subscription scope,
   *                      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
   *                      '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope, and
   *                      '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *                      for billingProfile scope
   * @param options The options parameters.
   */
  private _list(
    resourceScope: string,
    options?: ReservationRecommendationsListOptionalParams
  ): Promise<ReservationRecommendationsListResponse> {
    return this.client.sendOperationRequest(
      { resourceScope, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceScope The scope associated with reservation recommendations operations. This includes
   *                      '/subscriptions/{subscriptionId}/' for subscription scope,
   *                      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
   *                      '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for BillingAccount scope, and
   *                      '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *                      for billingProfile scope
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceScope: string,
    nextLink: string,
    options?: ReservationRecommendationsListNextOptionalParams
  ): Promise<ReservationRecommendationsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceScope, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceScope}/providers/Microsoft.Consumption/reservationRecommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationRecommendationsListResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.filter, Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceScope],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ReservationRecommendationsListResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.filter, Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceScope
  ],
  headerParameters: [Parameters.accept],
  serializer
};
