/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { VmScanners } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  VmScannersGetOptionalParams,
  VmScannersGetResponse,
  VmScannersCreateOrUpdateOptionalParams,
  VmScannersCreateOrUpdateResponse,
  VmScannersDeleteOptionalParams,
  VmScannersListBySubscriptionOptionalParams,
  VmScannersListBySubscriptionResponse
} from "../models";

/** Class containing VmScanners operations. */
export class VmScannersImpl implements VmScanners {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class VmScanners class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Gets the subscription's VM scanner configuration.
   * @param vmScannerName Name of the VM scanner.
   * @param options The options parameters.
   */
  get(
    vmScannerName: string,
    options?: VmScannersGetOptionalParams
  ): Promise<VmScannersGetResponse> {
    return this.client.sendOperationRequest(
      { vmScannerName, options },
      getOperationSpec
    );
  }

  /**
   * Create a VM scanner
   * @param vmScannerName Name of the VM scanner.
   * @param options The options parameters.
   */
  createOrUpdate(
    vmScannerName: string,
    options?: VmScannersCreateOrUpdateOptionalParams
  ): Promise<VmScannersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { vmScannerName, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a VM scanner configuration.
   * @param vmScannerName Name of the VM scanner.
   * @param options The options parameters.
   */
  delete(
    vmScannerName: string,
    options?: VmScannersDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { vmScannerName, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets the subscription's VM scanner configurations.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: VmScannersListBySubscriptionOptionalParams
  ): Promise<VmScannersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/vmScanners/{vmScannerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScannerConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion17],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.vmScannerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/vmScanners/{vmScannerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScannerConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion17],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.vmScannerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/vmScanners/{vmScannerName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion17],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.vmScannerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/vmScanners",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScannerConfigurationList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion17],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
