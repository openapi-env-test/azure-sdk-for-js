/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/namespaceOperationsMappers";
import * as Parameters from "../models/parameters";
import { ServiceBusManagementClientContext } from "../serviceBusManagementClientContext";

/** Class representing a NamespaceOperations. */
export class NamespaceOperations {
  private readonly client: ServiceBusManagementClientContext;

  /**
   * Create a NamespaceOperations.
   * @param {ServiceBusManagementClientContext} client Reference to the service client.
   */
  constructor(client: ServiceBusManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the status of long-running Namespace operation
   * @param locationName Name of the Location within the Azure.
   * @param operationResultId Name of the Namespace.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  get(locationName: string, operationResultId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param locationName Name of the Location within the Azure.
   * @param operationResultId Name of the Namespace.
   * @param callback The callback
   */
  get(locationName: string, operationResultId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param locationName Name of the Location within the Azure.
   * @param operationResultId Name of the Namespace.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(locationName: string, operationResultId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  get(locationName: string, operationResultId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        operationResultId,
        options
      },
      getOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/locations/{locationName}/namespaceOperations/{operationResultId}",
  urlParameters: [
    Parameters.locationName,
    Parameters.operationResultId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
