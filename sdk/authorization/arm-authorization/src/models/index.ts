/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Settings of an Access Review.
 */
export interface AccessReviewScheduleSettings {
  /**
   * Flag to indicate whether sending mails to reviewers and the review creator is enabled.
   */
  mailNotificationsEnabled?: boolean;
  /**
   * Flag to indicate whether sending reminder emails to reviewers are enabled.
   */
  reminderNotificationsEnabled?: boolean;
  /**
   * Flag to indicate whether reviewers are required to provide a justification when reviewing
   * access.
   */
  defaultDecisionEnabled?: boolean;
  /**
   * Flag to indicate whether the reviewer is required to pass justification when recording a
   * decision.
   */
  justificationRequiredOnApproval?: boolean;
  /**
   * This specifies the behavior for the autoReview feature when an access review completes.
   * Possible values include: 'Approve', 'Deny', 'Recommendation'
   */
  defaultDecision?: DefaultDecisionType;
  /**
   * Flag to indicate whether auto-apply capability, to automatically change the target object
   * access resource, is enabled. If not enabled, a user must, after the review completes, apply
   * the access review.
   */
  autoApplyDecisionsEnabled?: boolean;
  /**
   * Flag to indicate whether showing recommendations to reviewers is enabled.
   */
  recommendationsEnabled?: boolean;
  /**
   * The duration in days for an instance.
   */
  instanceDurationInDays?: number;
  /**
   * Access Review Settings.
   */
  recurrence?: AccessReviewRecurrenceSettings;
}

/**
 * Descriptor for what needs to be reviewed
 */
export interface AccessReviewReviewer {
  /**
   * The id of the reviewer(user/servicePrincipal)
   */
  principalId?: string;
  /**
   * The identity type : user/servicePrincipal. Possible values include: 'user', 'servicePrincipal'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalType?: AccessReviewReviewerType;
}

/**
 * Access Review Instance.
 */
export interface AccessReviewInstance extends BaseResource {
  /**
   * The access review instance id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The access review instance name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * This read-only field specifies the status of an access review instance. Possible values
   * include: 'NotStarted', 'InProgress', 'Completed', 'Applied', 'Initializing', 'Applying',
   * 'Completing', 'Scheduled', 'AutoReviewing', 'AutoReviewed', 'Starting'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: AccessReviewInstanceStatus;
  /**
   * The DateTime when the review instance is scheduled to be start.
   */
  startDateTime?: Date;
  /**
   * The DateTime when the review instance is scheduled to end.
   */
  endDateTime?: Date;
}

/**
 * Access Review.
 */
export interface AccessReviewScheduleDefinitionProperties {
  /**
   * The display name for the schedule definition.
   */
  displayName?: string;
  /**
   * This read-only field specifies the status of an accessReview. Possible values include:
   * 'NotStarted', 'InProgress', 'Completed', 'Applied', 'Initializing', 'Applying', 'Completing',
   * 'Scheduled', 'AutoReviewing', 'AutoReviewed', 'Starting'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: AccessReviewScheduleDefinitionStatus;
  /**
   * The description provided by the access review creator and visible to admins.
   */
  descriptionForAdmins?: string;
  /**
   * The description provided by the access review creator to be shown to reviewers.
   */
  descriptionForReviewers?: string;
  /**
   * The identity id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The identity type : user/servicePrincipal. Possible values include: 'user', 'servicePrincipal'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalType?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalName?: string;
  /**
   * The user principal name(if valid)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly userPrincipalName?: string;
  /**
   * Flag to indicate whether sending mails to reviewers and the review creator is enabled.
   */
  mailNotificationsEnabled?: boolean;
  /**
   * Flag to indicate whether sending reminder emails to reviewers are enabled.
   */
  reminderNotificationsEnabled?: boolean;
  /**
   * Flag to indicate whether reviewers are required to provide a justification when reviewing
   * access.
   */
  defaultDecisionEnabled?: boolean;
  /**
   * Flag to indicate whether the reviewer is required to pass justification when recording a
   * decision.
   */
  justificationRequiredOnApproval?: boolean;
  /**
   * This specifies the behavior for the autoReview feature when an access review completes.
   * Possible values include: 'Approve', 'Deny', 'Recommendation'
   */
  defaultDecision?: DefaultDecisionType;
  /**
   * Flag to indicate whether auto-apply capability, to automatically change the target object
   * access resource, is enabled. If not enabled, a user must, after the review completes, apply
   * the access review.
   */
  autoApplyDecisionsEnabled?: boolean;
  /**
   * Flag to indicate whether showing recommendations to reviewers is enabled.
   */
  recommendationsEnabled?: boolean;
  /**
   * The duration in days for an instance.
   */
  instanceDurationInDays?: number;
  /**
   * The recurrence type : weekly, monthly, etc. Possible values include: 'weekly',
   * 'absoluteMonthly'
   */
  type?: AccessReviewRecurrencePatternType;
  /**
   * The interval for recurrence. For a quarterly review, the interval is 3 for type :
   * absoluteMonthly.
   */
  interval?: number;
  /**
   * The recurrence range type. The possible values are: endDate, noEnd, numbered. Possible values
   * include: 'endDate', 'noEnd', 'numbered'
   */
  type1?: AccessReviewRecurrenceRangeType;
  /**
   * The number of times to repeat the access review. Required and must be positive if type is
   * numbered.
   */
  numberOfOccurrences?: number;
  /**
   * The DateTime when the review is scheduled to be start. This could be a date in the future.
   * Required on create.
   */
  startDate?: Date;
  /**
   * The DateTime when the review is scheduled to end. Required if type is endDate
   */
  endDate?: Date;
  /**
   * ResourceId in which this review is getting created
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceId?: string;
  /**
   * This is used to indicate the role being reviewed
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly roleDefinitionId?: string;
  /**
   * The identity type user/servicePrincipal to review. Possible values include: 'user',
   * 'servicePrincipal'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalType1?: AccessReviewScopePrincipalType;
  /**
   * This is the collection of reviewers.
   */
  reviewers?: AccessReviewReviewer[];
  /**
   * This field specifies the type of reviewers for a review. Usually for a review, reviewers are
   * explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be
   * chosen dynamically. For example managers review or self review. Possible values include:
   * 'Assigned', 'Self', 'Managers'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reviewersType?: AccessReviewScheduleDefinitionReviewersType;
  /**
   * This is the collection of instances returned when one does an expand on it.
   */
  instances?: AccessReviewInstance[];
}

/**
 * Access Review Schedule Definition.
 */
export interface AccessReviewScheduleDefinition extends BaseResource {
  /**
   * The access review schedule definition id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The access review schedule definition unique id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The display name for the schedule definition.
   */
  displayName?: string;
  /**
   * This read-only field specifies the status of an accessReview. Possible values include:
   * 'NotStarted', 'InProgress', 'Completed', 'Applied', 'Initializing', 'Applying', 'Completing',
   * 'Scheduled', 'AutoReviewing', 'AutoReviewed', 'Starting'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: AccessReviewScheduleDefinitionStatus;
  /**
   * The description provided by the access review creator and visible to admins.
   */
  descriptionForAdmins?: string;
  /**
   * The description provided by the access review creator to be shown to reviewers.
   */
  descriptionForReviewers?: string;
  /**
   * The identity id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The identity type : user/servicePrincipal. Possible values include: 'user', 'servicePrincipal'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalType?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalName?: string;
  /**
   * The user principal name(if valid)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly userPrincipalName?: string;
  /**
   * Flag to indicate whether sending mails to reviewers and the review creator is enabled.
   */
  mailNotificationsEnabled?: boolean;
  /**
   * Flag to indicate whether sending reminder emails to reviewers are enabled.
   */
  reminderNotificationsEnabled?: boolean;
  /**
   * Flag to indicate whether reviewers are required to provide a justification when reviewing
   * access.
   */
  defaultDecisionEnabled?: boolean;
  /**
   * Flag to indicate whether the reviewer is required to pass justification when recording a
   * decision.
   */
  justificationRequiredOnApproval?: boolean;
  /**
   * This specifies the behavior for the autoReview feature when an access review completes.
   * Possible values include: 'Approve', 'Deny', 'Recommendation'
   */
  defaultDecision?: DefaultDecisionType;
  /**
   * Flag to indicate whether auto-apply capability, to automatically change the target object
   * access resource, is enabled. If not enabled, a user must, after the review completes, apply
   * the access review.
   */
  autoApplyDecisionsEnabled?: boolean;
  /**
   * Flag to indicate whether showing recommendations to reviewers is enabled.
   */
  recommendationsEnabled?: boolean;
  /**
   * The duration in days for an instance.
   */
  instanceDurationInDays?: number;
  /**
   * The recurrence type : weekly, monthly, etc. Possible values include: 'weekly',
   * 'absoluteMonthly'
   */
  type1?: AccessReviewRecurrencePatternType;
  /**
   * The interval for recurrence. For a quarterly review, the interval is 3 for type :
   * absoluteMonthly.
   */
  interval?: number;
  /**
   * The recurrence range type. The possible values are: endDate, noEnd, numbered. Possible values
   * include: 'endDate', 'noEnd', 'numbered'
   */
  type2?: AccessReviewRecurrenceRangeType;
  /**
   * The number of times to repeat the access review. Required and must be positive if type is
   * numbered.
   */
  numberOfOccurrences?: number;
  /**
   * The DateTime when the review is scheduled to be start. This could be a date in the future.
   * Required on create.
   */
  startDate?: Date;
  /**
   * The DateTime when the review is scheduled to end. Required if type is endDate
   */
  endDate?: Date;
  /**
   * ResourceId in which this review is getting created
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceId?: string;
  /**
   * This is used to indicate the role being reviewed
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly roleDefinitionId?: string;
  /**
   * The identity type user/servicePrincipal to review. Possible values include: 'user',
   * 'servicePrincipal'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalType1?: AccessReviewScopePrincipalType;
  /**
   * This is the collection of reviewers.
   */
  reviewers?: AccessReviewReviewer[];
  /**
   * This field specifies the type of reviewers for a review. Usually for a review, reviewers are
   * explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be
   * chosen dynamically. For example managers review or self review. Possible values include:
   * 'Assigned', 'Self', 'Managers'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reviewersType?: AccessReviewScheduleDefinitionReviewersType;
  /**
   * This is the collection of instances returned when one does an expand on it.
   */
  instances?: AccessReviewInstance[];
}

/**
 * Access Review Default Settings.
 */
export interface AccessReviewDefaultSettings extends BaseResource {
  /**
   * The access review default settings id. This is only going to be default
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The access review default settings name. This is always going to be Access Review Default
   * Settings
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Flag to indicate whether sending mails to reviewers and the review creator is enabled.
   */
  mailNotificationsEnabled?: boolean;
  /**
   * Flag to indicate whether sending reminder emails to reviewers are enabled.
   */
  reminderNotificationsEnabled?: boolean;
  /**
   * Flag to indicate whether reviewers are required to provide a justification when reviewing
   * access.
   */
  defaultDecisionEnabled?: boolean;
  /**
   * Flag to indicate whether the reviewer is required to pass justification when recording a
   * decision.
   */
  justificationRequiredOnApproval?: boolean;
  /**
   * This specifies the behavior for the autoReview feature when an access review completes.
   * Possible values include: 'Approve', 'Deny', 'Recommendation'
   */
  defaultDecision?: DefaultDecisionType;
  /**
   * Flag to indicate whether auto-apply capability, to automatically change the target object
   * access resource, is enabled. If not enabled, a user must, after the review completes, apply
   * the access review.
   */
  autoApplyDecisionsEnabled?: boolean;
  /**
   * Flag to indicate whether showing recommendations to reviewers is enabled.
   */
  recommendationsEnabled?: boolean;
  /**
   * The duration in days for an instance.
   */
  instanceDurationInDays?: number;
  /**
   * The recurrence type : weekly, monthly, etc. Possible values include: 'weekly',
   * 'absoluteMonthly'
   */
  type1?: AccessReviewRecurrencePatternType;
  /**
   * The interval for recurrence. For a quarterly review, the interval is 3 for type :
   * absoluteMonthly.
   */
  interval?: number;
  /**
   * The recurrence range type. The possible values are: endDate, noEnd, numbered. Possible values
   * include: 'endDate', 'noEnd', 'numbered'
   */
  type2?: AccessReviewRecurrenceRangeType;
  /**
   * The number of times to repeat the access review. Required and must be positive if type is
   * numbered.
   */
  numberOfOccurrences?: number;
  /**
   * The DateTime when the review is scheduled to be start. This could be a date in the future.
   * Required on create.
   */
  startDate?: Date;
  /**
   * The DateTime when the review is scheduled to end. Required if type is endDate
   */
  endDate?: Date;
}

/**
 * Contains the possible cases for AccessReviewDecisionTarget.
 */
export type AccessReviewDecisionTargetUnion = AccessReviewDecisionTarget | UserDecisionTarget | ServicePrincipalDecisionTarget;

/**
 * Target of the decision.
 */
export interface AccessReviewDecisionTarget {
  /**
   * Polymorphic Discriminator
   */
  type: "AccessReviewDecisionTarget";
}

/**
 * Approval Step.
 */
export interface AccessReviewDecisionProperties {
  /**
   * Polymorphic Discriminator
   */
  type: string;
  /**
   * The feature- generated recommendation shown to the reviewer. Possible values include:
   * 'Approve', 'Deny', 'NoInfoAvailable'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recommendation?: AccessRecommendationType;
  /**
   * The decision on the approval step. This value is initially set to NotReviewed. Approvers can
   * take action of Approve/Deny. Possible values include: 'Approve', 'Deny', 'NotReviewed',
   * 'DontKnow', 'NotNotified'
   */
  decision?: AccessReviewResult;
  /**
   * Justification provided by approvers for their action
   */
  justification?: string;
  /**
   * Date Time when a decision was taken.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reviewedDateTime?: Date;
  /**
   * The identity id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The identity type : user/servicePrincipal. Possible values include: 'user', 'servicePrincipal'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalType?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalName?: string;
  /**
   * The user principal name(if valid)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly userPrincipalName?: string;
  /**
   * The outcome of applying the decision. Possible values include: 'New', 'Applying',
   * 'AppliedSuccessfully', 'AppliedWithUnknownFailure', 'AppliedSuccessfullyButObjectNotFound',
   * 'ApplyNotSupported'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly applyResult?: AccessReviewApplyResult;
  /**
   * The date and time when the review decision was applied.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly appliedDateTime?: Date;
  /**
   * The identity id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId1?: string;
  /**
   * The identity type : user/servicePrincipal. Possible values include: 'user', 'servicePrincipal'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalType1?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalName1?: string;
  /**
   * The user principal name(if valid)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly userPrincipalName1?: string;
}

/**
 * Access Review.
 */
export interface AccessReviewDecision extends BaseResource {
  /**
   * The access review decision id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The access review decision name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Polymorphic Discriminator
   */
  type1: string;
  /**
   * The feature- generated recommendation shown to the reviewer. Possible values include:
   * 'Approve', 'Deny', 'NoInfoAvailable'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recommendation?: AccessRecommendationType;
  /**
   * The decision on the approval step. This value is initially set to NotReviewed. Approvers can
   * take action of Approve/Deny. Possible values include: 'Approve', 'Deny', 'NotReviewed',
   * 'DontKnow', 'NotNotified'
   */
  decision?: AccessReviewResult;
  /**
   * Justification provided by approvers for their action
   */
  justification?: string;
  /**
   * Date Time when a decision was taken.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reviewedDateTime?: Date;
  /**
   * The identity id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The identity type : user/servicePrincipal. Possible values include: 'user', 'servicePrincipal'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalType?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalName?: string;
  /**
   * The user principal name(if valid)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly userPrincipalName?: string;
  /**
   * The outcome of applying the decision. Possible values include: 'New', 'Applying',
   * 'AppliedSuccessfully', 'AppliedWithUnknownFailure', 'AppliedSuccessfullyButObjectNotFound',
   * 'ApplyNotSupported'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly applyResult?: AccessReviewApplyResult;
  /**
   * The date and time when the review decision was applied.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly appliedDateTime?: Date;
  /**
   * The identity id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId1?: string;
  /**
   * The identity type : user/servicePrincipal. Possible values include: 'user', 'servicePrincipal'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalType1?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalName1?: string;
  /**
   * The user principal name(if valid)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly userPrincipalName1?: string;
}

/**
 * User Decision Target
 */
export interface UserDecisionTarget {
  /**
   * Polymorphic Discriminator
   */
  type: "user";
  /**
   * The id of user whose access was reviewed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The display name of the user whose access was reviewed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalName?: string;
  /**
   * The user principal name of the user whose access was reviewed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly userPrincipalName?: string;
}

/**
 * Service Principal Decision Target
 */
export interface ServicePrincipalDecisionTarget {
  /**
   * Polymorphic Discriminator
   */
  type: "servicePrincipal";
  /**
   * The id of service principal whose access is reviewed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The display name of the service principal whose access was reviewed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalName?: string;
  /**
   * The appId for the service principal entity being reviewed
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly appId?: string;
}

/**
 * Error description and code explaining why an operation failed.
 * @summary Error
 */
export interface ErrorDefinitionProperties {
  /**
   * Description of the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Error code of list gateway.
   */
  code?: string;
}

/**
 * Error description and code explaining why an operation failed.
 * @summary Error
 */
export interface ErrorDefinition {
  /**
   * Error of the list gateway status.
   */
  error?: ErrorDefinitionProperties;
}

/**
 * The display information for a Microsoft.Authorization operation.
 */
export interface OperationDisplay {
  /**
   * The resource provider name: Microsoft.Authorization.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
  /**
   * The resource on which the operation is performed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * The operation that users can perform.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * The description for the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
}

/**
 * The definition of a Microsoft.Authorization operation.
 */
export interface Operation {
  /**
   * Name of the operation
   */
  name?: string;
  /**
   * Indicates whether the operation is a data action
   */
  isDataAction?: boolean;
  /**
   * Display of the operation
   */
  display?: OperationDisplay;
  /**
   * Origin of the operation
   */
  origin?: string;
}

/**
 * An interface representing AuthorizationManagementClientOptions.
 */
export interface AuthorizationManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The result of a request to list Microsoft.Authorization operations.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * The URI that can be used to request the next set of paged results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of Access Review Schedule Definitions.
 * @extends Array<AccessReviewScheduleDefinition>
 */
export interface AccessReviewScheduleDefinitionListResult extends Array<AccessReviewScheduleDefinition> {
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of Access Review Instances.
 * @extends Array<AccessReviewInstance>
 */
export interface AccessReviewInstanceListResult extends Array<AccessReviewInstance> {
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of access review decisions.
 * @extends Array<AccessReviewDecision>
 */
export interface AccessReviewDecisionListResult extends Array<AccessReviewDecision> {
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * Defines values for AccessReviewScheduleDefinitionStatus.
 * Possible values include: 'NotStarted', 'InProgress', 'Completed', 'Applied', 'Initializing',
 * 'Applying', 'Completing', 'Scheduled', 'AutoReviewing', 'AutoReviewed', 'Starting'
 * @readonly
 * @enum {string}
 */
export type AccessReviewScheduleDefinitionStatus = 'NotStarted' | 'InProgress' | 'Completed' | 'Applied' | 'Initializing' | 'Applying' | 'Completing' | 'Scheduled' | 'AutoReviewing' | 'AutoReviewed' | 'Starting';

/**
 * Defines values for AccessReviewActorIdentityType.
 * Possible values include: 'user', 'servicePrincipal'
 * @readonly
 * @enum {string}
 */
export type AccessReviewActorIdentityType = 'user' | 'servicePrincipal';

/**
 * Defines values for DefaultDecisionType.
 * Possible values include: 'Approve', 'Deny', 'Recommendation'
 * @readonly
 * @enum {string}
 */
export type DefaultDecisionType = 'Approve' | 'Deny' | 'Recommendation';

/**
 * Defines values for AccessReviewRecurrencePatternType.
 * Possible values include: 'weekly', 'absoluteMonthly'
 * @readonly
 * @enum {string}
 */
export type AccessReviewRecurrencePatternType = 'weekly' | 'absoluteMonthly';

/**
 * Defines values for AccessReviewRecurrenceRangeType.
 * Possible values include: 'endDate', 'noEnd', 'numbered'
 * @readonly
 * @enum {string}
 */
export type AccessReviewRecurrenceRangeType = 'endDate' | 'noEnd' | 'numbered';

/**
 * Defines values for AccessReviewScopePrincipalType.
 * Possible values include: 'user', 'servicePrincipal'
 * @readonly
 * @enum {string}
 */
export type AccessReviewScopePrincipalType = 'user' | 'servicePrincipal';

/**
 * Defines values for AccessReviewReviewerType.
 * Possible values include: 'user', 'servicePrincipal'
 * @readonly
 * @enum {string}
 */
export type AccessReviewReviewerType = 'user' | 'servicePrincipal';

/**
 * Defines values for AccessReviewScheduleDefinitionReviewersType.
 * Possible values include: 'Assigned', 'Self', 'Managers'
 * @readonly
 * @enum {string}
 */
export type AccessReviewScheduleDefinitionReviewersType = 'Assigned' | 'Self' | 'Managers';

/**
 * Defines values for AccessReviewInstanceStatus.
 * Possible values include: 'NotStarted', 'InProgress', 'Completed', 'Applied', 'Initializing',
 * 'Applying', 'Completing', 'Scheduled', 'AutoReviewing', 'AutoReviewed', 'Starting'
 * @readonly
 * @enum {string}
 */
export type AccessReviewInstanceStatus = 'NotStarted' | 'InProgress' | 'Completed' | 'Applied' | 'Initializing' | 'Applying' | 'Completing' | 'Scheduled' | 'AutoReviewing' | 'AutoReviewed' | 'Starting';

/**
 * Defines values for AccessRecommendationType.
 * Possible values include: 'Approve', 'Deny', 'NoInfoAvailable'
 * @readonly
 * @enum {string}
 */
export type AccessRecommendationType = 'Approve' | 'Deny' | 'NoInfoAvailable';

/**
 * Defines values for AccessReviewResult.
 * Possible values include: 'Approve', 'Deny', 'NotReviewed', 'DontKnow', 'NotNotified'
 * @readonly
 * @enum {string}
 */
export type AccessReviewResult = 'Approve' | 'Deny' | 'NotReviewed' | 'DontKnow' | 'NotNotified';

/**
 * Defines values for AccessReviewApplyResult.
 * Possible values include: 'New', 'Applying', 'AppliedSuccessfully', 'AppliedWithUnknownFailure',
 * 'AppliedSuccessfullyButObjectNotFound', 'ApplyNotSupported'
 * @readonly
 * @enum {string}
 */
export type AccessReviewApplyResult = 'New' | 'Applying' | 'AppliedSuccessfully' | 'AppliedWithUnknownFailure' | 'AppliedSuccessfullyButObjectNotFound' | 'ApplyNotSupported';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AccessReviewScheduleDefinitionsListResponse = AccessReviewScheduleDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewScheduleDefinitionListResult;
    };
};

/**
 * Contains response data for the getById operation.
 */
export type AccessReviewScheduleDefinitionsGetByIdResponse = AccessReviewScheduleDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewScheduleDefinition;
    };
};

/**
 * Contains response data for the createOrUpdateById operation.
 */
export type AccessReviewScheduleDefinitionsCreateOrUpdateByIdResponse = AccessReviewScheduleDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewScheduleDefinition;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AccessReviewScheduleDefinitionsListNextResponse = AccessReviewScheduleDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewScheduleDefinitionListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AccessReviewInstancesListResponse = AccessReviewInstanceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewInstanceListResult;
    };
};

/**
 * Contains response data for the getById operation.
 */
export type AccessReviewInstancesGetByIdResponse = AccessReviewInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewInstance;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AccessReviewInstancesListNextResponse = AccessReviewInstanceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewInstanceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AccessReviewInstanceDecisionsListResponse = AccessReviewDecisionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewDecisionListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AccessReviewInstanceDecisionsListNextResponse = AccessReviewDecisionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewDecisionListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AccessReviewDefaultSettingsGetResponse = AccessReviewDefaultSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewDefaultSettings;
    };
};

/**
 * Contains response data for the put operation.
 */
export type AccessReviewDefaultSettingsPutResponse = AccessReviewDefaultSettings & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewDefaultSettings;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AccessReviewScheduleDefinitionsAssignedForMyApprovalListResponse = AccessReviewScheduleDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewScheduleDefinitionListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AccessReviewScheduleDefinitionsAssignedForMyApprovalListNextResponse = AccessReviewScheduleDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewScheduleDefinitionListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AccessReviewInstancesAssignedForMyApprovalListResponse = AccessReviewInstanceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewInstanceListResult;
    };
};

/**
 * Contains response data for the getById operation.
 */
export type AccessReviewInstancesAssignedForMyApprovalGetByIdResponse = AccessReviewInstance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewInstance;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AccessReviewInstancesAssignedForMyApprovalListNextResponse = AccessReviewInstanceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewInstanceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AccessReviewInstanceMyDecisionsListResponse = AccessReviewDecisionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewDecisionListResult;
    };
};

/**
 * Contains response data for the getById operation.
 */
export type AccessReviewInstanceMyDecisionsGetByIdResponse = AccessReviewDecision & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewDecision;
    };
};

/**
 * Contains response data for the patch operation.
 */
export type AccessReviewInstanceMyDecisionsPatchResponse = AccessReviewDecision & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewDecision;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AccessReviewInstanceMyDecisionsListNextResponse = AccessReviewDecisionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccessReviewDecisionListResult;
    };
};
