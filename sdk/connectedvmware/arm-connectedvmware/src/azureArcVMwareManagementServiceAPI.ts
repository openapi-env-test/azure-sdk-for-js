/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "./lroImpl";
import {
  OperationsImpl,
  VirtualMachinesImpl,
  ResourcePoolsImpl,
  ClustersImpl,
  HostsImpl,
  DatastoresImpl,
  VCentersImpl,
  VirtualMachineTemplatesImpl,
  VirtualNetworksImpl,
  InventoryItemsImpl,
  HybridIdentityMetadataOperationsImpl,
  MachineExtensionsImpl,
  GuestAgentsImpl
} from "./operations";
import {
  Operations,
  VirtualMachines,
  ResourcePools,
  Clusters,
  Hosts,
  Datastores,
  VCenters,
  VirtualMachineTemplates,
  VirtualNetworks,
  InventoryItems,
  HybridIdentityMetadataOperations,
  MachineExtensions,
  GuestAgents
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  AzureArcVMwareManagementServiceAPIOptionalParams,
  MachineExtensionUpgrade,
  UpgradeExtensionsOptionalParams
} from "./models";

export class AzureArcVMwareManagementServiceAPI extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the AzureArcVMwareManagementServiceAPI class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The Subscription ID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: AzureArcVMwareManagementServiceAPIOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: AzureArcVMwareManagementServiceAPIOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-connectedvmware/1.0.0-beta.2`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes: `${optionsWithDefaults.credentialScopes}`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2022-07-15-preview";
    this.operations = new OperationsImpl(this);
    this.virtualMachines = new VirtualMachinesImpl(this);
    this.resourcePools = new ResourcePoolsImpl(this);
    this.clusters = new ClustersImpl(this);
    this.hosts = new HostsImpl(this);
    this.datastores = new DatastoresImpl(this);
    this.vCenters = new VCentersImpl(this);
    this.virtualMachineTemplates = new VirtualMachineTemplatesImpl(this);
    this.virtualNetworks = new VirtualNetworksImpl(this);
    this.inventoryItems = new InventoryItemsImpl(this);
    this.hybridIdentityMetadataOperations = new HybridIdentityMetadataOperationsImpl(
      this
    );
    this.machineExtensions = new MachineExtensionsImpl(this);
    this.guestAgents = new GuestAgentsImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  /**
   * The operation to Upgrade Machine Extensions.
   * @param resourceGroupName The Resource Group Name.
   * @param virtualMachineName The name of the machine containing the extension.
   * @param extensionUpgradeParameters Parameters supplied to the Upgrade Extensions operation.
   * @param options The options parameters.
   */
  async beginUpgradeExtensions(
    resourceGroupName: string,
    virtualMachineName: string,
    extensionUpgradeParameters: MachineExtensionUpgrade,
    options?: UpgradeExtensionsOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        virtualMachineName,
        extensionUpgradeParameters,
        options
      },
      upgradeExtensionsOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to Upgrade Machine Extensions.
   * @param resourceGroupName The Resource Group Name.
   * @param virtualMachineName The name of the machine containing the extension.
   * @param extensionUpgradeParameters Parameters supplied to the Upgrade Extensions operation.
   * @param options The options parameters.
   */
  async beginUpgradeExtensionsAndWait(
    resourceGroupName: string,
    virtualMachineName: string,
    extensionUpgradeParameters: MachineExtensionUpgrade,
    options?: UpgradeExtensionsOptionalParams
  ): Promise<void> {
    const poller = await this.beginUpgradeExtensions(
      resourceGroupName,
      virtualMachineName,
      extensionUpgradeParameters,
      options
    );
    return poller.pollUntilDone();
  }

  operations: Operations;
  virtualMachines: VirtualMachines;
  resourcePools: ResourcePools;
  clusters: Clusters;
  hosts: Hosts;
  datastores: Datastores;
  vCenters: VCenters;
  virtualMachineTemplates: VirtualMachineTemplates;
  virtualNetworks: VirtualNetworks;
  inventoryItems: InventoryItems;
  hybridIdentityMetadataOperations: HybridIdentityMetadataOperations;
  machineExtensions: MachineExtensions;
  guestAgents: GuestAgents;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const upgradeExtensionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/upgradeExtensions",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.extensionUpgradeParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
