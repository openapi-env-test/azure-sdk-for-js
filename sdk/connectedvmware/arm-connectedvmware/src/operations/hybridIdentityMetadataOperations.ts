/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { HybridIdentityMetadataOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureArcVMwareManagementServiceAPI } from "../azureArcVMwareManagementServiceAPI";
import {
  HybridIdentityMetadata,
  HybridIdentityMetadataListNextOptionalParams,
  HybridIdentityMetadataListOptionalParams,
  HybridIdentityMetadataCreateOptionalParams,
  HybridIdentityMetadataCreateResponse,
  HybridIdentityMetadataGetOptionalParams,
  HybridIdentityMetadataGetResponse,
  HybridIdentityMetadataDeleteOptionalParams,
  HybridIdentityMetadataListResponse,
  HybridIdentityMetadataListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HybridIdentityMetadataOperations operations. */
export class HybridIdentityMetadataOperationsImpl
  implements HybridIdentityMetadataOperations {
  private readonly client: AzureArcVMwareManagementServiceAPI;

  /**
   * Initialize a new instance of the class HybridIdentityMetadataOperations class.
   * @param client Reference to the service client
   */
  constructor(client: AzureArcVMwareManagementServiceAPI) {
    this.client = client;
  }

  /**
   * Returns the list of HybridIdentityMetadata of the given vm.
   * @param resourceGroupName The Resource Group Name.
   * @param virtualMachineName Name of the vm.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    virtualMachineName: string,
    options?: HybridIdentityMetadataListOptionalParams
  ): PagedAsyncIterableIterator<HybridIdentityMetadata> {
    const iter = this.listPagingAll(
      resourceGroupName,
      virtualMachineName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          resourceGroupName,
          virtualMachineName,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    virtualMachineName: string,
    options?: HybridIdentityMetadataListOptionalParams
  ): AsyncIterableIterator<HybridIdentityMetadata[]> {
    let result = await this._list(
      resourceGroupName,
      virtualMachineName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        virtualMachineName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    virtualMachineName: string,
    options?: HybridIdentityMetadataListOptionalParams
  ): AsyncIterableIterator<HybridIdentityMetadata> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      virtualMachineName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Create Or Update HybridIdentityMetadata.
   * @param resourceGroupName The Resource Group Name.
   * @param virtualMachineName Name of the vm.
   * @param metadataName Name of the hybridIdentityMetadata.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    virtualMachineName: string,
    metadataName: string,
    options?: HybridIdentityMetadataCreateOptionalParams
  ): Promise<HybridIdentityMetadataCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, virtualMachineName, metadataName, options },
      createOperationSpec
    );
  }

  /**
   * Implements HybridIdentityMetadata GET method.
   * @param resourceGroupName The Resource Group Name.
   * @param virtualMachineName Name of the vm.
   * @param metadataName Name of the HybridIdentityMetadata.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    virtualMachineName: string,
    metadataName: string,
    options?: HybridIdentityMetadataGetOptionalParams
  ): Promise<HybridIdentityMetadataGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, virtualMachineName, metadataName, options },
      getOperationSpec
    );
  }

  /**
   * Implements HybridIdentityMetadata DELETE method.
   * @param resourceGroupName The Resource Group Name.
   * @param virtualMachineName Name of the vm.
   * @param metadataName Name of the HybridIdentityMetadata.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    virtualMachineName: string,
    metadataName: string,
    options?: HybridIdentityMetadataDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, virtualMachineName, metadataName, options },
      deleteOperationSpec
    );
  }

  /**
   * Returns the list of HybridIdentityMetadata of the given vm.
   * @param resourceGroupName The Resource Group Name.
   * @param virtualMachineName Name of the vm.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    virtualMachineName: string,
    options?: HybridIdentityMetadataListOptionalParams
  ): Promise<HybridIdentityMetadataListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, virtualMachineName, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The Resource Group Name.
   * @param virtualMachineName Name of the vm.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    virtualMachineName: string,
    nextLink: string,
    options?: HybridIdentityMetadataListNextOptionalParams
  ): Promise<HybridIdentityMetadataListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, virtualMachineName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/hybridIdentityMetadata/{metadataName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadata
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName,
    Parameters.metadataName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/hybridIdentityMetadata/{metadataName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadata
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName,
    Parameters.metadataName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/hybridIdentityMetadata/{metadataName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName,
    Parameters.metadataName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/hybridIdentityMetadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadataList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadataList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.virtualMachineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
