/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ConfigurationNamesOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceLinkerManagementClient } from "../serviceLinkerManagementClient";
import {
  ConfigurationNames,
  ConfigurationNamesListNextOptionalParams,
  ConfigurationNamesListOptionalParams,
  ConfigurationNamesListResponse,
  ConfigurationNamesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationNamesOperations operations. */
export class ConfigurationNamesOperationsImpl
  implements ConfigurationNamesOperations {
  private readonly client: ServiceLinkerManagementClient;

  /**
   * Initialize a new instance of the class ConfigurationNamesOperations class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceLinkerManagementClient) {
    this.client = client;
  }

  /**
   * Lists the configuration names generated by Service Connector for all target, client types, auth
   * types.
   * @param options The options parameters.
   */
  public list(
    options?: ConfigurationNamesListOptionalParams
  ): PagedAsyncIterableIterator<ConfigurationNames> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ConfigurationNamesListOptionalParams
  ): AsyncIterableIterator<ConfigurationNames[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ConfigurationNamesListOptionalParams
  ): AsyncIterableIterator<ConfigurationNames> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists the configuration names generated by Service Connector for all target, client types, auth
   * types.
   * @param options The options parameters.
   */
  private _list(
    options?: ConfigurationNamesListOptionalParams
  ): Promise<ConfigurationNamesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ConfigurationNamesListNextOptionalParams
  ): Promise<ConfigurationNamesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.ServiceLinker/configurationNames",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationNameResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationNameResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.skipToken
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
