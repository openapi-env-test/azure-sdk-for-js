/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/sqlAgentOperationsMappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClientContext } from "../sqlManagementClientContext";

/** Class representing a SqlAgentOperations. */
export class SqlAgentOperations {
  private readonly client: SqlManagementClientContext;

  /**
   * Create a SqlAgentOperations.
   * @param {SqlManagementClientContext} client Reference to the service client.
   */
  constructor(client: SqlManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets current instance sql agent configuration.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlAgentGetResponse>
   */
  get(resourceGroupName: string, managedInstanceName: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlAgentGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param callback The callback
   */
  get(resourceGroupName: string, managedInstanceName: string, callback: msRest.ServiceCallback<Models.SqlAgent>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, managedInstanceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlAgent>): void;
  get(resourceGroupName: string, managedInstanceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlAgent>, callback?: msRest.ServiceCallback<Models.SqlAgent>): Promise<Models.SqlAgentGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managedInstanceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SqlAgentGetResponse>;
  }

  /**
   * Puts new sql agent configuration to instance.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlAgentPutResponse>
   */
  put(resourceGroupName: string, managedInstanceName: string, parameters: Models.SqlAgent, options?: msRest.RequestOptionsBase): Promise<Models.SqlAgentPutResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param parameters
   * @param callback The callback
   */
  put(resourceGroupName: string, managedInstanceName: string, parameters: Models.SqlAgent, callback: msRest.ServiceCallback<Models.SqlAgent>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  put(resourceGroupName: string, managedInstanceName: string, parameters: Models.SqlAgent, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlAgent>): void;
  put(resourceGroupName: string, managedInstanceName: string, parameters: Models.SqlAgent, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlAgent>, callback?: msRest.ServiceCallback<Models.SqlAgent>): Promise<Models.SqlAgentPutResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managedInstanceName,
        parameters,
        options
      },
      putOperationSpec,
      callback) as Promise<Models.SqlAgentPutResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/sqlAgent/current",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.managedInstanceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlAgent
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const putOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/sqlAgent/current",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.managedInstanceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SqlAgent,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlAgent
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
