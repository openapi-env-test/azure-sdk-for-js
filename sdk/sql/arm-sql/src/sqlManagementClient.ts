/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { SqlManagementClientContext } from "./sqlManagementClientContext";


class SqlManagementClient extends SqlManagementClientContext {
  // Operation groups
  serverAdvisors: operations.ServerAdvisors;
  databaseAdvisors: operations.DatabaseAdvisors;
  recoverableDatabases: operations.RecoverableDatabases;
  restorableDroppedDatabases: operations.RestorableDroppedDatabases;
  capabilities: operations.Capabilities;
  servers: operations.Servers;
  serverConnectionPolicies: operations.ServerConnectionPolicies;
  databases: operations.Databases;
  databaseThreatDetectionPolicies: operations.DatabaseThreatDetectionPolicies;
  dataMaskingPolicies: operations.DataMaskingPolicies;
  dataMaskingRules: operations.DataMaskingRules;
  transparentDataEncryptionConfigurations: operations.TransparentDataEncryptionConfigurations;
  extensions: operations.Extensions;
  disasterRecoveryConfigurations: operations.DisasterRecoveryConfigurations;
  elasticPools: operations.ElasticPools;
  firewallRules: operations.FirewallRules;
  geoBackupPolicies: operations.GeoBackupPolicies;
  operations: operations.Operations;
  queries: operations.Queries;
  queryStatistics: operations.QueryStatistics;
  queryTexts: operations.QueryTexts;
  recommendedElasticPools: operations.RecommendedElasticPools;
  replicationLinks: operations.ReplicationLinks;
  restorePoints: operations.RestorePoints;
  serverAzureADAdministrators: operations.ServerAzureADAdministrators;
  serverCommunicationLinks: operations.ServerCommunicationLinks;
  serviceObjectives: operations.ServiceObjectives;
  elasticPoolActivities: operations.ElasticPoolActivities;
  elasticPoolDatabaseActivities: operations.ElasticPoolDatabaseActivities;
  serviceTierAdvisors: operations.ServiceTierAdvisors;
  transparentDataEncryptions: operations.TransparentDataEncryptions;
  transparentDataEncryptionActivities: operations.TransparentDataEncryptionActivities;
  serverTableAuditingPolicies: operations.ServerTableAuditingPolicies;
  databaseTableAuditingPolicies: operations.DatabaseTableAuditingPolicies;
  databaseConnectionPolicies: operations.DatabaseConnectionPolicies;
  serverUsages: operations.ServerUsages;
  databaseUsages: operations.DatabaseUsages;

  /**
   * Initializes a new instance of the SqlManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The subscription ID that identifies an Azure subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.SqlManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.serverAdvisors = new operations.ServerAdvisors(this);
    this.databaseAdvisors = new operations.DatabaseAdvisors(this);
    this.recoverableDatabases = new operations.RecoverableDatabases(this);
    this.restorableDroppedDatabases = new operations.RestorableDroppedDatabases(this);
    this.capabilities = new operations.Capabilities(this);
    this.servers = new operations.Servers(this);
    this.serverConnectionPolicies = new operations.ServerConnectionPolicies(this);
    this.databases = new operations.Databases(this);
    this.databaseThreatDetectionPolicies = new operations.DatabaseThreatDetectionPolicies(this);
    this.dataMaskingPolicies = new operations.DataMaskingPolicies(this);
    this.dataMaskingRules = new operations.DataMaskingRules(this);
    this.transparentDataEncryptionConfigurations = new operations.TransparentDataEncryptionConfigurations(this);
    this.extensions = new operations.Extensions(this);
    this.disasterRecoveryConfigurations = new operations.DisasterRecoveryConfigurations(this);
    this.elasticPools = new operations.ElasticPools(this);
    this.firewallRules = new operations.FirewallRules(this);
    this.geoBackupPolicies = new operations.GeoBackupPolicies(this);
    this.operations = new operations.Operations(this);
    this.queries = new operations.Queries(this);
    this.queryStatistics = new operations.QueryStatistics(this);
    this.queryTexts = new operations.QueryTexts(this);
    this.recommendedElasticPools = new operations.RecommendedElasticPools(this);
    this.replicationLinks = new operations.ReplicationLinks(this);
    this.restorePoints = new operations.RestorePoints(this);
    this.serverAzureADAdministrators = new operations.ServerAzureADAdministrators(this);
    this.serverCommunicationLinks = new operations.ServerCommunicationLinks(this);
    this.serviceObjectives = new operations.ServiceObjectives(this);
    this.elasticPoolActivities = new operations.ElasticPoolActivities(this);
    this.elasticPoolDatabaseActivities = new operations.ElasticPoolDatabaseActivities(this);
    this.serviceTierAdvisors = new operations.ServiceTierAdvisors(this);
    this.transparentDataEncryptions = new operations.TransparentDataEncryptions(this);
    this.transparentDataEncryptionActivities = new operations.TransparentDataEncryptionActivities(this);
    this.serverTableAuditingPolicies = new operations.ServerTableAuditingPolicies(this);
    this.databaseTableAuditingPolicies = new operations.DatabaseTableAuditingPolicies(this);
    this.databaseConnectionPolicies = new operations.DatabaseConnectionPolicies(this);
    this.serverUsages = new operations.ServerUsages(this);
    this.databaseUsages = new operations.DatabaseUsages(this);
  }
}

// Operation Specifications

export {
  SqlManagementClient,
  SqlManagementClientContext,
  Models as SqlManagementModels,
  Mappers as SqlManagementMappers
};
export * from "./operations";
