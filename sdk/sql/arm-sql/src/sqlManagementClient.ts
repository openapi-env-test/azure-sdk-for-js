/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { SqlManagementClientContext } from "./sqlManagementClientContext";


class SqlManagementClient extends SqlManagementClientContext {
  // Operation groups
  databaseAdvisors: operations.DatabaseAdvisors;
  databaseRecommendedActions: operations.DatabaseRecommendedActions;
  serverAdvisors: operations.ServerAdvisors;
  databaseBlobAuditingPolicies: operations.DatabaseBlobAuditingPolicies;
  databaseAutomaticTuning: operations.DatabaseAutomaticTuningOperations;
  encryptionProtectors: operations.EncryptionProtectors;
  failoverGroups: operations.FailoverGroups;
  firewallRules: operations.FirewallRules;
  managedInstances: operations.ManagedInstances;
  operations: operations.Operations;
  serverKeys: operations.ServerKeys;
  servers: operations.Servers;
  syncAgents: operations.SyncAgents;
  syncGroups: operations.SyncGroups;
  syncMembers: operations.SyncMembers;
  subscriptionUsages: operations.SubscriptionUsages;
  virtualClusters: operations.VirtualClusters;
  virtualNetworkRules: operations.VirtualNetworkRules;

  /**
   * Initializes a new instance of the SqlManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The subscription ID that identifies an Azure subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.SqlManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.databaseAdvisors = new operations.DatabaseAdvisors(this);
    this.databaseRecommendedActions = new operations.DatabaseRecommendedActions(this);
    this.serverAdvisors = new operations.ServerAdvisors(this);
    this.databaseBlobAuditingPolicies = new operations.DatabaseBlobAuditingPolicies(this);
    this.databaseAutomaticTuning = new operations.DatabaseAutomaticTuningOperations(this);
    this.encryptionProtectors = new operations.EncryptionProtectors(this);
    this.failoverGroups = new operations.FailoverGroups(this);
    this.firewallRules = new operations.FirewallRules(this);
    this.managedInstances = new operations.ManagedInstances(this);
    this.operations = new operations.Operations(this);
    this.serverKeys = new operations.ServerKeys(this);
    this.servers = new operations.Servers(this);
    this.syncAgents = new operations.SyncAgents(this);
    this.syncGroups = new operations.SyncGroups(this);
    this.syncMembers = new operations.SyncMembers(this);
    this.subscriptionUsages = new operations.SubscriptionUsages(this);
    this.virtualClusters = new operations.VirtualClusters(this);
    this.virtualNetworkRules = new operations.VirtualNetworkRules(this);
  }
}

// Operation Specifications

export {
  SqlManagementClient,
  SqlManagementClientContext,
  Models as SqlManagementModels,
  Mappers as SqlManagementMappers
};
export * from "./operations";
