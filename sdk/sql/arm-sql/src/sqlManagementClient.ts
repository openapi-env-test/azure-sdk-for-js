/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { SqlManagementClientContext } from "./sqlManagementClientContext";


class SqlManagementClient extends SqlManagementClientContext {
  // Operation groups
  extendedDatabaseBlobAuditingPolicies: operations.ExtendedDatabaseBlobAuditingPolicies;
  extendedServerBlobAuditingPolicies: operations.ExtendedServerBlobAuditingPolicies;
  serverBlobAuditingPolicies: operations.ServerBlobAuditingPolicies;
  databaseBlobAuditingPolicies: operations.DatabaseBlobAuditingPolicies;
  databaseOperations: operations.DatabaseOperations;
  databases: operations.Databases;
  databaseVulnerabilityAssessmentRuleBaselines: operations.DatabaseVulnerabilityAssessmentRuleBaselines;
  databaseVulnerabilityAssessments: operations.DatabaseVulnerabilityAssessments;
  dataWarehouseUserActivities: operations.DataWarehouseUserActivitiesOperations;
  jobAgents: operations.JobAgents;
  jobCredentials: operations.JobCredentials;
  jobExecutions: operations.JobExecutions;
  jobs: operations.Jobs;
  jobStepExecutions: operations.JobStepExecutions;
  jobSteps: operations.JobSteps;
  jobTargetExecutions: operations.JobTargetExecutions;
  jobTargetGroups: operations.JobTargetGroups;
  jobVersions: operations.JobVersions;
  longTermRetentionBackups: operations.LongTermRetentionBackups;
  backupLongTermRetentionPolicies: operations.BackupLongTermRetentionPolicies;
  managedBackupShortTermRetentionPolicies: operations.ManagedBackupShortTermRetentionPolicies;
  managedDatabases: operations.ManagedDatabases;
  managedRestorableDroppedDatabaseBackupShortTermRetentionPolicies: operations.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies;
  restorableDroppedManagedDatabases: operations.RestorableDroppedManagedDatabases;
  restorePoints: operations.RestorePoints;
  serverAutomaticTuning: operations.ServerAutomaticTuningOperations;
  serverDnsAliases: operations.ServerDnsAliases;
  serverSecurityAlertPolicies: operations.ServerSecurityAlertPolicies;
  managedDatabaseSecurityAlertPolicies: operations.ManagedDatabaseSecurityAlertPolicies;
  managedServerSecurityAlertPolicies: operations.ManagedServerSecurityAlertPolicies;
  sensitivityLabels: operations.SensitivityLabels;
  managedInstanceAdministrators: operations.ManagedInstanceAdministrators;

  /**
   * Initializes a new instance of the SqlManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The subscription ID that identifies an Azure subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.SqlManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.extendedDatabaseBlobAuditingPolicies = new operations.ExtendedDatabaseBlobAuditingPolicies(this);
    this.extendedServerBlobAuditingPolicies = new operations.ExtendedServerBlobAuditingPolicies(this);
    this.serverBlobAuditingPolicies = new operations.ServerBlobAuditingPolicies(this);
    this.databaseBlobAuditingPolicies = new operations.DatabaseBlobAuditingPolicies(this);
    this.databaseOperations = new operations.DatabaseOperations(this);
    this.databases = new operations.Databases(this);
    this.databaseVulnerabilityAssessmentRuleBaselines = new operations.DatabaseVulnerabilityAssessmentRuleBaselines(this);
    this.databaseVulnerabilityAssessments = new operations.DatabaseVulnerabilityAssessments(this);
    this.dataWarehouseUserActivities = new operations.DataWarehouseUserActivitiesOperations(this);
    this.jobAgents = new operations.JobAgents(this);
    this.jobCredentials = new operations.JobCredentials(this);
    this.jobExecutions = new operations.JobExecutions(this);
    this.jobs = new operations.Jobs(this);
    this.jobStepExecutions = new operations.JobStepExecutions(this);
    this.jobSteps = new operations.JobSteps(this);
    this.jobTargetExecutions = new operations.JobTargetExecutions(this);
    this.jobTargetGroups = new operations.JobTargetGroups(this);
    this.jobVersions = new operations.JobVersions(this);
    this.longTermRetentionBackups = new operations.LongTermRetentionBackups(this);
    this.backupLongTermRetentionPolicies = new operations.BackupLongTermRetentionPolicies(this);
    this.managedBackupShortTermRetentionPolicies = new operations.ManagedBackupShortTermRetentionPolicies(this);
    this.managedDatabases = new operations.ManagedDatabases(this);
    this.managedRestorableDroppedDatabaseBackupShortTermRetentionPolicies = new operations.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies(this);
    this.restorableDroppedManagedDatabases = new operations.RestorableDroppedManagedDatabases(this);
    this.restorePoints = new operations.RestorePoints(this);
    this.serverAutomaticTuning = new operations.ServerAutomaticTuningOperations(this);
    this.serverDnsAliases = new operations.ServerDnsAliases(this);
    this.serverSecurityAlertPolicies = new operations.ServerSecurityAlertPolicies(this);
    this.managedDatabaseSecurityAlertPolicies = new operations.ManagedDatabaseSecurityAlertPolicies(this);
    this.managedServerSecurityAlertPolicies = new operations.ManagedServerSecurityAlertPolicies(this);
    this.sensitivityLabels = new operations.SensitivityLabels(this);
    this.managedInstanceAdministrators = new operations.ManagedInstanceAdministrators(this);
  }
}

// Operation Specifications

export {
  SqlManagementClient,
  SqlManagementClientContext,
  Models as SqlManagementModels,
  Mappers as SqlManagementMappers
};
export * from "./operations";
