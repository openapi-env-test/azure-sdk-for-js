/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * ARM resource.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * ARM proxy resource.
 */
export interface ProxyResource extends Resource {
}

/**
 * Database Advisor.
 */
export interface Advisor extends ProxyResource {
  /**
   * Resource kind.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Resource location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * Gets the status of availability of this advisor to customers. Possible values are 'GA',
   * 'PublicPreview', 'LimitedPublicPreview' and 'PrivatePreview'. Possible values include: 'GA',
   * 'PublicPreview', 'LimitedPublicPreview', 'PrivatePreview'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly advisorStatus?: AdvisorStatus;
  /**
   * Gets the auto-execute status (whether to let the system execute the recommendations) of this
   * advisor. Possible values are 'Enabled' and 'Disabled'. Possible values include: 'Enabled',
   * 'Disabled', 'Default'
   */
  autoExecuteValue: AutoExecuteStatus;
  /**
   * Gets that status of recommendations for this advisor and reason for not having any
   * recommendations. Possible values include, but are not limited to, 'Ok' (Recommendations
   * available), LowActivity (not enough workload to analyze), 'DbSeemsTuned' (Database is doing
   * well), etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recommendationsStatus?: string;
  /**
   * Gets the time when the current resource was analyzed for recommendations by this advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastChecked?: Date;
}

/**
 * Represents the response to a list advisors request.
 */
export interface AdvisorListResult {
  /**
   * The list of advisors.
   */
  value?: Advisor[];
}

/**
 * ARM tracked top level resource.
 */
export interface TrackedResource extends Resource {
  /**
   * Resource location.
   */
  location: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A recoverable database
 */
export interface RecoverableDatabase extends ProxyResource {
  /**
   * The edition of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly edition?: string;
  /**
   * The service level objective name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceLevelObjective?: string;
  /**
   * The elastic pool name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly elasticPoolName?: string;
  /**
   * The last available backup date of the database (ISO8601 format)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastAvailableBackupDate?: Date;
}

/**
 * A restorable dropped database
 */
export interface RestorableDroppedDatabase extends ProxyResource {
  /**
   * The geo-location where the resource lives
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * The name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * The edition of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly edition?: string;
  /**
   * The max size in bytes of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxSizeBytes?: string;
  /**
   * The service level objective name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceLevelObjective?: string;
  /**
   * The elastic pool name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly elasticPoolName?: string;
  /**
   * The creation date of the database (ISO8601 format)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * The deletion date of the database (ISO8601 format)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly deletionDate?: Date;
  /**
   * The earliest restore date of the database (ISO8601 format)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly earliestRestoreDate?: Date;
}

/**
 * The maximum size limits for a database.
 */
export interface MaxSizeCapability {
  /**
   * The maximum size of the database (see 'unit' for the units).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * The units that the limit is expressed in. Possible values include: 'Megabytes', 'Gigabytes',
   * 'Terabytes', 'Petabytes'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: MaxSizeUnits;
  /**
   * The status of the maximum size capability. Possible values include: 'Visible', 'Available',
   * 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CapabilityStatus;
}

/**
 * The service objectives capability.
 */
export interface ServiceObjectiveCapability {
  /**
   * The service objective name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The status of the service objective. Possible values include: 'Visible', 'Available',
   * 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * Unit type used to measure service objective performance level. Possible values include: 'DTU'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: PerformanceLevelUnit;
  /**
   * Performance level value.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: number;
  /**
   * The unique ID of the service objective.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The list of supported maximum database sizes for this service objective.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedMaxSizes?: MaxSizeCapability[];
  /**
   * The included (free) max size for this service level objective.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly includedMaxSize?: MaxSizeCapability;
}

/**
 * The database edition capabilities.
 */
export interface EditionCapability {
  /**
   * The edition name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The status of the edition. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * The list of supported service objectives for the edition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedServiceLevelObjectives?: ServiceObjectiveCapability[];
  /**
   * Whether or not zone redundancy is supported for the edition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly zoneRedundant?: boolean;
}

/**
 * The minimum per-database DTU capability.
 */
export interface ElasticPoolPerDatabaseMinDtuCapability {
  /**
   * The maximum DTUs per database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CapabilityStatus;
}

/**
 * The max per-database DTU capability.
 */
export interface ElasticPoolPerDatabaseMaxDtuCapability {
  /**
   * The maximum DTUs per database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * The list of supported min database DTUs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedPerDatabaseMinDtus?: ElasticPoolPerDatabaseMinDtuCapability[];
}

/**
 * The Elastic Pool DTU capability.
 */
export interface ElasticPoolDtuCapability {
  /**
   * The maximum size of the database (see 'unit' for the units).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * The maximum number of databases supported.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxDatabaseCount?: number;
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * The list of supported max sizes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedMaxSizes?: MaxSizeCapability[];
  /**
   * The included (free) max size for this service level objective.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly includedMaxSize?: MaxSizeCapability;
  /**
   * The list of supported max database sizes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedPerDatabaseMaxSizes?: MaxSizeCapability[];
  /**
   * The list of supported max database DTUs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedPerDatabaseMaxDtus?: ElasticPoolPerDatabaseMaxDtuCapability[];
}

/**
 * The elastic pool edition capabilities.
 */
export interface ElasticPoolEditionCapability {
  /**
   * The elastic pool edition name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The status of the elastic pool edition. Possible values include: 'Visible', 'Available',
   * 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * The list of supported elastic pool DTU levels for the edition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedElasticPoolDtus?: ElasticPoolDtuCapability[];
  /**
   * Whether or not zone redundancy is supported for the edition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly zoneRedundant?: boolean;
}

/**
 * The server capabilities.
 */
export interface ServerVersionCapability {
  /**
   * The server version name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The status of the server version. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * The list of supported database editions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedEditions?: EditionCapability[];
  /**
   * The list of supported elastic pool editions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedElasticPoolEditions?: ElasticPoolEditionCapability[];
}

/**
 * The capabilities for a location.
 */
export interface LocationCapabilities {
  /**
   * The location name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Azure SQL Database's status for the location. Possible values include: 'Visible', 'Available',
   * 'Default', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CapabilityStatus;
  /**
   * The list of supported server versions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedServerVersions?: ServerVersionCapability[];
}

/**
 * A request to check whether the specified name for a resource is available.
 */
export interface CheckNameAvailabilityRequest {
  /**
   * The name whose availability is to be checked.
   */
  name: string;
}

/**
 * A response indicating whether the specified name for a resource is available.
 */
export interface CheckNameAvailabilityResponse {
  /**
   * True if the name is available, otherwise false.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly available?: boolean;
  /**
   * A message explaining why the name is unavailable. Will be null if the name is available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The name whose availability was checked.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The reason code explaining why the name is unavailable. Will be null if the name is available.
   * Possible values include: 'Invalid', 'AlreadyExists'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reason?: CheckNameAvailabilityReason;
}

/**
 * A server secure connection policy.
 */
export interface ServerConnectionPolicy extends ProxyResource {
  /**
   * Metadata used for the Azure portal experience.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Resource location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * The server connection type. Possible values include: 'Default', 'Proxy', 'Redirect'
   */
  connectionType: ServerConnectionType;
}

/**
 * A Slo Usage Metric.
 */
export interface SloUsageMetric {
  /**
   * The serviceLevelObjective for SLO usage metric. Possible values include: 'System', 'System0',
   * 'System1', 'System2', 'System3', 'System4', 'System2L', 'System3L', 'System4L', 'Free',
   * 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6',
   * 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400', 'DW500',
   * 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000', 'DW2000c', 'DW3000',
   * 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c', 'DW7500c', 'DW10000c', 'DW15000c',
   * 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200',
   * 'DS1500', 'DS2000', 'ElasticPool'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceLevelObjective?: ServiceObjectiveName;
  /**
   * The serviceLevelObjectiveId for SLO usage metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceLevelObjectiveId?: string;
  /**
   * Gets or sets inRangeTimeRatio for SLO usage metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inRangeTimeRatio?: number;
}

/**
 * Represents a Service Tier Advisor.
 */
export interface ServiceTierAdvisor extends ProxyResource {
  /**
   * The observation period start (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly observationPeriodStart?: Date;
  /**
   * The observation period start (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly observationPeriodEnd?: Date;
  /**
   * The activeTimeRatio for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly activeTimeRatio?: number;
  /**
   * Gets or sets minDtu for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly minDtu?: number;
  /**
   * Gets or sets avgDtu for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly avgDtu?: number;
  /**
   * Gets or sets maxDtu for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxDtu?: number;
  /**
   * Gets or sets maxSizeInGB for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxSizeInGB?: number;
  /**
   * Gets or sets serviceLevelObjectiveUsageMetrics for the service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceLevelObjectiveUsageMetrics?: SloUsageMetric[];
  /**
   * Gets or sets currentServiceLevelObjective for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentServiceLevelObjective?: string;
  /**
   * Gets or sets currentServiceLevelObjectiveId for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentServiceLevelObjectiveId?: string;
  /**
   * Gets or sets usageBasedRecommendationServiceLevelObjective for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageBasedRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets usageBasedRecommendationServiceLevelObjectiveId for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageBasedRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets databaseSizeBasedRecommendationServiceLevelObjective for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseSizeBasedRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets databaseSizeBasedRecommendationServiceLevelObjectiveId for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseSizeBasedRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets disasterPlanBasedRecommendationServiceLevelObjective for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly disasterPlanBasedRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets disasterPlanBasedRecommendationServiceLevelObjectiveId for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly disasterPlanBasedRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets overallRecommendationServiceLevelObjective for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly overallRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets overallRecommendationServiceLevelObjectiveId for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly overallRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets confidence for service tier advisor.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly confidence?: number;
}

/**
 * Represents a database transparent data encryption configuration.
 */
export interface TransparentDataEncryption extends ProxyResource {
  /**
   * Resource location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * The status of the database transparent data encryption. Possible values include: 'Enabled',
   * 'Disabled'
   */
  status?: TransparentDataEncryptionStatus;
}

/**
 * The impact of an operation, both in absolute and relative terms.
 */
export interface OperationImpact {
  /**
   * The name of the impact dimension.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The unit in which estimated impact to dimension is measured.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: string;
  /**
   * The absolute impact to dimension.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changeValueAbsolute?: number;
  /**
   * The relative impact to dimension (null if not applicable)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changeValueRelative?: number;
}

/**
 * Represents a database recommended index.
 */
export interface RecommendedIndex extends ProxyResource {
  /**
   * The proposed index action. You can create a missing index, drop an unused index, or rebuild an
   * existing index to improve its performance. Possible values include: 'Create', 'Drop',
   * 'Rebuild'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly action?: RecommendedIndexAction;
  /**
   * The current recommendation state. Possible values include: 'Active', 'Pending', 'Executing',
   * 'Verifying', 'Pending Revert', 'Reverting', 'Reverted', 'Ignored', 'Expired', 'Blocked',
   * 'Success'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: RecommendedIndexState;
  /**
   * The UTC datetime showing when this resource was created (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * The UTC datetime of when was this resource last changed (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModified?: Date;
  /**
   * The type of index (CLUSTERED, NONCLUSTERED, COLUMNSTORE, CLUSTERED COLUMNSTORE). Possible
   * values include: 'CLUSTERED', 'NONCLUSTERED', 'COLUMNSTORE', 'CLUSTERED COLUMNSTORE'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly indexType?: RecommendedIndexType;
  /**
   * The schema where table to build index over resides
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly schema?: string;
  /**
   * The table on which to build index.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly table?: string;
  /**
   * Columns over which to build index
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly columns?: string[];
  /**
   * The list of column names to be included in the index
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly includedColumns?: string[];
  /**
   * The full build index script
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly indexScript?: string;
  /**
   * The estimated impact of doing recommended index action.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly estimatedImpact?: OperationImpact[];
  /**
   * The values reported after index action is complete.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reportedImpact?: OperationImpact[];
}

/**
 * Represents a database.
 */
export interface Database extends TrackedResource {
  /**
   * Kind of database.  This is metadata used for the Azure portal experience.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * The collation of the database. If createMode is not Default, this value is ignored.
   */
  collation?: string;
  /**
   * The creation date of the database (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * The containment state of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly containmentState?: number;
  /**
   * The current service level objective ID of the database. This is the ID of the service level
   * objective that is currently active.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentServiceObjectiveId?: string;
  /**
   * The ID of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseId?: string;
  /**
   * This records the earliest start date and time that restore is available for this database
   * (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly earliestRestoreDate?: Date;
  /**
   * Specifies the mode of database creation.
   *
   * Default: regular database creation.
   *
   * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified
   * as the resource ID of the source database.
   *
   * OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable)
   * secondary replica of an existing database. sourceDatabaseId must be specified as the resource
   * ID of the existing primary database.
   *
   * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing
   * database. sourceDatabaseId must be specified as the resource ID of the existing database, and
   * restorePointInTime must be specified.
   *
   * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be
   * specified as the recoverable database resource ID to restore.
   *
   * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must
   * be specified. If sourceDatabaseId is the database's original resource ID, then
   * sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the
   * restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored.
   * restorePointInTime may also be specified to restore from an earlier point in time.
   *
   * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention
   * vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point
   * resource ID.
   *
   * Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not
   * supported for DataWarehouse edition. Possible values include: 'Copy', 'Default',
   * 'NonReadableSecondary', 'OnlineSecondary', 'PointInTimeRestore', 'Recovery', 'Restore',
   * 'RestoreLongTermRetentionBackup'
   */
  createMode?: CreateMode;
  /**
   * Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore,
   * Recovery, or Restore, then this value is required. Specifies the resource ID of the source
   * database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source
   * database must be the same as the new database being created.
   */
  sourceDatabaseId?: string;
  /**
   * Conditional. If createMode is Restore and sourceDatabaseId is the deleted database's original
   * resource id when it existed (as opposed to its current restorable dropped database id), then
   * this value is required. Specifies the time that the database was deleted.
   */
  sourceDatabaseDeletionDate?: Date;
  /**
   * Conditional. If createMode is PointInTimeRestore, this value is required. If createMode is
   * Restore, this value is optional. Specifies the point in time (ISO8601 format) of the source
   * database that will be restored to create the new database. Must be greater than or equal to
   * the source database's earliestRestoreDate value.
   */
  restorePointInTime?: Date;
  /**
   * Conditional. If createMode is RestoreLongTermRetentionBackup, then this value is required.
   * Specifies the resource ID of the recovery point to restore from.
   */
  recoveryServicesRecoveryPointResourceId?: string;
  /**
   * The edition of the database. The DatabaseEditions enumeration contains all the valid editions.
   * If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
   *
   * The list of SKUs may vary by region and support offer. To determine the SKUs (including the
   * SKU name, tier/edition, family, and capacity) that are available to your subscription in an
   * Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
   *
   * ```azurecli
   * az sql db list-editions -l <location> -o table
   * ````
   *
   * ```powershell
   * Get-AzSqlServerServiceObjective -Location <location>
   * ````
   * . Possible values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'PremiumRS',
   * 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2', 'GeneralPurpose', 'BusinessCritical',
   * 'Hyperscale'
   */
  edition?: DatabaseEdition;
  /**
   * The max size of the database expressed in bytes. If createMode is not Default, this value is
   * ignored. To see possible values, query the capabilities API
   * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
   * referred to by operationId: "Capabilities_ListByLocation."
   */
  maxSizeBytes?: string;
  /**
   * The configured service level objective ID of the database. This is the service level objective
   * that is in the process of being applied to the database. Once successfully updated, it will
   * match the value of currentServiceObjectiveId property. If requestedServiceObjectiveId and
   * requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveId
   * overrides the value of requestedServiceObjectiveName.
   *
   * The list of SKUs may vary by region and support offer. To determine the service objective ids
   * that are available to your subscription in an Azure region, use the
   * `Capabilities_ListByLocation` REST API.
   */
  requestedServiceObjectiveId?: string;
  /**
   * The name of the configured service level objective of the database. This is the service level
   * objective that is in the process of being applied to the database. Once successfully updated,
   * it will match the value of serviceLevelObjective property.
   *
   * The list of SKUs may vary by region and support offer. To determine the SKUs (including the
   * SKU name, tier/edition, family, and capacity) that are available to your subscription in an
   * Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
   *
   * ```azurecli
   * az sql db list-editions -l <location> -o table
   * ````
   *
   * ```powershell
   * Get-AzSqlServerServiceObjective -Location <location>
   * ````
   * . Possible values include: 'System', 'System0', 'System1', 'System2', 'System3', 'System4',
   * 'System2L', 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7',
   * 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6',
   * 'DW100', 'DW200', 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500',
   * 'DW1500c', 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c',
   * 'DW6000c', 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400',
   * 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
   */
  requestedServiceObjectiveName?: ServiceObjectiveName;
  /**
   * The current service level objective of the database. Possible values include: 'System',
   * 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L', 'System3L', 'System4L',
   * 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1', 'P2', 'P3',
   * 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400',
   * 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000', 'DW2000c',
   * 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c', 'DW7500c', 'DW10000c',
   * 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500', 'DS600', 'DS1000',
   * 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceLevelObjective?: ServiceObjectiveName;
  /**
   * The status of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: string;
  /**
   * The name of the elastic pool the database is in. If elasticPoolName and
   * requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is
   * ignored. Not supported for DataWarehouse edition.
   */
  elasticPoolName?: string;
  /**
   * The default secondary region for this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * The list of service tier advisors for this database. Expanded property
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceTierAdvisors?: ServiceTierAdvisor[];
  /**
   * The transparent data encryption info for this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly transparentDataEncryption?: TransparentDataEncryption[];
  /**
   * The recommended indices for this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recommendedIndex?: RecommendedIndex[];
  /**
   * The resource identifier of the failover group containing this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly failoverGroupId?: string;
  /**
   * Conditional. If the database is a geo-secondary, readScale indicates whether read-only
   * connections are allowed to this database or not. Not supported for DataWarehouse edition.
   * Possible values include: 'Enabled', 'Disabled'
   */
  readScale?: ReadScale;
  /**
   * Indicates the name of the sample schema to apply when creating this database. If createMode is
   * not Default, this value is ignored. Not supported for DataWarehouse edition. Possible values
   * include: 'AdventureWorksLT'
   */
  sampleName?: SampleName;
  /**
   * Whether or not this database is zone redundant, which means the replicas of this database will
   * be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
}

/**
 * Represents a database update.
 */
export interface DatabaseUpdate extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The collation of the database. If createMode is not Default, this value is ignored.
   */
  collation?: string;
  /**
   * The creation date of the database (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * The containment state of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly containmentState?: number;
  /**
   * The current service level objective ID of the database. This is the ID of the service level
   * objective that is currently active.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentServiceObjectiveId?: string;
  /**
   * The ID of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseId?: string;
  /**
   * This records the earliest start date and time that restore is available for this database
   * (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly earliestRestoreDate?: Date;
  /**
   * Specifies the mode of database creation.
   *
   * Default: regular database creation.
   *
   * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified
   * as the resource ID of the source database.
   *
   * OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable)
   * secondary replica of an existing database. sourceDatabaseId must be specified as the resource
   * ID of the existing primary database.
   *
   * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing
   * database. sourceDatabaseId must be specified as the resource ID of the existing database, and
   * restorePointInTime must be specified.
   *
   * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be
   * specified as the recoverable database resource ID to restore.
   *
   * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must
   * be specified. If sourceDatabaseId is the database's original resource ID, then
   * sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the
   * restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored.
   * restorePointInTime may also be specified to restore from an earlier point in time.
   *
   * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention
   * vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point
   * resource ID.
   *
   * Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not
   * supported for DataWarehouse edition. Possible values include: 'Copy', 'Default',
   * 'NonReadableSecondary', 'OnlineSecondary', 'PointInTimeRestore', 'Recovery', 'Restore',
   * 'RestoreLongTermRetentionBackup'
   */
  createMode?: CreateMode;
  /**
   * Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore,
   * Recovery, or Restore, then this value is required. Specifies the resource ID of the source
   * database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source
   * database must be the same as the new database being created.
   */
  sourceDatabaseId?: string;
  /**
   * Conditional. If createMode is Restore and sourceDatabaseId is the deleted database's original
   * resource id when it existed (as opposed to its current restorable dropped database id), then
   * this value is required. Specifies the time that the database was deleted.
   */
  sourceDatabaseDeletionDate?: Date;
  /**
   * Conditional. If createMode is PointInTimeRestore, this value is required. If createMode is
   * Restore, this value is optional. Specifies the point in time (ISO8601 format) of the source
   * database that will be restored to create the new database. Must be greater than or equal to
   * the source database's earliestRestoreDate value.
   */
  restorePointInTime?: Date;
  /**
   * Conditional. If createMode is RestoreLongTermRetentionBackup, then this value is required.
   * Specifies the resource ID of the recovery point to restore from.
   */
  recoveryServicesRecoveryPointResourceId?: string;
  /**
   * The edition of the database. The DatabaseEditions enumeration contains all the valid editions.
   * If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.
   *
   * The list of SKUs may vary by region and support offer. To determine the SKUs (including the
   * SKU name, tier/edition, family, and capacity) that are available to your subscription in an
   * Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
   *
   * ```azurecli
   * az sql db list-editions -l <location> -o table
   * ````
   *
   * ```powershell
   * Get-AzSqlServerServiceObjective -Location <location>
   * ````
   * . Possible values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'PremiumRS',
   * 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2', 'GeneralPurpose', 'BusinessCritical',
   * 'Hyperscale'
   */
  edition?: DatabaseEdition;
  /**
   * The max size of the database expressed in bytes. If createMode is not Default, this value is
   * ignored. To see possible values, query the capabilities API
   * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
   * referred to by operationId: "Capabilities_ListByLocation."
   */
  maxSizeBytes?: string;
  /**
   * The configured service level objective ID of the database. This is the service level objective
   * that is in the process of being applied to the database. Once successfully updated, it will
   * match the value of currentServiceObjectiveId property. If requestedServiceObjectiveId and
   * requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveId
   * overrides the value of requestedServiceObjectiveName.
   *
   * The list of SKUs may vary by region and support offer. To determine the service objective ids
   * that are available to your subscription in an Azure region, use the
   * `Capabilities_ListByLocation` REST API.
   */
  requestedServiceObjectiveId?: string;
  /**
   * The name of the configured service level objective of the database. This is the service level
   * objective that is in the process of being applied to the database. Once successfully updated,
   * it will match the value of serviceLevelObjective property.
   *
   * The list of SKUs may vary by region and support offer. To determine the SKUs (including the
   * SKU name, tier/edition, family, and capacity) that are available to your subscription in an
   * Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
   *
   * ```azurecli
   * az sql db list-editions -l <location> -o table
   * ````
   *
   * ```powershell
   * Get-AzSqlServerServiceObjective -Location <location>
   * ````
   * . Possible values include: 'System', 'System0', 'System1', 'System2', 'System3', 'System4',
   * 'System2L', 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7',
   * 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6',
   * 'DW100', 'DW200', 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500',
   * 'DW1500c', 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c',
   * 'DW6000c', 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400',
   * 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
   */
  requestedServiceObjectiveName?: ServiceObjectiveName;
  /**
   * The current service level objective of the database. Possible values include: 'System',
   * 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L', 'System3L', 'System4L',
   * 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1', 'P2', 'P3',
   * 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400',
   * 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000', 'DW2000c',
   * 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c', 'DW7500c', 'DW10000c',
   * 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500', 'DS600', 'DS1000',
   * 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceLevelObjective?: ServiceObjectiveName;
  /**
   * The status of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: string;
  /**
   * The name of the elastic pool the database is in. If elasticPoolName and
   * requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is
   * ignored. Not supported for DataWarehouse edition.
   */
  elasticPoolName?: string;
  /**
   * The default secondary region for this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * The list of service tier advisors for this database. Expanded property
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceTierAdvisors?: ServiceTierAdvisor[];
  /**
   * The transparent data encryption info for this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly transparentDataEncryption?: TransparentDataEncryption[];
  /**
   * The recommended indices for this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recommendedIndex?: RecommendedIndex[];
  /**
   * The resource identifier of the failover group containing this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly failoverGroupId?: string;
  /**
   * Conditional. If the database is a geo-secondary, readScale indicates whether read-only
   * connections are allowed to this database or not. Not supported for DataWarehouse edition.
   * Possible values include: 'Enabled', 'Disabled'
   */
  readScale?: ReadScale;
  /**
   * Indicates the name of the sample schema to apply when creating this database. If createMode is
   * not Default, this value is ignored. Not supported for DataWarehouse edition. Possible values
   * include: 'AdventureWorksLT'
   */
  sampleName?: SampleName;
  /**
   * Whether or not this database is zone redundant, which means the replicas of this database will
   * be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
}

/**
 * Contains information about a database Threat Detection policy.
 */
export interface DatabaseSecurityAlertPolicy extends ProxyResource {
  /**
   * The geo-location where the resource lives
   */
  location?: string;
  /**
   * Resource kind.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint and
   * storageAccountAccessKey are required. Possible values include: 'New', 'Enabled', 'Disabled'
   */
  state: SecurityAlertPolicyState;
  /**
   * Specifies the semicolon-separated list of alerts that are disabled, or empty string to disable
   * no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly;
   * Data_Exfiltration; Unsafe_Action.
   */
  disabledAlerts?: string;
  /**
   * Specifies the semicolon-separated list of e-mail addresses to which the alert is sent.
   */
  emailAddresses?: string;
  /**
   * Specifies that the alert is sent to the account administrators. Possible values include:
   * 'Enabled', 'Disabled'
   */
  emailAccountAdmins?: SecurityAlertPolicyEmailAccountAdmins;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob
   * storage will hold all Threat Detection audit logs. If state is Enabled, storageEndpoint is
   * required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the Threat Detection audit storage account. If state is
   * Enabled, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the Threat Detection audit logs.
   */
  retentionDays?: number;
  /**
   * Specifies whether to use the default server policy. Possible values include: 'Enabled',
   * 'Disabled'
   */
  useServerDefault?: SecurityAlertPolicyUseServerDefault;
}

/**
 * Represents a database data masking policy.
 */
export interface DataMaskingPolicy extends ProxyResource {
  /**
   * The state of the data masking policy. Possible values include: 'Disabled', 'Enabled'
   */
  dataMaskingState: DataMaskingState;
  /**
   * The list of the exempt principals. Specifies the semicolon-separated list of database users
   * for which the data masking policy does not apply. The specified users receive data results
   * without masking for all of the database queries.
   */
  exemptPrincipals?: string;
  /**
   * The list of the application principals. This is a legacy parameter and is no longer used.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly applicationPrincipals?: string;
  /**
   * The masking level. This is a legacy parameter and is no longer used.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maskingLevel?: string;
  /**
   * The location of the data masking policy.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * The kind of data masking policy. Metadata, used for Azure portal.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
}

/**
 * Represents a database data masking rule.
 */
export interface DataMaskingRule extends ProxyResource {
  /**
   * The rule Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataMaskingRuleId?: string;
  /**
   * The alias name. This is a legacy parameter and is no longer used.
   */
  aliasName?: string;
  /**
   * The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName,
   * tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the
   * rule doesn't already exist, the rule will be created with ruleState set to enabled, regardless
   * of the provided value of ruleState. Possible values include: 'Disabled', 'Enabled'
   */
  ruleState?: DataMaskingRuleState;
  /**
   * The schema name on which the data masking rule is applied.
   */
  schemaName: string;
  /**
   * The table name on which the data masking rule is applied.
   */
  tableName: string;
  /**
   * The column name on which the data masking rule is applied.
   */
  columnName: string;
  /**
   * The masking function that is used for the data masking rule. Possible values include:
   * 'Default', 'CCN', 'Email', 'Number', 'SSN', 'Text'
   */
  maskingFunction: DataMaskingFunction;
  /**
   * The numberFrom property of the masking rule. Required if maskingFunction is set to Number,
   * otherwise this parameter will be ignored.
   */
  numberFrom?: string;
  /**
   * The numberTo property of the data masking rule. Required if maskingFunction is set to Number,
   * otherwise this parameter will be ignored.
   */
  numberTo?: string;
  /**
   * If maskingFunction is set to Text, the number of characters to show unmasked in the beginning
   * of the string. Otherwise, this parameter will be ignored.
   */
  prefixSize?: string;
  /**
   * If maskingFunction is set to Text, the number of characters to show unmasked at the end of the
   * string. Otherwise, this parameter will be ignored.
   */
  suffixSize?: string;
  /**
   * If maskingFunction is set to Text, the character to use for masking the unexposed part of the
   * string. Otherwise, this parameter will be ignored.
   */
  replacementString?: string;
  /**
   * The location of the data masking rule.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * The kind of Data Masking Rule. Metadata, used for Azure portal.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
}

/**
 * Represents a disaster recovery configuration.
 */
export interface DisasterRecoveryConfiguration extends ProxyResource {
  /**
   * The status of the disaster recovery configuration. Possible values include: 'Creating',
   * 'Ready', 'FailingOver', 'Dropping'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: DisasterRecoveryConfigurationStatus;
  /**
   * Whether or not failover can be done automatically. Possible values include: 'Off', 'On'
   */
  autoFailover: DisasterRecoveryConfigurationAutoFailover;
  /**
   * How aggressive the automatic failover should be. Possible values include: 'Manual',
   * 'Automatic'
   */
  failoverPolicy: DisasterRecoveryConfigurationFailoverPolicy;
  /**
   * Id of the partner server.
   */
  partnerServerId: string;
  /**
   * Logical name of the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly logicalServerName?: string;
  /**
   * Logical name of the partner server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partnerLogicalServerName?: string;
  /**
   * The role of the current server in the disaster recovery configuration. Possible values
   * include: 'None', 'Primary', 'Secondary'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly role?: DisasterRecoveryConfigurationRole;
  /**
   * Location of the server that contains this disaster recovery configuration.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
}

/**
 * Represents a database elastic pool.
 */
export interface ElasticPool extends TrackedResource {
  /**
   * The creation date of the elastic pool (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * The state of the elastic pool. Possible values include: 'Creating', 'Ready', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: ElasticPoolState;
  /**
   * The edition of the elastic pool. Possible values include: 'Basic', 'Standard', 'Premium',
   * 'GeneralPurpose', 'BusinessCritical'
   */
  edition?: ElasticPoolEdition;
  /**
   * The total shared DTU for the database elastic pool.
   */
  dtu?: number;
  /**
   * The maximum DTU any one database can consume.
   */
  databaseDtuMax?: number;
  /**
   * The minimum DTU all databases are guaranteed.
   */
  databaseDtuMin?: number;
  /**
   * Gets storage limit for the database elastic pool in MB.
   */
  storageMB?: number;
  /**
   * Whether or not this database elastic pool is zone redundant, which means the replicas of this
   * database will be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
  /**
   * Kind of elastic pool.  This is metadata used for the Azure portal experience.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
}

/**
 * Represents an elastic pool update.
 */
export interface ElasticPoolUpdate extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The creation date of the elastic pool (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * The state of the elastic pool. Possible values include: 'Creating', 'Ready', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: ElasticPoolState;
  /**
   * The edition of the elastic pool. Possible values include: 'Basic', 'Standard', 'Premium',
   * 'GeneralPurpose', 'BusinessCritical'
   */
  edition?: ElasticPoolEdition;
  /**
   * The total shared DTU for the database elastic pool.
   */
  dtu?: number;
  /**
   * The maximum DTU any one database can consume.
   */
  databaseDtuMax?: number;
  /**
   * The minimum DTU all databases are guaranteed.
   */
  databaseDtuMin?: number;
  /**
   * Gets storage limit for the database elastic pool in MB.
   */
  storageMB?: number;
  /**
   * Whether or not this database elastic pool is zone redundant, which means the replicas of this
   * database will be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
}

/**
 * Represents a server firewall rule.
 */
export interface FirewallRule extends ProxyResource {
  /**
   * Kind of server that contains this firewall rule.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Location of the server that contains this firewall rule.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to
   * represent all Azure-internal IP addresses.
   */
  startIpAddress: string;
  /**
   * The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to
   * startIpAddress. Use value '0.0.0.0' to represent all Azure-internal IP addresses.
   */
  endIpAddress: string;
}

/**
 * A database geo backup policy.
 */
export interface GeoBackupPolicy extends ProxyResource {
  /**
   * The state of the geo backup policy. Possible values include: 'Disabled', 'Enabled'
   */
  state: GeoBackupPolicyState;
  /**
   * The storage type of the geo backup policy.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly storageType?: string;
  /**
   * Kind of geo backup policy.  This is metadata used for the Azure portal experience.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Backup policy location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
}

/**
 * Import database parameters.
 */
export interface ImportExtensionRequest {
  /**
   * The name of the extension.
   */
  name?: string;
  /**
   * The type of the extension.
   */
  type?: string;
  /**
   * The type of the storage key to use. Possible values include: 'StorageAccessKey',
   * 'SharedAccessKey'
   */
  storageKeyType: StorageKeyType;
  /**
   * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a
   * "?."
   */
  storageKey: string;
  /**
   * The storage uri to use.
   */
  storageUri: string;
  /**
   * The name of the SQL administrator.
   */
  administratorLogin: string;
  /**
   * The password of the SQL administrator.
   */
  administratorLoginPassword: string;
  /**
   * The authentication type. Possible values include: 'SQL', 'ADPassword'. Default value: 'SQL'.
   */
  authenticationType?: AuthenticationType;
}

/**
 * Response for Import/Export Get operation.
 */
export interface ImportExportResponse extends ProxyResource {
  /**
   * The request type of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestType?: string;
  /**
   * The request type of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestId?: string;
  /**
   * The name of the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverName?: string;
  /**
   * The name of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * The status message returned from the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: string;
  /**
   * The operation status last modified time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModifiedTime?: string;
  /**
   * The operation queued time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queuedTime?: string;
  /**
   * The blob uri.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly blobUri?: string;
  /**
   * The error message returned from the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorMessage?: string;
}

/**
 * Export database parameters.
 */
export interface ExportRequest {
  /**
   * The type of the storage key to use. Possible values include: 'StorageAccessKey',
   * 'SharedAccessKey'
   */
  storageKeyType: StorageKeyType;
  /**
   * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a
   * "?."
   */
  storageKey: string;
  /**
   * The storage uri to use.
   */
  storageUri: string;
  /**
   * The name of the SQL administrator.
   */
  administratorLogin: string;
  /**
   * The password of the SQL administrator.
   */
  administratorLoginPassword: string;
  /**
   * The authentication type. Possible values include: 'SQL', 'ADPassword'. Default value: 'SQL'.
   */
  authenticationType?: AuthenticationType;
}

/**
 * Import database parameters.
 */
export interface ImportRequest extends ExportRequest {
  /**
   * The name of the database to import.
   */
  databaseName: string;
  /**
   * The edition for the database being created.
   *
   * The list of SKUs may vary by region and support offer. To determine the SKUs (including the
   * SKU name, tier/edition, family, and capacity) that are available to your subscription in an
   * Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
   *
   * ```azurecli
   * az sql db list-editions -l <location> -o table
   * ````
   *
   * ```powershell
   * Get-AzSqlServerServiceObjective -Location <location>
   * ````
   * . Possible values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'PremiumRS',
   * 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2', 'GeneralPurpose', 'BusinessCritical',
   * 'Hyperscale'
   */
  edition: DatabaseEdition;
  /**
   * The name of the service objective to assign to the database. Possible values include:
   * 'System', 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L', 'System3L',
   * 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1',
   * 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200',
   * 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c',
   * 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c',
   * 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500',
   * 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
   */
  serviceObjectiveName: ServiceObjectiveName;
  /**
   * The maximum size for the newly imported database.
   */
  maxSizeBytes: string;
}

/**
 * Represents database metrics.
 */
export interface MetricValue {
  /**
   * The number of values for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly count?: number;
  /**
   * The average value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly average?: number;
  /**
   * The max value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maximum?: number;
  /**
   * The min value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly minimum?: number;
  /**
   * The metric timestamp (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestamp?: Date;
  /**
   * The total value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly total?: number;
}

/**
 * A database metric name.
 */
export interface MetricName {
  /**
   * The name of the database metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
  /**
   * The friendly name of the database metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localizedValue?: string;
}

/**
 * Database metrics.
 */
export interface Metric {
  /**
   * The start time for the metric (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * The end time for the metric (ISO-8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: Date;
  /**
   * The time step to be used to summarize the metric values.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timeGrain?: string;
  /**
   * The unit of the metric. Possible values include: 'count', 'bytes', 'seconds', 'percent',
   * 'countPerSecond', 'bytesPerSecond'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: UnitType;
  /**
   * The name information for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: MetricName;
  /**
   * The metric values for the specified time window and timestep.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metricValues?: MetricValue[];
}

/**
 * A metric availability value.
 */
export interface MetricAvailability {
  /**
   * The length of retention for the database metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly retention?: string;
  /**
   * The granularity of the database metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timeGrain?: string;
}

/**
 * A database metric definition.
 */
export interface MetricDefinition {
  /**
   * The name information for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: MetricName;
  /**
   * The primary aggregation type defining how metric values are displayed. Possible values
   * include: 'None', 'Average', 'Count', 'Minimum', 'Maximum', 'Total'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryAggregationType?: PrimaryAggregationType;
  /**
   * The resource uri of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceUri?: string;
  /**
   * The unit of the metric. Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
   * 'CountPerSecond', 'BytesPerSecond'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: UnitDefinitionType;
  /**
   * The list of database metric availabilities for the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metricAvailabilities?: MetricAvailability[];
}

/**
 * Display metadata associated with the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft SQL Database.
   */
  provider?: string;
  /**
   * Resource on which the operation is performed: Server, Database, etc.
   */
  resource?: string;
  /**
   * Type of operation: get, read, delete, etc.
   */
  operation?: string;
}

/**
 * SQL REST API operation definition.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * Display metadata associated with the operation.
   */
  display?: OperationDisplay;
}

/**
 * Result of the request to list SQL operations. It contains a list of operations and a URL link to
 * get the next set of results.
 */
export interface OperationListResult {
  /**
   * List of SQL operations supported by the SQL resource provider.
   */
  value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * A database query.
 */
export interface QueryMetric {
  /**
   * The name of the metric
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The name of the metric for display in user interface
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * The unit of measurement. Possible values include: 'percentage', 'KB', 'microseconds'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: QueryMetricUnit;
  /**
   * The measured value
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: number;
}

/**
 * A database query.
 */
export interface QueryInterval {
  /**
   * The start time of the measurement interval (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly intervalStartTime?: Date;
  /**
   * The number of times the query was executed during this interval.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly executionCount?: number;
  /**
   * The list of query metrics during this interval.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metrics?: QueryMetric[];
}

/**
 * A database query.
 */
export interface QueryStatistic {
  /**
   * The id of the query
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queryId?: string;
  /**
   * The list of query intervals.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly intervals?: QueryInterval[];
}

/**
 * A database query.
 */
export interface TopQueries {
  /**
   * The function that is used to aggregate each query's metrics. Possible values include: 'min',
   * 'max', 'avg', 'sum'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly aggregationFunction?: QueryAggregationFunction;
  /**
   * The execution type that is used to filter the query instances that are returned. Possible
   * values include: 'any', 'regular', 'irregular', 'aborted', 'exception'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly executionType?: QueryExecutionType;
  /**
   * The duration of the interval (ISO8601 duration format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly intervalType?: string;
  /**
   * The number of requested queries.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfTopQueries?: number;
  /**
   * The start time for queries that are returned (ISO8601 format)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly observationStartTime?: Date;
  /**
   * The end time for queries that are returned (ISO8601 format)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly observationEndTime?: Date;
  /**
   * The type of metric to use for ordering the top metrics. Possible values include: 'cpu', 'io',
   * 'logio', 'duration', 'executionCount'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly observedMetric?: QueryObservedMetricType;
  /**
   * The list of queries.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queries?: QueryStatistic[];
}

/**
 * An interface representing QueryText.
 */
export interface QueryText {
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Query text.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queryText?: string;
}

/**
 * Represents recommended elastic pool metric.
 */
export interface RecommendedElasticPoolMetric {
  /**
   * The time of metric (ISO8601 format).
   */
  dateTime?: Date;
  /**
   * Gets or sets the DTUs (Database Transaction Units). See
   * https://azure.microsoft.com/documentation/articles/sql-database-what-is-a-dtu/
   */
  dtu?: number;
  /**
   * Gets or sets size in gigabytes.
   */
  sizeGB?: number;
}

/**
 * Represents a recommended elastic pool.
 */
export interface RecommendedElasticPool extends ProxyResource {
  /**
   * The edition of the recommended elastic pool. The ElasticPoolEdition enumeration contains all
   * the valid editions. Possible values include: 'Basic', 'Standard', 'Premium', 'GeneralPurpose',
   * 'BusinessCritical'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseEdition?: ElasticPoolEdition;
  /**
   * The DTU for the recommended elastic pool.
   */
  dtu?: number;
  /**
   * The minimum DTU for the database.
   */
  databaseDtuMin?: number;
  /**
   * The maximum DTU for the database.
   */
  databaseDtuMax?: number;
  /**
   * Gets storage size in megabytes.
   */
  storageMB?: number;
  /**
   * The observation period start (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly observationPeriodStart?: Date;
  /**
   * The observation period start (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly observationPeriodEnd?: Date;
  /**
   * Gets maximum observed DTU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxObservedDtu?: number;
  /**
   * Gets maximum observed storage in megabytes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxObservedStorageMB?: number;
  /**
   * The list of databases in this pool. Expanded property
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: Database[];
  /**
   * The list of databases housed in the server. Expanded property
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metrics?: RecommendedElasticPoolMetric[];
}

/**
 * Represents a database replication link.
 */
export interface ReplicationLink extends ProxyResource {
  /**
   * Location of the server that contains this firewall rule.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * Legacy value indicating whether termination is allowed.  Currently always returns true.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isTerminationAllowed?: boolean;
  /**
   * Replication mode of this replication link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly replicationMode?: string;
  /**
   * The name of the server hosting the partner database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partnerServer?: string;
  /**
   * The name of the partner database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partnerDatabase?: string;
  /**
   * The Azure Region of the partner database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partnerLocation?: string;
  /**
   * The role of the database in the replication link. Possible values include: 'Primary',
   * 'Secondary', 'NonReadableSecondary', 'Source', 'Copy'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly role?: ReplicationRole;
  /**
   * The role of the partner database in the replication link. Possible values include: 'Primary',
   * 'Secondary', 'NonReadableSecondary', 'Source', 'Copy'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partnerRole?: ReplicationRole;
  /**
   * The start time for the replication link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * The percentage of seeding complete for the replication link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly percentComplete?: number;
  /**
   * The replication state for the replication link. Possible values include: 'PENDING', 'SEEDING',
   * 'CATCH_UP', 'SUSPENDED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly replicationState?: ReplicationState;
}

/**
 * Represents the parameters for Unlink Replication Link request.
 */
export interface UnlinkParameters {
  /**
   * Determines whether link will be terminated in a forced or a friendly way.
   */
  forcedTermination?: boolean;
}

/**
 * A database restore point.
 */
export interface RestorePoint extends ProxyResource {
  /**
   * The restore point type of the database restore point. Possible values include: 'DISCRETE',
   * 'CONTINUOUS'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly restorePointType?: RestorePointType;
  /**
   * Restore point creation time (ISO8601 format). Populated when restorePointType = CONTINUOUS.
   * Null otherwise.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly restorePointCreationDate?: Date;
  /**
   * Earliest restore time (ISO8601 format). Populated when restorePointType = DISCRETE. Null
   * otherwise.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly earliestRestoreDate?: Date;
}

/**
 * An server Active Directory Administrator.
 */
export interface ServerAzureADAdministrator extends ProxyResource {
  /**
   * The server administrator login value.
   */
  login: string;
  /**
   * The server administrator Sid (Secure ID).
   */
  sid: string;
  /**
   * The server Active Directory Administrator tenant id.
   */
  tenantId: string;
}

/**
 * Server communication link.
 */
export interface ServerCommunicationLink extends ProxyResource {
  /**
   * The state.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: string;
  /**
   * The name of the partner server.
   */
  partnerServer: string;
  /**
   * Communication link location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * Communication link kind.  This property is used for Azure Portal metadata.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
}

/**
 * Represents a server.
 */
export interface Server extends TrackedResource {
  /**
   * Kind of sql server.  This is metadata used for the Azure portal experience.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * The fully qualified domain name of the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * The version of the server. Possible values include: '2.0', '12.0'
   */
  version?: ServerVersion;
  /**
   * Administrator username for the server. Can only be specified when the server is being created
   * (and is required for creation).
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for server creation).
   */
  administratorLoginPassword?: string;
  /**
   * The ID of the Active Azure Directory object with admin permissions on this server. Legacy
   * parameter, always null. To check for Active Directory admin, query
   * .../servers/{serverName}/administrators.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly externalAdministratorSid?: string;
  /**
   * The display name of the Azure Active Directory object with admin permissions on this server.
   * Legacy parameter, always null. To check for Active Directory admin, query
   * .../servers/{serverName}/administrators
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly externalAdministratorLogin?: string;
  /**
   * The state of the server. Possible values include: 'Ready', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: ServerState;
}

/**
 * Represents an update to a server.
 */
export interface ServerUpdate extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The fully qualified domain name of the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * The version of the server. Possible values include: '2.0', '12.0'
   */
  version?: ServerVersion;
  /**
   * Administrator username for the server. Can only be specified when the server is being created
   * (and is required for creation).
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for server creation).
   */
  administratorLoginPassword?: string;
  /**
   * The ID of the Active Azure Directory object with admin permissions on this server. Legacy
   * parameter, always null. To check for Active Directory admin, query
   * .../servers/{serverName}/administrators.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly externalAdministratorSid?: string;
  /**
   * The display name of the Azure Active Directory object with admin permissions on this server.
   * Legacy parameter, always null. To check for Active Directory admin, query
   * .../servers/{serverName}/administrators
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly externalAdministratorLogin?: string;
  /**
   * The state of the server. Possible values include: 'Ready', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: ServerState;
}

/**
 * Represents a database service objective.
 */
export interface ServiceObjective extends ProxyResource {
  /**
   * The name for the service objective.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceObjectiveName?: string;
  /**
   * Gets whether the service level objective is the default service objective.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDefault?: boolean;
  /**
   * Gets whether the service level objective is a system service objective.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isSystem?: boolean;
  /**
   * The description for the service level objective.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * Gets whether the service level objective is enabled.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly enabled?: boolean;
}

/**
 * Represents the activity on an elastic pool.
 */
export interface ElasticPoolActivity extends ProxyResource {
  /**
   * The geo-location where the resource lives
   */
  location?: string;
  /**
   * The time the operation finished (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: Date;
  /**
   * The error code if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorCode?: number;
  /**
   * The error message if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorMessage?: string;
  /**
   * The error severity if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorSeverity?: number;
  /**
   * The operation name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * The unique operation ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operationId?: string;
  /**
   * The percentage complete if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly percentComplete?: number;
  /**
   * The requested max DTU per database if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedDatabaseDtuMax?: number;
  /**
   * The requested min DTU per database if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedDatabaseDtuMin?: number;
  /**
   * The requested DTU for the pool if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedDtu?: number;
  /**
   * The requested name for the elastic pool if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedElasticPoolName?: string;
  /**
   * The requested storage limit for the pool in GB if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedStorageLimitInGB?: number;
  /**
   * The name of the elastic pool.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly elasticPoolName?: string;
  /**
   * The name of the server the elastic pool is in.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverName?: string;
  /**
   * The time the operation started (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * The current state of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: string;
  /**
   * The requested storage limit in MB.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedStorageLimitInMB?: number;
  /**
   * The requested per database DTU guarantee.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedDatabaseDtuGuarantee?: number;
  /**
   * The requested per database DTU cap.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedDatabaseDtuCap?: number;
  /**
   * The requested DTU guarantee.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedDtuGuarantee?: number;
}

/**
 * Represents the activity on an elastic pool.
 */
export interface ElasticPoolDatabaseActivity extends ProxyResource {
  /**
   * The geo-location where the resource lives
   */
  location?: string;
  /**
   * The database name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * The time the operation finished (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: Date;
  /**
   * The error code if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorCode?: number;
  /**
   * The error message if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorMessage?: string;
  /**
   * The error severity if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorSeverity?: number;
  /**
   * The operation name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * The unique operation ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operationId?: string;
  /**
   * The percentage complete if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly percentComplete?: number;
  /**
   * The name for the elastic pool the database is moving into if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedElasticPoolName?: string;
  /**
   * The name of the current elastic pool the database is in if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentElasticPoolName?: string;
  /**
   * The name of the current service objective if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentServiceObjective?: string;
  /**
   * The name of the requested service objective if available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedServiceObjective?: string;
  /**
   * The name of the server the elastic pool is in.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverName?: string;
  /**
   * The time the operation started (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * The current state of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: string;
}

/**
 * Represents a database transparent data encryption Scan.
 */
export interface TransparentDataEncryptionActivity extends ProxyResource {
  /**
   * Resource location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * The status of the database. Possible values include: 'Encrypting', 'Decrypting'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: TransparentDataEncryptionActivityStatus;
  /**
   * The percent complete of the transparent data encryption scan for a database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly percentComplete?: number;
}

/**
 * Properties of a table auditing policy.
 */
export interface TableAuditingPolicyProperties {
  /**
   * The state of the policy.
   */
  auditingState?: string;
  /**
   * The audit logs table name.
   */
  auditLogsTableName?: string;
  /**
   * Comma-separated list of event types to audit.
   */
  eventTypesToAudit?: string;
  /**
   * The full audit logs table name.
   */
  fullAuditLogsTableName?: string;
  /**
   * The number of days to keep in the audit logs.
   */
  retentionDays?: string;
  /**
   * The key of the auditing storage account.
   */
  storageAccountKey?: string;
  /**
   * The table storage account name
   */
  storageAccountName?: string;
  /**
   * The table storage account resource group name
   */
  storageAccountResourceGroupName?: string;
  /**
   * The secondary key of the auditing storage account.
   */
  storageAccountSecondaryKey?: string;
  /**
   * The table storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * The storage table endpoint.
   */
  storageTableEndpoint?: string;
}

/**
 * A database connection policy.
 */
export interface DatabaseConnectionPolicy extends ProxyResource {
  /**
   * Resource kind.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Resource location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * The state of security access.
   */
  securityEnabledAccess?: string;
  /**
   * The fully qualified host name of the auditing proxy.
   */
  proxyDnsName?: string;
  /**
   * The port number of the auditing proxy.
   */
  proxyPort?: string;
  /**
   * The visibility of the auditing proxy.
   */
  visibility?: string;
  /**
   * Whether server default is enabled or disabled.
   */
  useServerDefault?: string;
  /**
   * The state of proxy redirection.
   */
  redirectionState?: string;
  /**
   * The connection policy state.
   */
  state?: string;
}

/**
 * A database table auditing policy.
 */
export interface DatabaseTableAuditingPolicy extends ProxyResource {
  /**
   * Resource kind.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Resource location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * The state of the policy.
   */
  auditingState?: string;
  /**
   * The audit logs table name.
   */
  auditLogsTableName?: string;
  /**
   * Comma-separated list of event types to audit.
   */
  eventTypesToAudit?: string;
  /**
   * The full audit logs table name.
   */
  fullAuditLogsTableName?: string;
  /**
   * The number of days to keep in the audit logs.
   */
  retentionDays?: string;
  /**
   * The key of the auditing storage account.
   */
  storageAccountKey?: string;
  /**
   * The table storage account name
   */
  storageAccountName?: string;
  /**
   * The table storage account resource group name
   */
  storageAccountResourceGroupName?: string;
  /**
   * The secondary key of the auditing storage account.
   */
  storageAccountSecondaryKey?: string;
  /**
   * The table storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * The storage table endpoint.
   */
  storageTableEndpoint?: string;
  /**
   * Whether server default is enabled or disabled.
   */
  useServerDefault?: string;
}

/**
 * A server table auditing policy.
 */
export interface ServerTableAuditingPolicy extends ProxyResource {
  /**
   * Resource kind.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Resource location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * The state of the policy.
   */
  auditingState?: string;
  /**
   * The audit logs table name.
   */
  auditLogsTableName?: string;
  /**
   * Comma-separated list of event types to audit.
   */
  eventTypesToAudit?: string;
  /**
   * The full audit logs table name.
   */
  fullAuditLogsTableName?: string;
  /**
   * The number of days to keep in the audit logs.
   */
  retentionDays?: string;
  /**
   * The key of the auditing storage account.
   */
  storageAccountKey?: string;
  /**
   * The table storage account name
   */
  storageAccountName?: string;
  /**
   * The table storage account resource group name
   */
  storageAccountResourceGroupName?: string;
  /**
   * The secondary key of the auditing storage account.
   */
  storageAccountSecondaryKey?: string;
  /**
   * The table storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * The storage table endpoint.
   */
  storageTableEndpoint?: string;
}

/**
 * Represents the response to a list database table auditing policies request.
 */
export interface DatabaseTableAuditingPolicyListResult {
  /**
   * The list of database table auditing policies.
   */
  value: DatabaseTableAuditingPolicy[];
}

/**
 * Represents the response to a list server table auditing policies request.
 */
export interface ServerTableAuditingPolicyListResult {
  /**
   * The list of server table auditing policies.
   */
  value: ServerTableAuditingPolicy[];
}

/**
 * Represents server metrics.
 */
export interface ServerUsage {
  /**
   * Name of the server usage metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceName?: string;
  /**
   * The metric display name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * The current value of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentValue?: number;
  /**
   * The current limit of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * The units of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: string;
  /**
   * The next reset time for the metric (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextResetTime?: Date;
}

/**
 * The database usages.
 */
export interface DatabaseUsage {
  /**
   * The name of the usage metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceName?: string;
  /**
   * The usage metric display name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * The current value of the usage metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentValue?: number;
  /**
   * The current limit of the usage metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * The units of the usage metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: string;
  /**
   * The next reset time for the usage metric (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextResetTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface DatabasesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * A comma separated list of child objects to expand in the response. Possible properties:
   * serviceTierAdvisors, transparentDataEncryption.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface DatabasesListByServerOptionalParams extends msRest.RequestOptionsBase {
  /**
   * A comma separated list of child objects to expand in the response. Possible properties:
   * serviceTierAdvisors, transparentDataEncryption.
   */
  expand?: string;
  /**
   * An OData filter expression that describes a subset of databases to return.
   */
  filter?: string;
}

/**
 * An interface representing SqlManagementClientOptions.
 */
export interface SqlManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The response to a list recoverable databases request
 * @extends Array<RecoverableDatabase>
 */
export interface RecoverableDatabaseListResult extends Array<RecoverableDatabase> {
}

/**
 * @interface
 * The response to a list restorable dropped databases request
 * @extends Array<RestorableDroppedDatabase>
 */
export interface RestorableDroppedDatabaseListResult extends Array<RestorableDroppedDatabase> {
}

/**
 * @interface
 * Represents the response to a get server request.
 * @extends Array<Server>
 */
export interface ServerListResult extends Array<Server> {
}

/**
 * @interface
 * Represents the response to a list database request.
 * @extends Array<Database>
 */
export interface DatabaseListResult extends Array<Database> {
}

/**
 * @interface
 * The response to a list database metrics request.
 * @extends Array<Metric>
 */
export interface MetricListResult extends Array<Metric> {
}

/**
 * @interface
 * The response to a list database metric definitions request.
 * @extends Array<MetricDefinition>
 */
export interface MetricDefinitionListResult extends Array<MetricDefinition> {
}

/**
 * @interface
 * The response to a list data masking rules request.
 * @extends Array<DataMaskingRule>
 */
export interface DataMaskingRuleListResult extends Array<DataMaskingRule> {
}

/**
 * @interface
 * Represents the response to a list transparent data encryption configurations request.
 * @extends Array<TransparentDataEncryption>
 */
export interface TransparentDataEncryptionListResult extends Array<TransparentDataEncryption> {
}

/**
 * @interface
 * Represents the response to a list extensions request.
 * @extends Array<any>
 */
export interface ExtensionListResult extends Array<any> {
}

/**
 * @interface
 * Represents the response to a List disaster recovery configuration request.
 * @extends Array<DisasterRecoveryConfiguration>
 */
export interface DisasterRecoveryConfigurationListResult extends Array<DisasterRecoveryConfiguration> {
}

/**
 * @interface
 * Represents the response to a list elastic pool request.
 * @extends Array<ElasticPool>
 */
export interface ElasticPoolListResult extends Array<ElasticPool> {
}

/**
 * @interface
 * Represents the response to a List Firewall Rules request.
 * @extends Array<FirewallRule>
 */
export interface FirewallRuleListResult extends Array<FirewallRule> {
}

/**
 * @interface
 * The response to a list geo backup policies request.
 * @extends Array<GeoBackupPolicy>
 */
export interface GeoBackupPolicyListResult extends Array<GeoBackupPolicy> {
}

/**
 * @interface
 * Represents the response to a get top queries request.
 * @extends Array<TopQueries>
 */
export interface TopQueriesListResult extends Array<TopQueries> {
}

/**
 * @interface
 * Represents the response to a get query request.
 * @extends Array<QueryStatistic>
 */
export interface QueryStatisticListResult extends Array<QueryStatistic> {
}

/**
 * @interface
 * Represents the response to a get query text request.
 * @extends Array<QueryText>
 */
export interface QueryTextListResult extends Array<QueryText> {
}

/**
 * @interface
 * Represents the response to a list recommended elastic pool request.
 * @extends Array<RecommendedElasticPool>
 */
export interface RecommendedElasticPoolListResult extends Array<RecommendedElasticPool> {
}

/**
 * @interface
 * Represents the response to a list recommended elastic pool metrics request.
 * @extends Array<RecommendedElasticPoolMetric>
 */
export interface RecommendedElasticPoolListMetricsResult extends Array<RecommendedElasticPoolMetric> {
}

/**
 * @interface
 * Represents the response to a List database replication link request.
 * @extends Array<ReplicationLink>
 */
export interface ReplicationLinkListResult extends Array<ReplicationLink> {
}

/**
 * @interface
 * The response to a list database restore points request.
 * @extends Array<RestorePoint>
 */
export interface RestorePointListResult extends Array<RestorePoint> {
}

/**
 * @interface
 * The response to a list Active Directory Administrators request.
 * @extends Array<ServerAzureADAdministrator>
 */
export interface ServerAdministratorListResult extends Array<ServerAzureADAdministrator> {
}

/**
 * @interface
 * A list of server communication links.
 * @extends Array<ServerCommunicationLink>
 */
export interface ServerCommunicationLinkListResult extends Array<ServerCommunicationLink> {
}

/**
 * @interface
 * Represents the response to a get database service objectives request.
 * @extends Array<ServiceObjective>
 */
export interface ServiceObjectiveListResult extends Array<ServiceObjective> {
}

/**
 * @interface
 * Represents the response to a list elastic pool activity request.
 * @extends Array<ElasticPoolActivity>
 */
export interface ElasticPoolActivityListResult extends Array<ElasticPoolActivity> {
}

/**
 * @interface
 * Represents the response to a list elastic pool database activity request.
 * @extends Array<ElasticPoolDatabaseActivity>
 */
export interface ElasticPoolDatabaseActivityListResult extends Array<ElasticPoolDatabaseActivity> {
}

/**
 * @interface
 * Represents the response to a list service tier advisor request.
 * @extends Array<ServiceTierAdvisor>
 */
export interface ServiceTierAdvisorListResult extends Array<ServiceTierAdvisor> {
}

/**
 * @interface
 * Represents the response to a list database transparent data encryption activity request.
 * @extends Array<TransparentDataEncryptionActivity>
 */
export interface TransparentDataEncryptionActivityListResult extends Array<TransparentDataEncryptionActivity> {
}

/**
 * @interface
 * Represents the response to a list server metrics request.
 * @extends Array<ServerUsage>
 */
export interface ServerUsageListResult extends Array<ServerUsage> {
}

/**
 * @interface
 * The response to a list database metrics request.
 * @extends Array<DatabaseUsage>
 */
export interface DatabaseUsageListResult extends Array<DatabaseUsage> {
}

/**
 * Defines values for AdvisorStatus.
 * Possible values include: 'GA', 'PublicPreview', 'LimitedPublicPreview', 'PrivatePreview'
 * @readonly
 * @enum {string}
 */
export type AdvisorStatus = 'GA' | 'PublicPreview' | 'LimitedPublicPreview' | 'PrivatePreview';

/**
 * Defines values for AutoExecuteStatus.
 * Possible values include: 'Enabled', 'Disabled', 'Default'
 * @readonly
 * @enum {string}
 */
export type AutoExecuteStatus = 'Enabled' | 'Disabled' | 'Default';

/**
 * Defines values for CapabilityStatus.
 * Possible values include: 'Visible', 'Available', 'Default', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type CapabilityStatus = 'Visible' | 'Available' | 'Default' | 'Disabled';

/**
 * Defines values for MaxSizeUnits.
 * Possible values include: 'Megabytes', 'Gigabytes', 'Terabytes', 'Petabytes'
 * @readonly
 * @enum {string}
 */
export type MaxSizeUnits = 'Megabytes' | 'Gigabytes' | 'Terabytes' | 'Petabytes';

/**
 * Defines values for PerformanceLevelUnit.
 * Possible values include: 'DTU'
 * @readonly
 * @enum {string}
 */
export type PerformanceLevelUnit = 'DTU';

/**
 * Defines values for CheckNameAvailabilityReason.
 * Possible values include: 'Invalid', 'AlreadyExists'
 * @readonly
 * @enum {string}
 */
export type CheckNameAvailabilityReason = 'Invalid' | 'AlreadyExists';

/**
 * Defines values for ServerConnectionType.
 * Possible values include: 'Default', 'Proxy', 'Redirect'
 * @readonly
 * @enum {string}
 */
export type ServerConnectionType = 'Default' | 'Proxy' | 'Redirect';

/**
 * Defines values for CreateMode.
 * Possible values include: 'Copy', 'Default', 'NonReadableSecondary', 'OnlineSecondary',
 * 'PointInTimeRestore', 'Recovery', 'Restore', 'RestoreLongTermRetentionBackup'
 * @readonly
 * @enum {string}
 */
export type CreateMode = 'Copy' | 'Default' | 'NonReadableSecondary' | 'OnlineSecondary' | 'PointInTimeRestore' | 'Recovery' | 'Restore' | 'RestoreLongTermRetentionBackup';

/**
 * Defines values for DatabaseEdition.
 * Possible values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'PremiumRS', 'Free',
 * 'Stretch', 'DataWarehouse', 'System', 'System2', 'GeneralPurpose', 'BusinessCritical',
 * 'Hyperscale'
 * @readonly
 * @enum {string}
 */
export type DatabaseEdition = 'Web' | 'Business' | 'Basic' | 'Standard' | 'Premium' | 'PremiumRS' | 'Free' | 'Stretch' | 'DataWarehouse' | 'System' | 'System2' | 'GeneralPurpose' | 'BusinessCritical' | 'Hyperscale';

/**
 * Defines values for ServiceObjectiveName.
 * Possible values include: 'System', 'System0', 'System1', 'System2', 'System3', 'System4',
 * 'System2L', 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7',
 * 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6',
 * 'DW100', 'DW200', 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500',
 * 'DW1500c', 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c',
 * 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500',
 * 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
 * @readonly
 * @enum {string}
 */
export type ServiceObjectiveName = 'System' | 'System0' | 'System1' | 'System2' | 'System3' | 'System4' | 'System2L' | 'System3L' | 'System4L' | 'Free' | 'Basic' | 'S0' | 'S1' | 'S2' | 'S3' | 'S4' | 'S6' | 'S7' | 'S9' | 'S12' | 'P1' | 'P2' | 'P3' | 'P4' | 'P6' | 'P11' | 'P15' | 'PRS1' | 'PRS2' | 'PRS4' | 'PRS6' | 'DW100' | 'DW200' | 'DW300' | 'DW400' | 'DW500' | 'DW600' | 'DW1000' | 'DW1200' | 'DW1000c' | 'DW1500' | 'DW1500c' | 'DW2000' | 'DW2000c' | 'DW3000' | 'DW2500c' | 'DW3000c' | 'DW6000' | 'DW5000c' | 'DW6000c' | 'DW7500c' | 'DW10000c' | 'DW15000c' | 'DW30000c' | 'DS100' | 'DS200' | 'DS300' | 'DS400' | 'DS500' | 'DS600' | 'DS1000' | 'DS1200' | 'DS1500' | 'DS2000' | 'ElasticPool';

/**
 * Defines values for TransparentDataEncryptionStatus.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type TransparentDataEncryptionStatus = 'Enabled' | 'Disabled';

/**
 * Defines values for RecommendedIndexAction.
 * Possible values include: 'Create', 'Drop', 'Rebuild'
 * @readonly
 * @enum {string}
 */
export type RecommendedIndexAction = 'Create' | 'Drop' | 'Rebuild';

/**
 * Defines values for RecommendedIndexState.
 * Possible values include: 'Active', 'Pending', 'Executing', 'Verifying', 'Pending Revert',
 * 'Reverting', 'Reverted', 'Ignored', 'Expired', 'Blocked', 'Success'
 * @readonly
 * @enum {string}
 */
export type RecommendedIndexState = 'Active' | 'Pending' | 'Executing' | 'Verifying' | 'Pending Revert' | 'Reverting' | 'Reverted' | 'Ignored' | 'Expired' | 'Blocked' | 'Success';

/**
 * Defines values for RecommendedIndexType.
 * Possible values include: 'CLUSTERED', 'NONCLUSTERED', 'COLUMNSTORE', 'CLUSTERED COLUMNSTORE'
 * @readonly
 * @enum {string}
 */
export type RecommendedIndexType = 'CLUSTERED' | 'NONCLUSTERED' | 'COLUMNSTORE' | 'CLUSTERED COLUMNSTORE';

/**
 * Defines values for ReadScale.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type ReadScale = 'Enabled' | 'Disabled';

/**
 * Defines values for SampleName.
 * Possible values include: 'AdventureWorksLT'
 * @readonly
 * @enum {string}
 */
export type SampleName = 'AdventureWorksLT';

/**
 * Defines values for SecurityAlertPolicyState.
 * Possible values include: 'New', 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type SecurityAlertPolicyState = 'New' | 'Enabled' | 'Disabled';

/**
 * Defines values for SecurityAlertPolicyEmailAccountAdmins.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type SecurityAlertPolicyEmailAccountAdmins = 'Enabled' | 'Disabled';

/**
 * Defines values for SecurityAlertPolicyUseServerDefault.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type SecurityAlertPolicyUseServerDefault = 'Enabled' | 'Disabled';

/**
 * Defines values for DataMaskingState.
 * Possible values include: 'Disabled', 'Enabled'
 * @readonly
 * @enum {string}
 */
export type DataMaskingState = 'Disabled' | 'Enabled';

/**
 * Defines values for DataMaskingRuleState.
 * Possible values include: 'Disabled', 'Enabled'
 * @readonly
 * @enum {string}
 */
export type DataMaskingRuleState = 'Disabled' | 'Enabled';

/**
 * Defines values for DataMaskingFunction.
 * Possible values include: 'Default', 'CCN', 'Email', 'Number', 'SSN', 'Text'
 * @readonly
 * @enum {string}
 */
export type DataMaskingFunction = 'Default' | 'CCN' | 'Email' | 'Number' | 'SSN' | 'Text';

/**
 * Defines values for DisasterRecoveryConfigurationStatus.
 * Possible values include: 'Creating', 'Ready', 'FailingOver', 'Dropping'
 * @readonly
 * @enum {string}
 */
export type DisasterRecoveryConfigurationStatus = 'Creating' | 'Ready' | 'FailingOver' | 'Dropping';

/**
 * Defines values for DisasterRecoveryConfigurationAutoFailover.
 * Possible values include: 'Off', 'On'
 * @readonly
 * @enum {string}
 */
export type DisasterRecoveryConfigurationAutoFailover = 'Off' | 'On';

/**
 * Defines values for DisasterRecoveryConfigurationFailoverPolicy.
 * Possible values include: 'Manual', 'Automatic'
 * @readonly
 * @enum {string}
 */
export type DisasterRecoveryConfigurationFailoverPolicy = 'Manual' | 'Automatic';

/**
 * Defines values for DisasterRecoveryConfigurationRole.
 * Possible values include: 'None', 'Primary', 'Secondary'
 * @readonly
 * @enum {string}
 */
export type DisasterRecoveryConfigurationRole = 'None' | 'Primary' | 'Secondary';

/**
 * Defines values for ElasticPoolState.
 * Possible values include: 'Creating', 'Ready', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type ElasticPoolState = 'Creating' | 'Ready' | 'Disabled';

/**
 * Defines values for ElasticPoolEdition.
 * Possible values include: 'Basic', 'Standard', 'Premium', 'GeneralPurpose', 'BusinessCritical'
 * @readonly
 * @enum {string}
 */
export type ElasticPoolEdition = 'Basic' | 'Standard' | 'Premium' | 'GeneralPurpose' | 'BusinessCritical';

/**
 * Defines values for GeoBackupPolicyState.
 * Possible values include: 'Disabled', 'Enabled'
 * @readonly
 * @enum {string}
 */
export type GeoBackupPolicyState = 'Disabled' | 'Enabled';

/**
 * Defines values for StorageKeyType.
 * Possible values include: 'StorageAccessKey', 'SharedAccessKey'
 * @readonly
 * @enum {string}
 */
export type StorageKeyType = 'StorageAccessKey' | 'SharedAccessKey';

/**
 * Defines values for AuthenticationType.
 * Possible values include: 'SQL', 'ADPassword'
 * @readonly
 * @enum {string}
 */
export type AuthenticationType = 'SQL' | 'ADPassword';

/**
 * Defines values for UnitType.
 * Possible values include: 'count', 'bytes', 'seconds', 'percent', 'countPerSecond',
 * 'bytesPerSecond'
 * @readonly
 * @enum {string}
 */
export type UnitType = 'count' | 'bytes' | 'seconds' | 'percent' | 'countPerSecond' | 'bytesPerSecond';

/**
 * Defines values for PrimaryAggregationType.
 * Possible values include: 'None', 'Average', 'Count', 'Minimum', 'Maximum', 'Total'
 * @readonly
 * @enum {string}
 */
export type PrimaryAggregationType = 'None' | 'Average' | 'Count' | 'Minimum' | 'Maximum' | 'Total';

/**
 * Defines values for UnitDefinitionType.
 * Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond',
 * 'BytesPerSecond'
 * @readonly
 * @enum {string}
 */
export type UnitDefinitionType = 'Count' | 'Bytes' | 'Seconds' | 'Percent' | 'CountPerSecond' | 'BytesPerSecond';

/**
 * Defines values for QueryAggregationFunction.
 * Possible values include: 'min', 'max', 'avg', 'sum'
 * @readonly
 * @enum {string}
 */
export type QueryAggregationFunction = 'min' | 'max' | 'avg' | 'sum';

/**
 * Defines values for QueryExecutionType.
 * Possible values include: 'any', 'regular', 'irregular', 'aborted', 'exception'
 * @readonly
 * @enum {string}
 */
export type QueryExecutionType = 'any' | 'regular' | 'irregular' | 'aborted' | 'exception';

/**
 * Defines values for QueryObservedMetricType.
 * Possible values include: 'cpu', 'io', 'logio', 'duration', 'executionCount'
 * @readonly
 * @enum {string}
 */
export type QueryObservedMetricType = 'cpu' | 'io' | 'logio' | 'duration' | 'executionCount';

/**
 * Defines values for QueryMetricUnit.
 * Possible values include: 'percentage', 'KB', 'microseconds'
 * @readonly
 * @enum {string}
 */
export type QueryMetricUnit = 'percentage' | 'KB' | 'microseconds';

/**
 * Defines values for ReplicationRole.
 * Possible values include: 'Primary', 'Secondary', 'NonReadableSecondary', 'Source', 'Copy'
 * @readonly
 * @enum {string}
 */
export type ReplicationRole = 'Primary' | 'Secondary' | 'NonReadableSecondary' | 'Source' | 'Copy';

/**
 * Defines values for ReplicationState.
 * Possible values include: 'PENDING', 'SEEDING', 'CATCH_UP', 'SUSPENDED'
 * @readonly
 * @enum {string}
 */
export type ReplicationState = 'PENDING' | 'SEEDING' | 'CATCH_UP' | 'SUSPENDED';

/**
 * Defines values for RestorePointType.
 * Possible values include: 'DISCRETE', 'CONTINUOUS'
 * @readonly
 * @enum {string}
 */
export type RestorePointType = 'DISCRETE' | 'CONTINUOUS';

/**
 * Defines values for ServerVersion.
 * Possible values include: '2.0', '12.0'
 * @readonly
 * @enum {string}
 */
export type ServerVersion = '2.0' | '12.0';

/**
 * Defines values for ServerState.
 * Possible values include: 'Ready', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type ServerState = 'Ready' | 'Disabled';

/**
 * Defines values for TransparentDataEncryptionActivityStatus.
 * Possible values include: 'Encrypting', 'Decrypting'
 * @readonly
 * @enum {string}
 */
export type TransparentDataEncryptionActivityStatus = 'Encrypting' | 'Decrypting';

/**
 * Contains response data for the listByServer operation.
 */
export type ServerAdvisorsListByServerResponse = AdvisorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AdvisorListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServerAdvisorsGetResponse = Advisor & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Advisor;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ServerAdvisorsUpdateResponse = Advisor & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Advisor;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerAdvisorsCreateOrUpdateResponse = Advisor & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Advisor;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DatabaseAdvisorsListByDatabaseResponse = AdvisorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AdvisorListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DatabaseAdvisorsGetResponse = Advisor & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Advisor;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseAdvisorsCreateOrUpdateResponse = Advisor & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Advisor;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RecoverableDatabasesGetResponse = RecoverableDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RecoverableDatabase;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type RecoverableDatabasesListByServerResponse = RecoverableDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RecoverableDatabaseListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RestorableDroppedDatabasesGetResponse = RestorableDroppedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RestorableDroppedDatabase;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type RestorableDroppedDatabasesListByServerResponse = RestorableDroppedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RestorableDroppedDatabaseListResult;
    };
};

/**
 * Contains response data for the listByLocation operation.
 */
export type CapabilitiesListByLocationResponse = LocationCapabilities & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocationCapabilities;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ServersCheckNameAvailabilityResponse = CheckNameAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameAvailabilityResponse;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ServersListResponse = ServerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServersCreateOrUpdateResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Server;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ServersUpdateResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Server;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServersGetResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Server;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ServersListByResourceGroupResponse = ServerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerConnectionPoliciesCreateOrUpdateResponse = ServerConnectionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerConnectionPolicy;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServerConnectionPoliciesGetResponse = ServerConnectionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerConnectionPolicy;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabasesCreateOrUpdateResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the update operation.
 */
export type DatabasesUpdateResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DatabasesGetResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type DatabasesListByServerResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseListResult;
    };
};

/**
 * Contains response data for the getByElasticPool operation.
 */
export type DatabasesGetByElasticPoolResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the listByElasticPool operation.
 */
export type DatabasesListByElasticPoolResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseListResult;
    };
};

/**
 * Contains response data for the getByRecommendedElasticPool operation.
 */
export type DatabasesGetByRecommendedElasticPoolResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the listByRecommendedElasticPool operation.
 */
export type DatabasesListByRecommendedElasticPoolResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseListResult;
    };
};

/**
 * Contains response data for the createImportOperation operation.
 */
export type DatabasesCreateImportOperationResponse = ImportExportResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportExportResponse;
    };
};

/**
 * Contains response data for the importMethod operation.
 */
export type DatabasesImportMethodResponse = ImportExportResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportExportResponse;
    };
};

/**
 * Contains response data for the exportMethod operation.
 */
export type DatabasesExportMethodResponse = ImportExportResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportExportResponse;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type DatabasesListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type DatabasesListMetricDefinitionsResponse = MetricDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricDefinitionListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DatabasesBeginCreateOrUpdateResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type DatabasesBeginUpdateResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the beginCreateImportOperation operation.
 */
export type DatabasesBeginCreateImportOperationResponse = ImportExportResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportExportResponse;
    };
};

/**
 * Contains response data for the beginImportMethod operation.
 */
export type DatabasesBeginImportMethodResponse = ImportExportResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportExportResponse;
    };
};

/**
 * Contains response data for the beginExportMethod operation.
 */
export type DatabasesBeginExportMethodResponse = ImportExportResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportExportResponse;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DatabaseThreatDetectionPoliciesGetResponse = DatabaseSecurityAlertPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseSecurityAlertPolicy;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseThreatDetectionPoliciesCreateOrUpdateResponse = DatabaseSecurityAlertPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseSecurityAlertPolicy;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DataMaskingPoliciesCreateOrUpdateResponse = DataMaskingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMaskingPolicy;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DataMaskingPoliciesGetResponse = DataMaskingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMaskingPolicy;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DataMaskingRulesCreateOrUpdateResponse = DataMaskingRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMaskingRule;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DataMaskingRulesListByDatabaseResponse = DataMaskingRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMaskingRuleListResult;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type TransparentDataEncryptionConfigurationsListByDatabaseResponse = TransparentDataEncryptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TransparentDataEncryptionListResult;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ExtensionsListByDatabaseResponse = ExtensionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExtensionListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DisasterRecoveryConfigurationsListResponse = DisasterRecoveryConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DisasterRecoveryConfigurationListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DisasterRecoveryConfigurationsCreateOrUpdateResponse = DisasterRecoveryConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DisasterRecoveryConfiguration;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DisasterRecoveryConfigurationsGetResponse = DisasterRecoveryConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DisasterRecoveryConfiguration;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DisasterRecoveryConfigurationsBeginCreateOrUpdateResponse = DisasterRecoveryConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DisasterRecoveryConfiguration;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ElasticPoolsCreateOrUpdateResponse = ElasticPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ElasticPool;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ElasticPoolsUpdateResponse = ElasticPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ElasticPool;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ElasticPoolsGetResponse = ElasticPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ElasticPool;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ElasticPoolsListByServerResponse = ElasticPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ElasticPoolListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type ElasticPoolsListMetricsResponse = MetricListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricListResult;
    };
};

/**
 * Contains response data for the listMetricDefinitions operation.
 */
export type ElasticPoolsListMetricDefinitionsResponse = MetricDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MetricDefinitionListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ElasticPoolsBeginCreateOrUpdateResponse = ElasticPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ElasticPool;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ElasticPoolsBeginUpdateResponse = ElasticPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ElasticPool;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FirewallRulesCreateOrUpdateResponse = FirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FirewallRule;
    };
};

/**
 * Contains response data for the get operation.
 */
export type FirewallRulesGetResponse = FirewallRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FirewallRule;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type FirewallRulesListByServerResponse = FirewallRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FirewallRuleListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type GeoBackupPoliciesCreateOrUpdateResponse = GeoBackupPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GeoBackupPolicy;
    };
};

/**
 * Contains response data for the get operation.
 */
export type GeoBackupPoliciesGetResponse = GeoBackupPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GeoBackupPolicy;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type GeoBackupPoliciesListByDatabaseResponse = GeoBackupPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GeoBackupPolicyListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type QueriesListByDatabaseResponse = TopQueriesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TopQueriesListResult;
    };
};

/**
 * Contains response data for the listByQuery operation.
 */
export type QueryStatisticsListByQueryResponse = QueryStatisticListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryStatisticListResult;
    };
};

/**
 * Contains response data for the listByQuery operation.
 */
export type QueryTextsListByQueryResponse = QueryTextListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryTextListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RecommendedElasticPoolsGetResponse = RecommendedElasticPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RecommendedElasticPool;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type RecommendedElasticPoolsListByServerResponse = RecommendedElasticPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RecommendedElasticPoolListResult;
    };
};

/**
 * Contains response data for the listMetrics operation.
 */
export type RecommendedElasticPoolsListMetricsResponse = RecommendedElasticPoolListMetricsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RecommendedElasticPoolListMetricsResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ReplicationLinksGetResponse = ReplicationLink & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReplicationLink;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ReplicationLinksListByDatabaseResponse = ReplicationLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReplicationLinkListResult;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type RestorePointsListByDatabaseResponse = RestorePointListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RestorePointListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerAzureADAdministratorsCreateOrUpdateResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerAzureADAdministrator;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type ServerAzureADAdministratorsDeleteMethodResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerAzureADAdministrator;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServerAzureADAdministratorsGetResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerAzureADAdministrator;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerAzureADAdministratorsListByServerResponse = ServerAdministratorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerAdministratorListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ServerAzureADAdministratorsBeginCreateOrUpdateResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerAzureADAdministrator;
    };
};

/**
 * Contains response data for the beginDeleteMethod operation.
 */
export type ServerAzureADAdministratorsBeginDeleteMethodResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerAzureADAdministrator;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServerCommunicationLinksGetResponse = ServerCommunicationLink & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerCommunicationLink;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerCommunicationLinksCreateOrUpdateResponse = ServerCommunicationLink & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerCommunicationLink;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerCommunicationLinksListByServerResponse = ServerCommunicationLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerCommunicationLinkListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ServerCommunicationLinksBeginCreateOrUpdateResponse = ServerCommunicationLink & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerCommunicationLink;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceObjectivesGetResponse = ServiceObjective & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceObjective;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServiceObjectivesListByServerResponse = ServiceObjectiveListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceObjectiveListResult;
    };
};

/**
 * Contains response data for the listByElasticPool operation.
 */
export type ElasticPoolActivitiesListByElasticPoolResponse = ElasticPoolActivityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ElasticPoolActivityListResult;
    };
};

/**
 * Contains response data for the listByElasticPool operation.
 */
export type ElasticPoolDatabaseActivitiesListByElasticPoolResponse = ElasticPoolDatabaseActivityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ElasticPoolDatabaseActivityListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceTierAdvisorsGetResponse = ServiceTierAdvisor & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceTierAdvisor;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type ServiceTierAdvisorsListByDatabaseResponse = ServiceTierAdvisorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceTierAdvisorListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TransparentDataEncryptionsCreateOrUpdateResponse = TransparentDataEncryption & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TransparentDataEncryption;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TransparentDataEncryptionsGetResponse = TransparentDataEncryption & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TransparentDataEncryption;
    };
};

/**
 * Contains response data for the listByConfiguration operation.
 */
export type TransparentDataEncryptionActivitiesListByConfigurationResponse = TransparentDataEncryptionActivityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TransparentDataEncryptionActivityListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServerTableAuditingPoliciesGetResponse = ServerTableAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerTableAuditingPolicy;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerTableAuditingPoliciesCreateOrUpdateResponse = ServerTableAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerTableAuditingPolicy;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerTableAuditingPoliciesListByServerResponse = ServerTableAuditingPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerTableAuditingPolicyListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DatabaseTableAuditingPoliciesGetResponse = DatabaseTableAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseTableAuditingPolicy;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseTableAuditingPoliciesCreateOrUpdateResponse = DatabaseTableAuditingPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseTableAuditingPolicy;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DatabaseTableAuditingPoliciesListByDatabaseResponse = DatabaseTableAuditingPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseTableAuditingPolicyListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DatabaseConnectionPoliciesGetResponse = DatabaseConnectionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseConnectionPolicy;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabaseConnectionPoliciesCreateOrUpdateResponse = DatabaseConnectionPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseConnectionPolicy;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerUsagesListByServerResponse = ServerUsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerUsageListResult;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DatabaseUsagesListByDatabaseResponse = DatabaseUsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseUsageListResult;
    };
};
