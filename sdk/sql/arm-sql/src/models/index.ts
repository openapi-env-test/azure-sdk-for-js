/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * An ARM Resource SKU.
 */
export interface Sku {
  /**
   * The name of the SKU, typically, a letter + Number code, e.g. P3.
   */
  name: string;
  /**
   * The tier or edition of the particular SKU, e.g. Basic, Premium.
   */
  tier?: string;
  /**
   * Size of the particular SKU
   */
  size?: string;
  /**
   * If the service has different generations of hardware, for the same SKU, then that can be
   * captured here.
   */
  family?: string;
  /**
   * Capacity of the particular SKU.
   */
  capacity?: number;
}

/**
 * ARM resource.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * ARM tracked top level resource.
 */
export interface TrackedResource extends Resource {
  /**
   * Resource location.
   */
  location: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A database resource.
 */
export interface Database extends TrackedResource {
  /**
   * The database SKU.
   *
   * The list of SKUs may vary by region and support offer. To determine the SKUs (including the
   * SKU name, tier/edition, family, and capacity) that are available to your subscription in an
   * Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:
   *
   * ```azurecli
   * az sql db list-editions -l <location> -o table
   * ````
   *
   * ```powershell
   * Get-AzSqlServerServiceObjective -Location <location>
   * ````
   */
  sku?: Sku;
  /**
   * Kind of database. This is metadata used for the Azure portal experience.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Resource that manages the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly managedBy?: string;
  /**
   * Specifies the mode of database creation.
   *
   * Default: regular database creation.
   *
   * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified
   * as the resource ID of the source database.
   *
   * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId
   * must be specified as the resource ID of the existing primary database.
   *
   * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing
   * database. sourceDatabaseId must be specified as the resource ID of the existing database, and
   * restorePointInTime must be specified.
   *
   * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be
   * specified as the recoverable database resource ID to restore.
   *
   * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must
   * be specified. If sourceDatabaseId is the database's original resource ID, then
   * sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the
   * restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored.
   * restorePointInTime may also be specified to restore from an earlier point in time.
   *
   * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention
   * vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point
   * resource ID.
   *
   * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse
   * edition. Possible values include: 'Default', 'Copy', 'Secondary', 'PointInTimeRestore',
   * 'Restore', 'Recovery', 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
   * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
   */
  createMode?: CreateMode;
  /**
   * The collation of the database.
   */
  collation?: string;
  /**
   * The max size of the database expressed in bytes.
   */
  maxSizeBytes?: number;
  /**
   * The name of the sample schema to apply when creating this database. Possible values include:
   * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
   */
  sampleName?: SampleName;
  /**
   * The resource identifier of the elastic pool containing this database.
   */
  elasticPoolId?: string;
  /**
   * The resource identifier of the source database associated with create operation of this
   * database.
   */
  sourceDatabaseId?: string;
  /**
   * The status of the database. Possible values include: 'Online', 'Restoring', 'RecoveryPending',
   * 'Recovering', 'Suspect', 'Offline', 'Standby', 'Shutdown', 'EmergencyMode', 'AutoClosed',
   * 'Copying', 'Creating', 'Inaccessible', 'OfflineSecondary', 'Pausing', 'Paused', 'Resuming',
   * 'Scaling', 'OfflineChangingDwPerformanceTiers', 'OnlineChangingDwPerformanceTiers', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: DatabaseStatus;
  /**
   * The ID of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseId?: string;
  /**
   * The creation date of the database (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * The current service level objective name of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentServiceObjectiveName?: string;
  /**
   * The requested service level objective name of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedServiceObjectiveName?: string;
  /**
   * The default secondary region for this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Failover Group resource identifier that this database belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly failoverGroupId?: string;
  /**
   * Specifies the point in time (ISO8601 format) of the source database that will be restored to
   * create the new database.
   */
  restorePointInTime?: Date;
  /**
   * Specifies the time that the database was deleted.
   */
  sourceDatabaseDeletionDate?: Date;
  /**
   * The resource identifier of the recovery point associated with create operation of this
   * database.
   */
  recoveryServicesRecoveryPointId?: string;
  /**
   * The resource identifier of the long term retention backup associated with create operation of
   * this database.
   */
  longTermRetentionBackupResourceId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this
   * database.
   */
  recoverableDatabaseId?: string;
  /**
   * The resource identifier of the restorable dropped database associated with create operation of
   * this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Collation of the metadata catalog. Possible values include: 'DATABASE_DEFAULT',
   * 'SQL_Latin1_General_CP1_CI_AS'
   */
  catalogCollation?: CatalogCollationType;
  /**
   * Whether or not this database is zone redundant, which means the replicas of this database will
   * be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
  /**
   * The license type to apply for this database. `LicenseIncluded` if you need a license, or
   * `BasePrice` if you have a license and are eligible for the Azure Hybrid Benefit. Possible
   * values include: 'LicenseIncluded', 'BasePrice'
   */
  licenseType?: DatabaseLicenseType;
  /**
   * The max log size for this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxLogSizeBytes?: number;
  /**
   * This records the earliest start date and time that restore is available for this database
   * (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly earliestRestoreDate?: Date;
  /**
   * The state of read-only routing. If enabled, connections that have application intent set to
   * readonly in their connection string may be routed to a readonly secondary replica in the same
   * region. Possible values include: 'Enabled', 'Disabled'
   */
  readScale?: DatabaseReadScale;
  /**
   * The number of readonly secondary replicas associated with the database.
   */
  readReplicaCount?: number;
  /**
   * The name and tier of the SKU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentSku?: Sku;
  /**
   * Time in minutes after which database is automatically paused. A value of -1 means that
   * automatic pause is disabled
   */
  autoPauseDelay?: number;
  /**
   * The storage account type used to store backups for this database. Possible values include:
   * 'GRS', 'LRS', 'ZRS'
   */
  storageAccountType?: StorageAccountType;
  /**
   * Minimal capacity that database will always have allocated, if not paused
   */
  minCapacity?: number;
  /**
   * The date when database was paused by user configuration or action(ISO8601 format). Null if the
   * database is ready.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly pausedDate?: Date;
  /**
   * The date when database was resumed by user action or database login (ISO8601 format). Null if
   * the database is paused.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resumedDate?: Date;
}

/**
 * A database resource.
 */
export interface DatabaseUpdate {
  /**
   * The name and tier of the SKU.
   */
  sku?: Sku;
  /**
   * Specifies the mode of database creation.
   *
   * Default: regular database creation.
   *
   * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified
   * as the resource ID of the source database.
   *
   * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId
   * must be specified as the resource ID of the existing primary database.
   *
   * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing
   * database. sourceDatabaseId must be specified as the resource ID of the existing database, and
   * restorePointInTime must be specified.
   *
   * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be
   * specified as the recoverable database resource ID to restore.
   *
   * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must
   * be specified. If sourceDatabaseId is the database's original resource ID, then
   * sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the
   * restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored.
   * restorePointInTime may also be specified to restore from an earlier point in time.
   *
   * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention
   * vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point
   * resource ID.
   *
   * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse
   * edition. Possible values include: 'Default', 'Copy', 'Secondary', 'PointInTimeRestore',
   * 'Restore', 'Recovery', 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
   * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
   */
  createMode?: CreateMode;
  /**
   * The collation of the database.
   */
  collation?: string;
  /**
   * The max size of the database expressed in bytes.
   */
  maxSizeBytes?: number;
  /**
   * The name of the sample schema to apply when creating this database. Possible values include:
   * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
   */
  sampleName?: SampleName;
  /**
   * The resource identifier of the elastic pool containing this database.
   */
  elasticPoolId?: string;
  /**
   * The resource identifier of the source database associated with create operation of this
   * database.
   */
  sourceDatabaseId?: string;
  /**
   * The status of the database. Possible values include: 'Online', 'Restoring', 'RecoveryPending',
   * 'Recovering', 'Suspect', 'Offline', 'Standby', 'Shutdown', 'EmergencyMode', 'AutoClosed',
   * 'Copying', 'Creating', 'Inaccessible', 'OfflineSecondary', 'Pausing', 'Paused', 'Resuming',
   * 'Scaling', 'OfflineChangingDwPerformanceTiers', 'OnlineChangingDwPerformanceTiers', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: DatabaseStatus;
  /**
   * The ID of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseId?: string;
  /**
   * The creation date of the database (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * The current service level objective name of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentServiceObjectiveName?: string;
  /**
   * The requested service level objective name of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedServiceObjectiveName?: string;
  /**
   * The default secondary region for this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Failover Group resource identifier that this database belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly failoverGroupId?: string;
  /**
   * Specifies the point in time (ISO8601 format) of the source database that will be restored to
   * create the new database.
   */
  restorePointInTime?: Date;
  /**
   * Specifies the time that the database was deleted.
   */
  sourceDatabaseDeletionDate?: Date;
  /**
   * The resource identifier of the recovery point associated with create operation of this
   * database.
   */
  recoveryServicesRecoveryPointId?: string;
  /**
   * The resource identifier of the long term retention backup associated with create operation of
   * this database.
   */
  longTermRetentionBackupResourceId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this
   * database.
   */
  recoverableDatabaseId?: string;
  /**
   * The resource identifier of the restorable dropped database associated with create operation of
   * this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Collation of the metadata catalog. Possible values include: 'DATABASE_DEFAULT',
   * 'SQL_Latin1_General_CP1_CI_AS'
   */
  catalogCollation?: CatalogCollationType;
  /**
   * Whether or not this database is zone redundant, which means the replicas of this database will
   * be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
  /**
   * The license type to apply for this database. `LicenseIncluded` if you need a license, or
   * `BasePrice` if you have a license and are eligible for the Azure Hybrid Benefit. Possible
   * values include: 'LicenseIncluded', 'BasePrice'
   */
  licenseType?: DatabaseLicenseType;
  /**
   * The max log size for this database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxLogSizeBytes?: number;
  /**
   * This records the earliest start date and time that restore is available for this database
   * (ISO8601 format).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly earliestRestoreDate?: Date;
  /**
   * The state of read-only routing. If enabled, connections that have application intent set to
   * readonly in their connection string may be routed to a readonly secondary replica in the same
   * region. Possible values include: 'Enabled', 'Disabled'
   */
  readScale?: DatabaseReadScale;
  /**
   * The number of readonly secondary replicas associated with the database.
   */
  readReplicaCount?: number;
  /**
   * The name and tier of the SKU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentSku?: Sku;
  /**
   * Time in minutes after which database is automatically paused. A value of -1 means that
   * automatic pause is disabled
   */
  autoPauseDelay?: number;
  /**
   * The storage account type used to store backups for this database. Possible values include:
   * 'GRS', 'LRS', 'ZRS'
   */
  storageAccountType?: StorageAccountType;
  /**
   * Minimal capacity that database will always have allocated, if not paused
   */
  minCapacity?: number;
  /**
   * The date when database was paused by user configuration or action(ISO8601 format). Null if the
   * database is ready.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly pausedDate?: Date;
  /**
   * The date when database was resumed by user action or database login (ISO8601 format). Null if
   * the database is paused.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resumedDate?: Date;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Contains the information necessary to perform a resource move (rename).
 */
export interface ResourceMoveDefinition {
  /**
   * The target ID for the resource
   */
  id: string;
}

/**
 * ARM proxy resource.
 */
export interface ProxyResource extends Resource {
}

/**
 * A managed database restore details.
 */
export interface ManagedDatabaseRestoreDetailsResult extends ProxyResource {
  /**
   * Restore status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: string;
  /**
   * Current restoring file name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentRestoringFileName?: string;
  /**
   * Last restored file name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastRestoredFileName?: string;
  /**
   * Last restored file time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastRestoredFileTime?: Date;
  /**
   * Percent completed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly percentCompleted?: number;
  /**
   * List of unrestorable files.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unrestorableFiles?: string[];
  /**
   * Number of files detected.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfFilesDetected?: number;
  /**
   * Last uploaded file name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastUploadedFileName?: string;
  /**
   * Last uploaded file time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastUploadedFileTime?: Date;
  /**
   * The reason why restore is in Blocked state.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly blockReason?: string;
}

/**
 * A managed database resource.
 */
export interface ManagedDatabase extends TrackedResource {
  /**
   * Collation of the managed database.
   */
  collation?: string;
  /**
   * Status of the database. Possible values include: 'Online', 'Offline', 'Shutdown', 'Creating',
   * 'Inaccessible', 'Restoring', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: ManagedDatabaseStatus;
  /**
   * Creation date of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * Earliest restore point in time for point in time restore.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly earliestRestorePoint?: Date;
  /**
   * Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point
   * in time (ISO8601 format) of the source database that will be restored to create the new
   * database.
   */
  restorePointInTime?: Date;
  /**
   * Geo paired region.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Collation of the metadata catalog. Possible values include: 'DATABASE_DEFAULT',
   * 'SQL_Latin1_General_CP1_CI_AS'
   */
  catalogCollation?: CatalogCollationType;
  /**
   * Managed database create mode. PointInTimeRestore: Create a database by restoring a point in
   * time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and
   * PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from
   * external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be
   * specified. Recovery: Creates a database by restoring a geo-replicated backup.
   * RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
   * RestoreLongTermRetentionBackup: Create a database by restoring from a long term retention
   * backup (longTermRetentionBackupResourceId required). Possible values include: 'Default',
   * 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery', 'RestoreLongTermRetentionBackup'
   */
  createMode?: ManagedDatabaseCreateMode;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri
   * of the storage container where backups for this restore are stored.
   */
  storageContainerUri?: string;
  /**
   * The resource identifier of the source database associated with create operation of this
   * database.
   */
  sourceDatabaseId?: string;
  /**
   * The restorable dropped database resource id to restore when creating this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the
   * storage container sas token.
   */
  storageContainerSasToken?: string;
  /**
   * Instance Failover Group resource identifier that this managed database belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly failoverGroupId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this
   * database.
   */
  recoverableDatabaseId?: string;
  /**
   * The name of the Long Term Retention backup to be used for restore of this managed database.
   */
  longTermRetentionBackupResourceId?: string;
}

/**
 * An managed database update.
 */
export interface ManagedDatabaseUpdate {
  /**
   * Collation of the managed database.
   */
  collation?: string;
  /**
   * Status of the database. Possible values include: 'Online', 'Offline', 'Shutdown', 'Creating',
   * 'Inaccessible', 'Restoring', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: ManagedDatabaseStatus;
  /**
   * Creation date of the database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * Earliest restore point in time for point in time restore.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly earliestRestorePoint?: Date;
  /**
   * Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point
   * in time (ISO8601 format) of the source database that will be restored to create the new
   * database.
   */
  restorePointInTime?: Date;
  /**
   * Geo paired region.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Collation of the metadata catalog. Possible values include: 'DATABASE_DEFAULT',
   * 'SQL_Latin1_General_CP1_CI_AS'
   */
  catalogCollation?: CatalogCollationType;
  /**
   * Managed database create mode. PointInTimeRestore: Create a database by restoring a point in
   * time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and
   * PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from
   * external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be
   * specified. Recovery: Creates a database by restoring a geo-replicated backup.
   * RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
   * RestoreLongTermRetentionBackup: Create a database by restoring from a long term retention
   * backup (longTermRetentionBackupResourceId required). Possible values include: 'Default',
   * 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery', 'RestoreLongTermRetentionBackup'
   */
  createMode?: ManagedDatabaseCreateMode;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri
   * of the storage container where backups for this restore are stored.
   */
  storageContainerUri?: string;
  /**
   * The resource identifier of the source database associated with create operation of this
   * database.
   */
  sourceDatabaseId?: string;
  /**
   * The restorable dropped database resource id to restore when creating this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the
   * storage container sas token.
   */
  storageContainerSasToken?: string;
  /**
   * Instance Failover Group resource identifier that this managed database belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly failoverGroupId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this
   * database.
   */
  recoverableDatabaseId?: string;
  /**
   * The name of the Long Term Retention backup to be used for restore of this managed database.
   */
  longTermRetentionBackupResourceId?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Contains the information necessary to perform a complete database restore operation.
 */
export interface CompleteDatabaseRestoreDefinition {
  /**
   * The last backup name to apply
   */
  lastBackupName: string;
}

/**
 * A server operation.
 */
export interface ServerOperation extends ProxyResource {
  /**
   * The name of operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * The friendly name of operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operationFriendlyName?: string;
  /**
   * The percentage of the operation completed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly percentComplete?: number;
  /**
   * The name of the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverName?: string;
  /**
   * The operation start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * The operation state. Possible values include: 'Pending', 'InProgress', 'Succeeded', 'Failed',
   * 'CancelInProgress', 'Cancelled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: ManagementOperationState;
  /**
   * The operation error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorCode?: number;
  /**
   * The operation error description.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorDescription?: string;
  /**
   * The operation error severity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorSeverity?: number;
  /**
   * Whether or not the error is a user error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isUserError?: boolean;
  /**
   * The estimated completion time of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly estimatedCompletionTime?: Date;
  /**
   * The operation description.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * Whether the operation can be cancelled.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isCancellable?: boolean;
}

/**
 * Azure Active Directory identity configuration for a resource.
 */
export interface ResourceIdentity {
  /**
   * The Azure Active Directory principal id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an
   * Azure Active Directory principal for the resource. Possible values include: 'None',
   * 'SystemAssigned', 'UserAssigned'
   */
  type?: IdentityType;
  /**
   * The Azure Active Directory tenant id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
}

/**
 * An interface representing PrivateEndpointProperty.
 */
export interface PrivateEndpointProperty extends BaseResource {
  /**
   * Resource id of the private endpoint.
   */
  id?: string;
}

/**
 * An interface representing PrivateLinkServiceConnectionStateProperty.
 */
export interface PrivateLinkServiceConnectionStateProperty {
  /**
   * The private link service connection status. Possible values include: 'Approved', 'Pending',
   * 'Rejected', 'Disconnected'
   */
  status: PrivateLinkServiceConnectionStateStatus;
  /**
   * The private link service connection description.
   */
  description: string;
  /**
   * The actions required for private link service connection. Possible values include: 'None'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly actionsRequired?: PrivateLinkServiceConnectionStateActionsRequire;
}

/**
 * Properties of a private endpoint connection.
 */
export interface PrivateEndpointConnectionProperties {
  /**
   * Private endpoint which the connection belongs to.
   */
  privateEndpoint?: PrivateEndpointProperty;
  /**
   * Connection state of the private endpoint connection.
   */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionStateProperty;
  /**
   * State of the private endpoint connection. Possible values include: 'Approving', 'Ready',
   * 'Dropping', 'Failed', 'Rejecting'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: PrivateEndpointProvisioningState;
}

/**
 * A private endpoint connection under a server
 */
export interface ServerPrivateEndpointConnection {
  /**
   * Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Private endpoint connection properties
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: PrivateEndpointConnectionProperties;
}

/**
 * An Azure SQL Database server.
 */
export interface Server extends TrackedResource {
  /**
   * The Azure Active Directory identity of the server.
   */
  identity?: ResourceIdentity;
  /**
   * Kind of sql server. This is metadata used for the Azure portal experience.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Administrator username for the server. Once created it cannot be changed.
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for server creation).
   */
  administratorLoginPassword?: string;
  /**
   * The version of the server.
   */
  version?: string;
  /**
   * The state of the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: string;
  /**
   * The fully qualified domain name of the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * List of private endpoint connections on a server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly privateEndpointConnections?: ServerPrivateEndpointConnection[];
  /**
   * Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
   */
  minimalTlsVersion?: string;
  /**
   * Whether or not public endpoint access is allowed for this server.  Value is optional but if
   * passed in, must be 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'
   */
  publicNetworkAccess?: ServerPublicNetworkAccess;
}

/**
 * An update request for an Azure SQL Database server.
 */
export interface ServerUpdate {
  /**
   * Administrator username for the server. Once created it cannot be changed.
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for server creation).
   */
  administratorLoginPassword?: string;
  /**
   * The version of the server.
   */
  version?: string;
  /**
   * The state of the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: string;
  /**
   * The fully qualified domain name of the server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * List of private endpoint connections on a server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly privateEndpointConnections?: ServerPrivateEndpointConnection[];
  /**
   * Minimal TLS version. Allowed values: '1.0', '1.1', '1.2'
   */
  minimalTlsVersion?: string;
  /**
   * Whether or not public endpoint access is allowed for this server.  Value is optional but if
   * passed in, must be 'Enabled' or 'Disabled'. Possible values include: 'Enabled', 'Disabled'
   */
  publicNetworkAccess?: ServerPublicNetworkAccess;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A request to check whether the specified name for a resource is available.
 */
export interface CheckNameAvailabilityRequest {
  name: string;
}

/**
 * The result of a name availability check.
 */
export interface CheckNameAvailabilityResponse {
  /**
   * The name whose availability was checked.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * True if the name is available, otherwise false.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly available?: boolean;
  /**
   * The reason code explaining why the name is unavailable. Will be undefined if the name is
   * available. Possible values include: 'Invalid', 'AlreadyExists'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reason?: CheckNameAvailabilityReason;
  /**
   * A message explaining why the name is unavailable. Will be undefined if the name is available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * Workload group operations for a data warehouse
 */
export interface WorkloadGroup extends ProxyResource {
  /**
   * The workload group minimum percentage resource.
   */
  minResourcePercent: number;
  /**
   * The workload group cap percentage resource.
   */
  maxResourcePercent: number;
  /**
   * The workload group request minimum grant percentage.
   */
  minResourcePercentPerRequest: number;
  /**
   * The workload group request maximum grant percentage.
   */
  maxResourcePercentPerRequest?: number;
  /**
   * The workload group importance level.
   */
  importance?: string;
  /**
   * The workload group query execution timeout.
   */
  queryExecutionTimeout?: number;
}

/**
 * Workload classifier operations for a data warehouse
 */
export interface WorkloadClassifier extends ProxyResource {
  /**
   * The workload classifier member name.
   */
  memberName: string;
  /**
   * The workload classifier label.
   */
  label?: string;
  /**
   * The workload classifier context.
   */
  context?: string;
  /**
   * The workload classifier start time for classification.
   */
  startTime?: string;
  /**
   * The workload classifier end time for classification.
   */
  endTime?: string;
  /**
   * The workload classifier importance.
   */
  importance?: string;
}

/**
 * An interface representing UpsertManagedServerOperationParameters.
 */
export interface UpsertManagedServerOperationParameters {
  family?: string;
  tier?: string;
  vCores?: number;
  storageSizeInGB?: number;
}

/**
 * The parameters of a managed instance operation.
 */
export interface ManagedInstanceOperationParametersPair {
  /**
   * The current parameters.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentParameters?: UpsertManagedServerOperationParameters;
  /**
   * The requested parameters.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly requestedParameters?: UpsertManagedServerOperationParameters;
}

/**
 * An interface representing UpsertManagedServerOperationStep.
 */
export interface UpsertManagedServerOperationStep {
  order?: number;
  name?: string;
  /**
   * Possible values include: 'NotStarted', 'InProgress', 'SlowedDown', 'Completed', 'Failed',
   * 'Canceled'
   */
  status?: Status;
}

/**
 * The steps of a managed instance operation.
 */
export interface ManagedInstanceOperationSteps {
  /**
   * The total number of operation steps.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalSteps?: string;
  /**
   * The number of current operation steps.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentStep?: number;
  /**
   * The operation steps list.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly stepsList?: UpsertManagedServerOperationStep[];
}

/**
 * A managed instance operation.
 */
export interface ManagedInstanceOperation extends ProxyResource {
  /**
   * The name of the managed instance the operation is being performed on.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly managedInstanceName?: string;
  /**
   * The name of operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * The friendly name of operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operationFriendlyName?: string;
  /**
   * The percentage of the operation completed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly percentComplete?: number;
  /**
   * The operation start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * The operation state. Possible values include: 'Pending', 'InProgress', 'Succeeded', 'Failed',
   * 'CancelInProgress', 'Cancelled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: ManagementOperationState;
  /**
   * The operation error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorCode?: number;
  /**
   * The operation error description.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorDescription?: string;
  /**
   * The operation error severity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorSeverity?: number;
  /**
   * Whether or not the error is a user error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isUserError?: boolean;
  /**
   * The estimated completion time of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly estimatedCompletionTime?: Date;
  /**
   * The operation description.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * Whether the operation can be cancelled.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isCancellable?: boolean;
  /**
   * The operation parameters.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operationParameters?: ManagedInstanceOperationParametersPair;
  /**
   * The operation steps.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operationSteps?: ManagedInstanceOperationSteps;
}

/**
 * Azure Active Directory administrator.
 */
export interface ServerAzureADAdministrator extends ProxyResource {
  /**
   * Login name of the server administrator.
   */
  login: string;
  /**
   * SID (object ID) of the server administrator.
   */
  sid: string;
  /**
   * Tenant ID of the administrator.
   */
  tenantId?: string;
  /**
   * Azure Active Directory only Authentication enabled.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly azureADOnlyAuthentication?: boolean;
}

/**
 * Properties of the sync database id.
 */
export interface SyncDatabaseIdProperties {
  /**
   * ARM resource id of sync database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * Properties of the column in the table of database full schema.
 */
export interface SyncFullSchemaTableColumn {
  /**
   * Data size of the column.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataSize?: string;
  /**
   * Data type of the column.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataType?: string;
  /**
   * Error id of the column.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorId?: string;
  /**
   * If there is error in the table.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hasError?: boolean;
  /**
   * If it is the primary key of the table.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isPrimaryKey?: boolean;
  /**
   * Name of the column.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Quoted name of the column.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly quotedName?: string;
}

/**
 * Properties of the table in the database full schema.
 */
export interface SyncFullSchemaTable {
  /**
   * List of columns in the table of database full schema.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly columns?: SyncFullSchemaTableColumn[];
  /**
   * Error id of the table.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorId?: string;
  /**
   * If there is error in the table.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hasError?: boolean;
  /**
   * Name of the table.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Quoted name of the table.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly quotedName?: string;
}

/**
 * Properties of the database full schema.
 */
export interface SyncFullSchemaProperties {
  /**
   * List of tables in the database full schema.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tables?: SyncFullSchemaTable[];
  /**
   * Last update time of the database schema.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastUpdateTime?: Date;
}

/**
 * Properties of an Azure SQL Database sync group log.
 */
export interface SyncGroupLogProperties {
  /**
   * Timestamp of the sync group log.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestamp?: Date;
  /**
   * Type of the sync group log. Possible values include: 'All', 'Error', 'Warning', 'Success'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: SyncGroupLogType;
  /**
   * Source of the sync group log.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly source?: string;
  /**
   * Details of the sync group log.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: string;
  /**
   * TracingId of the sync group log.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tracingId?: string;
  /**
   * OperationStatus of the sync group log.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operationStatus?: string;
}

/**
 * Properties of column in sync group table.
 */
export interface SyncGroupSchemaTableColumn {
  /**
   * Quoted name of sync group table column.
   */
  quotedName?: string;
  /**
   * Data size of the column.
   */
  dataSize?: string;
  /**
   * Data type of the column.
   */
  dataType?: string;
}

/**
 * Properties of table in sync group schema.
 */
export interface SyncGroupSchemaTable {
  /**
   * List of columns in sync group schema.
   */
  columns?: SyncGroupSchemaTableColumn[];
  /**
   * Quoted name of sync group schema table.
   */
  quotedName?: string;
}

/**
 * Properties of sync group schema.
 */
export interface SyncGroupSchema {
  /**
   * List of tables in sync group schema.
   */
  tables?: SyncGroupSchemaTable[];
  /**
   * Name of master sync member where the schema is from.
   */
  masterSyncMemberName?: string;
}

/**
 * An Azure SQL Database sync group.
 */
export interface SyncGroup extends ProxyResource {
  /**
   * Sync interval of the sync group.
   */
  interval?: number;
  /**
   * Last sync time of the sync group.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastSyncTime?: Date;
  /**
   * Conflict resolution policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
   */
  conflictResolutionPolicy?: SyncConflictResolutionPolicy;
  /**
   * ARM resource id of the sync database in the sync group.
   */
  syncDatabaseId?: string;
  /**
   * User name for the sync group hub database credential.
   */
  hubDatabaseUserName?: string;
  /**
   * Password for the sync group hub database credential.
   */
  hubDatabasePassword?: string;
  /**
   * Sync state of the sync group. Possible values include: 'NotReady', 'Error', 'Warning',
   * 'Progressing', 'Good'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly syncState?: SyncGroupState;
  /**
   * Sync schema of the sync group.
   */
  schema?: SyncGroupSchema;
  /**
   * If use private link connection is enabled.
   */
  usePrivateLinkConnection?: boolean;
  /**
   * Private endpoint name of the sync group if use private link connection is enabled.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly privateEndpointName?: string;
}

/**
 * An Azure SQL Database sync member.
 */
export interface SyncMember extends ProxyResource {
  /**
   * Database type of the sync member. Possible values include: 'AzureSqlDatabase',
   * 'SqlServerDatabase'
   */
  databaseType?: SyncMemberDbType;
  /**
   * ARM resource id of the sync agent in the sync member.
   */
  syncAgentId?: string;
  /**
   * SQL Server database id of the sync member.
   */
  sqlServerDatabaseId?: string;
  /**
   * ARM resource id of the sync member logical database, for sync members in Azure.
   */
  syncMemberAzureDatabaseResourceId?: string;
  /**
   * Whether to use private link connection.
   */
  usePrivateLinkConnection?: boolean;
  /**
   * Private endpoint name of the sync member if use private link connection is enabled, for sync
   * members in Azure.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly privateEndpointName?: string;
  /**
   * Server name of the member database in the sync member
   */
  serverName?: string;
  /**
   * Database name of the member database in the sync member.
   */
  databaseName?: string;
  /**
   * User name of the member database in the sync member.
   */
  userName?: string;
  /**
   * Password of the member database in the sync member.
   */
  password?: string;
  /**
   * Sync direction of the sync member. Possible values include: 'Bidirectional',
   * 'OneWayMemberToHub', 'OneWayHubToMember'
   */
  syncDirection?: SyncDirection;
  /**
   * Sync state of the sync member. Possible values include: 'SyncInProgress', 'SyncSucceeded',
   * 'SyncFailed', 'DisabledTombstoneCleanup', 'DisabledBackupRestore',
   * 'SyncSucceededWithWarnings', 'SyncCancelling', 'SyncCancelled', 'UnProvisioned',
   * 'Provisioning', 'Provisioned', 'ProvisionFailed', 'DeProvisioning', 'DeProvisioned',
   * 'DeProvisionFailed', 'Reprovisioning', 'ReprovisionFailed', 'UnReprovisioned'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly syncState?: SyncMemberState;
}

/**
 * Optional Parameters.
 */
export interface DatabasesFailoverOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The type of replica to be failed over. Possible values include: 'Primary', 'ReadableSecondary'
   */
  replicaType?: ReplicaType;
}

/**
 * Optional Parameters.
 */
export interface DatabasesBeginFailoverOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The type of replica to be failed over. Possible values include: 'Primary', 'ReadableSecondary'
   */
  replicaType?: ReplicaType;
}

/**
 * Optional Parameters.
 */
export interface SyncGroupsListLogsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The continuation token for this operation.
   */
  continuationToken?: string;
}

/**
 * Optional Parameters.
 */
export interface SyncGroupsListLogsNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The continuation token for this operation.
   */
  continuationToken?: string;
}

/**
 * Optional Parameters.
 */
export interface ManagedInstancesFailoverOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The type of replica to be failed over. Possible values include: 'Primary', 'ReadableSecondary'
   */
  replicaType?: ReplicaType;
}

/**
 * Optional Parameters.
 */
export interface ManagedInstancesBeginFailoverOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The type of replica to be failed over. Possible values include: 'Primary', 'ReadableSecondary'
   */
  replicaType?: ReplicaType;
}

/**
 * An interface representing SqlManagementClientOptions.
 */
export interface SqlManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * A list of databases.
 * @extends Array<Database>
 */
export interface DatabaseListResult extends Array<Database> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of managed databases.
 * @extends Array<ManagedDatabase>
 */
export interface ManagedDatabaseListResult extends Array<ManagedDatabase> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * The response to a list server operations request
 * @extends Array<ServerOperation>
 */
export interface ServerOperationListResult extends Array<ServerOperation> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of servers.
 * @extends Array<Server>
 */
export interface ServerListResult extends Array<Server> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of workload groups.
 * @extends Array<WorkloadGroup>
 */
export interface WorkloadGroupListResult extends Array<WorkloadGroup> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of workload classifiers for a workload group.
 * @extends Array<WorkloadClassifier>
 */
export interface WorkloadClassifierListResult extends Array<WorkloadClassifier> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * The response to a list managed instance operations request
 * @extends Array<ManagedInstanceOperation>
 */
export interface ManagedInstanceOperationListResult extends Array<ManagedInstanceOperation> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of active directory administrators.
 * @extends Array<ServerAzureADAdministrator>
 */
export interface AdministratorListResult extends Array<ServerAzureADAdministrator> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of sync database ID properties.
 * @extends Array<SyncDatabaseIdProperties>
 */
export interface SyncDatabaseIdListResult extends Array<SyncDatabaseIdProperties> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of sync schema properties.
 * @extends Array<SyncFullSchemaProperties>
 */
export interface SyncFullSchemaPropertiesListResult extends Array<SyncFullSchemaProperties> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of sync group log properties.
 * @extends Array<SyncGroupLogProperties>
 */
export interface SyncGroupLogListResult extends Array<SyncGroupLogProperties> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of sync groups.
 * @extends Array<SyncGroup>
 */
export interface SyncGroupListResult extends Array<SyncGroup> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of Azure SQL Database sync members.
 * @extends Array<SyncMember>
 */
export interface SyncMemberListResult extends Array<SyncMember> {
  /**
   * Link to retrieve next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for CreateMode.
 * Possible values include: 'Default', 'Copy', 'Secondary', 'PointInTimeRestore', 'Restore',
 * 'Recovery', 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
 * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
 * @readonly
 * @enum {string}
 */
export type CreateMode = 'Default' | 'Copy' | 'Secondary' | 'PointInTimeRestore' | 'Restore' | 'Recovery' | 'RestoreExternalBackup' | 'RestoreExternalBackupSecondary' | 'RestoreLongTermRetentionBackup' | 'OnlineSecondary';

/**
 * Defines values for SampleName.
 * Possible values include: 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
 * @readonly
 * @enum {string}
 */
export type SampleName = 'AdventureWorksLT' | 'WideWorldImportersStd' | 'WideWorldImportersFull';

/**
 * Defines values for DatabaseStatus.
 * Possible values include: 'Online', 'Restoring', 'RecoveryPending', 'Recovering', 'Suspect',
 * 'Offline', 'Standby', 'Shutdown', 'EmergencyMode', 'AutoClosed', 'Copying', 'Creating',
 * 'Inaccessible', 'OfflineSecondary', 'Pausing', 'Paused', 'Resuming', 'Scaling',
 * 'OfflineChangingDwPerformanceTiers', 'OnlineChangingDwPerformanceTiers', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type DatabaseStatus = 'Online' | 'Restoring' | 'RecoveryPending' | 'Recovering' | 'Suspect' | 'Offline' | 'Standby' | 'Shutdown' | 'EmergencyMode' | 'AutoClosed' | 'Copying' | 'Creating' | 'Inaccessible' | 'OfflineSecondary' | 'Pausing' | 'Paused' | 'Resuming' | 'Scaling' | 'OfflineChangingDwPerformanceTiers' | 'OnlineChangingDwPerformanceTiers' | 'Disabled';

/**
 * Defines values for CatalogCollationType.
 * Possible values include: 'DATABASE_DEFAULT', 'SQL_Latin1_General_CP1_CI_AS'
 * @readonly
 * @enum {string}
 */
export type CatalogCollationType = 'DATABASE_DEFAULT' | 'SQL_Latin1_General_CP1_CI_AS';

/**
 * Defines values for DatabaseLicenseType.
 * Possible values include: 'LicenseIncluded', 'BasePrice'
 * @readonly
 * @enum {string}
 */
export type DatabaseLicenseType = 'LicenseIncluded' | 'BasePrice';

/**
 * Defines values for DatabaseReadScale.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type DatabaseReadScale = 'Enabled' | 'Disabled';

/**
 * Defines values for StorageAccountType.
 * Possible values include: 'GRS', 'LRS', 'ZRS'
 * @readonly
 * @enum {string}
 */
export type StorageAccountType = 'GRS' | 'LRS' | 'ZRS';

/**
 * Defines values for ManagedDatabaseStatus.
 * Possible values include: 'Online', 'Offline', 'Shutdown', 'Creating', 'Inaccessible',
 * 'Restoring', 'Updating'
 * @readonly
 * @enum {string}
 */
export type ManagedDatabaseStatus = 'Online' | 'Offline' | 'Shutdown' | 'Creating' | 'Inaccessible' | 'Restoring' | 'Updating';

/**
 * Defines values for ManagedDatabaseCreateMode.
 * Possible values include: 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery',
 * 'RestoreLongTermRetentionBackup'
 * @readonly
 * @enum {string}
 */
export type ManagedDatabaseCreateMode = 'Default' | 'RestoreExternalBackup' | 'PointInTimeRestore' | 'Recovery' | 'RestoreLongTermRetentionBackup';

/**
 * Defines values for ManagementOperationState.
 * Possible values include: 'Pending', 'InProgress', 'Succeeded', 'Failed', 'CancelInProgress',
 * 'Cancelled'
 * @readonly
 * @enum {string}
 */
export type ManagementOperationState = 'Pending' | 'InProgress' | 'Succeeded' | 'Failed' | 'CancelInProgress' | 'Cancelled';

/**
 * Defines values for IdentityType.
 * Possible values include: 'None', 'SystemAssigned', 'UserAssigned'
 * @readonly
 * @enum {string}
 */
export type IdentityType = 'None' | 'SystemAssigned' | 'UserAssigned';

/**
 * Defines values for PrivateLinkServiceConnectionStateStatus.
 * Possible values include: 'Approved', 'Pending', 'Rejected', 'Disconnected'
 * @readonly
 * @enum {string}
 */
export type PrivateLinkServiceConnectionStateStatus = 'Approved' | 'Pending' | 'Rejected' | 'Disconnected';

/**
 * Defines values for PrivateLinkServiceConnectionStateActionsRequire.
 * Possible values include: 'None'
 * @readonly
 * @enum {string}
 */
export type PrivateLinkServiceConnectionStateActionsRequire = 'None';

/**
 * Defines values for PrivateEndpointProvisioningState.
 * Possible values include: 'Approving', 'Ready', 'Dropping', 'Failed', 'Rejecting'
 * @readonly
 * @enum {string}
 */
export type PrivateEndpointProvisioningState = 'Approving' | 'Ready' | 'Dropping' | 'Failed' | 'Rejecting';

/**
 * Defines values for ServerPublicNetworkAccess.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type ServerPublicNetworkAccess = 'Enabled' | 'Disabled';

/**
 * Defines values for CheckNameAvailabilityReason.
 * Possible values include: 'Invalid', 'AlreadyExists'
 * @readonly
 * @enum {string}
 */
export type CheckNameAvailabilityReason = 'Invalid' | 'AlreadyExists';

/**
 * Defines values for SyncGroupLogType.
 * Possible values include: 'All', 'Error', 'Warning', 'Success'
 * @readonly
 * @enum {string}
 */
export type SyncGroupLogType = 'All' | 'Error' | 'Warning' | 'Success';

/**
 * Defines values for SyncConflictResolutionPolicy.
 * Possible values include: 'HubWin', 'MemberWin'
 * @readonly
 * @enum {string}
 */
export type SyncConflictResolutionPolicy = 'HubWin' | 'MemberWin';

/**
 * Defines values for SyncGroupState.
 * Possible values include: 'NotReady', 'Error', 'Warning', 'Progressing', 'Good'
 * @readonly
 * @enum {string}
 */
export type SyncGroupState = 'NotReady' | 'Error' | 'Warning' | 'Progressing' | 'Good';

/**
 * Defines values for SyncMemberDbType.
 * Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'
 * @readonly
 * @enum {string}
 */
export type SyncMemberDbType = 'AzureSqlDatabase' | 'SqlServerDatabase';

/**
 * Defines values for SyncDirection.
 * Possible values include: 'Bidirectional', 'OneWayMemberToHub', 'OneWayHubToMember'
 * @readonly
 * @enum {string}
 */
export type SyncDirection = 'Bidirectional' | 'OneWayMemberToHub' | 'OneWayHubToMember';

/**
 * Defines values for SyncMemberState.
 * Possible values include: 'SyncInProgress', 'SyncSucceeded', 'SyncFailed',
 * 'DisabledTombstoneCleanup', 'DisabledBackupRestore', 'SyncSucceededWithWarnings',
 * 'SyncCancelling', 'SyncCancelled', 'UnProvisioned', 'Provisioning', 'Provisioned',
 * 'ProvisionFailed', 'DeProvisioning', 'DeProvisioned', 'DeProvisionFailed', 'Reprovisioning',
 * 'ReprovisionFailed', 'UnReprovisioned'
 * @readonly
 * @enum {string}
 */
export type SyncMemberState = 'SyncInProgress' | 'SyncSucceeded' | 'SyncFailed' | 'DisabledTombstoneCleanup' | 'DisabledBackupRestore' | 'SyncSucceededWithWarnings' | 'SyncCancelling' | 'SyncCancelled' | 'UnProvisioned' | 'Provisioning' | 'Provisioned' | 'ProvisionFailed' | 'DeProvisioning' | 'DeProvisioned' | 'DeProvisionFailed' | 'Reprovisioning' | 'ReprovisionFailed' | 'UnReprovisioned';

/**
 * Defines values for ReplicaType.
 * Possible values include: 'Primary', 'ReadableSecondary'
 * @readonly
 * @enum {string}
 */
export type ReplicaType = 'Primary' | 'ReadableSecondary';

/**
 * Defines values for Status.
 * Possible values include: 'NotStarted', 'InProgress', 'SlowedDown', 'Completed', 'Failed',
 * 'Canceled'
 * @readonly
 * @enum {string}
 */
export type Status = 'NotStarted' | 'InProgress' | 'SlowedDown' | 'Completed' | 'Failed' | 'Canceled';

/**
 * Defines values for Type.
 * Possible values include: 'All', 'Error', 'Warning', 'Success'
 * @readonly
 * @enum {string}
 */
export type Type = 'All' | 'Error' | 'Warning' | 'Success';

/**
 * Contains response data for the listByServer operation.
 */
export type DatabasesListByServerResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DatabasesGetResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabasesCreateOrUpdateResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the update operation.
 */
export type DatabasesUpdateResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the listByElasticPool operation.
 */
export type DatabasesListByElasticPoolResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseListResult;
    };
};

/**
 * Contains response data for the pause operation.
 */
export type DatabasesPauseResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the resume operation.
 */
export type DatabasesResumeResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the listInaccessibleByServer operation.
 */
export type DatabasesListInaccessibleByServerResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DatabasesBeginCreateOrUpdateResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type DatabasesBeginUpdateResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the beginPause operation.
 */
export type DatabasesBeginPauseResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the beginResume operation.
 */
export type DatabasesBeginResumeResponse = Database & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Database;
    };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type DatabasesListByServerNextResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseListResult;
    };
};

/**
 * Contains response data for the listByElasticPoolNext operation.
 */
export type DatabasesListByElasticPoolNextResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseListResult;
    };
};

/**
 * Contains response data for the listInaccessibleByServerNext operation.
 */
export type DatabasesListInaccessibleByServerNextResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedDatabaseRestoreDetailsGetResponse = ManagedDatabaseRestoreDetailsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedDatabaseRestoreDetailsResult;
    };
};

/**
 * Contains response data for the listByInstance operation.
 */
export type ManagedDatabasesListByInstanceResponse = ManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedDatabaseListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedDatabasesGetResponse = ManagedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedDatabase;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedDatabasesCreateOrUpdateResponse = ManagedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedDatabase;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ManagedDatabasesUpdateResponse = ManagedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedDatabase;
    };
};

/**
 * Contains response data for the listInaccessibleByInstance operation.
 */
export type ManagedDatabasesListInaccessibleByInstanceResponse = ManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedDatabaseListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ManagedDatabasesBeginCreateOrUpdateResponse = ManagedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedDatabase;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ManagedDatabasesBeginUpdateResponse = ManagedDatabase & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedDatabase;
    };
};

/**
 * Contains response data for the listByInstanceNext operation.
 */
export type ManagedDatabasesListByInstanceNextResponse = ManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedDatabaseListResult;
    };
};

/**
 * Contains response data for the listInaccessibleByInstanceNext operation.
 */
export type ManagedDatabasesListInaccessibleByInstanceNextResponse = ManagedDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedDatabaseListResult;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerOperationsListByServerResponse = ServerOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerOperationListResult;
    };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type ServerOperationsListByServerNextResponse = ServerOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerOperationListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ServersListByResourceGroupResponse = ServerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServersGetResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Server;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServersCreateOrUpdateResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Server;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ServersUpdateResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Server;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ServersListResponse = ServerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerListResult;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ServersCheckNameAvailabilityResponse = CheckNameAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameAvailabilityResponse;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ServersBeginCreateOrUpdateResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Server;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ServersBeginUpdateResponse = Server & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Server;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ServersListByResourceGroupNextResponse = ServerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServersListNextResponse = ServerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkloadGroupsGetResponse = WorkloadGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadGroup;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type WorkloadGroupsCreateOrUpdateResponse = WorkloadGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadGroup;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type WorkloadGroupsListByDatabaseResponse = WorkloadGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadGroupListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type WorkloadGroupsBeginCreateOrUpdateResponse = WorkloadGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadGroup;
    };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type WorkloadGroupsListByDatabaseNextResponse = WorkloadGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadGroupListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkloadClassifiersGetResponse = WorkloadClassifier & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadClassifier;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type WorkloadClassifiersCreateOrUpdateResponse = WorkloadClassifier & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadClassifier;
    };
};

/**
 * Contains response data for the listByWorkloadGroup operation.
 */
export type WorkloadClassifiersListByWorkloadGroupResponse = WorkloadClassifierListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadClassifierListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type WorkloadClassifiersBeginCreateOrUpdateResponse = WorkloadClassifier & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadClassifier;
    };
};

/**
 * Contains response data for the listByWorkloadGroupNext operation.
 */
export type WorkloadClassifiersListByWorkloadGroupNextResponse = WorkloadClassifierListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkloadClassifierListResult;
    };
};

/**
 * Contains response data for the listByManagedInstance operation.
 */
export type ManagedInstanceOperationsListByManagedInstanceResponse = ManagedInstanceOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedInstanceOperationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedInstanceOperationsGetResponse = ManagedInstanceOperation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedInstanceOperation;
    };
};

/**
 * Contains response data for the listByManagedInstanceNext operation.
 */
export type ManagedInstanceOperationsListByManagedInstanceNextResponse = ManagedInstanceOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedInstanceOperationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServerAzureADAdministratorsGetResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerAzureADAdministrator;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServerAzureADAdministratorsCreateOrUpdateResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerAzureADAdministrator;
    };
};

/**
 * Contains response data for the listByServer operation.
 */
export type ServerAzureADAdministratorsListByServerResponse = AdministratorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AdministratorListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ServerAzureADAdministratorsBeginCreateOrUpdateResponse = ServerAzureADAdministrator & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServerAzureADAdministrator;
    };
};

/**
 * Contains response data for the listByServerNext operation.
 */
export type ServerAzureADAdministratorsListByServerNextResponse = AdministratorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AdministratorListResult;
    };
};

/**
 * Contains response data for the listSyncDatabaseIds operation.
 */
export type SyncGroupsListSyncDatabaseIdsResponse = SyncDatabaseIdListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncDatabaseIdListResult;
    };
};

/**
 * Contains response data for the listHubSchemas operation.
 */
export type SyncGroupsListHubSchemasResponse = SyncFullSchemaPropertiesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncFullSchemaPropertiesListResult;
    };
};

/**
 * Contains response data for the listLogs operation.
 */
export type SyncGroupsListLogsResponse = SyncGroupLogListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncGroupLogListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SyncGroupsGetResponse = SyncGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncGroup;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SyncGroupsCreateOrUpdateResponse = SyncGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncGroup;
    };
};

/**
 * Contains response data for the update operation.
 */
export type SyncGroupsUpdateResponse = SyncGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncGroup;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type SyncGroupsListByDatabaseResponse = SyncGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncGroupListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SyncGroupsBeginCreateOrUpdateResponse = SyncGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncGroup;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type SyncGroupsBeginUpdateResponse = SyncGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncGroup;
    };
};

/**
 * Contains response data for the listSyncDatabaseIdsNext operation.
 */
export type SyncGroupsListSyncDatabaseIdsNextResponse = SyncDatabaseIdListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncDatabaseIdListResult;
    };
};

/**
 * Contains response data for the listHubSchemasNext operation.
 */
export type SyncGroupsListHubSchemasNextResponse = SyncFullSchemaPropertiesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncFullSchemaPropertiesListResult;
    };
};

/**
 * Contains response data for the listLogsNext operation.
 */
export type SyncGroupsListLogsNextResponse = SyncGroupLogListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncGroupLogListResult;
    };
};

/**
 * Contains response data for the listByDatabaseNext operation.
 */
export type SyncGroupsListByDatabaseNextResponse = SyncGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncGroupListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SyncMembersGetResponse = SyncMember & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncMember;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SyncMembersCreateOrUpdateResponse = SyncMember & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncMember;
    };
};

/**
 * Contains response data for the update operation.
 */
export type SyncMembersUpdateResponse = SyncMember & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncMember;
    };
};

/**
 * Contains response data for the listBySyncGroup operation.
 */
export type SyncMembersListBySyncGroupResponse = SyncMemberListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncMemberListResult;
    };
};

/**
 * Contains response data for the listMemberSchemas operation.
 */
export type SyncMembersListMemberSchemasResponse = SyncFullSchemaPropertiesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncFullSchemaPropertiesListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SyncMembersBeginCreateOrUpdateResponse = SyncMember & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncMember;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type SyncMembersBeginUpdateResponse = SyncMember & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncMember;
    };
};

/**
 * Contains response data for the listBySyncGroupNext operation.
 */
export type SyncMembersListBySyncGroupNextResponse = SyncMemberListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncMemberListResult;
    };
};

/**
 * Contains response data for the listMemberSchemasNext operation.
 */
export type SyncMembersListMemberSchemasNextResponse = SyncFullSchemaPropertiesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SyncFullSchemaPropertiesListResult;
    };
};
