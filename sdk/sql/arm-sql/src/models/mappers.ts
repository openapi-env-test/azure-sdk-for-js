/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const RecommendedActionStateInfo: msRest.CompositeMapper = {
  serializedName: "RecommendedActionStateInfo",
  type: {
    name: "Composite",
    className: "RecommendedActionStateInfo",
    modelProperties: {
      currentValue: {
        required: true,
        serializedName: "currentValue",
        type: {
          name: "String"
        }
      },
      actionInitiatedBy: {
        readOnly: true,
        serializedName: "actionInitiatedBy",
        type: {
          name: "Enum",
          allowedValues: [
            "User",
            "System"
          ]
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RecommendedActionImplementationInfo: msRest.CompositeMapper = {
  serializedName: "RecommendedActionImplementationInfo",
  type: {
    name: "Composite",
    className: "RecommendedActionImplementationInfo",
    modelProperties: {
      method: {
        readOnly: true,
        serializedName: "method",
        type: {
          name: "Enum",
          allowedValues: [
            "TSql",
            "AzurePowerShell"
          ]
        }
      },
      script: {
        readOnly: true,
        serializedName: "script",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendedActionErrorInfo: msRest.CompositeMapper = {
  serializedName: "RecommendedActionErrorInfo",
  type: {
    name: "Composite",
    className: "RecommendedActionErrorInfo",
    modelProperties: {
      errorCode: {
        readOnly: true,
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      isRetryable: {
        readOnly: true,
        serializedName: "isRetryable",
        type: {
          name: "Enum",
          allowedValues: [
            "Yes",
            "No"
          ]
        }
      }
    }
  }
};

export const RecommendedActionImpactRecord: msRest.CompositeMapper = {
  serializedName: "RecommendedActionImpactRecord",
  type: {
    name: "Composite",
    className: "RecommendedActionImpactRecord",
    modelProperties: {
      dimensionName: {
        readOnly: true,
        serializedName: "dimensionName",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      absoluteValue: {
        readOnly: true,
        serializedName: "absoluteValue",
        type: {
          name: "Number"
        }
      },
      changeValueAbsolute: {
        readOnly: true,
        serializedName: "changeValueAbsolute",
        type: {
          name: "Number"
        }
      },
      changeValueRelative: {
        readOnly: true,
        serializedName: "changeValueRelative",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RecommendedActionMetricInfo: msRest.CompositeMapper = {
  serializedName: "RecommendedActionMetricInfo",
  type: {
    name: "Composite",
    className: "RecommendedActionMetricInfo",
    modelProperties: {
      metricName: {
        readOnly: true,
        serializedName: "metricName",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const RecommendedAction: msRest.CompositeMapper = {
  serializedName: "RecommendedAction",
  type: {
    name: "Composite",
    className: "RecommendedAction",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      recommendationReason: {
        readOnly: true,
        serializedName: "properties.recommendationReason",
        type: {
          name: "String"
        }
      },
      validSince: {
        readOnly: true,
        serializedName: "properties.validSince",
        type: {
          name: "DateTime"
        }
      },
      lastRefresh: {
        readOnly: true,
        serializedName: "properties.lastRefresh",
        type: {
          name: "DateTime"
        }
      },
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Composite",
          className: "RecommendedActionStateInfo"
        }
      },
      isExecutableAction: {
        readOnly: true,
        serializedName: "properties.isExecutableAction",
        type: {
          name: "Boolean"
        }
      },
      isRevertableAction: {
        readOnly: true,
        serializedName: "properties.isRevertableAction",
        type: {
          name: "Boolean"
        }
      },
      isArchivedAction: {
        readOnly: true,
        serializedName: "properties.isArchivedAction",
        type: {
          name: "Boolean"
        }
      },
      executeActionStartTime: {
        readOnly: true,
        serializedName: "properties.executeActionStartTime",
        type: {
          name: "DateTime"
        }
      },
      executeActionDuration: {
        readOnly: true,
        serializedName: "properties.executeActionDuration",
        type: {
          name: "String"
        }
      },
      revertActionStartTime: {
        readOnly: true,
        serializedName: "properties.revertActionStartTime",
        type: {
          name: "DateTime"
        }
      },
      revertActionDuration: {
        readOnly: true,
        serializedName: "properties.revertActionDuration",
        type: {
          name: "String"
        }
      },
      executeActionInitiatedBy: {
        readOnly: true,
        serializedName: "properties.executeActionInitiatedBy",
        type: {
          name: "Enum",
          allowedValues: [
            "User",
            "System"
          ]
        }
      },
      executeActionInitiatedTime: {
        readOnly: true,
        serializedName: "properties.executeActionInitiatedTime",
        type: {
          name: "DateTime"
        }
      },
      revertActionInitiatedBy: {
        readOnly: true,
        serializedName: "properties.revertActionInitiatedBy",
        type: {
          name: "Enum",
          allowedValues: [
            "User",
            "System"
          ]
        }
      },
      revertActionInitiatedTime: {
        readOnly: true,
        serializedName: "properties.revertActionInitiatedTime",
        type: {
          name: "DateTime"
        }
      },
      score: {
        readOnly: true,
        serializedName: "properties.score",
        type: {
          name: "Number"
        }
      },
      implementationDetails: {
        readOnly: true,
        serializedName: "properties.implementationDetails",
        type: {
          name: "Composite",
          className: "RecommendedActionImplementationInfo"
        }
      },
      errorDetails: {
        readOnly: true,
        serializedName: "properties.errorDetails",
        type: {
          name: "Composite",
          className: "RecommendedActionErrorInfo"
        }
      },
      estimatedImpact: {
        readOnly: true,
        serializedName: "properties.estimatedImpact",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedActionImpactRecord"
            }
          }
        }
      },
      observedImpact: {
        readOnly: true,
        serializedName: "properties.observedImpact",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedActionImpactRecord"
            }
          }
        }
      },
      timeSeries: {
        readOnly: true,
        serializedName: "properties.timeSeries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedActionMetricInfo"
            }
          }
        }
      },
      linkedObjects: {
        readOnly: true,
        serializedName: "properties.linkedObjects",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      details: {
        readOnly: true,
        serializedName: "properties.details",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const Advisor: msRest.CompositeMapper = {
  serializedName: "Advisor",
  type: {
    name: "Composite",
    className: "Advisor",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      advisorStatus: {
        readOnly: true,
        serializedName: "properties.advisorStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "GA",
            "PublicPreview",
            "LimitedPublicPreview",
            "PrivatePreview"
          ]
        }
      },
      autoExecuteStatus: {
        required: true,
        serializedName: "properties.autoExecuteStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled",
            "Default"
          ]
        }
      },
      autoExecuteStatusInheritedFrom: {
        readOnly: true,
        serializedName: "properties.autoExecuteStatusInheritedFrom",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Subscription",
            "Server",
            "ElasticPool",
            "Database"
          ]
        }
      },
      recommendationsStatus: {
        readOnly: true,
        serializedName: "properties.recommendationsStatus",
        type: {
          name: "String"
        }
      },
      lastChecked: {
        readOnly: true,
        serializedName: "properties.lastChecked",
        type: {
          name: "DateTime"
        }
      },
      recommendedActions: {
        readOnly: true,
        serializedName: "properties.recommendedActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedAction"
            }
          }
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatabaseBlobAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "DatabaseBlobAuditingPolicy",
  type: {
    name: "Composite",
    className: "DatabaseBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutomaticTuningOptions: msRest.CompositeMapper = {
  serializedName: "AutomaticTuningOptions",
  type: {
    name: "Composite",
    className: "AutomaticTuningOptions",
    modelProperties: {
      desiredState: {
        serializedName: "desiredState",
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "On",
            "Default"
          ]
        }
      },
      actualState: {
        readOnly: true,
        serializedName: "actualState",
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "On"
          ]
        }
      },
      reasonCode: {
        readOnly: true,
        serializedName: "reasonCode",
        type: {
          name: "Number"
        }
      },
      reasonDesc: {
        readOnly: true,
        serializedName: "reasonDesc",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Disabled",
            "AutoConfigured",
            "InheritedFromServer",
            "QueryStoreOff",
            "QueryStoreReadOnly",
            "NotSupported"
          ]
        }
      }
    }
  }
};

export const DatabaseAutomaticTuning: msRest.CompositeMapper = {
  serializedName: "DatabaseAutomaticTuning",
  type: {
    name: "Composite",
    className: "DatabaseAutomaticTuning",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      desiredState: {
        serializedName: "properties.desiredState",
        type: {
          name: "Enum",
          allowedValues: [
            "Inherit",
            "Custom",
            "Auto",
            "Unspecified"
          ]
        }
      },
      actualState: {
        readOnly: true,
        serializedName: "properties.actualState",
        type: {
          name: "Enum",
          allowedValues: [
            "Inherit",
            "Custom",
            "Auto",
            "Unspecified"
          ]
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "AutomaticTuningOptions"
            }
          }
        }
      }
    }
  }
};

export const EncryptionProtector: msRest.CompositeMapper = {
  serializedName: "EncryptionProtector",
  type: {
    name: "Composite",
    className: "EncryptionProtector",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      subregion: {
        readOnly: true,
        serializedName: "properties.subregion",
        type: {
          name: "String"
        }
      },
      serverKeyName: {
        serializedName: "properties.serverKeyName",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        required: true,
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        readOnly: true,
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverGroupReadWriteEndpoint: msRest.CompositeMapper = {
  serializedName: "FailoverGroupReadWriteEndpoint",
  type: {
    name: "Composite",
    className: "FailoverGroupReadWriteEndpoint",
    modelProperties: {
      failoverPolicy: {
        required: true,
        serializedName: "failoverPolicy",
        type: {
          name: "String"
        }
      },
      failoverWithDataLossGracePeriodMinutes: {
        serializedName: "failoverWithDataLossGracePeriodMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FailoverGroupReadOnlyEndpoint: msRest.CompositeMapper = {
  serializedName: "FailoverGroupReadOnlyEndpoint",
  type: {
    name: "Composite",
    className: "FailoverGroupReadOnlyEndpoint",
    modelProperties: {
      failoverPolicy: {
        serializedName: "failoverPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerInfo: msRest.CompositeMapper = {
  serializedName: "PartnerInfo",
  type: {
    name: "Composite",
    className: "PartnerInfo",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      replicationRole: {
        readOnly: true,
        serializedName: "replicationRole",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverGroup: msRest.CompositeMapper = {
  serializedName: "FailoverGroup",
  type: {
    name: "Composite",
    className: "FailoverGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      readWriteEndpoint: {
        required: true,
        serializedName: "properties.readWriteEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadWriteEndpoint"
        }
      },
      readOnlyEndpoint: {
        serializedName: "properties.readOnlyEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadOnlyEndpoint"
        }
      },
      replicationRole: {
        readOnly: true,
        serializedName: "properties.replicationRole",
        type: {
          name: "String"
        }
      },
      replicationState: {
        readOnly: true,
        serializedName: "properties.replicationState",
        type: {
          name: "String"
        }
      },
      partnerServers: {
        required: true,
        serializedName: "properties.partnerServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartnerInfo"
            }
          }
        }
      },
      databases: {
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FailoverGroupUpdate: msRest.CompositeMapper = {
  serializedName: "FailoverGroupUpdate",
  type: {
    name: "Composite",
    className: "FailoverGroupUpdate",
    modelProperties: {
      readWriteEndpoint: {
        serializedName: "properties.readWriteEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadWriteEndpoint"
        }
      },
      readOnlyEndpoint: {
        serializedName: "properties.readOnlyEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadOnlyEndpoint"
        }
      },
      databases: {
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ResourceWithWritableName: msRest.CompositeMapper = {
  serializedName: "ResourceWithWritableName",
  type: {
    name: "Composite",
    className: "ResourceWithWritableName",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResourceWithWritableName: msRest.CompositeMapper = {
  serializedName: "ProxyResourceWithWritableName",
  type: {
    name: "Composite",
    className: "ProxyResourceWithWritableName",
    modelProperties: {
      ...ResourceWithWritableName.type.modelProperties
    }
  }
};

export const FirewallRule: msRest.CompositeMapper = {
  serializedName: "FirewallRule",
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...ProxyResourceWithWritableName.type.modelProperties,
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRuleList: msRest.CompositeMapper = {
  serializedName: "FirewallRuleList",
  type: {
    name: "Composite",
    className: "FirewallRuleList",
    modelProperties: {
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      }
    }
  }
};

export const ResourceIdentity: msRest.CompositeMapper = {
  serializedName: "ResourceIdentity",
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedInstance: msRest.CompositeMapper = {
  serializedName: "ManagedInstance",
  type: {
    name: "Composite",
    className: "ManagedInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      managedInstanceCreateMode: {
        serializedName: "properties.managedInstanceCreateMode",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        readOnly: true,
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      vCores: {
        serializedName: "properties.vCores",
        type: {
          name: "Number"
        }
      },
      storageSizeInGB: {
        serializedName: "properties.storageSizeInGB",
        type: {
          name: "Number"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      dnsZone: {
        readOnly: true,
        serializedName: "properties.dnsZone",
        type: {
          name: "String"
        }
      },
      dnsZonePartner: {
        serializedName: "properties.dnsZonePartner",
        type: {
          name: "String"
        }
      },
      publicDataEndpointEnabled: {
        serializedName: "properties.publicDataEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      sourceManagedInstanceId: {
        serializedName: "properties.sourceManagedInstanceId",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      proxyOverride: {
        serializedName: "properties.proxyOverride",
        type: {
          name: "String"
        }
      },
      timezoneId: {
        serializedName: "properties.timezoneId",
        type: {
          name: "String"
        }
      },
      instancePoolId: {
        serializedName: "properties.instancePoolId",
        type: {
          name: "String"
        }
      },
      maintenanceConfigurationId: {
        serializedName: "properties.maintenanceConfigurationId",
        type: {
          name: "String"
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceUpdate: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceUpdate",
  type: {
    name: "Composite",
    className: "ManagedInstanceUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      managedInstanceCreateMode: {
        serializedName: "properties.managedInstanceCreateMode",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        readOnly: true,
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      vCores: {
        serializedName: "properties.vCores",
        type: {
          name: "Number"
        }
      },
      storageSizeInGB: {
        serializedName: "properties.storageSizeInGB",
        type: {
          name: "Number"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      dnsZone: {
        readOnly: true,
        serializedName: "properties.dnsZone",
        type: {
          name: "String"
        }
      },
      dnsZonePartner: {
        serializedName: "properties.dnsZonePartner",
        type: {
          name: "String"
        }
      },
      publicDataEndpointEnabled: {
        serializedName: "properties.publicDataEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      sourceManagedInstanceId: {
        serializedName: "properties.sourceManagedInstanceId",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      proxyOverride: {
        serializedName: "properties.proxyOverride",
        type: {
          name: "String"
        }
      },
      timezoneId: {
        serializedName: "properties.timezoneId",
        type: {
          name: "String"
        }
      },
      instancePoolId: {
        serializedName: "properties.instancePoolId",
        type: {
          name: "String"
        }
      },
      maintenanceConfigurationId: {
        serializedName: "properties.maintenanceConfigurationId",
        type: {
          name: "String"
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        readOnly: true,
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        readOnly: true,
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const ServerKey: msRest.CompositeMapper = {
  serializedName: "ServerKey",
  type: {
    name: "Composite",
    className: "ServerKey",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      subregion: {
        readOnly: true,
        serializedName: "properties.subregion",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        required: true,
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Server: msRest.CompositeMapper = {
  serializedName: "Server",
  type: {
    name: "Composite",
    className: "Server",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        readOnly: true,
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerUpdate: msRest.CompositeMapper = {
  serializedName: "ServerUpdate",
  type: {
    name: "Composite",
    className: "ServerUpdate",
    modelProperties: {
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        readOnly: true,
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SyncAgent: msRest.CompositeMapper = {
  serializedName: "SyncAgent",
  type: {
    name: "Composite",
    className: "SyncAgent",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      syncAgentName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      syncDatabaseId: {
        serializedName: "properties.syncDatabaseId",
        type: {
          name: "String"
        }
      },
      lastAliveTime: {
        readOnly: true,
        serializedName: "properties.lastAliveTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      isUpToDate: {
        readOnly: true,
        serializedName: "properties.isUpToDate",
        type: {
          name: "Boolean"
        }
      },
      expiryTime: {
        readOnly: true,
        serializedName: "properties.expiryTime",
        type: {
          name: "DateTime"
        }
      },
      version: {
        readOnly: true,
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentKeyProperties: msRest.CompositeMapper = {
  serializedName: "SyncAgentKeyProperties",
  type: {
    name: "Composite",
    className: "SyncAgentKeyProperties",
    modelProperties: {
      syncAgentKey: {
        readOnly: true,
        serializedName: "syncAgentKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentLinkedDatabase: msRest.CompositeMapper = {
  serializedName: "SyncAgentLinkedDatabase",
  type: {
    name: "Composite",
    className: "SyncAgentLinkedDatabase",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      databaseType: {
        readOnly: true,
        serializedName: "properties.databaseType",
        type: {
          name: "String"
        }
      },
      databaseId: {
        readOnly: true,
        serializedName: "properties.databaseId",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      userName: {
        readOnly: true,
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncDatabaseIdProperties: msRest.CompositeMapper = {
  serializedName: "SyncDatabaseIdProperties",
  type: {
    name: "Composite",
    className: "SyncDatabaseIdProperties",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaTableColumn: msRest.CompositeMapper = {
  serializedName: "SyncFullSchemaTableColumn",
  type: {
    name: "Composite",
    className: "SyncFullSchemaTableColumn",
    modelProperties: {
      dataSize: {
        readOnly: true,
        serializedName: "dataSize",
        type: {
          name: "String"
        }
      },
      dataType: {
        readOnly: true,
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      errorId: {
        readOnly: true,
        serializedName: "errorId",
        type: {
          name: "String"
        }
      },
      hasError: {
        readOnly: true,
        serializedName: "hasError",
        type: {
          name: "Boolean"
        }
      },
      isPrimaryKey: {
        readOnly: true,
        serializedName: "isPrimaryKey",
        type: {
          name: "Boolean"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      quotedName: {
        readOnly: true,
        serializedName: "quotedName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaTable: msRest.CompositeMapper = {
  serializedName: "SyncFullSchemaTable",
  type: {
    name: "Composite",
    className: "SyncFullSchemaTable",
    modelProperties: {
      columns: {
        readOnly: true,
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncFullSchemaTableColumn"
            }
          }
        }
      },
      errorId: {
        readOnly: true,
        serializedName: "errorId",
        type: {
          name: "String"
        }
      },
      hasError: {
        readOnly: true,
        serializedName: "hasError",
        type: {
          name: "Boolean"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      quotedName: {
        readOnly: true,
        serializedName: "quotedName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaProperties: msRest.CompositeMapper = {
  serializedName: "SyncFullSchemaProperties",
  type: {
    name: "Composite",
    className: "SyncFullSchemaProperties",
    modelProperties: {
      tables: {
        readOnly: true,
        serializedName: "tables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncFullSchemaTable"
            }
          }
        }
      },
      lastUpdateTime: {
        readOnly: true,
        serializedName: "lastUpdateTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SyncGroupLogProperties: msRest.CompositeMapper = {
  serializedName: "SyncGroupLogProperties",
  type: {
    name: "Composite",
    className: "SyncGroupLogProperties",
    modelProperties: {
      timestamp: {
        readOnly: true,
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      source: {
        readOnly: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "String"
        }
      },
      tracingId: {
        readOnly: true,
        serializedName: "tracingId",
        type: {
          name: "Uuid"
        }
      },
      operationStatus: {
        readOnly: true,
        serializedName: "operationStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupSchemaTableColumn: msRest.CompositeMapper = {
  serializedName: "SyncGroupSchemaTableColumn",
  type: {
    name: "Composite",
    className: "SyncGroupSchemaTableColumn",
    modelProperties: {
      quotedName: {
        serializedName: "quotedName",
        type: {
          name: "String"
        }
      },
      dataSize: {
        serializedName: "dataSize",
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupSchemaTable: msRest.CompositeMapper = {
  serializedName: "SyncGroupSchemaTable",
  type: {
    name: "Composite",
    className: "SyncGroupSchemaTable",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncGroupSchemaTableColumn"
            }
          }
        }
      },
      quotedName: {
        serializedName: "quotedName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupSchema: msRest.CompositeMapper = {
  serializedName: "SyncGroupSchema",
  type: {
    name: "Composite",
    className: "SyncGroupSchema",
    modelProperties: {
      tables: {
        serializedName: "tables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncGroupSchemaTable"
            }
          }
        }
      },
      masterSyncMemberName: {
        serializedName: "masterSyncMemberName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroup: msRest.CompositeMapper = {
  serializedName: "SyncGroup",
  type: {
    name: "Composite",
    className: "SyncGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      interval: {
        serializedName: "properties.interval",
        type: {
          name: "Number"
        }
      },
      lastSyncTime: {
        readOnly: true,
        serializedName: "properties.lastSyncTime",
        type: {
          name: "DateTime"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "properties.conflictResolutionPolicy",
        type: {
          name: "String"
        }
      },
      syncDatabaseId: {
        serializedName: "properties.syncDatabaseId",
        type: {
          name: "String"
        }
      },
      hubDatabaseUserName: {
        serializedName: "properties.hubDatabaseUserName",
        type: {
          name: "String"
        }
      },
      hubDatabasePassword: {
        serializedName: "properties.hubDatabasePassword",
        type: {
          name: "String"
        }
      },
      syncState: {
        readOnly: true,
        serializedName: "properties.syncState",
        type: {
          name: "String"
        }
      },
      schema: {
        serializedName: "properties.schema",
        type: {
          name: "Composite",
          className: "SyncGroupSchema"
        }
      }
    }
  }
};

export const SyncMember: msRest.CompositeMapper = {
  serializedName: "SyncMember",
  type: {
    name: "Composite",
    className: "SyncMember",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      databaseType: {
        serializedName: "properties.databaseType",
        type: {
          name: "String"
        }
      },
      syncAgentId: {
        serializedName: "properties.syncAgentId",
        type: {
          name: "String"
        }
      },
      sqlServerDatabaseId: {
        serializedName: "properties.sqlServerDatabaseId",
        type: {
          name: "Uuid"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      syncDirection: {
        serializedName: "properties.syncDirection",
        type: {
          name: "String"
        }
      },
      syncState: {
        readOnly: true,
        serializedName: "properties.syncState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionUsage: msRest.CompositeMapper = {
  serializedName: "SubscriptionUsage",
  type: {
    name: "Composite",
    className: "SubscriptionUsage",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "properties.currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "properties.limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualCluster: msRest.CompositeMapper = {
  serializedName: "VirtualCluster",
  type: {
    name: "Composite",
    className: "VirtualCluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      subnetId: {
        readOnly: true,
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "properties.family",
        type: {
          name: "String"
        }
      },
      childResources: {
        readOnly: true,
        serializedName: "properties.childResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualClusterUpdate: msRest.CompositeMapper = {
  serializedName: "VirtualClusterUpdate",
  type: {
    name: "Composite",
    className: "VirtualClusterUpdate",
    modelProperties: {
      subnetId: {
        readOnly: true,
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "properties.family",
        type: {
          name: "String"
        }
      },
      childResources: {
        readOnly: true,
        serializedName: "properties.childResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetworkRule: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      virtualNetworkSubnetId: {
        required: true,
        serializedName: "properties.virtualNetworkSubnetId",
        type: {
          name: "String"
        }
      },
      ignoreMissingVnetServiceEndpoint: {
        serializedName: "properties.ignoreMissingVnetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseBlobAuditingPolicyListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseBlobAuditingPolicyListResult",
  type: {
    name: "Composite",
    className: "DatabaseBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionProtectorListResult: msRest.CompositeMapper = {
  serializedName: "EncryptionProtectorListResult",
  type: {
    name: "Composite",
    className: "EncryptionProtectorListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EncryptionProtector"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverGroupListResult: msRest.CompositeMapper = {
  serializedName: "FailoverGroupListResult",
  type: {
    name: "Composite",
    className: "FailoverGroupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverGroup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRuleListResult: msRest.CompositeMapper = {
  serializedName: "FirewallRuleListResult",
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceListResult: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceListResult",
  type: {
    name: "Composite",
    className: "ManagedInstanceListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstance"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerKeyListResult: msRest.CompositeMapper = {
  serializedName: "ServerKeyListResult",
  type: {
    name: "Composite",
    className: "ServerKeyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerKey"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerListResult: msRest.CompositeMapper = {
  serializedName: "ServerListResult",
  type: {
    name: "Composite",
    className: "ServerListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Server"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentListResult: msRest.CompositeMapper = {
  serializedName: "SyncAgentListResult",
  type: {
    name: "Composite",
    className: "SyncAgentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncAgent"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentLinkedDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "SyncAgentLinkedDatabaseListResult",
  type: {
    name: "Composite",
    className: "SyncAgentLinkedDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncAgentLinkedDatabase"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncDatabaseIdListResult: msRest.CompositeMapper = {
  serializedName: "SyncDatabaseIdListResult",
  type: {
    name: "Composite",
    className: "SyncDatabaseIdListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncDatabaseIdProperties"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaPropertiesListResult: msRest.CompositeMapper = {
  serializedName: "SyncFullSchemaPropertiesListResult",
  type: {
    name: "Composite",
    className: "SyncFullSchemaPropertiesListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncFullSchemaProperties"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupLogListResult: msRest.CompositeMapper = {
  serializedName: "SyncGroupLogListResult",
  type: {
    name: "Composite",
    className: "SyncGroupLogListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncGroupLogProperties"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupListResult: msRest.CompositeMapper = {
  serializedName: "SyncGroupListResult",
  type: {
    name: "Composite",
    className: "SyncGroupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncGroup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncMemberListResult: msRest.CompositeMapper = {
  serializedName: "SyncMemberListResult",
  type: {
    name: "Composite",
    className: "SyncMemberListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncMember"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionUsageListResult: msRest.CompositeMapper = {
  serializedName: "SubscriptionUsageListResult",
  type: {
    name: "Composite",
    className: "SubscriptionUsageListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubscriptionUsage"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualClusterListResult: msRest.CompositeMapper = {
  serializedName: "VirtualClusterListResult",
  type: {
    name: "Composite",
    className: "VirtualClusterListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualCluster"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRuleListResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRuleListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkRuleListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
