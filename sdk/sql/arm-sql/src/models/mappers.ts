/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const Advisor: msRest.CompositeMapper = {
  serializedName: "Advisor",
  type: {
    name: "Composite",
    className: "Advisor",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      advisorStatus: {
        readOnly: true,
        serializedName: "properties.advisorStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "GA",
            "PublicPreview",
            "LimitedPublicPreview",
            "PrivatePreview"
          ]
        }
      },
      autoExecuteValue: {
        required: true,
        serializedName: "properties.autoExecuteValue",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled",
            "Default"
          ]
        }
      },
      recommendationsStatus: {
        readOnly: true,
        serializedName: "properties.recommendationsStatus",
        type: {
          name: "String"
        }
      },
      lastChecked: {
        readOnly: true,
        serializedName: "properties.lastChecked",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AdvisorListResult: msRest.CompositeMapper = {
  serializedName: "AdvisorListResult",
  type: {
    name: "Composite",
    className: "AdvisorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Advisor"
            }
          }
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RecoverableDatabase: msRest.CompositeMapper = {
  serializedName: "RecoverableDatabase",
  type: {
    name: "Composite",
    className: "RecoverableDatabase",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      edition: {
        readOnly: true,
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        readOnly: true,
        serializedName: "properties.serviceLevelObjective",
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        readOnly: true,
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      lastAvailableBackupDate: {
        readOnly: true,
        serializedName: "properties.lastAvailableBackupDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RestorableDroppedDatabase: msRest.CompositeMapper = {
  serializedName: "RestorableDroppedDatabase",
  type: {
    name: "Composite",
    className: "RestorableDroppedDatabase",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      edition: {
        readOnly: true,
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        readOnly: true,
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        readOnly: true,
        serializedName: "properties.serviceLevelObjective",
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        readOnly: true,
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      deletionDate: {
        readOnly: true,
        serializedName: "properties.deletionDate",
        type: {
          name: "DateTime"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MaxSizeCapability: msRest.CompositeMapper = {
  serializedName: "MaxSizeCapability",
  type: {
    name: "Composite",
    className: "MaxSizeCapability",
    modelProperties: {
      limit: {
        nullable: false,
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "Megabytes",
            "Gigabytes",
            "Terabytes",
            "Petabytes"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const ServiceObjectiveCapability: msRest.CompositeMapper = {
  serializedName: "ServiceObjectiveCapability",
  type: {
    name: "Composite",
    className: "ServiceObjectiveCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      unit: {
        readOnly: true,
        serializedName: "performanceLevel.unit",
        type: {
          name: "Enum",
          allowedValues: [
            "DTU"
          ]
        }
      },
      value: {
        readOnly: true,
        serializedName: "performanceLevel.value",
        type: {
          name: "Number"
        }
      },
      id: {
        nullable: false,
        readOnly: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      supportedMaxSizes: {
        readOnly: true,
        serializedName: "supportedMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeCapability"
            }
          }
        }
      },
      includedMaxSize: {
        readOnly: true,
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      }
    }
  }
};

export const EditionCapability: msRest.CompositeMapper = {
  serializedName: "EditionCapability",
  type: {
    name: "Composite",
    className: "EditionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      supportedServiceLevelObjectives: {
        readOnly: true,
        serializedName: "supportedServiceLevelObjectives",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceObjectiveCapability"
            }
          }
        }
      },
      zoneRedundant: {
        readOnly: true,
        serializedName: "zoneRedundant",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseMinDtuCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerDatabaseMinDtuCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseMinDtuCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseMaxDtuCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerDatabaseMaxDtuCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseMaxDtuCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      supportedPerDatabaseMinDtus: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMinDtus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerDatabaseMinDtuCapability"
            }
          }
        }
      }
    }
  }
};

export const ElasticPoolDtuCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolDtuCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolDtuCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      maxDatabaseCount: {
        readOnly: true,
        serializedName: "maxDatabaseCount",
        type: {
          name: "Number"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      supportedMaxSizes: {
        readOnly: true,
        serializedName: "supportedMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeCapability"
            }
          }
        }
      },
      includedMaxSize: {
        readOnly: true,
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      supportedPerDatabaseMaxSizes: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeCapability"
            }
          }
        }
      },
      supportedPerDatabaseMaxDtus: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMaxDtus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerDatabaseMaxDtuCapability"
            }
          }
        }
      }
    }
  }
};

export const ElasticPoolEditionCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolEditionCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolEditionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      supportedElasticPoolDtus: {
        readOnly: true,
        serializedName: "supportedElasticPoolDtus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolDtuCapability"
            }
          }
        }
      },
      zoneRedundant: {
        readOnly: true,
        serializedName: "zoneRedundant",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ServerVersionCapability: msRest.CompositeMapper = {
  serializedName: "ServerVersionCapability",
  type: {
    name: "Composite",
    className: "ServerVersionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      supportedEditions: {
        readOnly: true,
        serializedName: "supportedEditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EditionCapability"
            }
          }
        }
      },
      supportedElasticPoolEditions: {
        readOnly: true,
        serializedName: "supportedElasticPoolEditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolEditionCapability"
            }
          }
        }
      }
    }
  }
};

export const LocationCapabilities: msRest.CompositeMapper = {
  serializedName: "LocationCapabilities",
  type: {
    name: "Composite",
    className: "LocationCapabilities",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      supportedServerVersions: {
        readOnly: true,
        serializedName: "supportedServerVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVersionCapability"
            }
          }
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'Microsoft.Sql/servers',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponse: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResponse",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      available: {
        readOnly: true,
        serializedName: "available",
        type: {
          name: "Boolean"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "AlreadyExists"
          ]
        }
      }
    }
  }
};

export const ServerConnectionPolicy: msRest.CompositeMapper = {
  serializedName: "ServerConnectionPolicy",
  type: {
    name: "Composite",
    className: "ServerConnectionPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      connectionType: {
        required: true,
        serializedName: "properties.connectionType",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Proxy",
            "Redirect"
          ]
        }
      }
    }
  }
};

export const SloUsageMetric: msRest.CompositeMapper = {
  serializedName: "SloUsageMetric",
  type: {
    name: "Composite",
    className: "SloUsageMetric",
    modelProperties: {
      serviceLevelObjective: {
        readOnly: true,
        serializedName: "serviceLevelObjective",
        type: {
          name: "String"
        }
      },
      serviceLevelObjectiveId: {
        nullable: false,
        readOnly: true,
        serializedName: "serviceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      inRangeTimeRatio: {
        nullable: false,
        readOnly: true,
        serializedName: "inRangeTimeRatio",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceTierAdvisor: msRest.CompositeMapper = {
  serializedName: "ServiceTierAdvisor",
  type: {
    name: "Composite",
    className: "ServiceTierAdvisor",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      observationPeriodStart: {
        readOnly: true,
        serializedName: "properties.observationPeriodStart",
        type: {
          name: "DateTime"
        }
      },
      observationPeriodEnd: {
        readOnly: true,
        serializedName: "properties.observationPeriodEnd",
        type: {
          name: "DateTime"
        }
      },
      activeTimeRatio: {
        readOnly: true,
        serializedName: "properties.activeTimeRatio",
        type: {
          name: "Number"
        }
      },
      minDtu: {
        readOnly: true,
        serializedName: "properties.minDtu",
        type: {
          name: "Number"
        }
      },
      avgDtu: {
        readOnly: true,
        serializedName: "properties.avgDtu",
        type: {
          name: "Number"
        }
      },
      maxDtu: {
        readOnly: true,
        serializedName: "properties.maxDtu",
        type: {
          name: "Number"
        }
      },
      maxSizeInGB: {
        readOnly: true,
        serializedName: "properties.maxSizeInGB",
        type: {
          name: "Number"
        }
      },
      serviceLevelObjectiveUsageMetrics: {
        readOnly: true,
        serializedName: "properties.serviceLevelObjectiveUsageMetrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SloUsageMetric"
            }
          }
        }
      },
      currentServiceLevelObjective: {
        readOnly: true,
        serializedName: "properties.currentServiceLevelObjective",
        type: {
          name: "String"
        }
      },
      currentServiceLevelObjectiveId: {
        readOnly: true,
        serializedName: "properties.currentServiceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      usageBasedRecommendationServiceLevelObjective: {
        readOnly: true,
        serializedName: "properties.usageBasedRecommendationServiceLevelObjective",
        type: {
          name: "String"
        }
      },
      usageBasedRecommendationServiceLevelObjectiveId: {
        readOnly: true,
        serializedName: "properties.usageBasedRecommendationServiceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      databaseSizeBasedRecommendationServiceLevelObjective: {
        readOnly: true,
        serializedName: "properties.databaseSizeBasedRecommendationServiceLevelObjective",
        type: {
          name: "String"
        }
      },
      databaseSizeBasedRecommendationServiceLevelObjectiveId: {
        readOnly: true,
        serializedName: "properties.databaseSizeBasedRecommendationServiceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      disasterPlanBasedRecommendationServiceLevelObjective: {
        readOnly: true,
        serializedName: "properties.disasterPlanBasedRecommendationServiceLevelObjective",
        type: {
          name: "String"
        }
      },
      disasterPlanBasedRecommendationServiceLevelObjectiveId: {
        readOnly: true,
        serializedName: "properties.disasterPlanBasedRecommendationServiceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      overallRecommendationServiceLevelObjective: {
        readOnly: true,
        serializedName: "properties.overallRecommendationServiceLevelObjective",
        type: {
          name: "String"
        }
      },
      overallRecommendationServiceLevelObjectiveId: {
        readOnly: true,
        serializedName: "properties.overallRecommendationServiceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      confidence: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.confidence",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TransparentDataEncryption: msRest.CompositeMapper = {
  serializedName: "TransparentDataEncryption",
  type: {
    name: "Composite",
    className: "TransparentDataEncryption",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const OperationImpact: msRest.CompositeMapper = {
  serializedName: "OperationImpact",
  type: {
    name: "Composite",
    className: "OperationImpact",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      changeValueAbsolute: {
        readOnly: true,
        serializedName: "changeValueAbsolute",
        type: {
          name: "Number"
        }
      },
      changeValueRelative: {
        readOnly: true,
        serializedName: "changeValueRelative",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RecommendedIndex: msRest.CompositeMapper = {
  serializedName: "RecommendedIndex",
  type: {
    name: "Composite",
    className: "RecommendedIndex",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      action: {
        readOnly: true,
        serializedName: "properties.action",
        type: {
          name: "Enum",
          allowedValues: [
            "Create",
            "Drop",
            "Rebuild"
          ]
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Pending",
            "Executing",
            "Verifying",
            "Pending Revert",
            "Reverting",
            "Reverted",
            "Ignored",
            "Expired",
            "Blocked",
            "Success"
          ]
        }
      },
      created: {
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "properties.lastModified",
        type: {
          name: "DateTime"
        }
      },
      indexType: {
        readOnly: true,
        serializedName: "properties.indexType",
        type: {
          name: "Enum",
          allowedValues: [
            "CLUSTERED",
            "NONCLUSTERED",
            "COLUMNSTORE",
            "CLUSTERED COLUMNSTORE"
          ]
        }
      },
      schema: {
        readOnly: true,
        serializedName: "properties.schema",
        type: {
          name: "String"
        }
      },
      table: {
        readOnly: true,
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      columns: {
        readOnly: true,
        serializedName: "properties.columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      includedColumns: {
        readOnly: true,
        serializedName: "properties.includedColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      indexScript: {
        readOnly: true,
        serializedName: "properties.indexScript",
        type: {
          name: "String"
        }
      },
      estimatedImpact: {
        readOnly: true,
        serializedName: "properties.estimatedImpact",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationImpact"
            }
          }
        }
      },
      reportedImpact: {
        readOnly: true,
        serializedName: "properties.reportedImpact",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationImpact"
            }
          }
        }
      }
    }
  }
};

export const Database: msRest.CompositeMapper = {
  serializedName: "Database",
  type: {
    name: "Composite",
    className: "Database",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      containmentState: {
        readOnly: true,
        serializedName: "properties.containmentState",
        type: {
          name: "Number"
        }
      },
      currentServiceObjectiveId: {
        readOnly: true,
        serializedName: "properties.currentServiceObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      databaseId: {
        readOnly: true,
        serializedName: "properties.databaseId",
        type: {
          name: "Uuid"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      sourceDatabaseDeletionDate: {
        serializedName: "properties.sourceDatabaseDeletionDate",
        type: {
          name: "DateTime"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      recoveryServicesRecoveryPointResourceId: {
        serializedName: "properties.recoveryServicesRecoveryPointResourceId",
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "String"
        }
      },
      requestedServiceObjectiveId: {
        serializedName: "properties.requestedServiceObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      requestedServiceObjectiveName: {
        serializedName: "properties.requestedServiceObjectiveName",
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        readOnly: true,
        serializedName: "properties.serviceLevelObjective",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      defaultSecondaryLocation: {
        readOnly: true,
        serializedName: "properties.defaultSecondaryLocation",
        type: {
          name: "String"
        }
      },
      serviceTierAdvisors: {
        readOnly: true,
        serializedName: "properties.serviceTierAdvisors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceTierAdvisor"
            }
          }
        }
      },
      transparentDataEncryption: {
        readOnly: true,
        serializedName: "properties.transparentDataEncryption",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransparentDataEncryption"
            }
          }
        }
      },
      recommendedIndex: {
        readOnly: true,
        serializedName: "properties.recommendedIndex",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedIndex"
            }
          }
        }
      },
      failoverGroupId: {
        readOnly: true,
        serializedName: "properties.failoverGroupId",
        type: {
          name: "String"
        }
      },
      readScale: {
        serializedName: "properties.readScale",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      sampleName: {
        serializedName: "properties.sampleName",
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DatabaseUpdate: msRest.CompositeMapper = {
  serializedName: "DatabaseUpdate",
  type: {
    name: "Composite",
    className: "DatabaseUpdate",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      containmentState: {
        readOnly: true,
        serializedName: "properties.containmentState",
        type: {
          name: "Number"
        }
      },
      currentServiceObjectiveId: {
        readOnly: true,
        serializedName: "properties.currentServiceObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      databaseId: {
        readOnly: true,
        serializedName: "properties.databaseId",
        type: {
          name: "Uuid"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      sourceDatabaseDeletionDate: {
        serializedName: "properties.sourceDatabaseDeletionDate",
        type: {
          name: "DateTime"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      recoveryServicesRecoveryPointResourceId: {
        serializedName: "properties.recoveryServicesRecoveryPointResourceId",
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "String"
        }
      },
      requestedServiceObjectiveId: {
        serializedName: "properties.requestedServiceObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      requestedServiceObjectiveName: {
        serializedName: "properties.requestedServiceObjectiveName",
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        readOnly: true,
        serializedName: "properties.serviceLevelObjective",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      defaultSecondaryLocation: {
        readOnly: true,
        serializedName: "properties.defaultSecondaryLocation",
        type: {
          name: "String"
        }
      },
      serviceTierAdvisors: {
        readOnly: true,
        serializedName: "properties.serviceTierAdvisors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceTierAdvisor"
            }
          }
        }
      },
      transparentDataEncryption: {
        readOnly: true,
        serializedName: "properties.transparentDataEncryption",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransparentDataEncryption"
            }
          }
        }
      },
      recommendedIndex: {
        readOnly: true,
        serializedName: "properties.recommendedIndex",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedIndex"
            }
          }
        }
      },
      failoverGroupId: {
        readOnly: true,
        serializedName: "properties.failoverGroupId",
        type: {
          name: "String"
        }
      },
      readScale: {
        serializedName: "properties.readScale",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      sampleName: {
        serializedName: "properties.sampleName",
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DatabaseSecurityAlertPolicy: msRest.CompositeMapper = {
  serializedName: "DatabaseSecurityAlertPolicy",
  type: {
    name: "Composite",
    className: "DatabaseSecurityAlertPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "New",
            "Enabled",
            "Disabled"
          ]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "String"
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "String"
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      useServerDefault: {
        serializedName: "properties.useServerDefault",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const DataMaskingPolicy: msRest.CompositeMapper = {
  serializedName: "DataMaskingPolicy",
  type: {
    name: "Composite",
    className: "DataMaskingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      dataMaskingState: {
        required: true,
        serializedName: "properties.dataMaskingState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "Enabled"
          ]
        }
      },
      exemptPrincipals: {
        serializedName: "properties.exemptPrincipals",
        type: {
          name: "String"
        }
      },
      applicationPrincipals: {
        readOnly: true,
        serializedName: "properties.applicationPrincipals",
        type: {
          name: "String"
        }
      },
      maskingLevel: {
        readOnly: true,
        serializedName: "properties.maskingLevel",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataMaskingRule: msRest.CompositeMapper = {
  serializedName: "DataMaskingRule",
  type: {
    name: "Composite",
    className: "DataMaskingRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      dataMaskingRuleId: {
        readOnly: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      aliasName: {
        serializedName: "properties.aliasName",
        type: {
          name: "String"
        }
      },
      ruleState: {
        serializedName: "properties.ruleState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "Enabled"
          ]
        }
      },
      schemaName: {
        required: true,
        serializedName: "properties.schemaName",
        type: {
          name: "String"
        }
      },
      tableName: {
        required: true,
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      columnName: {
        required: true,
        serializedName: "properties.columnName",
        type: {
          name: "String"
        }
      },
      maskingFunction: {
        required: true,
        serializedName: "properties.maskingFunction",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "CCN",
            "Email",
            "Number",
            "SSN",
            "Text"
          ]
        }
      },
      numberFrom: {
        serializedName: "properties.numberFrom",
        type: {
          name: "String"
        }
      },
      numberTo: {
        serializedName: "properties.numberTo",
        type: {
          name: "String"
        }
      },
      prefixSize: {
        serializedName: "properties.prefixSize",
        type: {
          name: "String"
        }
      },
      suffixSize: {
        serializedName: "properties.suffixSize",
        type: {
          name: "String"
        }
      },
      replacementString: {
        serializedName: "properties.replacementString",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DisasterRecoveryConfiguration: msRest.CompositeMapper = {
  serializedName: "DisasterRecoveryConfiguration",
  type: {
    name: "Composite",
    className: "DisasterRecoveryConfiguration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      autoFailover: {
        required: true,
        serializedName: "properties.autoFailover",
        type: {
          name: "String"
        }
      },
      failoverPolicy: {
        required: true,
        serializedName: "properties.failoverPolicy",
        type: {
          name: "String"
        }
      },
      partnerServerId: {
        required: true,
        serializedName: "properties.partnerServerId",
        type: {
          name: "String"
        }
      },
      logicalServerName: {
        readOnly: true,
        serializedName: "properties.logicalServerName",
        type: {
          name: "String"
        }
      },
      partnerLogicalServerName: {
        readOnly: true,
        serializedName: "properties.partnerLogicalServerName",
        type: {
          name: "String"
        }
      },
      role: {
        readOnly: true,
        serializedName: "properties.role",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPool: msRest.CompositeMapper = {
  serializedName: "ElasticPool",
  type: {
    name: "Composite",
    className: "ElasticPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      dtu: {
        serializedName: "properties.dtu",
        type: {
          name: "Number"
        }
      },
      databaseDtuMax: {
        serializedName: "properties.databaseDtuMax",
        type: {
          name: "Number"
        }
      },
      databaseDtuMin: {
        serializedName: "properties.databaseDtuMin",
        type: {
          name: "Number"
        }
      },
      storageMB: {
        serializedName: "properties.storageMB",
        type: {
          name: "Number"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolUpdate: msRest.CompositeMapper = {
  serializedName: "ElasticPoolUpdate",
  type: {
    name: "Composite",
    className: "ElasticPoolUpdate",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      dtu: {
        serializedName: "properties.dtu",
        type: {
          name: "Number"
        }
      },
      databaseDtuMax: {
        serializedName: "properties.databaseDtuMax",
        type: {
          name: "Number"
        }
      },
      databaseDtuMin: {
        serializedName: "properties.databaseDtuMin",
        type: {
          name: "Number"
        }
      },
      storageMB: {
        serializedName: "properties.storageMB",
        type: {
          name: "Number"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FirewallRule: msRest.CompositeMapper = {
  serializedName: "FirewallRule",
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        required: true,
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        required: true,
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoBackupPolicy: msRest.CompositeMapper = {
  serializedName: "GeoBackupPolicy",
  type: {
    name: "Composite",
    className: "GeoBackupPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "Enabled"
          ]
        }
      },
      storageType: {
        readOnly: true,
        serializedName: "properties.storageType",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportExtensionRequest: msRest.CompositeMapper = {
  serializedName: "ImportExtensionRequest",
  type: {
    name: "Composite",
    className: "ImportExtensionRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      storageKeyType: {
        required: true,
        serializedName: "properties.storageKeyType",
        type: {
          name: "Enum",
          allowedValues: [
            "StorageAccessKey",
            "SharedAccessKey"
          ]
        }
      },
      storageKey: {
        required: true,
        serializedName: "properties.storageKey",
        type: {
          name: "String"
        }
      },
      storageUri: {
        required: true,
        serializedName: "properties.storageUri",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        required: true,
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        required: true,
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      authenticationType: {
        serializedName: "properties.authenticationType",
        defaultValue: 'SQL',
        type: {
          name: "Enum",
          allowedValues: [
            "SQL",
            "ADPassword"
          ]
        }
      },
      operationMode: {
        required: true,
        isConstant: true,
        serializedName: "properties.operationMode",
        defaultValue: 'Import',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportExportResponse: msRest.CompositeMapper = {
  serializedName: "ImportExportResponse",
  type: {
    name: "Composite",
    className: "ImportExportResponse",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      requestType: {
        readOnly: true,
        serializedName: "properties.requestType",
        type: {
          name: "String"
        }
      },
      requestId: {
        readOnly: true,
        serializedName: "properties.requestId",
        type: {
          name: "Uuid"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      lastModifiedTime: {
        readOnly: true,
        serializedName: "properties.lastModifiedTime",
        type: {
          name: "String"
        }
      },
      queuedTime: {
        readOnly: true,
        serializedName: "properties.queuedTime",
        type: {
          name: "String"
        }
      },
      blobUri: {
        readOnly: true,
        serializedName: "properties.blobUri",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        readOnly: true,
        serializedName: "properties.errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportRequest: msRest.CompositeMapper = {
  serializedName: "ExportRequest",
  type: {
    name: "Composite",
    className: "ExportRequest",
    modelProperties: {
      storageKeyType: {
        required: true,
        serializedName: "storageKeyType",
        type: {
          name: "Enum",
          allowedValues: [
            "StorageAccessKey",
            "SharedAccessKey"
          ]
        }
      },
      storageKey: {
        required: true,
        serializedName: "storageKey",
        type: {
          name: "String"
        }
      },
      storageUri: {
        required: true,
        serializedName: "storageUri",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        required: true,
        serializedName: "administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        required: true,
        serializedName: "administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      authenticationType: {
        serializedName: "authenticationType",
        defaultValue: 'SQL',
        type: {
          name: "Enum",
          allowedValues: [
            "SQL",
            "ADPassword"
          ]
        }
      }
    }
  }
};

export const ImportRequest: msRest.CompositeMapper = {
  serializedName: "ImportRequest",
  type: {
    name: "Composite",
    className: "ImportRequest",
    modelProperties: {
      ...ExportRequest.type.modelProperties,
      databaseName: {
        required: true,
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      edition: {
        required: true,
        serializedName: "edition",
        type: {
          name: "String"
        }
      },
      serviceObjectiveName: {
        required: true,
        serializedName: "serviceObjectiveName",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        required: true,
        serializedName: "maxSizeBytes",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricValue: msRest.CompositeMapper = {
  serializedName: "MetricValue",
  type: {
    name: "Composite",
    className: "MetricValue",
    modelProperties: {
      count: {
        readOnly: true,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      average: {
        readOnly: true,
        serializedName: "average",
        type: {
          name: "Number"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      minimum: {
        readOnly: true,
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      timestamp: {
        readOnly: true,
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      total: {
        readOnly: true,
        serializedName: "total",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MetricName: msRest.CompositeMapper = {
  serializedName: "MetricName",
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Metric: msRest.CompositeMapper = {
  serializedName: "Metric",
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        readOnly: true,
        serializedName: "metricValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricValue"
            }
          }
        }
      }
    }
  }
};

export const MetricAvailability: msRest.CompositeMapper = {
  serializedName: "MetricAvailability",
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      retention: {
        readOnly: true,
        serializedName: "retention",
        type: {
          name: "String"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDefinition: msRest.CompositeMapper = {
  serializedName: "MetricDefinition",
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      primaryAggregationType: {
        readOnly: true,
        serializedName: "primaryAggregationType",
        type: {
          name: "String"
        }
      },
      resourceUri: {
        readOnly: true,
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      metricAvailabilities: {
        readOnly: true,
        serializedName: "metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryMetric: msRest.CompositeMapper = {
  serializedName: "QueryMetric",
  type: {
    name: "Composite",
    className: "QueryMetric",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "percentage",
            "KB",
            "microseconds"
          ]
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QueryInterval: msRest.CompositeMapper = {
  serializedName: "QueryInterval",
  type: {
    name: "Composite",
    className: "QueryInterval",
    modelProperties: {
      intervalStartTime: {
        readOnly: true,
        serializedName: "intervalStartTime",
        type: {
          name: "DateTime"
        }
      },
      executionCount: {
        readOnly: true,
        serializedName: "executionCount",
        type: {
          name: "Number"
        }
      },
      metrics: {
        readOnly: true,
        serializedName: "metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryMetric"
            }
          }
        }
      }
    }
  }
};

export const QueryStatistic: msRest.CompositeMapper = {
  serializedName: "QueryStatistic",
  type: {
    name: "Composite",
    className: "QueryStatistic",
    modelProperties: {
      queryId: {
        readOnly: true,
        serializedName: "queryId",
        type: {
          name: "String"
        }
      },
      intervals: {
        readOnly: true,
        serializedName: "intervals",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryInterval"
            }
          }
        }
      }
    }
  }
};

export const TopQueries: msRest.CompositeMapper = {
  serializedName: "TopQueries",
  type: {
    name: "Composite",
    className: "TopQueries",
    modelProperties: {
      aggregationFunction: {
        readOnly: true,
        serializedName: "aggregationFunction",
        type: {
          name: "Enum",
          allowedValues: [
            "min",
            "max",
            "avg",
            "sum"
          ]
        }
      },
      executionType: {
        readOnly: true,
        serializedName: "executionType",
        type: {
          name: "Enum",
          allowedValues: [
            "any",
            "regular",
            "irregular",
            "aborted",
            "exception"
          ]
        }
      },
      intervalType: {
        readOnly: true,
        serializedName: "intervalType",
        type: {
          name: "String"
        }
      },
      numberOfTopQueries: {
        readOnly: true,
        serializedName: "numberOfTopQueries",
        type: {
          name: "Number"
        }
      },
      observationStartTime: {
        readOnly: true,
        serializedName: "observationStartTime",
        type: {
          name: "DateTime"
        }
      },
      observationEndTime: {
        readOnly: true,
        serializedName: "observationEndTime",
        type: {
          name: "DateTime"
        }
      },
      observedMetric: {
        readOnly: true,
        serializedName: "observedMetric",
        type: {
          name: "Enum",
          allowedValues: [
            "cpu",
            "io",
            "logio",
            "duration",
            "executionCount"
          ]
        }
      },
      queries: {
        readOnly: true,
        serializedName: "queries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryStatistic"
            }
          }
        }
      }
    }
  }
};

export const QueryText: msRest.CompositeMapper = {
  serializedName: "QueryText",
  type: {
    name: "Composite",
    className: "QueryText",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      queryText: {
        readOnly: true,
        serializedName: "queryText",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendedElasticPoolMetric: msRest.CompositeMapper = {
  serializedName: "RecommendedElasticPoolMetric",
  type: {
    name: "Composite",
    className: "RecommendedElasticPoolMetric",
    modelProperties: {
      dateTime: {
        serializedName: "dateTime",
        type: {
          name: "DateTime"
        }
      },
      dtu: {
        serializedName: "dtu",
        type: {
          name: "Number"
        }
      },
      sizeGB: {
        serializedName: "sizeGB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RecommendedElasticPool: msRest.CompositeMapper = {
  serializedName: "RecommendedElasticPool",
  type: {
    name: "Composite",
    className: "RecommendedElasticPool",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      databaseEdition: {
        readOnly: true,
        serializedName: "properties.databaseEdition",
        type: {
          name: "String"
        }
      },
      dtu: {
        serializedName: "properties.dtu",
        type: {
          name: "Number"
        }
      },
      databaseDtuMin: {
        serializedName: "properties.databaseDtuMin",
        type: {
          name: "Number"
        }
      },
      databaseDtuMax: {
        serializedName: "properties.databaseDtuMax",
        type: {
          name: "Number"
        }
      },
      storageMB: {
        serializedName: "properties.storageMB",
        type: {
          name: "Number"
        }
      },
      observationPeriodStart: {
        readOnly: true,
        serializedName: "properties.observationPeriodStart",
        type: {
          name: "DateTime"
        }
      },
      observationPeriodEnd: {
        readOnly: true,
        serializedName: "properties.observationPeriodEnd",
        type: {
          name: "DateTime"
        }
      },
      maxObservedDtu: {
        readOnly: true,
        serializedName: "properties.maxObservedDtu",
        type: {
          name: "Number"
        }
      },
      maxObservedStorageMB: {
        readOnly: true,
        serializedName: "properties.maxObservedStorageMB",
        type: {
          name: "Number"
        }
      },
      databases: {
        readOnly: true,
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Database"
            }
          }
        }
      },
      metrics: {
        readOnly: true,
        serializedName: "properties.metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedElasticPoolMetric"
            }
          }
        }
      }
    }
  }
};

export const ReplicationLink: msRest.CompositeMapper = {
  serializedName: "ReplicationLink",
  type: {
    name: "Composite",
    className: "ReplicationLink",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      isTerminationAllowed: {
        readOnly: true,
        serializedName: "properties.isTerminationAllowed",
        type: {
          name: "Boolean"
        }
      },
      replicationMode: {
        readOnly: true,
        serializedName: "properties.replicationMode",
        type: {
          name: "String"
        }
      },
      partnerServer: {
        readOnly: true,
        serializedName: "properties.partnerServer",
        type: {
          name: "String"
        }
      },
      partnerDatabase: {
        readOnly: true,
        serializedName: "properties.partnerDatabase",
        type: {
          name: "String"
        }
      },
      partnerLocation: {
        readOnly: true,
        serializedName: "properties.partnerLocation",
        type: {
          name: "String"
        }
      },
      role: {
        readOnly: true,
        serializedName: "properties.role",
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary",
            "NonReadableSecondary",
            "Source",
            "Copy"
          ]
        }
      },
      partnerRole: {
        readOnly: true,
        serializedName: "properties.partnerRole",
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary",
            "NonReadableSecondary",
            "Source",
            "Copy"
          ]
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      replicationState: {
        readOnly: true,
        serializedName: "properties.replicationState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnlinkParameters: msRest.CompositeMapper = {
  serializedName: "UnlinkParameters",
  type: {
    name: "Composite",
    className: "UnlinkParameters",
    modelProperties: {
      forcedTermination: {
        serializedName: "forcedTermination",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RestorePoint: msRest.CompositeMapper = {
  serializedName: "RestorePoint",
  type: {
    name: "Composite",
    className: "RestorePoint",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      restorePointType: {
        readOnly: true,
        serializedName: "properties.restorePointType",
        type: {
          name: "Enum",
          allowedValues: [
            "DISCRETE",
            "CONTINUOUS"
          ]
        }
      },
      restorePointCreationDate: {
        readOnly: true,
        serializedName: "properties.restorePointCreationDate",
        type: {
          name: "DateTime"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ServerAzureADAdministrator: msRest.CompositeMapper = {
  serializedName: "ServerAzureADAdministrator",
  type: {
    name: "Composite",
    className: "ServerAzureADAdministrator",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      administratorType: {
        required: true,
        isConstant: true,
        serializedName: "properties.administratorType",
        defaultValue: 'ActiveDirectory',
        type: {
          name: "String"
        }
      },
      login: {
        required: true,
        serializedName: "properties.login",
        type: {
          name: "String"
        }
      },
      sid: {
        required: true,
        serializedName: "properties.sid",
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        required: true,
        serializedName: "properties.tenantId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ServerCommunicationLink: msRest.CompositeMapper = {
  serializedName: "ServerCommunicationLink",
  type: {
    name: "Composite",
    className: "ServerCommunicationLink",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      partnerServer: {
        required: true,
        serializedName: "properties.partnerServer",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Server: msRest.CompositeMapper = {
  serializedName: "Server",
  type: {
    name: "Composite",
    className: "Server",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        readOnly: true,
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      externalAdministratorSid: {
        readOnly: true,
        serializedName: "properties.externalAdministratorSid",
        type: {
          name: "Uuid"
        }
      },
      externalAdministratorLogin: {
        readOnly: true,
        serializedName: "properties.externalAdministratorLogin",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Ready",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const ServerUpdate: msRest.CompositeMapper = {
  serializedName: "ServerUpdate",
  type: {
    name: "Composite",
    className: "ServerUpdate",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      fullyQualifiedDomainName: {
        readOnly: true,
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      externalAdministratorSid: {
        readOnly: true,
        serializedName: "properties.externalAdministratorSid",
        type: {
          name: "Uuid"
        }
      },
      externalAdministratorLogin: {
        readOnly: true,
        serializedName: "properties.externalAdministratorLogin",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Ready",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const ServiceObjective: msRest.CompositeMapper = {
  serializedName: "ServiceObjective",
  type: {
    name: "Composite",
    className: "ServiceObjective",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      serviceObjectiveName: {
        readOnly: true,
        serializedName: "properties.serviceObjectiveName",
        type: {
          name: "String"
        }
      },
      isDefault: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.isDefault",
        type: {
          name: "Boolean"
        }
      },
      isSystem: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.isSystem",
        type: {
          name: "Boolean"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      enabled: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ElasticPoolActivity: msRest.CompositeMapper = {
  serializedName: "ElasticPoolActivity",
  type: {
    name: "Composite",
    className: "ElasticPoolActivity",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "properties.errorCode",
        type: {
          name: "Number"
        }
      },
      errorMessage: {
        readOnly: true,
        serializedName: "properties.errorMessage",
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        readOnly: true,
        serializedName: "properties.errorSeverity",
        type: {
          name: "Number"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "properties.operation",
        type: {
          name: "String"
        }
      },
      operationId: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.operationId",
        type: {
          name: "Uuid"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuMax: {
        readOnly: true,
        serializedName: "properties.requestedDatabaseDtuMax",
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuMin: {
        readOnly: true,
        serializedName: "properties.requestedDatabaseDtuMin",
        type: {
          name: "Number"
        }
      },
      requestedDtu: {
        readOnly: true,
        serializedName: "properties.requestedDtu",
        type: {
          name: "Number"
        }
      },
      requestedElasticPoolName: {
        readOnly: true,
        serializedName: "properties.requestedElasticPoolName",
        type: {
          name: "String"
        }
      },
      requestedStorageLimitInGB: {
        readOnly: true,
        serializedName: "properties.requestedStorageLimitInGB",
        type: {
          name: "Number"
        }
      },
      elasticPoolName: {
        readOnly: true,
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      requestedStorageLimitInMB: {
        readOnly: true,
        serializedName: "properties.requestedStorageLimitInMB",
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuGuarantee: {
        readOnly: true,
        serializedName: "properties.requestedDatabaseDtuGuarantee",
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuCap: {
        readOnly: true,
        serializedName: "properties.requestedDatabaseDtuCap",
        type: {
          name: "Number"
        }
      },
      requestedDtuGuarantee: {
        readOnly: true,
        serializedName: "properties.requestedDtuGuarantee",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ElasticPoolDatabaseActivity: msRest.CompositeMapper = {
  serializedName: "ElasticPoolDatabaseActivity",
  type: {
    name: "Composite",
    className: "ElasticPoolDatabaseActivity",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "properties.errorCode",
        type: {
          name: "Number"
        }
      },
      errorMessage: {
        readOnly: true,
        serializedName: "properties.errorMessage",
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        readOnly: true,
        serializedName: "properties.errorSeverity",
        type: {
          name: "Number"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "properties.operation",
        type: {
          name: "String"
        }
      },
      operationId: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.operationId",
        type: {
          name: "Uuid"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      requestedElasticPoolName: {
        readOnly: true,
        serializedName: "properties.requestedElasticPoolName",
        type: {
          name: "String"
        }
      },
      currentElasticPoolName: {
        readOnly: true,
        serializedName: "properties.currentElasticPoolName",
        type: {
          name: "String"
        }
      },
      currentServiceObjective: {
        readOnly: true,
        serializedName: "properties.currentServiceObjective",
        type: {
          name: "String"
        }
      },
      requestedServiceObjective: {
        readOnly: true,
        serializedName: "properties.requestedServiceObjective",
        type: {
          name: "String"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransparentDataEncryptionActivity: msRest.CompositeMapper = {
  serializedName: "TransparentDataEncryptionActivity",
  type: {
    name: "Composite",
    className: "TransparentDataEncryptionActivity",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TableAuditingPolicyProperties: msRest.CompositeMapper = {
  serializedName: "TableAuditingPolicyProperties",
  type: {
    name: "Composite",
    className: "TableAuditingPolicyProperties",
    modelProperties: {
      auditingState: {
        serializedName: "auditingState",
        type: {
          name: "String"
        }
      },
      auditLogsTableName: {
        serializedName: "auditLogsTableName",
        type: {
          name: "String"
        }
      },
      eventTypesToAudit: {
        serializedName: "eventTypesToAudit",
        type: {
          name: "String"
        }
      },
      fullAuditLogsTableName: {
        serializedName: "fullAuditLogsTableName",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "retentionDays",
        type: {
          name: "String"
        }
      },
      storageAccountKey: {
        serializedName: "storageAccountKey",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        serializedName: "storageAccountName",
        type: {
          name: "String"
        }
      },
      storageAccountResourceGroupName: {
        serializedName: "storageAccountResourceGroupName",
        type: {
          name: "String"
        }
      },
      storageAccountSecondaryKey: {
        serializedName: "storageAccountSecondaryKey",
        type: {
          name: "String"
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      storageTableEndpoint: {
        serializedName: "storageTableEndpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseConnectionPolicy: msRest.CompositeMapper = {
  serializedName: "DatabaseConnectionPolicy",
  type: {
    name: "Composite",
    className: "DatabaseConnectionPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      securityEnabledAccess: {
        serializedName: "properties.securityEnabledAccess",
        type: {
          name: "String"
        }
      },
      proxyDnsName: {
        serializedName: "properties.proxyDnsName",
        type: {
          name: "String"
        }
      },
      proxyPort: {
        serializedName: "properties.proxyPort",
        type: {
          name: "String"
        }
      },
      visibility: {
        serializedName: "properties.visibility",
        type: {
          name: "String"
        }
      },
      useServerDefault: {
        serializedName: "properties.useServerDefault",
        type: {
          name: "String"
        }
      },
      redirectionState: {
        serializedName: "properties.redirectionState",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseTableAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "DatabaseTableAuditingPolicy",
  type: {
    name: "Composite",
    className: "DatabaseTableAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      auditingState: {
        serializedName: "properties.auditingState",
        type: {
          name: "String"
        }
      },
      auditLogsTableName: {
        serializedName: "properties.auditLogsTableName",
        type: {
          name: "String"
        }
      },
      eventTypesToAudit: {
        serializedName: "properties.eventTypesToAudit",
        type: {
          name: "String"
        }
      },
      fullAuditLogsTableName: {
        serializedName: "properties.fullAuditLogsTableName",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "String"
        }
      },
      storageAccountKey: {
        serializedName: "properties.storageAccountKey",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      storageAccountResourceGroupName: {
        serializedName: "properties.storageAccountResourceGroupName",
        type: {
          name: "String"
        }
      },
      storageAccountSecondaryKey: {
        serializedName: "properties.storageAccountSecondaryKey",
        type: {
          name: "String"
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      storageTableEndpoint: {
        serializedName: "properties.storageTableEndpoint",
        type: {
          name: "String"
        }
      },
      useServerDefault: {
        serializedName: "properties.useServerDefault",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerTableAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "ServerTableAuditingPolicy",
  type: {
    name: "Composite",
    className: "ServerTableAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      auditingState: {
        serializedName: "properties.auditingState",
        type: {
          name: "String"
        }
      },
      auditLogsTableName: {
        serializedName: "properties.auditLogsTableName",
        type: {
          name: "String"
        }
      },
      eventTypesToAudit: {
        serializedName: "properties.eventTypesToAudit",
        type: {
          name: "String"
        }
      },
      fullAuditLogsTableName: {
        serializedName: "properties.fullAuditLogsTableName",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "String"
        }
      },
      storageAccountKey: {
        serializedName: "properties.storageAccountKey",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      storageAccountResourceGroupName: {
        serializedName: "properties.storageAccountResourceGroupName",
        type: {
          name: "String"
        }
      },
      storageAccountSecondaryKey: {
        serializedName: "properties.storageAccountSecondaryKey",
        type: {
          name: "String"
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      storageTableEndpoint: {
        serializedName: "properties.storageTableEndpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseTableAuditingPolicyListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseTableAuditingPolicyListResult",
  type: {
    name: "Composite",
    className: "DatabaseTableAuditingPolicyListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseTableAuditingPolicy"
            }
          }
        }
      }
    }
  }
};

export const ServerTableAuditingPolicyListResult: msRest.CompositeMapper = {
  serializedName: "ServerTableAuditingPolicyListResult",
  type: {
    name: "Composite",
    className: "ServerTableAuditingPolicyListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerTableAuditingPolicy"
            }
          }
        }
      }
    }
  }
};

export const ServerUsage: msRest.CompositeMapper = {
  serializedName: "ServerUsage",
  type: {
    name: "Composite",
    className: "ServerUsage",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceName: {
        readOnly: true,
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        readOnly: true,
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DatabaseUsage: msRest.CompositeMapper = {
  serializedName: "DatabaseUsage",
  type: {
    name: "Composite",
    className: "DatabaseUsage",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceName: {
        readOnly: true,
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        readOnly: true,
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RecoverableDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "RecoverableDatabaseListResult",
  type: {
    name: "Composite",
    className: "RecoverableDatabaseListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoverableDatabase"
            }
          }
        }
      }
    }
  }
};

export const RestorableDroppedDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "RestorableDroppedDatabaseListResult",
  type: {
    name: "Composite",
    className: "RestorableDroppedDatabaseListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableDroppedDatabase"
            }
          }
        }
      }
    }
  }
};

export const ServerListResult: msRest.CompositeMapper = {
  serializedName: "ServerListResult",
  type: {
    name: "Composite",
    className: "ServerListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Server"
            }
          }
        }
      }
    }
  }
};

export const DatabaseListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseListResult",
  type: {
    name: "Composite",
    className: "DatabaseListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Database"
            }
          }
        }
      }
    }
  }
};

export const MetricListResult: msRest.CompositeMapper = {
  serializedName: "MetricListResult",
  type: {
    name: "Composite",
    className: "MetricListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metric"
            }
          }
        }
      }
    }
  }
};

export const MetricDefinitionListResult: msRest.CompositeMapper = {
  serializedName: "MetricDefinitionListResult",
  type: {
    name: "Composite",
    className: "MetricDefinitionListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDefinition"
            }
          }
        }
      }
    }
  }
};

export const DataMaskingRuleListResult: msRest.CompositeMapper = {
  serializedName: "DataMaskingRuleListResult",
  type: {
    name: "Composite",
    className: "DataMaskingRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataMaskingRule"
            }
          }
        }
      }
    }
  }
};

export const TransparentDataEncryptionListResult: msRest.CompositeMapper = {
  serializedName: "TransparentDataEncryptionListResult",
  type: {
    name: "Composite",
    className: "TransparentDataEncryptionListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransparentDataEncryption"
            }
          }
        }
      }
    }
  }
};

export const ExtensionListResult: msRest.CompositeMapper = {
  serializedName: "ExtensionListResult",
  type: {
    name: "Composite",
    className: "ExtensionListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const DisasterRecoveryConfigurationListResult: msRest.CompositeMapper = {
  serializedName: "DisasterRecoveryConfigurationListResult",
  type: {
    name: "Composite",
    className: "DisasterRecoveryConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DisasterRecoveryConfiguration"
            }
          }
        }
      }
    }
  }
};

export const ElasticPoolListResult: msRest.CompositeMapper = {
  serializedName: "ElasticPoolListResult",
  type: {
    name: "Composite",
    className: "ElasticPoolListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPool"
            }
          }
        }
      }
    }
  }
};

export const FirewallRuleListResult: msRest.CompositeMapper = {
  serializedName: "FirewallRuleListResult",
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      }
    }
  }
};

export const GeoBackupPolicyListResult: msRest.CompositeMapper = {
  serializedName: "GeoBackupPolicyListResult",
  type: {
    name: "Composite",
    className: "GeoBackupPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoBackupPolicy"
            }
          }
        }
      }
    }
  }
};

export const TopQueriesListResult: msRest.CompositeMapper = {
  serializedName: "TopQueriesListResult",
  type: {
    name: "Composite",
    className: "TopQueriesListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TopQueries"
            }
          }
        }
      }
    }
  }
};

export const QueryStatisticListResult: msRest.CompositeMapper = {
  serializedName: "QueryStatisticListResult",
  type: {
    name: "Composite",
    className: "QueryStatisticListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryStatistic"
            }
          }
        }
      }
    }
  }
};

export const QueryTextListResult: msRest.CompositeMapper = {
  serializedName: "QueryTextListResult",
  type: {
    name: "Composite",
    className: "QueryTextListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryText"
            }
          }
        }
      }
    }
  }
};

export const RecommendedElasticPoolListResult: msRest.CompositeMapper = {
  serializedName: "RecommendedElasticPoolListResult",
  type: {
    name: "Composite",
    className: "RecommendedElasticPoolListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedElasticPool"
            }
          }
        }
      }
    }
  }
};

export const RecommendedElasticPoolListMetricsResult: msRest.CompositeMapper = {
  serializedName: "RecommendedElasticPoolListMetricsResult",
  type: {
    name: "Composite",
    className: "RecommendedElasticPoolListMetricsResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedElasticPoolMetric"
            }
          }
        }
      }
    }
  }
};

export const ReplicationLinkListResult: msRest.CompositeMapper = {
  serializedName: "ReplicationLinkListResult",
  type: {
    name: "Composite",
    className: "ReplicationLinkListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationLink"
            }
          }
        }
      }
    }
  }
};

export const RestorePointListResult: msRest.CompositeMapper = {
  serializedName: "RestorePointListResult",
  type: {
    name: "Composite",
    className: "RestorePointListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorePoint"
            }
          }
        }
      }
    }
  }
};

export const ServerAdministratorListResult: msRest.CompositeMapper = {
  serializedName: "ServerAdministratorListResult",
  type: {
    name: "Composite",
    className: "ServerAdministratorListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerAzureADAdministrator"
            }
          }
        }
      }
    }
  }
};

export const ServerCommunicationLinkListResult: msRest.CompositeMapper = {
  serializedName: "ServerCommunicationLinkListResult",
  type: {
    name: "Composite",
    className: "ServerCommunicationLinkListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerCommunicationLink"
            }
          }
        }
      }
    }
  }
};

export const ServiceObjectiveListResult: msRest.CompositeMapper = {
  serializedName: "ServiceObjectiveListResult",
  type: {
    name: "Composite",
    className: "ServiceObjectiveListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceObjective"
            }
          }
        }
      }
    }
  }
};

export const ElasticPoolActivityListResult: msRest.CompositeMapper = {
  serializedName: "ElasticPoolActivityListResult",
  type: {
    name: "Composite",
    className: "ElasticPoolActivityListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolActivity"
            }
          }
        }
      }
    }
  }
};

export const ElasticPoolDatabaseActivityListResult: msRest.CompositeMapper = {
  serializedName: "ElasticPoolDatabaseActivityListResult",
  type: {
    name: "Composite",
    className: "ElasticPoolDatabaseActivityListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolDatabaseActivity"
            }
          }
        }
      }
    }
  }
};

export const ServiceTierAdvisorListResult: msRest.CompositeMapper = {
  serializedName: "ServiceTierAdvisorListResult",
  type: {
    name: "Composite",
    className: "ServiceTierAdvisorListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceTierAdvisor"
            }
          }
        }
      }
    }
  }
};

export const TransparentDataEncryptionActivityListResult: msRest.CompositeMapper = {
  serializedName: "TransparentDataEncryptionActivityListResult",
  type: {
    name: "Composite",
    className: "TransparentDataEncryptionActivityListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransparentDataEncryptionActivity"
            }
          }
        }
      }
    }
  }
};

export const ServerUsageListResult: msRest.CompositeMapper = {
  serializedName: "ServerUsageListResult",
  type: {
    name: "Composite",
    className: "ServerUsageListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerUsage"
            }
          }
        }
      }
    }
  }
};

export const DatabaseUsageListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseUsageListResult",
  type: {
    name: "Composite",
    className: "DatabaseUsageListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseUsage"
            }
          }
        }
      }
    }
  }
};
