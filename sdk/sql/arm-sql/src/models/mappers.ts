/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const DatabaseOperation: msRest.CompositeMapper = {
  serializedName: "DatabaseOperation",
  type: {
    name: "Composite",
    className: "DatabaseOperation",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "properties.operation",
        type: {
          name: "String"
        }
      },
      operationFriendlyName: {
        readOnly: true,
        serializedName: "properties.operationFriendlyName",
        type: {
          name: "String"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "properties.errorCode",
        type: {
          name: "Number"
        }
      },
      errorDescription: {
        readOnly: true,
        serializedName: "properties.errorDescription",
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        readOnly: true,
        serializedName: "properties.errorSeverity",
        type: {
          name: "Number"
        }
      },
      isUserError: {
        readOnly: true,
        serializedName: "properties.isUserError",
        type: {
          name: "Boolean"
        }
      },
      estimatedCompletionTime: {
        readOnly: true,
        serializedName: "properties.estimatedCompletionTime",
        type: {
          name: "DateTime"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      isCancellable: {
        readOnly: true,
        serializedName: "properties.isCancellable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ElasticPoolOperation: msRest.CompositeMapper = {
  serializedName: "ElasticPoolOperation",
  type: {
    name: "Composite",
    className: "ElasticPoolOperation",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      elasticPoolName: {
        readOnly: true,
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "properties.operation",
        type: {
          name: "String"
        }
      },
      operationFriendlyName: {
        readOnly: true,
        serializedName: "properties.operationFriendlyName",
        type: {
          name: "String"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "properties.errorCode",
        type: {
          name: "Number"
        }
      },
      errorDescription: {
        readOnly: true,
        serializedName: "properties.errorDescription",
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        readOnly: true,
        serializedName: "properties.errorSeverity",
        type: {
          name: "Number"
        }
      },
      isUserError: {
        readOnly: true,
        serializedName: "properties.isUserError",
        type: {
          name: "Boolean"
        }
      },
      estimatedCompletionTime: {
        readOnly: true,
        serializedName: "properties.estimatedCompletionTime",
        type: {
          name: "DateTime"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      isCancellable: {
        readOnly: true,
        serializedName: "properties.isCancellable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanError: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentScanError",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanError",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanRecord: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentScanRecord",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanRecord",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      scanId: {
        readOnly: true,
        serializedName: "properties.scanId",
        type: {
          name: "String"
        }
      },
      triggerType: {
        readOnly: true,
        serializedName: "properties.triggerType",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      errors: {
        readOnly: true,
        serializedName: "properties.errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VulnerabilityAssessmentScanError"
            }
          }
        }
      },
      storageContainerPath: {
        readOnly: true,
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      numberOfFailedSecurityChecks: {
        readOnly: true,
        serializedName: "properties.numberOfFailedSecurityChecks",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentScansExport: msRest.CompositeMapper = {
  serializedName: "DatabaseVulnerabilityAssessmentScansExport",
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentScansExport",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      exportedReportLocation: {
        readOnly: true,
        serializedName: "properties.exportedReportLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentRuleBaselineItem: msRest.CompositeMapper = {
  serializedName: "DatabaseVulnerabilityAssessmentRuleBaselineItem",
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentRuleBaselineItem",
    modelProperties: {
      result: {
        required: true,
        serializedName: "result",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentRuleBaseline: msRest.CompositeMapper = {
  serializedName: "DatabaseVulnerabilityAssessmentRuleBaseline",
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentRuleBaseline",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      baselineResults: {
        required: true,
        serializedName: "properties.baselineResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseVulnerabilityAssessmentRuleBaselineItem"
            }
          }
        }
      }
    }
  }
};

export const VulnerabilityAssessmentRecurringScansProperties: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentRecurringScansProperties",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentRecurringScansProperties",
    modelProperties: {
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      emailSubscriptionAdmins: {
        serializedName: "emailSubscriptionAdmins",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      emails: {
        serializedName: "emails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessment: msRest.CompositeMapper = {
  serializedName: "DatabaseVulnerabilityAssessment",
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageContainerPath: {
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "properties.recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const MaxSizeCapability: msRest.CompositeMapper = {
  serializedName: "MaxSizeCapability",
  type: {
    name: "Composite",
    className: "MaxSizeCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogSizeCapability: msRest.CompositeMapper = {
  serializedName: "LogSizeCapability",
  type: {
    name: "Composite",
    className: "LogSizeCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaxSizeRangeCapability: msRest.CompositeMapper = {
  serializedName: "MaxSizeRangeCapability",
  type: {
    name: "Composite",
    className: "MaxSizeRangeCapability",
    modelProperties: {
      minValue: {
        readOnly: true,
        serializedName: "minValue",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      maxValue: {
        readOnly: true,
        serializedName: "maxValue",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      scaleSize: {
        readOnly: true,
        serializedName: "scaleSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      logSize: {
        readOnly: true,
        serializedName: "logSize",
        type: {
          name: "Composite",
          className: "LogSizeCapability"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PerformanceLevelCapability: msRest.CompositeMapper = {
  serializedName: "PerformanceLevelCapability",
  type: {
    name: "Composite",
    className: "PerformanceLevelCapability",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LicenseTypeCapability: msRest.CompositeMapper = {
  serializedName: "LicenseTypeCapability",
  type: {
    name: "Composite",
    className: "LicenseTypeCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceObjectiveCapability: msRest.CompositeMapper = {
  serializedName: "ServiceObjectiveCapability",
  type: {
    name: "Composite",
    className: "ServiceObjectiveCapability",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedMaxSizes: {
        readOnly: true,
        serializedName: "supportedMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeRangeCapability"
            }
          }
        }
      },
      performanceLevel: {
        readOnly: true,
        serializedName: "performanceLevel",
        type: {
          name: "Composite",
          className: "PerformanceLevelCapability"
        }
      },
      sku: {
        readOnly: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      supportedLicenseTypes: {
        readOnly: true,
        serializedName: "supportedLicenseTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LicenseTypeCapability"
            }
          }
        }
      },
      includedMaxSize: {
        readOnly: true,
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EditionCapability: msRest.CompositeMapper = {
  serializedName: "EditionCapability",
  type: {
    name: "Composite",
    className: "EditionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedServiceLevelObjectives: {
        readOnly: true,
        serializedName: "supportedServiceLevelObjectives",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceObjectiveCapability"
            }
          }
        }
      },
      zoneRedundant: {
        readOnly: true,
        serializedName: "zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseMinPerformanceLevelCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerDatabaseMinPerformanceLevelCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseMinPerformanceLevelCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseMaxPerformanceLevelCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      supportedPerDatabaseMinPerformanceLevels: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMinPerformanceLevels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerDatabaseMinPerformanceLevelCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerformanceLevelCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerformanceLevelCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolPerformanceLevelCapability",
    modelProperties: {
      performanceLevel: {
        readOnly: true,
        serializedName: "performanceLevel",
        type: {
          name: "Composite",
          className: "PerformanceLevelCapability"
        }
      },
      sku: {
        readOnly: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      supportedLicenseTypes: {
        readOnly: true,
        serializedName: "supportedLicenseTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LicenseTypeCapability"
            }
          }
        }
      },
      maxDatabaseCount: {
        readOnly: true,
        serializedName: "maxDatabaseCount",
        type: {
          name: "Number"
        }
      },
      includedMaxSize: {
        readOnly: true,
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      supportedMaxSizes: {
        readOnly: true,
        serializedName: "supportedMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeRangeCapability"
            }
          }
        }
      },
      supportedPerDatabaseMaxSizes: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeRangeCapability"
            }
          }
        }
      },
      supportedPerDatabaseMaxPerformanceLevels: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMaxPerformanceLevels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolEditionCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolEditionCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolEditionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedElasticPoolPerformanceLevels: {
        readOnly: true,
        serializedName: "supportedElasticPoolPerformanceLevels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerformanceLevelCapability"
            }
          }
        }
      },
      zoneRedundant: {
        readOnly: true,
        serializedName: "zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerVersionCapability: msRest.CompositeMapper = {
  serializedName: "ServerVersionCapability",
  type: {
    name: "Composite",
    className: "ServerVersionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedEditions: {
        readOnly: true,
        serializedName: "supportedEditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EditionCapability"
            }
          }
        }
      },
      supportedElasticPoolEditions: {
        readOnly: true,
        serializedName: "supportedElasticPoolEditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolEditionCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceVcoresCapability: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceVcoresCapability",
  type: {
    name: "Composite",
    className: "ManagedInstanceVcoresCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceFamilyCapability: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceFamilyCapability",
  type: {
    name: "Composite",
    className: "ManagedInstanceFamilyCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      sku: {
        readOnly: true,
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      supportedLicenseTypes: {
        readOnly: true,
        serializedName: "supportedLicenseTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LicenseTypeCapability"
            }
          }
        }
      },
      supportedVcoresValues: {
        readOnly: true,
        serializedName: "supportedVcoresValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceVcoresCapability"
            }
          }
        }
      },
      includedMaxSize: {
        readOnly: true,
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      supportedStorageSizes: {
        readOnly: true,
        serializedName: "supportedStorageSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeRangeCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceEditionCapability: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceEditionCapability",
  type: {
    name: "Composite",
    className: "ManagedInstanceEditionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedFamilies: {
        readOnly: true,
        serializedName: "supportedFamilies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceFamilyCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceVersionCapability: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceVersionCapability",
  type: {
    name: "Composite",
    className: "ManagedInstanceVersionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedEditions: {
        readOnly: true,
        serializedName: "supportedEditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceEditionCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocationCapabilities: msRest.CompositeMapper = {
  serializedName: "LocationCapabilities",
  type: {
    name: "Composite",
    className: "LocationCapabilities",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedServerVersions: {
        readOnly: true,
        serializedName: "supportedServerVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVersionCapability"
            }
          }
        }
      },
      supportedManagedInstanceVersions: {
        readOnly: true,
        serializedName: "supportedManagedInstanceVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceVersionCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Database: msRest.CompositeMapper = {
  serializedName: "Database",
  type: {
    name: "Composite",
    className: "Database",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      managedBy: {
        readOnly: true,
        serializedName: "managedBy",
        type: {
          name: "String"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      sampleName: {
        serializedName: "properties.sampleName",
        type: {
          name: "String"
        }
      },
      elasticPoolId: {
        serializedName: "properties.elasticPoolId",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      databaseId: {
        readOnly: true,
        serializedName: "properties.databaseId",
        type: {
          name: "Uuid"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      currentServiceObjectiveName: {
        readOnly: true,
        serializedName: "properties.currentServiceObjectiveName",
        type: {
          name: "String"
        }
      },
      requestedServiceObjectiveName: {
        readOnly: true,
        serializedName: "properties.requestedServiceObjectiveName",
        type: {
          name: "String"
        }
      },
      defaultSecondaryLocation: {
        readOnly: true,
        serializedName: "properties.defaultSecondaryLocation",
        type: {
          name: "String"
        }
      },
      failoverGroupId: {
        readOnly: true,
        serializedName: "properties.failoverGroupId",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      sourceDatabaseDeletionDate: {
        serializedName: "properties.sourceDatabaseDeletionDate",
        type: {
          name: "DateTime"
        }
      },
      recoveryServicesRecoveryPointId: {
        serializedName: "properties.recoveryServicesRecoveryPointId",
        type: {
          name: "String"
        }
      },
      longTermRetentionBackupResourceId: {
        serializedName: "properties.longTermRetentionBackupResourceId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      restorableDroppedDatabaseId: {
        serializedName: "properties.restorableDroppedDatabaseId",
        type: {
          name: "String"
        }
      },
      catalogCollation: {
        serializedName: "properties.catalogCollation",
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      maxLogSizeBytes: {
        readOnly: true,
        serializedName: "properties.maxLogSizeBytes",
        type: {
          name: "Number"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      },
      readScale: {
        serializedName: "properties.readScale",
        type: {
          name: "String"
        }
      },
      readReplicaCount: {
        serializedName: "properties.readReplicaCount",
        type: {
          name: "Number"
        }
      },
      currentSku: {
        readOnly: true,
        serializedName: "properties.currentSku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      autoPauseDelay: {
        serializedName: "properties.autoPauseDelay",
        type: {
          name: "Number"
        }
      },
      minCapacity: {
        serializedName: "properties.minCapacity",
        type: {
          name: "Number"
        }
      },
      pausedDate: {
        readOnly: true,
        serializedName: "properties.pausedDate",
        type: {
          name: "DateTime"
        }
      },
      resumedDate: {
        readOnly: true,
        serializedName: "properties.resumedDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DatabaseUpdate: msRest.CompositeMapper = {
  serializedName: "DatabaseUpdate",
  type: {
    name: "Composite",
    className: "DatabaseUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      sampleName: {
        serializedName: "properties.sampleName",
        type: {
          name: "String"
        }
      },
      elasticPoolId: {
        serializedName: "properties.elasticPoolId",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      databaseId: {
        readOnly: true,
        serializedName: "properties.databaseId",
        type: {
          name: "Uuid"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      currentServiceObjectiveName: {
        readOnly: true,
        serializedName: "properties.currentServiceObjectiveName",
        type: {
          name: "String"
        }
      },
      requestedServiceObjectiveName: {
        readOnly: true,
        serializedName: "properties.requestedServiceObjectiveName",
        type: {
          name: "String"
        }
      },
      defaultSecondaryLocation: {
        readOnly: true,
        serializedName: "properties.defaultSecondaryLocation",
        type: {
          name: "String"
        }
      },
      failoverGroupId: {
        readOnly: true,
        serializedName: "properties.failoverGroupId",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      sourceDatabaseDeletionDate: {
        serializedName: "properties.sourceDatabaseDeletionDate",
        type: {
          name: "DateTime"
        }
      },
      recoveryServicesRecoveryPointId: {
        serializedName: "properties.recoveryServicesRecoveryPointId",
        type: {
          name: "String"
        }
      },
      longTermRetentionBackupResourceId: {
        serializedName: "properties.longTermRetentionBackupResourceId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      restorableDroppedDatabaseId: {
        serializedName: "properties.restorableDroppedDatabaseId",
        type: {
          name: "String"
        }
      },
      catalogCollation: {
        serializedName: "properties.catalogCollation",
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      maxLogSizeBytes: {
        readOnly: true,
        serializedName: "properties.maxLogSizeBytes",
        type: {
          name: "Number"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      },
      readScale: {
        serializedName: "properties.readScale",
        type: {
          name: "String"
        }
      },
      readReplicaCount: {
        serializedName: "properties.readReplicaCount",
        type: {
          name: "Number"
        }
      },
      currentSku: {
        readOnly: true,
        serializedName: "properties.currentSku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      autoPauseDelay: {
        serializedName: "properties.autoPauseDelay",
        type: {
          name: "Number"
        }
      },
      minCapacity: {
        serializedName: "properties.minCapacity",
        type: {
          name: "Number"
        }
      },
      pausedDate: {
        readOnly: true,
        serializedName: "properties.pausedDate",
        type: {
          name: "DateTime"
        }
      },
      resumedDate: {
        readOnly: true,
        serializedName: "properties.resumedDate",
        type: {
          name: "DateTime"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ResourceMoveDefinition: msRest.CompositeMapper = {
  serializedName: "ResourceMoveDefinition",
  type: {
    name: "Composite",
    className: "ResourceMoveDefinition",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseSettings: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerDatabaseSettings",
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseSettings",
    modelProperties: {
      minCapacity: {
        serializedName: "minCapacity",
        type: {
          name: "Number"
        }
      },
      maxCapacity: {
        serializedName: "maxCapacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ElasticPool: msRest.CompositeMapper = {
  serializedName: "ElasticPool",
  type: {
    name: "Composite",
    className: "ElasticPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      perDatabaseSettings: {
        serializedName: "properties.perDatabaseSettings",
        type: {
          name: "Composite",
          className: "ElasticPoolPerDatabaseSettings"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolUpdate: msRest.CompositeMapper = {
  serializedName: "ElasticPoolUpdate",
  type: {
    name: "Composite",
    className: "ElasticPoolUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      perDatabaseSettings: {
        serializedName: "properties.perDatabaseSettings",
        type: {
          name: "Composite",
          className: "ElasticPoolPerDatabaseSettings"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const InstanceFailoverGroupReadWriteEndpoint: msRest.CompositeMapper = {
  serializedName: "InstanceFailoverGroupReadWriteEndpoint",
  type: {
    name: "Composite",
    className: "InstanceFailoverGroupReadWriteEndpoint",
    modelProperties: {
      failoverPolicy: {
        required: true,
        serializedName: "failoverPolicy",
        type: {
          name: "String"
        }
      },
      failoverWithDataLossGracePeriodMinutes: {
        serializedName: "failoverWithDataLossGracePeriodMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InstanceFailoverGroupReadOnlyEndpoint: msRest.CompositeMapper = {
  serializedName: "InstanceFailoverGroupReadOnlyEndpoint",
  type: {
    name: "Composite",
    className: "InstanceFailoverGroupReadOnlyEndpoint",
    modelProperties: {
      failoverPolicy: {
        serializedName: "failoverPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerRegionInfo: msRest.CompositeMapper = {
  serializedName: "PartnerRegionInfo",
  type: {
    name: "Composite",
    className: "PartnerRegionInfo",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      replicationRole: {
        readOnly: true,
        serializedName: "replicationRole",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstancePairInfo: msRest.CompositeMapper = {
  serializedName: "ManagedInstancePairInfo",
  type: {
    name: "Composite",
    className: "ManagedInstancePairInfo",
    modelProperties: {
      primaryManagedInstanceId: {
        serializedName: "primaryManagedInstanceId",
        type: {
          name: "String"
        }
      },
      partnerManagedInstanceId: {
        serializedName: "partnerManagedInstanceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstanceFailoverGroup: msRest.CompositeMapper = {
  serializedName: "InstanceFailoverGroup",
  type: {
    name: "Composite",
    className: "InstanceFailoverGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      readWriteEndpoint: {
        required: true,
        serializedName: "properties.readWriteEndpoint",
        type: {
          name: "Composite",
          className: "InstanceFailoverGroupReadWriteEndpoint"
        }
      },
      readOnlyEndpoint: {
        serializedName: "properties.readOnlyEndpoint",
        type: {
          name: "Composite",
          className: "InstanceFailoverGroupReadOnlyEndpoint"
        }
      },
      replicationRole: {
        readOnly: true,
        serializedName: "properties.replicationRole",
        type: {
          name: "String"
        }
      },
      replicationState: {
        readOnly: true,
        serializedName: "properties.replicationState",
        type: {
          name: "String"
        }
      },
      partnerRegions: {
        required: true,
        serializedName: "properties.partnerRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartnerRegionInfo"
            }
          }
        }
      },
      managedInstancePairs: {
        required: true,
        serializedName: "properties.managedInstancePairs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstancePairInfo"
            }
          }
        }
      }
    }
  }
};

export const BackupShortTermRetentionPolicy: msRest.CompositeMapper = {
  serializedName: "BackupShortTermRetentionPolicy",
  type: {
    name: "Composite",
    className: "BackupShortTermRetentionPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TdeCertificate: msRest.CompositeMapper = {
  serializedName: "TdeCertificate",
  type: {
    name: "Composite",
    className: "TdeCertificate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateBlob: {
        required: true,
        serializedName: "properties.privateBlob",
        type: {
          name: "String"
        }
      },
      certPassword: {
        serializedName: "properties.certPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceKey: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceKey",
  type: {
    name: "Composite",
    className: "ManagedInstanceKey",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        required: true,
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ManagedInstanceEncryptionProtector: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceEncryptionProtector",
  type: {
    name: "Composite",
    className: "ManagedInstanceEncryptionProtector",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      serverKeyName: {
        serializedName: "properties.serverKeyName",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        required: true,
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        readOnly: true,
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoverableManagedDatabase: msRest.CompositeMapper = {
  serializedName: "RecoverableManagedDatabase",
  type: {
    name: "Composite",
    className: "RecoverableManagedDatabase",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      lastAvailableBackupDate: {
        readOnly: true,
        serializedName: "properties.lastAvailableBackupDate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseOperationListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseOperationListResult",
  type: {
    name: "Composite",
    className: "DatabaseOperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseOperation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolOperationListResult: msRest.CompositeMapper = {
  serializedName: "ElasticPoolOperationListResult",
  type: {
    name: "Composite",
    className: "ElasticPoolOperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolOperation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanRecordListResult: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentScanRecordListResult",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanRecordListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VulnerabilityAssessmentScanRecord"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseVulnerabilityAssessmentListResult",
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseListResult",
  type: {
    name: "Composite",
    className: "DatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Database"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolListResult: msRest.CompositeMapper = {
  serializedName: "ElasticPoolListResult",
  type: {
    name: "Composite",
    className: "ElasticPoolListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPool"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstanceFailoverGroupListResult: msRest.CompositeMapper = {
  serializedName: "InstanceFailoverGroupListResult",
  type: {
    name: "Composite",
    className: "InstanceFailoverGroupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceFailoverGroup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupShortTermRetentionPolicyListResult: msRest.CompositeMapper = {
  serializedName: "BackupShortTermRetentionPolicyListResult",
  type: {
    name: "Composite",
    className: "BackupShortTermRetentionPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupShortTermRetentionPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceKeyListResult: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceKeyListResult",
  type: {
    name: "Composite",
    className: "ManagedInstanceKeyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceKey"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceEncryptionProtectorListResult: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceEncryptionProtectorListResult",
  type: {
    name: "Composite",
    className: "ManagedInstanceEncryptionProtectorListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceEncryptionProtector"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoverableManagedDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "RecoverableManagedDatabaseListResult",
  type: {
    name: "Composite",
    className: "RecoverableManagedDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoverableManagedDatabase"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
