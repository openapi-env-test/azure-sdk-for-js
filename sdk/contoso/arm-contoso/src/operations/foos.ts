/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Foos } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { Contoso } from "../contoso";
import { FoosGetOptionalParams, FoosGetResponse } from "../models";

/** Class containing Foos operations. */
export class FoosImpl implements Foos {
  private readonly client: Contoso;

  /**
   * Initialize a new instance of the class Foos class.
   * @param client Reference to the service client
   */
  constructor(client: Contoso) {
    this.client = client;
  }

  /**
   * This is a sample get operation
   * @param resourceGroupName The name of the resource group.
   * @param fooName The name of the Foo
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    fooName: string,
    options?: FoosGetOptionalParams
  ): Promise<FoosGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, fooName, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Contoso/foos/{fooName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Result
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.fooName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
