/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/usageAggregatesMappers";
import * as Parameters from "../models/parameters";
import { UsageManagementClientContext } from "../usageManagementClientContext";

/** Class representing a UsageAggregates. */
export class UsageAggregates {
  private readonly client: UsageManagementClientContext;

  /**
   * Create a UsageAggregates.
   * @param {UsageManagementClientContext} client Reference to the service client.
   */
  constructor(client: UsageManagementClientContext) {
    this.client = client;
  }

  /**
   * Test Query aggregated Azure subscription consumption data for a date range.
   * @param reportedStartTime The start of the time range to retrieve data for.
   * @param reportedEndTime The end of the time range to retrieve data for.
   * @param [options] The optional parameters
   * @returns Promise<Models.UsageAggregatesTestResponse>
   */
  test(reportedStartTime: Date | string, reportedEndTime: Date | string, options?: Models.UsageAggregatesTestOptionalParams): Promise<Models.UsageAggregatesTestResponse>;
  /**
   * @param reportedStartTime The start of the time range to retrieve data for.
   * @param reportedEndTime The end of the time range to retrieve data for.
   * @param callback The callback
   */
  test(reportedStartTime: Date | string, reportedEndTime: Date | string, callback: msRest.ServiceCallback<Models.UsageAggregationListResult>): void;
  /**
   * @param reportedStartTime The start of the time range to retrieve data for.
   * @param reportedEndTime The end of the time range to retrieve data for.
   * @param options The optional parameters
   * @param callback The callback
   */
  test(reportedStartTime: Date | string, reportedEndTime: Date | string, options: Models.UsageAggregatesTestOptionalParams, callback: msRest.ServiceCallback<Models.UsageAggregationListResult>): void;
  test(reportedStartTime: Date | string, reportedEndTime: Date | string, options?: Models.UsageAggregatesTestOptionalParams | msRest.ServiceCallback<Models.UsageAggregationListResult>, callback?: msRest.ServiceCallback<Models.UsageAggregationListResult>): Promise<Models.UsageAggregatesTestResponse> {
    return this.client.sendOperationRequest(
      {
        reportedStartTime,
        reportedEndTime,
        options
      },
      testOperationSpec,
      callback) as Promise<Models.UsageAggregatesTestResponse>;
  }

  /**
   * Test Query aggregated Azure subscription consumption data for a date range.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param reportedStartTime The start of the time range to retrieve data for.
   * @param reportedEndTime The end of the time range to retrieve data for.
   * @param [options] The optional parameters
   * @returns Promise<Models.UsageAggregatesTestNextResponse>
   */
  testNext(nextPageLink: string, reportedStartTime: Date | string, reportedEndTime: Date | string, options?: Models.UsageAggregatesTestNextOptionalParams): Promise<Models.UsageAggregatesTestNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param reportedStartTime The start of the time range to retrieve data for.
   * @param reportedEndTime The end of the time range to retrieve data for.
   * @param callback The callback
   */
  testNext(nextPageLink: string, reportedStartTime: Date | string, reportedEndTime: Date | string, callback: msRest.ServiceCallback<Models.UsageAggregationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param reportedStartTime The start of the time range to retrieve data for.
   * @param reportedEndTime The end of the time range to retrieve data for.
   * @param options The optional parameters
   * @param callback The callback
   */
  testNext(nextPageLink: string, reportedStartTime: Date | string, reportedEndTime: Date | string, options: Models.UsageAggregatesTestNextOptionalParams, callback: msRest.ServiceCallback<Models.UsageAggregationListResult>): void;
  testNext(nextPageLink: string, reportedStartTime: Date | string, reportedEndTime: Date | string, options?: Models.UsageAggregatesTestNextOptionalParams | msRest.ServiceCallback<Models.UsageAggregationListResult>, callback?: msRest.ServiceCallback<Models.UsageAggregationListResult>): Promise<Models.UsageAggregatesTestNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        reportedStartTime,
        reportedEndTime,
        options
      },
      testNextOperationSpec,
      callback) as Promise<Models.UsageAggregatesTestNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const testOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Commerce/UsageAggregates",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.reportedStartTime,
    Parameters.reportedEndTime,
    Parameters.showDetails,
    Parameters.aggregationGranularity,
    Parameters.continuationToken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsageAggregationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const testNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.reportedStartTime,
    Parameters.reportedEndTime,
    Parameters.showDetails,
    Parameters.aggregationGranularity,
    Parameters.continuationToken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsageAggregationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
