/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the request to list REST API operations */
export interface ProviderOperationResult {
  /** List of operations supported by the resource provider. */
  value?: OperationMetadata[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The REST API operation supported by DevTestLab ResourceProvider. */
export interface OperationMetadata {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** The object that describes the operations */
  display?: OperationMetadataDisplay;
}

/** The object that describes the operations */
export interface OperationMetadataDisplay {
  /** Friendly name of the resource provider */
  provider?: string;
  /** Resource type on which the operation is performed. */
  resource?: string;
  /** Operation type: read, write, delete, listKeys/action, etc. */
  operation?: string;
  /** Friendly name of the operation */
  description?: string;
}

/** Error from a REST request. */
export interface CloudError {
  /** The cloud error that occurred */
  error?: CloudErrorBody;
}

/** Body of an error from a REST request. */
export interface CloudErrorBody {
  /** The error code. */
  code?: string;
  /** The error message. */
  message?: string;
  /** The error target. */
  target?: string;
  /** Inner errors. */
  details?: CloudErrorBody[];
}

/** Contains a list of labs and their properties */
export interface LabList {
  /** List of labs and their properties */
  value?: Lab[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location?: string;
}

/** An Operation Result */
export interface OperationResult {
  /** The operation status. */
  status?: string;
  /** The status code for the operation. */
  statusCode?: HttpStatusCode;
  /** The error code of the operation error. */
  code?: string;
  /** The error message of the operation error. */
  message?: string;
}

/** Contains a list of schedules and their properties */
export interface ScheduleList {
  /** List of schedules and their properties */
  value?: Schedule[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Contains a list of artifactSources and their properties */
export interface ArtifactSourceList {
  /** List of artifactSources and their properties */
  value?: ArtifactSource[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Contains a list of armTemplates and their properties */
export interface ArmTemplateList {
  /** List of armTemplates and their properties */
  value?: ArmTemplate[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** A file containing a set of parameter values for an ARM template. */
export interface ParametersValueFileInfo {
  /** File name. */
  fileName?: string;
  /** Contents of the file. */
  parametersValueInfo?: Record<string, unknown>;
}

/** Contains a list of artifacts and their properties */
export interface ArtifactList {
  /** List of artifacts and their properties */
  value?: Artifact[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Parameters for generating an ARM template for deploying artifacts. */
export interface GenerateArmTemplateRequest {
  /** The resource name of the virtual machine. */
  virtualMachineName?: string;
  /** The parameters of the ARM template. */
  parameters?: ParameterInfo[];
  /** The location of the virtual machine. */
  location?: string;
  /** Options for uploading the files for the artifact. UploadFilesAndGenerateSasTokens is the default value. */
  fileUploadOptions?: FileUploadOptions;
}

/** Information about an artifact's parameter. */
export interface ParameterInfo {
  /** The name of the artifact parameter. */
  name?: string;
  /** The value of the artifact parameter. */
  value?: string;
}

/** Information about a generated ARM template. */
export interface ArmTemplateInfo {
  /** The template's contents. */
  template?: Record<string, unknown>;
  /** The parameters of the ARM template. */
  parameters?: Record<string, unknown>;
}

/** Represents an update resource */
export interface UpdateResource {
  /** The tags of the resource. */
  tags?: { [propertyName: string]: string };
}

/** Properties of a cost threshold item. */
export interface CostThresholdProperties {
  /** The ID of the cost threshold item. */
  thresholdId?: string;
  /** Indicates whether this threshold will be displayed on cost charts. */
  displayOnChart?: CostThresholdStatus;
  /** Indicates whether notifications will be sent when this threshold is exceeded. */
  sendNotificationWhenExceeded?: CostThresholdStatus;
  /** Indicates the datetime when notifications were last sent for this threshold. */
  notificationSent?: string;
  /** The cost threshold value. */
  thresholdValue?: number;
}

/** The properties of a lab cost item. */
export interface LabCostDetailsProperties {
  /** The date of the cost item. */
  date?: Date;
  /** The cost component of the cost item. */
  cost?: number;
  /** The type of the cost. */
  costType?: CostType;
}

/** The properties of a resource cost item. */
export interface LabResourceCostProperties {
  /** The name of the resource. */
  resourcename?: string;
  /** The unique identifier of the resource. */
  resourceUId?: string;
  /** The cost component of the resource cost item. */
  resourceCost?: number;
  /** The logical resource type (ex. virtualmachine, storageaccount) */
  resourceType?: string;
  /** The owner of the resource (ex. janedoe@microsoft.com) */
  resourceOwner?: string;
  /** The category of the resource (ex. Premium_LRS, Standard_DS1) */
  resourcePricingTier?: string;
  /** The status of the resource (ex. Active) */
  resourceStatus?: string;
  /** The ID of the resource */
  resourceId?: string;
  /** The ID of the external resource */
  externalResourceId?: string;
}

/** Contains a list of customImages and their properties */
export interface CustomImageList {
  /** List of customImages and their properties */
  value?: CustomImage[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Storage information about the data disks present in the custom image */
export interface DataDiskStorageTypeInfo {
  /** Disk Lun */
  lun?: string;
  /** Disk Storage Type */
  storageType?: StorageType;
}

/** Contains a list of formulas and their properties */
export interface FormulaList {
  /** List of formulas and their properties */
  value?: Formula[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Properties for creating a virtual machine. */
export interface LabVirtualMachineCreationParameter {
  /** The name of the virtual machine or environment */
  name?: string;
  /** The location of the new virtual machine or environment */
  location?: string;
  /** The tags of the resource. */
  tags?: { [propertyName: string]: string };
  /** The notes of the virtual machine. */
  notes?: string;
  /** The object identifier of the owner of the virtual machine. */
  ownerObjectId?: string;
  /** The user principal name of the virtual machine owner. */
  ownerUserPrincipalName?: string;
  /**
   * The object identifier of the creator of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByUserId?: string;
  /**
   * The email address of creator of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByUser?: string;
  /** The creation date of the virtual machine. */
  createdDatePropertiesCreatedDate?: Date;
  /**
   * The resource identifier (Microsoft.Compute) of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly computeId?: string;
  /** The custom image identifier of the virtual machine. */
  customImageId?: string;
  /** The shared gallery image version resource identifier of the virtual machine. */
  galleryImageVersionId?: string;
  /** The shared image resource identifier of the virtual machine. */
  sharedImageId?: string;
  /** The shared image version for the specified shared image Id. Will use latest if not specified. */
  sharedImageVersion?: string;
  /**
   * The OS type of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osTypePropertiesOsType?: string;
  /** The size of the virtual machine. */
  size?: string;
  /** The user name of the virtual machine. */
  userName?: string;
  /** The password of the virtual machine administrator. */
  password?: string;
  /** The SSH key of the virtual machine administrator. */
  sshKey?: string;
  /** Indicates whether this virtual machine uses an SSH key for authentication. */
  isAuthenticationWithSshKey?: boolean;
  /**
   * The fully-qualified domain name of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /** The lab subnet name of the virtual machine. */
  labSubnetName?: string;
  /** The lab virtual network identifier of the virtual machine. */
  labVirtualNetworkId?: string;
  /** Indicates whether the virtual machine is to be created without a public IP address. */
  disallowPublicIpAddress?: boolean;
  /** The artifacts to be installed on the virtual machine. */
  artifacts?: ArtifactInstallProperties[];
  /** The id of the plan associated with the virtual machine image */
  planId?: string;
  /** Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. */
  osDiskSizeGb?: number;
  /** The expiration date for VM. */
  expirationDate?: Date;
  /** Indicates whether another user can take ownership of the virtual machine */
  allowClaim?: boolean;
  /** Storage type to use for virtual machine (i.e. Standard, Premium, StandardSSD). */
  storageType?: StorageType;
  /**
   * Tells source of creation of lab virtual machine. Output property only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachineCreationSource?: VirtualMachineCreationSource;
  /** The resource ID of the environment that contains this virtual machine, if any. */
  environmentId?: string;
  /** New or existing data disks to attach to the virtual machine after creation */
  dataDiskParameters?: DataDiskProperties[];
  /** Virtual Machine schedules to be created */
  scheduleParameters?: ScheduleCreationParameter[];
  /**
   * Last known compute power state captured in DTL
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastKnownPowerState?: string;
  /**
   * Flag to determine if apply artifacts can be triggered at the time of fetching the document.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly canApplyArtifacts?: boolean;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesUniqueIdentifier?: string;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesApplicableScheduleId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesApplicableScheduleName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesApplicableScheduleType?: string;
  /** Resource tags. */
  tagsPropertiesApplicableScheduleTags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  locationPropertiesApplicableScheduleLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesApplicableScheduleSystemData?: SystemData;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesApplicableSchedulePropertiesLabVmsStartupId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesApplicableSchedulePropertiesLabVmsStartupName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesApplicableSchedulePropertiesLabVmsStartupType?: string;
  /** Resource tags. */
  tagsPropertiesApplicableSchedulePropertiesLabVmsStartupTags?: {
    [propertyName: string]: string;
  };
  /** The geo-location where the resource lives */
  locationPropertiesApplicableSchedulePropertiesLabVmsStartupLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesApplicableSchedulePropertiesLabVmsStartupSystemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskTypePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTaskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneIdPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTimeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDatePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesCreatedDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceIdPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTargetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesUniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutesPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsTimeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrlPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsWebhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipientPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsEmailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocalePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsNotificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minutePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesHourlyRecurrenceMinute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdaysPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceWeekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceTime?: string;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesApplicableSchedulePropertiesLabVmsShutdownId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesApplicableSchedulePropertiesLabVmsShutdownName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesApplicableSchedulePropertiesLabVmsShutdownType?: string;
  /** Resource tags. */
  tagsPropertiesApplicableSchedulePropertiesLabVmsShutdownTags?: {
    [propertyName: string]: string;
  };
  /** The geo-location where the resource lives */
  locationPropertiesApplicableSchedulePropertiesLabVmsShutdownLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesApplicableSchedulePropertiesLabVmsShutdownSystemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskTypePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTaskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneIdPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTimeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDatePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesCreatedDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceIdPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTargetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesUniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutesPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsTimeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrlPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsWebhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipientPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsEmailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocalePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsNotificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minutePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesHourlyRecurrenceMinute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdaysPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceWeekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceTime?: string;
  /** The resource ID of the virtual network. */
  virtualNetworkId?: string;
  /** The resource ID of the sub net. */
  subnetId?: string;
  /** The resource ID of the public IP address. */
  publicIpAddressId?: string;
  /** The public IP address. */
  publicIpAddress?: string;
  /** The private IP address. */
  privateIpAddress?: string;
  /** The DNS name. */
  dnsName?: string;
  /** The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol). */
  rdpAuthority?: string;
  /** The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH. */
  sshAuthority?: string;
  /** The incoming NAT rules */
  inboundNatRules?: InboundNatRule[];
  /** Gets the statuses of the virtual machine. */
  statuses?: ComputeVmInstanceViewStatus[];
  /** Gets the OS type of the virtual machine. */
  osTypePropertiesComputeVmOsType?: string;
  /** Gets the size of the virtual machine. */
  vmSize?: string;
  /** Gets the network interface ID of the virtual machine. */
  networkInterfaceId?: string;
  /** Gets OS disk blob uri for the virtual machine. */
  osDiskId?: string;
  /** Gets data disks blob uri for the virtual machine. */
  dataDiskIds?: string[];
  /** Gets all data disks attached to the virtual machine. */
  dataDisks?: ComputeDataDisk[];
  /** The offer of the gallery image. */
  offer?: string;
  /** The publisher of the gallery image. */
  publisher?: string;
  /** The SKU of the gallery image. */
  sku?: string;
  /** The OS type of the gallery image. */
  osTypePropertiesGalleryImageReferenceOsType?: string;
  /** The version of the gallery image. */
  version?: string;
  /** The deployment status of the artifact. */
  deploymentStatus?: string;
  /** The total count of the artifacts that were successfully applied. */
  artifactsApplied?: number;
  /** The total count of the artifacts that were tentatively applied. */
  totalArtifacts?: number;
  /** The number of virtual machine instances to create. */
  instanceCount?: number;
}

/** Properties of an artifact. */
export interface ArtifactInstallProperties {
  /** The artifact's identifier. */
  artifactId?: string;
  /** The artifact's title. */
  artifactTitle?: string;
  /** The parameters of the artifact. */
  parameters?: ArtifactParameterProperties[];
  /** The status of the artifact. */
  status?: string;
  /** The status message from the deployment. */
  deploymentStatusMessage?: string;
  /** The status message from the virtual machine extension. */
  vmExtensionStatusMessage?: string;
  /** The time that the artifact starts to install on the virtual machine. */
  installTime?: Date;
}

/** Properties of an artifact parameter. */
export interface ArtifactParameterProperties {
  /** The name of the artifact parameter. */
  name?: string;
  /** The value of the artifact parameter. */
  value?: string;
}

/** Status information about a virtual machine. */
export interface ComputeVmInstanceViewStatus {
  /** Gets the status Code. */
  code?: string;
  /** Gets the short localizable label for the status. */
  displayStatus?: string;
  /** Gets the message associated with the status. */
  message?: string;
}

/** A data disks attached to a virtual machine. */
export interface ComputeDataDisk {
  /** Gets data disk name. */
  name?: string;
  /** When backed by a blob, the URI of underlying blob. */
  diskUri?: string;
  /** When backed by managed disk, this is the ID of the compute disk resource. */
  managedDiskId?: string;
  /** Gets data disk size in GiB. */
  diskSizeGiB?: number;
}

/** A rule for NAT - exposing a VM's port (backendPort) on the public IP address using a load balancer. */
export interface InboundNatRule {
  /** The transport protocol for the endpoint. */
  transportProtocol?: TransportProtocol;
  /** The external endpoint port of the inbound connection. Possible values range between 1 and 65535, inclusive. If unspecified, a value will be allocated automatically. */
  frontendPort?: number;
  /** The port to which the external traffic will be redirected. */
  backendPort?: number;
}

/** Request body for adding a new or existing data disk to a virtual machine. */
export interface DataDiskProperties {
  /** Specifies the existing lab disk id to attach to virtual machine. */
  existingLabDiskId?: string;
  /** Caching option for a data disk (i.e. None, ReadOnly, ReadWrite). */
  hostCaching?: HostCachingOptions;
  /** Size of the disk to be attached in Gibibytes. */
  diskSizeGiB?: number;
  /** The name of the disk to be attached. */
  diskName?: string;
  /** The storage type for the disk (i.e. Standard, Premium). */
  diskType?: StorageType;
}

/** Properties for creating a schedule. */
export interface ScheduleCreationParameter {
  /** The name of the virtual machine or environment */
  name?: string;
  /**
   * The location of the new virtual machine or environment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /** The tags of the resource. */
  tags?: { [propertyName: string]: string };
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesWeeklyRecurrenceTime?: string;
}

/** Contains a list of galleryImages and their properties */
export interface GalleryImageList {
  /** List of galleryImages and their properties */
  value?: GalleryImage[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Contains a list of notificationChannels and their properties */
export interface NotificationChannelList {
  /** List of notificationChannels and their properties */
  value?: NotificationChannel[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** An event to be notified for. */
export interface Event {
  /** The event type for which this notification is enabled (i.e. AutoShutdown, Cost) */
  eventName?: NotificationChannelEventType;
}

/** Properties for generating a Notification. */
export interface NotifyParameters {
  /** The type of event (i.e. AutoShutdown, Cost) */
  eventName?: NotificationChannelEventType;
  /** Properties for the notification in json format. */
  jsonPayload?: string;
}

/** Contains a list of policySets and their properties */
export interface PolicySetList {
  /**
   * List of policySets and their properties
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: PolicySet[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Request body for evaluating a policy set. */
export interface EvaluatePoliciesRequest {
  /** Policies to evaluate. */
  policies?: EvaluatePoliciesProperties[];
}

/** Properties for evaluating a policy set. */
export interface EvaluatePoliciesProperties {
  /** The fact name. */
  factName?: string;
  /** The fact data. */
  factData?: string;
  /** The value offset. */
  valueOffset?: string;
  /** The user for which policies will be evaluated */
  userObjectId?: string;
}

/** Response body for evaluating a policy set. */
export interface EvaluatePoliciesResponse {
  /** Results of evaluating a policy set. */
  results?: PolicySetResult[];
}

/** Result of a policy set evaluation. */
export interface PolicySetResult {
  /** A value indicating whether this policy set evaluation has discovered violations. */
  hasError?: boolean;
  /** The list of policy violations. */
  policyViolations?: PolicyViolation[];
}

/** Policy violation. */
export interface PolicyViolation {
  /** The code of the policy violation. */
  code?: string;
  /** The message of the policy violation. */
  message?: string;
}

/** Contains a list of policies and their properties */
export interface PolicyList {
  /** List of policies and their properties */
  value?: Policy[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Contains a list of secrets and their properties */
export interface LabSecretList {
  /** List of secrets and their properties */
  value?: LabSecret[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Contains a list of serviceRunners and their properties */
export interface ServiceRunnerList {
  /** List of serviceRunners and their properties */
  value?: ServiceRunner[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Contains a list of sharedGalleries and their properties */
export interface SharedGalleryList {
  /** List of sharedGalleries and their properties */
  value?: SharedGallery[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Contains a list of sharedImages and their properties */
export interface SharedImageList {
  /** List of sharedImages and their properties */
  value?: SharedImage[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Properties for a shared image version. */
export interface ImageVersionProperties {
  /** Image version name */
  name?: string;
}

/** Contains a list of users and their properties */
export interface UserList {
  /** List of users and their properties */
  value?: User[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Contains a list of disks and their properties */
export interface DiskList {
  /** List of disks and their properties */
  value?: Disk[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Properties of the disk to attach. */
export interface AttachDiskProperties {
  /** The resource ID of the Lab virtual machine to which the disk is attached. */
  leasedByLabVmId?: string;
}

/** Properties of the disk to detach. */
export interface DetachDiskProperties {
  /** The resource ID of the Lab VM to which the disk is attached. */
  leasedByLabVmId?: string;
}

/** Contains a list of environments and their properties */
export interface DtlEnvironmentList {
  /** List of environments and their properties */
  value?: DtlEnvironment[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Properties of an Azure Resource Manager template parameter. */
export interface ArmTemplateParameterProperties {
  /** The name of the template parameter. */
  name?: string;
  /** The value of the template parameter. */
  value?: string;
}

/** Contains a list of secrets and their properties */
export interface SecretList {
  /** List of secrets and their properties */
  value?: Secret[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Contains a list of serviceFabrics and their properties */
export interface ServiceFabricList {
  /** List of serviceFabrics and their properties */
  value?: ServiceFabric[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Contains a list of virtualMachines and their properties */
export interface LabVirtualMachineList {
  /** List of virtualMachines and their properties */
  value?: LabVirtualMachine[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Request body for applying artifacts to a virtual machine. */
export interface ApplyArtifactsRequest {
  /** The list of artifacts to apply. */
  artifacts?: ArtifactInstallProperties[];
}

/** Request body for detaching data disk from a virtual machine. */
export interface DetachDataDiskProperties {
  /** Specifies the disk resource ID to detach from virtual machine. */
  existingLabDiskId?: string;
}

/** Represents a .rdp file */
export interface RdpConnection {
  /** The contents of the .rdp file */
  contents?: string;
}

/** Request body for resizing a virtual machine. */
export interface ResizeLabVirtualMachineProperties {
  /** Specifies the size of the virtual machine. */
  size?: string;
}

/** Contains a list of virtualNetworks and their properties */
export interface VirtualNetworkList {
  /** List of virtualNetworks and their properties */
  value?: VirtualNetwork[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Subnet information. */
export interface Subnet {
  /** The resource ID of the subnet. */
  resourceId?: string;
  /** The name of the subnet as seen in the lab. */
  labSubnetName?: string;
  /** The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)). */
  allowPublicIp?: UsagePermissionType;
}

/** Subnet information as returned by the Microsoft.Network API. */
export interface ExternalSubnet {
  /** Gets or sets the identifier. */
  id?: string;
  /** Gets or sets the name. */
  name?: string;
}

/** Property overrides on a subnet of a virtual network. */
export interface SubnetOverride {
  /** The resource ID of the subnet. */
  resourceId?: string;
  /** The name given to the subnet within the lab. */
  labSubnetName?: string;
  /** Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny). */
  useInVmCreationPermission?: UsagePermissionType;
  /** Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny). */
  usePublicIpAddressPermission?: UsagePermissionType;
  /** The virtual network pool associated with this subnet. */
  virtualNetworkPoolName?: string;
  /** Backend ports that virtual machines on this subnet are allowed to expose */
  allowedPorts?: Port[];
}

/** Properties of a network port. */
export interface Port {
  /** Protocol type of the port. */
  transportProtocol?: TransportProtocol;
  /** Backend port of the target virtual machine. */
  backendPort?: number;
}

/** Contains a list of bastionHosts and their properties */
export interface BastionHostList {
  /** List of bastionHosts and their properties */
  value?: BastionHost[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** The parameters of the export operation. */
export interface ExportResourceUsageParameters {
  /** The blob storage absolute sas uri with write permission to the container which the usage data needs to be uploaded to. */
  blobStorageAbsoluteSasUri?: string;
  /** The start time of the usage. If not provided, usage will be reported since the beginning of data collection. */
  usageStartDate?: Date;
}

/** Properties for generating an upload URI. */
export interface GenerateUploadUriParameter {
  /** The blob name of the upload URI. */
  blobName?: string;
}

/** Response body for generating an upload URI. */
export interface GenerateUploadUriResponse {
  /** The upload URI for the VHD. */
  uploadUri?: string;
}

/** This represents the payload required to import a virtual machine from a different lab into the current one */
export interface ImportLabVirtualMachineRequest {
  /** The full resource ID of the virtual machine to be imported. */
  sourceVirtualMachineResourceId?: string;
  /** The name of the virtual machine in the destination lab */
  destinationVirtualMachineName?: string;
}

/** Contains a list of Lab Vhd and their properties */
export interface LabVhdList {
  /** List of Lab Vhd and their properties */
  value?: LabVhd[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Properties of a VHD in the lab. */
export interface LabVhd {
  /** The URI to the VHD. */
  id?: string;
}

/** Properties for retargeting a virtual machine schedule. */
export interface RetargetScheduleProperties {
  /** The resource Id of the virtual machine on which the schedule operates */
  currentResourceId?: string;
  /** The resource Id of the virtual machine that the schedule should be retargeted to */
  targetResourceId?: string;
}

/** Properties for plan on a custom image. */
export interface CustomImagePropertiesFromPlanFragment {
  /** The id of the plan, equivalent to name of the plan */
  id?: string;
  /** The publisher for the plan from the marketplace image the custom image is derived from */
  publisher?: string;
  /** The offer for the plan from the marketplace image the custom image is derived from */
  offer?: string;
}

/** Contains a list of costs and their properties */
export interface LabCostList {
  /** List of costs and their properties */
  value?: LabCost[];
  /** URL to get the next set of operation list results if there are any */
  nextLink?: string;
}

/** Properties of a weekly schedule. */
export interface WeekDetailsFragment {
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdays?: string[];
  /** The time of the day the schedule will occur. */
  time?: string;
}

/** The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set. */
export interface ResourceModelWithAllowedPropertySet {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The geo-location where the resource lives */
  location?: string;
  /** The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource. */
  managedBy?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  identity?: ResourceModelWithAllowedPropertySetIdentity;
  sku?: ResourceModelWithAllowedPropertySetSku;
  plan?: ResourceModelWithAllowedPropertySetPlan;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. */
  type?: "SystemAssigned";
}

/** The resource model definition representing SKU */
export interface Sku {
  /** The name of the SKU. Ex - P3. It is typically a letter+number code */
  name: string;
  /** This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. */
  tier?: SkuTier;
  /** The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. */
  size?: string;
  /** If the service has different generations of hardware, for the same SKU, then that can be captured here. */
  family?: string;
  /** If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. */
  capacity?: number;
}

/** Plan for the resource. */
export interface Plan {
  /** A user defined name of the 3rd Party Artifact that is being procured. */
  name: string;
  /** The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic */
  publisher: string;
  /** The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. */
  product: string;
  /** A publisher provided promotion code as provisioned in Data Market for the said product/artifact. */
  promotionCode?: string;
  /** The version of the desired product/artifact. */
  version?: string;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The current status of an async operation. */
export interface OperationStatusResult {
  /** Fully qualified ID for the async operation. */
  id?: string;
  /** Name of the async operation. */
  name?: string;
  /** Operation status. */
  status: string;
  /** Percent of the operation that is complete. */
  percentComplete?: number;
  /** The start time of the operation. */
  startTime?: Date;
  /** The end time of the operation. */
  endTime?: Date;
  /** The operations list. */
  operations?: OperationStatusResult[];
  /** If present, details of the operation error. */
  error?: ErrorDetail;
}

/** Metadata pertaining to the geographic location of the resource. */
export interface LocationData {
  /** A canonical name for the geographic or physical location. */
  name: string;
  /** The city or locality where the resource is located. */
  city?: string;
  /** The district, state, or province where the resource is located. */
  district?: string;
  /** The country or region where the resource is located */
  countryOrRegion?: string;
}

/** Configuration of key for data encryption */
export interface EncryptionProperties {
  /** Indicates whether or not the encryption is enabled for container registry. */
  status?: EncryptionStatus;
  /** Key vault properties. */
  keyVaultProperties?: KeyVaultProperties;
}

export interface KeyVaultProperties {
  /** Key vault uri to access the encryption key. */
  keyIdentifier?: string;
  /** The client ID of the identity which will be used to access key vault. */
  identity?: string;
}

/** The check availability request body. */
export interface CheckNameAvailabilityRequest {
  /** The name of the resource for which availability needs to be checked. */
  name?: string;
  /** The resource type. */
  type?: string;
}

/** The check availability result. */
export interface CheckNameAvailabilityResponse {
  /** Indicates if the resource name is available. */
  nameAvailable?: boolean;
  /** The reason why the given name is not available. */
  reason?: CheckNameAvailabilityReason;
  /** Detailed reason why the given name is available. */
  message?: string;
}

/** A lab. */
export type Lab = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Type of identity (SystemAssigned, UserAssigned, None) */
  typeIdentityType?: ManagedIdentityType;
  /** The principal id of resource identity. */
  principalId?: string;
  /** The tenant identifier of resource. */
  tenantId?: string;
  /** The client secret URL of the identity. */
  clientSecretUrl?: string;
  /** If Type is 'UserAssigned': List of user assigned identities. */
  userAssignedIdentities?: { [propertyName: string]: Record<string, unknown> };
  /**
   * The lab's default storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultStorageAccount?: string;
  /**
   * The lab's default premium storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultPremiumStorageAccount?: string;
  /**
   * The lab's artifact storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly artifactsStorageAccount?: string;
  /**
   * The lab's premium data disk storage account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly premiumDataDiskStorageAccount?: string;
  /**
   * The lab's Key vault.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vaultName?: string;
  /** Type of storage used by the lab. It can be either Premium or Standard. Default is Premium. */
  labStorageType?: StorageType;
  /** The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user. */
  mandatoryArtifactsResourceIdsLinux?: string[];
  /** The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user. */
  mandatoryArtifactsResourceIdsWindows?: string[];
  /**
   * The creation date of the lab.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The setting to enable usage of premium data disks.
   * When its value is 'Enabled', creation of standard or premium data disks is allowed.
   * When its value is 'Disabled', only creation of standard data disks is allowed.
   */
  premiumDataDisks?: PremiumDataDisk;
  /** The access rights to be granted to the user when provisioning an environment */
  environmentPermission?: EnvironmentPermission;
  /**
   * The resource group ID in which all new lab virtual machines will be created. Ex: /subscriptions/subId/resourceGroups/rgName To let DevTest Labs manage resource group creation, set this value to null.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmCreationResourceGroup?: string;
  /**
   * The public IP address for the lab's load balancer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicIpId?: string;
  /**
   * The load balancer used to for lab VMs that use shared IP address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly loadBalancerId?: string;
  /**
   * The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkSecurityGroupId?: string;
  /** Extended properties of the lab used for experimental features */
  extendedProperties?: { [propertyName: string]: string };
  /** Is browser connect enabled for the lab */
  browserConnect?: EnableStatus;
  /** Is auto upgrade of CSE disabled for the lab? */
  disableAutoUpgradeCseMinorVersion?: boolean;
  /** List of identities which can be used for management of resources. */
  managementIdentities?: { [propertyName: string]: Record<string, unknown> };
  /** Indicates whether to create Lab resources (e.g. Storage accounts and Key Vaults) in network isolation. */
  isolateLabResources?: EnableStatus;
  /** Default secret for creating virtual machines. */
  defaultSecretName?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesUniqueIdentifier?: string;
  /** Gets or sets resourceId of the disk encryption set to use for enabling encryption at rest. */
  diskEncryptionSetId?: string;
  /** Gets or sets the type of key used to encrypt the data of the disk. Possible values include: 'EncryptionAtRestWithPlatformKey', 'EncryptionAtRestWithCustomerKey' */
  typePropertiesEncryptionType?: EncryptionType;
  /** Is the lab support banner active/enabled at this time? */
  enabledPropertiesSupportEnabled?: EnableStatus;
  /** The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown. */
  markdownPropertiesSupportMarkdown?: string;
  /** The plain text title for the lab announcement */
  title?: string;
  /** The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown. */
  markdownPropertiesAnnouncementMarkdown?: string;
  /** Is the lab announcement active/enabled at this time? */
  enabledPropertiesAnnouncementEnabled?: EnableStatus;
  /** The time at which the announcement expires (null for never) */
  expirationDate?: Date;
  /** Has this announcement expired? */
  expired?: boolean;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesAnnouncementProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesAnnouncementUniqueIdentifier?: string;
};

/** A schedule. */
export type Schedule = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesWeeklyRecurrenceTime?: string;
};

/** Properties of an artifact source. */
export type ArtifactSource = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The artifact source's display name. */
  displayName?: string;
  /** The artifact source's URI. */
  uri?: string;
  /** The artifact source's type. */
  sourceType?: SourceControlType;
  /** The folder containing artifacts. */
  folderPath?: string;
  /** The folder containing Azure Resource Manager templates. */
  armTemplateFolderPath?: string;
  /** The artifact source's branch reference. */
  branchRef?: string;
  /** The security token to authenticate to the artifact source. */
  securityToken?: string;
  /** Indicates if the artifact source is enabled (values: Enabled, Disabled). */
  status?: EnableStatus;
  /**
   * The artifact source's creation date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** An Azure Resource Manager template. */
export type ArmTemplate = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The display name of the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * The description of the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The publisher of the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publisher?: string;
  /**
   * The URI to the icon of the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly icon?: string;
  /**
   * The contents of the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly contents?: Record<string, unknown>;
  /**
   * The creation date of the armTemplate.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * File name and parameter values information from all azuredeploy.*.parameters.json for the ARM template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly parametersValueFilesInfo?: ParametersValueFileInfo[];
  /**
   * Whether or not ARM template is enabled for use by lab user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enabled?: boolean;
};

/** An artifact. */
export type Artifact = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The artifact's title.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly title?: string;
  /**
   * The artifact's description.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The artifact's publisher.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publisher?: string;
  /**
   * The file path to the artifact.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly filePath?: string;
  /**
   * The URI to the artifact icon.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly icon?: string;
  /**
   * The artifact's target OS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetOsType?: string;
  /**
   * The artifact's parameters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly parameters?: Record<string, unknown>;
  /**
   * The artifact's creation date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
};

/** A cost item. */
export type LabCost = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The lab cost details component of the cost data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly labCostDetails?: LabCostDetailsProperties[];
  /**
   * The resource cost component of the cost data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceCosts?: LabResourceCostProperties[];
  /** The currency code of the cost. */
  currencyCode?: string;
  /** The start time of the cost data. */
  startDateTime?: Date;
  /** The end time of the cost data. */
  endDateTime?: Date;
  /** The creation date of the cost. */
  createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
  /** The cost component of the cost item. */
  estimatedLabCost?: number;
  /** Target cost status */
  status?: TargetCostStatus;
  /** Lab target cost */
  target?: number;
  /** Cost thresholds. */
  costThresholds?: CostThresholdProperties[];
  /** Reporting cycle start date. */
  cycleStartDateTime?: Date;
  /** Reporting cycle end date. */
  cycleEndDateTime?: Date;
  /** Reporting cycle type. */
  cycleType?: ReportingCycleType;
};

/** A custom image. */
export type CustomImage = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The description of the custom image. */
  description?: string;
  /** The author of the custom image. */
  author?: string;
  /**
   * The creation date of the custom image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /** The Managed Image Id backing the custom image. */
  managedImageId?: string;
  /** The Managed Snapshot Id backing the custom image. */
  managedSnapshotId?: string;
  /** Storage information about the data disks present in the custom image */
  dataDiskStorageInfo?: DataDiskStorageTypeInfo[];
  /** Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment */
  isPlanAuthorized?: boolean;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
  /** The id of the plan, equivalent to name of the plan */
  idPropertiesCustomImagePlanId?: string;
  /** The publisher for the plan from the marketplace image the custom image is derived from */
  publisher?: string;
  /** The offer for the plan from the marketplace image the custom image is derived from */
  offer?: string;
  /** The image name. */
  imageName?: string;
  /** Indicates whether sysprep has been run on the VHD. */
  sysPrep?: boolean;
  /** The OS type of the custom image (i.e. Windows, Linux) */
  osType?: CustomImageOsType;
  /** The source vm identifier. */
  sourceVmId?: string;
  /** The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied). */
  linuxOsState?: LinuxOsState;
  /** The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied). */
  windowsOsState?: WindowsOsState;
};

/** Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level. */
export type ApplicableSchedule = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesLabVmsStartupId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesLabVmsStartupName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesLabVmsStartupType?: string;
  /** Resource tags. */
  tagsPropertiesLabVmsStartupTags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  locationPropertiesLabVmsStartupLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesLabVmsStartupSystemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesLabVmsStartupPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskTypePropertiesLabVmsStartupPropertiesTaskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneIdPropertiesLabVmsStartupPropertiesTimeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDatePropertiesLabVmsStartupPropertiesCreatedDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceIdPropertiesLabVmsStartupPropertiesTargetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesLabVmsStartupPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesLabVmsStartupPropertiesUniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesLabVmsStartupPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutesPropertiesLabVmsStartupPropertiesNotificationSettingsTimeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrlPropertiesLabVmsStartupPropertiesNotificationSettingsWebhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipientPropertiesLabVmsStartupPropertiesNotificationSettingsEmailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocalePropertiesLabVmsStartupPropertiesNotificationSettingsNotificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minutePropertiesLabVmsStartupPropertiesHourlyRecurrenceMinute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesLabVmsStartupPropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdaysPropertiesLabVmsStartupPropertiesWeeklyRecurrenceWeekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesLabVmsStartupPropertiesWeeklyRecurrenceTime?: string;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesLabVmsShutdownId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesLabVmsShutdownName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesLabVmsShutdownType?: string;
  /** Resource tags. */
  tagsPropertiesLabVmsShutdownTags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  locationPropertiesLabVmsShutdownLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesLabVmsShutdownSystemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesLabVmsShutdownPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskTypePropertiesLabVmsShutdownPropertiesTaskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneIdPropertiesLabVmsShutdownPropertiesTimeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDatePropertiesLabVmsShutdownPropertiesCreatedDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceIdPropertiesLabVmsShutdownPropertiesTargetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesLabVmsShutdownPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesLabVmsShutdownPropertiesUniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesLabVmsShutdownPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutesPropertiesLabVmsShutdownPropertiesNotificationSettingsTimeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrlPropertiesLabVmsShutdownPropertiesNotificationSettingsWebhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipientPropertiesLabVmsShutdownPropertiesNotificationSettingsEmailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocalePropertiesLabVmsShutdownPropertiesNotificationSettingsNotificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minutePropertiesLabVmsShutdownPropertiesHourlyRecurrenceMinute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesLabVmsShutdownPropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdaysPropertiesLabVmsShutdownPropertiesWeeklyRecurrenceWeekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceTime?: string;
};

/** A formula for creating a VM, specifying an image base and other parameters */
export type Formula = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The description of the formula. */
  description?: string;
  /**
   * The author of the formula.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly author?: string;
  /** The OS type of the formula. */
  osTypePropertiesOsType?: string;
  /**
   * The creation date of the formula.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesUniqueIdentifier?: string;
  /** The identifier of the VM from which a formula is to be created. */
  labVmId?: string;
  /** The name of the virtual machine or environment */
  namePropertiesFormulaContentName?: string;
  /** The location of the new virtual machine or environment */
  locationPropertiesFormulaContentLocation?: string;
  /** The tags of the resource. */
  tagsPropertiesFormulaContentTags?: { [propertyName: string]: string };
  /** The notes of the virtual machine. */
  notes?: string;
  /** The object identifier of the owner of the virtual machine. */
  ownerObjectId?: string;
  /** The user principal name of the virtual machine owner. */
  ownerUserPrincipalName?: string;
  /**
   * The object identifier of the creator of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByUserId?: string;
  /**
   * The email address of creator of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByUser?: string;
  /** The creation date of the virtual machine. */
  createdDatePropertiesFormulaContentPropertiesCreatedDate?: Date;
  /**
   * The resource identifier (Microsoft.Compute) of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly computeId?: string;
  /** The custom image identifier of the virtual machine. */
  customImageId?: string;
  /** The shared gallery image version resource identifier of the virtual machine. */
  galleryImageVersionId?: string;
  /** The shared image resource identifier of the virtual machine. */
  sharedImageId?: string;
  /** The shared image version for the specified shared image Id. Will use latest if not specified. */
  sharedImageVersion?: string;
  /**
   * The OS type of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osTypePropertiesFormulaContentPropertiesOsType?: string;
  /** The size of the virtual machine. */
  size?: string;
  /** The user name of the virtual machine. */
  userName?: string;
  /** The password of the virtual machine administrator. */
  password?: string;
  /** The SSH key of the virtual machine administrator. */
  sshKey?: string;
  /** Indicates whether this virtual machine uses an SSH key for authentication. */
  isAuthenticationWithSshKey?: boolean;
  /**
   * The fully-qualified domain name of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /** The lab subnet name of the virtual machine. */
  labSubnetName?: string;
  /** The lab virtual network identifier of the virtual machine. */
  labVirtualNetworkId?: string;
  /** Indicates whether the virtual machine is to be created without a public IP address. */
  disallowPublicIpAddress?: boolean;
  /** The artifacts to be installed on the virtual machine. */
  artifacts?: ArtifactInstallProperties[];
  /** The id of the plan associated with the virtual machine image */
  planId?: string;
  /** Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. */
  osDiskSizeGb?: number;
  /** The expiration date for VM. */
  expirationDate?: Date;
  /** Indicates whether another user can take ownership of the virtual machine */
  allowClaim?: boolean;
  /** Storage type to use for virtual machine (i.e. Standard, Premium, StandardSSD). */
  storageType?: StorageType;
  /**
   * Tells source of creation of lab virtual machine. Output property only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachineCreationSource?: VirtualMachineCreationSource;
  /** The resource ID of the environment that contains this virtual machine, if any. */
  environmentId?: string;
  /** New or existing data disks to attach to the virtual machine after creation */
  dataDiskParameters?: DataDiskProperties[];
  /** Virtual Machine schedules to be created */
  scheduleParameters?: ScheduleCreationParameter[];
  /**
   * Last known compute power state captured in DTL
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastKnownPowerState?: string;
  /**
   * Flag to determine if apply artifacts can be triggered at the time of fetching the document.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly canApplyArtifacts?: boolean;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesFormulaContentPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesFormulaContentPropertiesUniqueIdentifier?: string;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesFormulaContentPropertiesApplicableScheduleId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesFormulaContentPropertiesApplicableScheduleName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesFormulaContentPropertiesApplicableScheduleType?: string;
  /** Resource tags. */
  tagsPropertiesFormulaContentPropertiesApplicableScheduleTags?: {
    [propertyName: string]: string;
  };
  /** The geo-location where the resource lives */
  locationPropertiesFormulaContentPropertiesApplicableScheduleLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesFormulaContentPropertiesApplicableScheduleSystemData?: SystemData;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupType?: string;
  /** Resource tags. */
  tagsPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupTags?: {
    [propertyName: string]: string;
  };
  /** The geo-location where the resource lives */
  locationPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupSystemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskTypePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTaskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneIdPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTimeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDatePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesCreatedDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceIdPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTargetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesUniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutesPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsTimeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrlPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsWebhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipientPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsEmailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocalePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsNotificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minutePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesHourlyRecurrenceMinute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdaysPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceWeekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceTime?: string;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownType?: string;
  /** Resource tags. */
  tagsPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownTags?: {
    [propertyName: string]: string;
  };
  /** The geo-location where the resource lives */
  locationPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownSystemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskTypePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTaskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneIdPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTimeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDatePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesCreatedDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceIdPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTargetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesUniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutesPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsTimeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrlPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsWebhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipientPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsEmailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocalePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsNotificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minutePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesHourlyRecurrenceMinute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdaysPropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceWeekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesFormulaContentPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceTime?: string;
  /** The resource ID of the virtual network. */
  virtualNetworkId?: string;
  /** The resource ID of the sub net. */
  subnetId?: string;
  /** The resource ID of the public IP address. */
  publicIpAddressId?: string;
  /** The public IP address. */
  publicIpAddress?: string;
  /** The private IP address. */
  privateIpAddress?: string;
  /** The DNS name. */
  dnsName?: string;
  /** The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol). */
  rdpAuthority?: string;
  /** The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH. */
  sshAuthority?: string;
  /** The incoming NAT rules */
  inboundNatRules?: InboundNatRule[];
  /** Gets the statuses of the virtual machine. */
  statuses?: ComputeVmInstanceViewStatus[];
  /** Gets the OS type of the virtual machine. */
  osTypePropertiesFormulaContentPropertiesComputeVmOsType?: string;
  /** Gets the size of the virtual machine. */
  vmSize?: string;
  /** Gets the network interface ID of the virtual machine. */
  networkInterfaceId?: string;
  /** Gets OS disk blob uri for the virtual machine. */
  osDiskId?: string;
  /** Gets data disks blob uri for the virtual machine. */
  dataDiskIds?: string[];
  /** Gets all data disks attached to the virtual machine. */
  dataDisks?: ComputeDataDisk[];
  /** The offer of the gallery image. */
  offer?: string;
  /** The publisher of the gallery image. */
  publisher?: string;
  /** The SKU of the gallery image. */
  sku?: string;
  /** The OS type of the gallery image. */
  osTypePropertiesFormulaContentPropertiesGalleryImageReferenceOsType?: string;
  /** The version of the gallery image. */
  version?: string;
  /** The deployment status of the artifact. */
  deploymentStatus?: string;
  /** The total count of the artifacts that were successfully applied. */
  artifactsApplied?: number;
  /** The total count of the artifacts that were tentatively applied. */
  totalArtifacts?: number;
  /** The number of virtual machine instances to create. */
  instanceCount?: number;
};

/** A gallery image. */
export type GalleryImage = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The author of the gallery image. */
  author?: string;
  /**
   * The creation date of the gallery image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /** The description of the gallery image. */
  description?: string;
  /** The icon of the gallery image. */
  icon?: string;
  /** Indicates whether this gallery image is enabled. */
  enabled?: boolean;
  /** The third party plan that applies to this image */
  planId?: string;
  /** Indicates if the plan has been authorized for programmatic deployment. */
  isPlanAuthorized?: boolean;
  /** The offer of the gallery image. */
  offer?: string;
  /** The publisher of the gallery image. */
  publisher?: string;
  /** The SKU of the gallery image. */
  sku?: string;
  /** The OS type of the gallery image. */
  osType?: string;
  /** The version of the gallery image. */
  version?: string;
};

/** A notification. */
export type NotificationChannel = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The webhook URL to send notifications to. */
  webHookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocale?: string;
  /** Description of notification. */
  description?: string;
  /** The list of event for which this notification is enabled. */
  events?: Event[];
  /**
   * The creation date of the notification channel.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A PolicySet. */
export type PolicySet = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A Policy. */
export type Policy = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The description of the policy. */
  description?: string;
  /** The status of the policy. */
  status?: PolicyStatus;
  /** The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. */
  factName?: PolicyFactName;
  /** The fact data of the policy. */
  factData?: string;
  /** The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy). */
  threshold?: string;
  /** The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy). */
  evaluatorType?: PolicyEvaluatorType;
  /**
   * The creation date of the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A shared secret in a lab. */
export type LabSecret = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The value of the secret for secret creation. */
  value?: string;
  /**
   * The name of the entry in the lab KeyVault.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyVaultEntry?: string;
  /** Is the secret enabled for use with artifacts? */
  enabledForArtifacts?: boolean;
  /** Is the secret enabled for use with creation of VMs? */
  enabledForVmCreation?: boolean;
  /** Is the secret enabled for use with ARM environments? */
  enabledForArmEnvironments?: boolean;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A container for a managed identity to execute DevTest lab services. */
export type ServiceRunner = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Type of identity (SystemAssigned, UserAssigned, None) */
  typeIdentityType?: ManagedIdentityType;
  /** The principal id of resource identity. */
  principalId?: string;
  /** The tenant identifier of resource. */
  tenantId?: string;
  /** The client secret URL of the identity. */
  clientSecretUrl?: string;
  /** If Type is 'UserAssigned': List of user assigned identities. */
  userAssignedIdentities?: { [propertyName: string]: Record<string, unknown> };
  /** The purpose of bringing the identity to the lab. Ex: To use during Environment creation or to deploy on the VMs. */
  identityUsageType?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** Properties of a shared gallery */
export type SharedGallery = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The shared image gallery resource Id */
  galleryId?: string;
  /** Enables all images in the gallery to be available in the lab for VM creation. This will override the EnableState on shared images */
  allowAllImages?: EnableState;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** Properties of a shared image */
export type SharedImage = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Shared Image definition name in shared image gallery */
  definitionName?: string;
  /** The operating system of the image */
  osType?: OsType;
  /** The type of image in the gallery (generalized or specialized) */
  imageType?: ImageType;
  /** Whether or not the image is enabled. */
  enableState?: EnableState;
  /** Display name of the image */
  displayName?: string;
  /** List of image versions in definition */
  versions?: ImageVersionProperties[];
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** Profile of a lab user. */
export type User = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The creation date of the user profile.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
  /** The URI of the user's Key vault. */
  keyVaultUri?: string;
  /** The ID of the user's Key vault. */
  keyVaultId?: string;
  /** Set to the principal name / UPN of the client JWT making the request. */
  principalName?: string;
  /** Set to the principal Id of the client JWT making the request. Service principal will not have the principal Id. */
  principalId?: string;
  /** Set to the tenant ID of the client JWT making the request. */
  tenantId?: string;
  /** Set to the object Id of the client JWT making the request. Not all users have object Id. For CSP (reseller) scenarios for example, object Id is not available. */
  objectId?: string;
  /** Set to the app Id of the client JWT making the request. */
  appId?: string;
};

/** A Disk. */
export type Disk = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The storage type for the disk (i.e. Standard, Premium). */
  diskType?: StorageType;
  /** The size of the disk in Gibibytes. */
  diskSizeGiB?: number;
  /** The resource ID of the VM to which this disk is leased. */
  leasedByLabVmId?: string;
  /** When backed by a blob, the name of the VHD blob without extension. */
  diskBlobName?: string;
  /** When backed by a blob, the URI of underlying blob. */
  diskUri?: string;
  /** When backed by a blob, the storage account where the blob is. */
  storageAccountId?: string;
  /**
   * The creation date of the disk.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /** The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite). */
  hostCaching?: string;
  /** When backed by managed disk, this is the ID of the compute disk resource. */
  managedDiskId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** An environment, which is essentially an ARM template deployment. */
export type DtlEnvironment = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The display name of the Azure Resource Manager template that produced the environment. */
  armTemplateDisplayName?: string;
  /**
   * The identifier of the resource group containing the environment's resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceGroupId?: string;
  /**
   * The creator of the environment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByUser?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
  /** The Azure Resource Manager template's identifier. */
  armTemplateId?: string;
  /** The parameters of the Azure Resource Manager template. */
  parameters?: ArmTemplateParameterProperties[];
};

/** A secret. */
export type Secret = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The value of the secret for secret creation. */
  value?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A Service Fabric. */
export type ServiceFabric = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The backing service fabric resource's id */
  externalServiceFabricId?: string;
  /** The resource id of the environment under which the service fabric resource is present */
  environmentId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesUniqueIdentifier?: string;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesApplicableScheduleId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesApplicableScheduleName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesApplicableScheduleType?: string;
  /** Resource tags. */
  tagsPropertiesApplicableScheduleTags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  locationPropertiesApplicableScheduleLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesApplicableScheduleSystemData?: SystemData;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesApplicableSchedulePropertiesLabVmsStartupId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesApplicableSchedulePropertiesLabVmsStartupName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesApplicableSchedulePropertiesLabVmsStartupType?: string;
  /** Resource tags. */
  tagsPropertiesApplicableSchedulePropertiesLabVmsStartupTags?: {
    [propertyName: string]: string;
  };
  /** The geo-location where the resource lives */
  locationPropertiesApplicableSchedulePropertiesLabVmsStartupLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesApplicableSchedulePropertiesLabVmsStartupSystemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskTypePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTaskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneIdPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTimeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDatePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesCreatedDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceIdPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTargetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesUniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutesPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsTimeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrlPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsWebhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipientPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsEmailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocalePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsNotificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minutePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesHourlyRecurrenceMinute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdaysPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceWeekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceTime?: string;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesApplicableSchedulePropertiesLabVmsShutdownId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesApplicableSchedulePropertiesLabVmsShutdownName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesApplicableSchedulePropertiesLabVmsShutdownType?: string;
  /** Resource tags. */
  tagsPropertiesApplicableSchedulePropertiesLabVmsShutdownTags?: {
    [propertyName: string]: string;
  };
  /** The geo-location where the resource lives */
  locationPropertiesApplicableSchedulePropertiesLabVmsShutdownLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesApplicableSchedulePropertiesLabVmsShutdownSystemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskTypePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTaskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneIdPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTimeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDatePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesCreatedDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceIdPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTargetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesUniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutesPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsTimeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrlPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsWebhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipientPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsEmailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocalePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsNotificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minutePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesHourlyRecurrenceMinute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdaysPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceWeekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceTime?: string;
};

/** A virtual machine. */
export type LabVirtualMachine = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The notes of the virtual machine. */
  notes?: string;
  /** The object identifier of the owner of the virtual machine. */
  ownerObjectId?: string;
  /** The user principal name of the virtual machine owner. */
  ownerUserPrincipalName?: string;
  /**
   * The object identifier of the creator of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByUserId?: string;
  /**
   * The email address of creator of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByUser?: string;
  /** The creation date of the virtual machine. */
  createdDatePropertiesCreatedDate?: Date;
  /**
   * The resource identifier (Microsoft.Compute) of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly computeId?: string;
  /** The custom image identifier of the virtual machine. */
  customImageId?: string;
  /** The shared gallery image version resource identifier of the virtual machine. */
  galleryImageVersionId?: string;
  /** The shared image resource identifier of the virtual machine. */
  sharedImageId?: string;
  /** The shared image version for the specified shared image Id. Will use latest if not specified. */
  sharedImageVersion?: string;
  /**
   * The OS type of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osTypePropertiesOsType?: string;
  /** The size of the virtual machine. */
  size?: string;
  /** The user name of the virtual machine. */
  userName?: string;
  /** The password of the virtual machine administrator. */
  password?: string;
  /** The SSH key of the virtual machine administrator. */
  sshKey?: string;
  /** Indicates whether this virtual machine uses an SSH key for authentication. */
  isAuthenticationWithSshKey?: boolean;
  /**
   * The fully-qualified domain name of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /** The lab subnet name of the virtual machine. */
  labSubnetName?: string;
  /** The lab virtual network identifier of the virtual machine. */
  labVirtualNetworkId?: string;
  /** Indicates whether the virtual machine is to be created without a public IP address. */
  disallowPublicIpAddress?: boolean;
  /** The artifacts to be installed on the virtual machine. */
  artifacts?: ArtifactInstallProperties[];
  /** The id of the plan associated with the virtual machine image */
  planId?: string;
  /** Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. */
  osDiskSizeGb?: number;
  /** The expiration date for VM. */
  expirationDate?: Date;
  /** Indicates whether another user can take ownership of the virtual machine */
  allowClaim?: boolean;
  /** Storage type to use for virtual machine (i.e. Standard, Premium, StandardSSD). */
  storageType?: StorageTypes;
  /**
   * Tells source of creation of lab virtual machine. Output property only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachineCreationSource?: VirtualMachineCreationSource;
  /** The resource ID of the environment that contains this virtual machine, if any. */
  environmentId?: string;
  /** New or existing data disks to attach to the virtual machine after creation */
  dataDiskParameters?: DataDiskProperties[];
  /** Virtual Machine schedules to be created */
  scheduleParameters?: ScheduleCreationParameter[];
  /**
   * Last known compute power state captured in DTL
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastKnownPowerState?: string;
  /**
   * Flag to determine if apply artifacts can be triggered at the time of fetching the document.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly canApplyArtifacts?: boolean;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesUniqueIdentifier?: string;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesApplicableScheduleId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesApplicableScheduleName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesApplicableScheduleType?: string;
  /** Resource tags. */
  tagsPropertiesApplicableScheduleTags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  locationPropertiesApplicableScheduleLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesApplicableScheduleSystemData?: SystemData;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesApplicableSchedulePropertiesLabVmsStartupId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesApplicableSchedulePropertiesLabVmsStartupName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesApplicableSchedulePropertiesLabVmsStartupType?: string;
  /** Resource tags. */
  tagsPropertiesApplicableSchedulePropertiesLabVmsStartupTags?: {
    [propertyName: string]: string;
  };
  /** The geo-location where the resource lives */
  locationPropertiesApplicableSchedulePropertiesLabVmsStartupLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesApplicableSchedulePropertiesLabVmsStartupSystemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskTypePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTaskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneIdPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTimeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDatePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesCreatedDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceIdPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesTargetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesUniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutesPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsTimeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrlPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsWebhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipientPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsEmailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocalePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesNotificationSettingsNotificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minutePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesHourlyRecurrenceMinute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdaysPropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceWeekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsStartupPropertiesWeeklyRecurrenceTime?: string;
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesApplicableSchedulePropertiesLabVmsShutdownId?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesApplicableSchedulePropertiesLabVmsShutdownName?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesApplicableSchedulePropertiesLabVmsShutdownType?: string;
  /** Resource tags. */
  tagsPropertiesApplicableSchedulePropertiesLabVmsShutdownTags?: {
    [propertyName: string]: string;
  };
  /** The geo-location where the resource lives */
  locationPropertiesApplicableSchedulePropertiesLabVmsShutdownLocation?: string;
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemDataPropertiesApplicableSchedulePropertiesLabVmsShutdownSystemData?: SystemData;
  /** The status of the schedule (i.e. Enabled, Disabled) */
  statusPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesStatus?: EnableStatus;
  /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
  taskTypePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTaskType?: string;
  /** The time zone ID (e.g. Pacific Standard time). */
  timeZoneIdPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTimeZoneId?: string;
  /**
   * The creation date of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDatePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesCreatedDate?: Date;
  /** The resource ID to which the schedule belongs */
  targetResourceIdPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesTargetResourceId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningStatePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesProvisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifierPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesUniqueIdentifier?: string;
  /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
  statusPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsStatus?: EnableStatus;
  /** Time in minutes before event at which notification will be sent. */
  timeInMinutesPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsTimeInMinutes?: number;
  /** The webhook URL to which the notification will be sent. */
  webhookUrlPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsWebhookUrl?: string;
  /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
  emailRecipientPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsEmailRecipient?: string;
  /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
  notificationLocalePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesNotificationSettingsNotificationLocale?: string;
  /** Minutes of the hour the schedule will run. */
  minutePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesHourlyRecurrenceMinute?: number;
  /** The time of day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesDailyRecurrenceTime?: string;
  /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
  weekdaysPropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceWeekdays?: string[];
  /** The time of the day the schedule will occur. */
  timePropertiesApplicableSchedulePropertiesLabVmsShutdownPropertiesWeeklyRecurrenceTime?: string;
  /** The resource ID of the virtual network. */
  virtualNetworkId?: string;
  /** The resource ID of the sub net. */
  subnetId?: string;
  /** The resource ID of the public IP address. */
  publicIpAddressId?: string;
  /** The public IP address. */
  publicIpAddress?: string;
  /** The private IP address. */
  privateIpAddress?: string;
  /** The DNS name. */
  dnsName?: string;
  /** The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol). */
  rdpAuthority?: string;
  /** The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH. */
  sshAuthority?: string;
  /** The incoming NAT rules */
  inboundNatRules?: InboundNatRule[];
  /** Gets the statuses of the virtual machine. */
  statuses?: ComputeVmInstanceViewStatus[];
  /** Gets the OS type of the virtual machine. */
  osTypePropertiesComputeVmOsType?: string;
  /** Gets the size of the virtual machine. */
  vmSize?: string;
  /** Gets the network interface ID of the virtual machine. */
  networkInterfaceId?: string;
  /** Gets OS disk blob uri for the virtual machine. */
  osDiskId?: string;
  /** Gets data disks blob uri for the virtual machine. */
  dataDiskIds?: string[];
  /** Gets all data disks attached to the virtual machine. */
  dataDisks?: ComputeDataDisk[];
  /** The offer of the gallery image. */
  offer?: string;
  /** The publisher of the gallery image. */
  publisher?: string;
  /** The SKU of the gallery image. */
  sku?: string;
  /** The OS type of the gallery image. */
  osTypePropertiesGalleryImageReferenceOsType?: string;
  /** The version of the gallery image. */
  version?: string;
  /** The deployment status of the artifact. */
  deploymentStatus?: string;
  /** The total count of the artifacts that were successfully applied. */
  artifactsApplied?: number;
  /** The total count of the artifacts that were tentatively applied. */
  totalArtifacts?: number;
};

/** A virtual network. */
export type VirtualNetwork = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The allowed subnets of the virtual network. */
  allowedSubnets?: Subnet[];
  /** The description of the virtual network. */
  description?: string;
  /** The Microsoft.Network resource identifier of the virtual network. */
  externalProviderResourceId?: string;
  /**
   * The external subnet properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly externalSubnets?: ExternalSubnet[];
  /** The subnet overrides of the virtual network. */
  subnetOverrides?: SubnetOverride[];
  /**
   * The creation date of the virtual network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** Profile of a Bastion Host */
export type BastionHost = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The ID of the external BastionHost resource that corresponds to this DTL BastionHost
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly externalBastionHostId?: string;
  /**
   * The ID of the PublicIpAddress resource that is created by and paired with this BastionHost
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddressId?: string;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
};

/** A cost item. */
export type Cost = Resource & {
  /**
   * The system metadata relating to this resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The lab cost details component of the cost data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly labCostDetails?: LabCostDetailsProperties[];
  /**
   * The resource cost component of the cost data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceCosts?: LabResourceCostProperties[];
  /** The currency code of the cost. */
  currencyCode?: string;
  /** The start time of the cost data. */
  startDateTime?: Date;
  /** The end time of the cost data. */
  endDateTime?: Date;
  /** The creation date of the cost. */
  createdDate?: Date;
  /**
   * The provisioning status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The unique immutable identifier of a resource (Guid).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uniqueIdentifier?: string;
  /** The cost component of the cost item. */
  estimatedLabCost?: number;
  /** Target cost status */
  status?: TargetCostStatus;
  /** Lab target cost */
  target?: number;
  /** Cost thresholds. */
  costThresholds?: CostThresholdProperties[];
  /** Reporting cycle start date. */
  cycleStartDateTime?: Date;
  /** Reporting cycle end date. */
  cycleEndDateTime?: Date;
  /** Reporting cycle type. */
  cycleType?: ReportingCycleType;
};

/** The resource model definition for an Azure Resource Manager resource with an etag. */
export type AzureEntityResource = Resource & {
  /**
   * Resource Etag.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
};

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export type ProxyResource = Resource;

/** Patch */
export type ArtifactSourceFragment = UpdateResource;

/** Patch */
export type CustomImageFragment = UpdateResource;

/** Patch */
export type FormulaFragment = UpdateResource;

/** Patch */
export type NotificationChannelFragment = UpdateResource;

/** Patch */
export type PolicyFragment = UpdateResource;

/** Patch */
export type ScheduleFragment = UpdateResource;

/** Patch */
export type SecretFragment = UpdateResource;

/** Patch */
export type SharedGalleryFragment = UpdateResource;

/** Patch */
export type SharedImageFragment = UpdateResource;

/** Patch */
export type UserFragment = UpdateResource;

/** Patch */
export type DiskFragment = UpdateResource;

/** Patch */
export type DtlEnvironmentFragment = UpdateResource;

/** Patch */
export type ServiceFabricFragment = UpdateResource;

/** Patch */
export type LabVirtualMachineFragment = UpdateResource;

/** Patch */
export type VirtualNetworkFragment = UpdateResource;

/** Patch */
export type BastionHostFragment = UpdateResource;

/** Patch */
export type LabFragment = UpdateResource;

/** Patch */
export type LabSecretFragment = UpdateResource;

export type ResourceModelWithAllowedPropertySetIdentity = Identity;

export type ResourceModelWithAllowedPropertySetSku = Sku;

export type ResourceModelWithAllowedPropertySetPlan = Plan;

/** Known values of {@link StorageType} that the service accepts. */
export enum KnownStorageType {
  Standard = "Standard",
  Premium = "Premium",
  StandardSSD = "StandardSSD"
}

/**
 * Defines values for StorageType. \
 * {@link KnownStorageType} can be used interchangeably with StorageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Premium** \
 * **StandardSSD**
 */
export type StorageType = string;

/** Known values of {@link PremiumDataDisk} that the service accepts. */
export enum KnownPremiumDataDisk {
  Disabled = "Disabled",
  Enabled = "Enabled"
}

/**
 * Defines values for PremiumDataDisk. \
 * {@link KnownPremiumDataDisk} can be used interchangeably with PremiumDataDisk,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type PremiumDataDisk = string;

/** Known values of {@link EnvironmentPermission} that the service accepts. */
export enum KnownEnvironmentPermission {
  Reader = "Reader",
  Contributor = "Contributor"
}

/**
 * Defines values for EnvironmentPermission. \
 * {@link KnownEnvironmentPermission} can be used interchangeably with EnvironmentPermission,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Reader** \
 * **Contributor**
 */
export type EnvironmentPermission = string;

/** Known values of {@link EnableStatus} that the service accepts. */
export enum KnownEnableStatus {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for EnableStatus. \
 * {@link KnownEnableStatus} can be used interchangeably with EnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type EnableStatus = string;

/** Known values of {@link EncryptionType} that the service accepts. */
export enum KnownEncryptionType {
  EncryptionAtRestWithPlatformKey = "EncryptionAtRestWithPlatformKey",
  EncryptionAtRestWithCustomerKey = "EncryptionAtRestWithCustomerKey"
}

/**
 * Defines values for EncryptionType. \
 * {@link KnownEncryptionType} can be used interchangeably with EncryptionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EncryptionAtRestWithPlatformKey** \
 * **EncryptionAtRestWithCustomerKey**
 */
export type EncryptionType = string;

/** Known values of {@link ManagedIdentityType} that the service accepts. */
export enum KnownManagedIdentityType {
  None = "None",
  SystemAssigned = "SystemAssigned",
  UserAssigned = "UserAssigned",
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/**
 * Defines values for ManagedIdentityType. \
 * {@link KnownManagedIdentityType} can be used interchangeably with ManagedIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedIdentityType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link HttpStatusCode} that the service accepts. */
export enum KnownHttpStatusCode {
  Continue = "Continue",
  SwitchingProtocols = "SwitchingProtocols",
  Processing = "Processing",
  EarlyHints = "EarlyHints",
  OK = "OK",
  Created = "Created",
  Accepted = "Accepted",
  NonAuthoritativeInformation = "NonAuthoritativeInformation",
  NoContent = "NoContent",
  ResetContent = "ResetContent",
  PartialContent = "PartialContent",
  MultiStatus = "MultiStatus",
  AlreadyReported = "AlreadyReported",
  IMUsed = "IMUsed",
  MultipleChoices = "MultipleChoices",
  Ambiguous = "Ambiguous",
  MovedPermanently = "MovedPermanently",
  Moved = "Moved",
  Found = "Found",
  Redirect = "Redirect",
  SeeOther = "SeeOther",
  RedirectMethod = "RedirectMethod",
  NotModified = "NotModified",
  UseProxy = "UseProxy",
  Unused = "Unused",
  TemporaryRedirect = "TemporaryRedirect",
  RedirectKeepVerb = "RedirectKeepVerb",
  PermanentRedirect = "PermanentRedirect",
  BadRequest = "BadRequest",
  Unauthorized = "Unauthorized",
  PaymentRequired = "PaymentRequired",
  Forbidden = "Forbidden",
  NotFound = "NotFound",
  MethodNotAllowed = "MethodNotAllowed",
  NotAcceptable = "NotAcceptable",
  ProxyAuthenticationRequired = "ProxyAuthenticationRequired",
  RequestTimeout = "RequestTimeout",
  Conflict = "Conflict",
  Gone = "Gone",
  LengthRequired = "LengthRequired",
  PreconditionFailed = "PreconditionFailed",
  RequestEntityTooLarge = "RequestEntityTooLarge",
  RequestUriTooLong = "RequestUriTooLong",
  UnsupportedMediaType = "UnsupportedMediaType",
  RequestedRangeNotSatisfiable = "RequestedRangeNotSatisfiable",
  ExpectationFailed = "ExpectationFailed",
  MisdirectedRequest = "MisdirectedRequest",
  UnprocessableEntity = "UnprocessableEntity",
  Locked = "Locked",
  FailedDependency = "FailedDependency",
  UpgradeRequired = "UpgradeRequired",
  PreconditionRequired = "PreconditionRequired",
  TooManyRequests = "TooManyRequests",
  RequestHeaderFieldsTooLarge = "RequestHeaderFieldsTooLarge",
  UnavailableForLegalReasons = "UnavailableForLegalReasons",
  InternalServerError = "InternalServerError",
  NotImplemented = "NotImplemented",
  BadGateway = "BadGateway",
  ServiceUnavailable = "ServiceUnavailable",
  GatewayTimeout = "GatewayTimeout",
  HttpVersionNotSupported = "HttpVersionNotSupported",
  VariantAlsoNegotiates = "VariantAlsoNegotiates",
  InsufficientStorage = "InsufficientStorage",
  LoopDetected = "LoopDetected",
  NotExtended = "NotExtended",
  NetworkAuthenticationRequired = "NetworkAuthenticationRequired"
}

/**
 * Defines values for HttpStatusCode. \
 * {@link KnownHttpStatusCode} can be used interchangeably with HttpStatusCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Continue** \
 * **SwitchingProtocols** \
 * **Processing** \
 * **EarlyHints** \
 * **OK** \
 * **Created** \
 * **Accepted** \
 * **NonAuthoritativeInformation** \
 * **NoContent** \
 * **ResetContent** \
 * **PartialContent** \
 * **MultiStatus** \
 * **AlreadyReported** \
 * **IMUsed** \
 * **MultipleChoices** \
 * **Ambiguous** \
 * **MovedPermanently** \
 * **Moved** \
 * **Found** \
 * **Redirect** \
 * **SeeOther** \
 * **RedirectMethod** \
 * **NotModified** \
 * **UseProxy** \
 * **Unused** \
 * **TemporaryRedirect** \
 * **RedirectKeepVerb** \
 * **PermanentRedirect** \
 * **BadRequest** \
 * **Unauthorized** \
 * **PaymentRequired** \
 * **Forbidden** \
 * **NotFound** \
 * **MethodNotAllowed** \
 * **NotAcceptable** \
 * **ProxyAuthenticationRequired** \
 * **RequestTimeout** \
 * **Conflict** \
 * **Gone** \
 * **LengthRequired** \
 * **PreconditionFailed** \
 * **RequestEntityTooLarge** \
 * **RequestUriTooLong** \
 * **UnsupportedMediaType** \
 * **RequestedRangeNotSatisfiable** \
 * **ExpectationFailed** \
 * **MisdirectedRequest** \
 * **UnprocessableEntity** \
 * **Locked** \
 * **FailedDependency** \
 * **UpgradeRequired** \
 * **PreconditionRequired** \
 * **TooManyRequests** \
 * **RequestHeaderFieldsTooLarge** \
 * **UnavailableForLegalReasons** \
 * **InternalServerError** \
 * **NotImplemented** \
 * **BadGateway** \
 * **ServiceUnavailable** \
 * **GatewayTimeout** \
 * **HttpVersionNotSupported** \
 * **VariantAlsoNegotiates** \
 * **InsufficientStorage** \
 * **LoopDetected** \
 * **NotExtended** \
 * **NetworkAuthenticationRequired**
 */
export type HttpStatusCode = string;

/** Known values of {@link SourceControlType} that the service accepts. */
export enum KnownSourceControlType {
  VsoGit = "VsoGit",
  GitHub = "GitHub",
  StorageAccount = "StorageAccount"
}

/**
 * Defines values for SourceControlType. \
 * {@link KnownSourceControlType} can be used interchangeably with SourceControlType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **VsoGit** \
 * **GitHub** \
 * **StorageAccount**
 */
export type SourceControlType = string;

/** Known values of {@link FileUploadOptions} that the service accepts. */
export enum KnownFileUploadOptions {
  UploadFilesAndGenerateSasTokens = "UploadFilesAndGenerateSasTokens",
  None = "None"
}

/**
 * Defines values for FileUploadOptions. \
 * {@link KnownFileUploadOptions} can be used interchangeably with FileUploadOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UploadFilesAndGenerateSasTokens** \
 * **None**
 */
export type FileUploadOptions = string;

/** Known values of {@link TargetCostStatus} that the service accepts. */
export enum KnownTargetCostStatus {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for TargetCostStatus. \
 * {@link KnownTargetCostStatus} can be used interchangeably with TargetCostStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type TargetCostStatus = string;

/** Known values of {@link CostThresholdStatus} that the service accepts. */
export enum KnownCostThresholdStatus {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for CostThresholdStatus. \
 * {@link KnownCostThresholdStatus} can be used interchangeably with CostThresholdStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type CostThresholdStatus = string;

/** Known values of {@link ReportingCycleType} that the service accepts. */
export enum KnownReportingCycleType {
  CalendarMonth = "CalendarMonth",
  Custom = "Custom"
}

/**
 * Defines values for ReportingCycleType. \
 * {@link KnownReportingCycleType} can be used interchangeably with ReportingCycleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CalendarMonth** \
 * **Custom**
 */
export type ReportingCycleType = string;

/** Known values of {@link CostType} that the service accepts. */
export enum KnownCostType {
  Unavailable = "Unavailable",
  Reported = "Reported",
  Projected = "Projected"
}

/**
 * Defines values for CostType. \
 * {@link KnownCostType} can be used interchangeably with CostType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unavailable** \
 * **Reported** \
 * **Projected**
 */
export type CostType = string;

/** Known values of {@link WindowsOsState} that the service accepts. */
export enum KnownWindowsOsState {
  NonSysprepped = "NonSysprepped",
  SysprepRequested = "SysprepRequested",
  SysprepApplied = "SysprepApplied"
}

/**
 * Defines values for WindowsOsState. \
 * {@link KnownWindowsOsState} can be used interchangeably with WindowsOsState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NonSysprepped** \
 * **SysprepRequested** \
 * **SysprepApplied**
 */
export type WindowsOsState = string;

/** Known values of {@link LinuxOsState} that the service accepts. */
export enum KnownLinuxOsState {
  NonDeprovisioned = "NonDeprovisioned",
  DeprovisionRequested = "DeprovisionRequested",
  DeprovisionApplied = "DeprovisionApplied"
}

/**
 * Defines values for LinuxOsState. \
 * {@link KnownLinuxOsState} can be used interchangeably with LinuxOsState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NonDeprovisioned** \
 * **DeprovisionRequested** \
 * **DeprovisionApplied**
 */
export type LinuxOsState = string;

/** Known values of {@link CustomImageOsType} that the service accepts. */
export enum KnownCustomImageOsType {
  Windows = "Windows",
  Linux = "Linux",
  None = "None"
}

/**
 * Defines values for CustomImageOsType. \
 * {@link KnownCustomImageOsType} can be used interchangeably with CustomImageOsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux** \
 * **None**
 */
export type CustomImageOsType = string;

/** Known values of {@link TransportProtocol} that the service accepts. */
export enum KnownTransportProtocol {
  Tcp = "Tcp",
  Udp = "Udp"
}

/**
 * Defines values for TransportProtocol. \
 * {@link KnownTransportProtocol} can be used interchangeably with TransportProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tcp** \
 * **Udp**
 */
export type TransportProtocol = string;

/** Known values of {@link VirtualMachineCreationSource} that the service accepts. */
export enum KnownVirtualMachineCreationSource {
  FromCustomImage = "FromCustomImage",
  FromGalleryImage = "FromGalleryImage",
  FromSharedGalleryImage = "FromSharedGalleryImage"
}

/**
 * Defines values for VirtualMachineCreationSource. \
 * {@link KnownVirtualMachineCreationSource} can be used interchangeably with VirtualMachineCreationSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FromCustomImage** \
 * **FromGalleryImage** \
 * **FromSharedGalleryImage**
 */
export type VirtualMachineCreationSource = string;

/** Known values of {@link HostCachingOptions} that the service accepts. */
export enum KnownHostCachingOptions {
  None = "None",
  ReadOnly = "ReadOnly",
  ReadWrite = "ReadWrite"
}

/**
 * Defines values for HostCachingOptions. \
 * {@link KnownHostCachingOptions} can be used interchangeably with HostCachingOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ReadOnly** \
 * **ReadWrite**
 */
export type HostCachingOptions = string;

/** Known values of {@link NotificationChannelEventType} that the service accepts. */
export enum KnownNotificationChannelEventType {
  AutoShutdown = "AutoShutdown",
  Cost = "Cost"
}

/**
 * Defines values for NotificationChannelEventType. \
 * {@link KnownNotificationChannelEventType} can be used interchangeably with NotificationChannelEventType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AutoShutdown** \
 * **Cost**
 */
export type NotificationChannelEventType = string;

/** Known values of {@link PolicyStatus} that the service accepts. */
export enum KnownPolicyStatus {
  Enabled = "Enabled",
  Disabled = "Disabled"
}

/**
 * Defines values for PolicyStatus. \
 * {@link KnownPolicyStatus} can be used interchangeably with PolicyStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PolicyStatus = string;

/** Known values of {@link PolicyFactName} that the service accepts. */
export enum KnownPolicyFactName {
  UserOwnedLabVmCount = "UserOwnedLabVmCount",
  UserOwnedLabPremiumVmCount = "UserOwnedLabPremiumVmCount",
  LabVmCount = "LabVmCount",
  LabPremiumVmCount = "LabPremiumVmCount",
  LabVmSize = "LabVmSize",
  GalleryImage = "GalleryImage",
  UserOwnedLabVmCountInSubnet = "UserOwnedLabVmCountInSubnet",
  LabTargetCost = "LabTargetCost",
  EnvironmentTemplate = "EnvironmentTemplate",
  ScheduleEditPermission = "ScheduleEditPermission"
}

/**
 * Defines values for PolicyFactName. \
 * {@link KnownPolicyFactName} can be used interchangeably with PolicyFactName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UserOwnedLabVmCount** \
 * **UserOwnedLabPremiumVmCount** \
 * **LabVmCount** \
 * **LabPremiumVmCount** \
 * **LabVmSize** \
 * **GalleryImage** \
 * **UserOwnedLabVmCountInSubnet** \
 * **LabTargetCost** \
 * **EnvironmentTemplate** \
 * **ScheduleEditPermission**
 */
export type PolicyFactName = string;

/** Known values of {@link PolicyEvaluatorType} that the service accepts. */
export enum KnownPolicyEvaluatorType {
  AllowedValuesPolicy = "AllowedValuesPolicy",
  MaxValuePolicy = "MaxValuePolicy"
}

/**
 * Defines values for PolicyEvaluatorType. \
 * {@link KnownPolicyEvaluatorType} can be used interchangeably with PolicyEvaluatorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllowedValuesPolicy** \
 * **MaxValuePolicy**
 */
export type PolicyEvaluatorType = string;

/** Known values of {@link EnableState} that the service accepts. */
export enum KnownEnableState {
  Disabled = "Disabled",
  Enabled = "Enabled"
}

/**
 * Defines values for EnableState. \
 * {@link KnownEnableState} can be used interchangeably with EnableState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type EnableState = string;

/** Known values of {@link OsType} that the service accepts. */
export enum KnownOsType {
  Windows = "Windows",
  Linux = "Linux"
}

/**
 * Defines values for OsType. \
 * {@link KnownOsType} can be used interchangeably with OsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export type OsType = string;

/** Known values of {@link ImageType} that the service accepts. */
export enum KnownImageType {
  Generalized = "Generalized",
  Specialized = "Specialized"
}

/**
 * Defines values for ImageType. \
 * {@link KnownImageType} can be used interchangeably with ImageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Generalized** \
 * **Specialized**
 */
export type ImageType = string;

/** Known values of {@link StorageTypes} that the service accepts. */
export enum KnownStorageTypes {
  Standard = "Standard",
  Premium = "Premium",
  StandardSSD = "StandardSSD"
}

/**
 * Defines values for StorageTypes. \
 * {@link KnownStorageTypes} can be used interchangeably with StorageTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Premium** \
 * **StandardSSD**
 */
export type StorageTypes = string;

/** Known values of {@link UsagePermissionType} that the service accepts. */
export enum KnownUsagePermissionType {
  Default = "Default",
  Deny = "Deny",
  Allow = "Allow"
}

/**
 * Defines values for UsagePermissionType. \
 * {@link KnownUsagePermissionType} can be used interchangeably with UsagePermissionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Deny** \
 * **Allow**
 */
export type UsagePermissionType = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  User = "user",
  System = "system",
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link EncryptionStatus} that the service accepts. */
export enum KnownEncryptionStatus {
  Enabled = "enabled",
  Disabled = "disabled"
}

/**
 * Defines values for EncryptionStatus. \
 * {@link KnownEncryptionStatus} can be used interchangeably with EncryptionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export type EncryptionStatus = string;

/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
export enum KnownCheckNameAvailabilityReason {
  Invalid = "Invalid",
  AlreadyExists = "AlreadyExists"
}

/**
 * Defines values for CheckNameAvailabilityReason. \
 * {@link KnownCheckNameAvailabilityReason} can be used interchangeably with CheckNameAvailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export type CheckNameAvailabilityReason = string;
/** Defines values for SkuTier. */
export type SkuTier = "Free" | "Basic" | "Standard" | "Premium";

/** Optional parameters. */
export interface ProviderOperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ProviderOperationsListResponse = ProviderOperationResult;

/** Optional parameters. */
export interface ProviderOperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ProviderOperationsListNextResponse = ProviderOperationResult;

/** Optional parameters. */
export interface LabsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listBySubscription operation. */
export type LabsListBySubscriptionResponse = LabList;

/** Optional parameters. */
export interface LabsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export type LabsListByResourceGroupResponse = LabList;

/** Optional parameters. */
export interface LabsGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type LabsGetResponse = Lab;

/** Optional parameters. */
export interface LabsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LabsCreateOrUpdateResponse = Lab;

/** Optional parameters. */
export interface LabsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsUpdateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type LabsUpdateResponse = Lab;

/** Optional parameters. */
export interface LabsClaimAnyVmOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsCreateEnvironmentOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsEnsureCurrentUserProfileOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface LabsExportResourceUsageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsGenerateUploadUriOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the generateUploadUri operation. */
export type LabsGenerateUploadUriResponse = GenerateUploadUriResponse;

/** Optional parameters. */
export interface LabsImportVirtualMachineOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsListVhdsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVhds operation. */
export type LabsListVhdsResponse = LabVhdList;

/** Optional parameters. */
export interface LabsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type LabsListBySubscriptionNextResponse = LabList;

/** Optional parameters. */
export interface LabsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type LabsListByResourceGroupNextResponse = LabList;

/** Optional parameters. */
export interface LabsListVhdsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listVhdsNext operation. */
export type LabsListVhdsNextResponse = LabVhdList;

/** Optional parameters. */
export interface OperationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OperationsGetResponse = OperationResult;

/** Optional parameters. */
export interface GlobalSchedulesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listBySubscription operation. */
export type GlobalSchedulesListBySubscriptionResponse = ScheduleList;

/** Optional parameters. */
export interface GlobalSchedulesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export type GlobalSchedulesListByResourceGroupResponse = ScheduleList;

/** Optional parameters. */
export interface GlobalSchedulesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type GlobalSchedulesGetResponse = Schedule;

/** Optional parameters. */
export interface GlobalSchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type GlobalSchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export interface GlobalSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface GlobalSchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type GlobalSchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export interface GlobalSchedulesExecuteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GlobalSchedulesRetargetOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GlobalSchedulesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export type GlobalSchedulesListBySubscriptionNextResponse = ScheduleList;

/** Optional parameters. */
export interface GlobalSchedulesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listByResourceGroupNext operation. */
export type GlobalSchedulesListByResourceGroupNextResponse = ScheduleList;

/** Optional parameters. */
export interface ArtifactSourcesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ArtifactSourcesListResponse = ArtifactSourceList;

/** Optional parameters. */
export interface ArtifactSourcesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ArtifactSourcesGetResponse = ArtifactSource;

/** Optional parameters. */
export interface ArtifactSourcesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ArtifactSourcesCreateOrUpdateResponse = ArtifactSource;

/** Optional parameters. */
export interface ArtifactSourcesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ArtifactSourcesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ArtifactSourcesUpdateResponse = ArtifactSource;

/** Optional parameters. */
export interface ArtifactSourcesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ArtifactSourcesListNextResponse = ArtifactSourceList;

/** Optional parameters. */
export interface ArmTemplatesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ArmTemplatesListResponse = ArmTemplateList;

/** Optional parameters. */
export interface ArmTemplatesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ArmTemplatesGetResponse = ArmTemplate;

/** Optional parameters. */
export interface ArmTemplatesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=displayName)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ArmTemplatesListNextResponse = ArmTemplateList;

/** Optional parameters. */
export interface ArtifactsListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=title)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ArtifactsListResponse = ArtifactList;

/** Optional parameters. */
export interface ArtifactsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=title)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ArtifactsGetResponse = Artifact;

/** Optional parameters. */
export interface ArtifactsGenerateArmTemplateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the generateArmTemplate operation. */
export type ArtifactsGenerateArmTemplateResponse = ArmTemplateInfo;

/** Optional parameters. */
export interface ArtifactsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=title)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ArtifactsListNextResponse = ArtifactList;

/** Optional parameters. */
export interface CostsGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=labCostDetails)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type CostsGetResponse = LabCost;

/** Optional parameters. */
export interface CostsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type CostsCreateOrUpdateResponse = LabCost;

/** Optional parameters. */
export interface CustomImagesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=vm)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type CustomImagesListResponse = CustomImageList;

/** Optional parameters. */
export interface CustomImagesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=vm)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type CustomImagesGetResponse = CustomImage;

/** Optional parameters. */
export interface CustomImagesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CustomImagesCreateOrUpdateResponse = CustomImage;

/** Optional parameters. */
export interface CustomImagesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CustomImagesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type CustomImagesUpdateResponse = CustomImage;

/** Optional parameters. */
export interface CustomImagesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=vm)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type CustomImagesListNextResponse = CustomImageList;

/** Optional parameters. */
export interface FormulasListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type FormulasListResponse = FormulaList;

/** Optional parameters. */
export interface FormulasGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type FormulasGetResponse = Formula;

/** Optional parameters. */
export interface FormulasCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type FormulasCreateOrUpdateResponse = Formula;

/** Optional parameters. */
export interface FormulasDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FormulasUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type FormulasUpdateResponse = Formula;

/** Optional parameters. */
export interface FormulasListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type FormulasListNextResponse = FormulaList;

/** Optional parameters. */
export interface GalleryImagesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=author)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type GalleryImagesListResponse = GalleryImageList;

/** Optional parameters. */
export interface GalleryImagesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GalleryImagesGetResponse = GalleryImage;

/** Optional parameters. */
export interface GalleryImagesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=author)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type GalleryImagesListNextResponse = GalleryImageList;

/** Optional parameters. */
export interface NotificationChannelsListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=webHookUrl)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type NotificationChannelsListResponse = NotificationChannelList;

/** Optional parameters. */
export interface NotificationChannelsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=webHookUrl)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type NotificationChannelsGetResponse = NotificationChannel;

/** Optional parameters. */
export interface NotificationChannelsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type NotificationChannelsCreateOrUpdateResponse = NotificationChannel;

/** Optional parameters. */
export interface NotificationChannelsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface NotificationChannelsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type NotificationChannelsUpdateResponse = NotificationChannel;

/** Optional parameters. */
export interface NotificationChannelsNotifyOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface NotificationChannelsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=webHookUrl)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type NotificationChannelsListNextResponse = NotificationChannelList;

/** Optional parameters. */
export interface PolicySetsListOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type PolicySetsListResponse = PolicySetList;

/** Optional parameters. */
export interface PolicySetsEvaluatePoliciesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the evaluatePolicies operation. */
export type PolicySetsEvaluatePoliciesResponse = EvaluatePoliciesResponse;

/** Optional parameters. */
export interface PolicySetsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type PolicySetsListNextResponse = PolicySetList;

/** Optional parameters. */
export interface PoliciesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type PoliciesListResponse = PolicyList;

/** Optional parameters. */
export interface PoliciesGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type PoliciesGetResponse = Policy;

/** Optional parameters. */
export interface PoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PoliciesCreateOrUpdateResponse = Policy;

/** Optional parameters. */
export interface PoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PoliciesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type PoliciesUpdateResponse = Policy;

/** Optional parameters. */
export interface PoliciesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=description)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type PoliciesListNextResponse = PolicyList;

/** Optional parameters. */
export interface SchedulesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type SchedulesListResponse = ScheduleList;

/** Optional parameters. */
export interface SchedulesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type SchedulesGetResponse = Schedule;

/** Optional parameters. */
export interface SchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type SchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export interface SchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface SchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export interface SchedulesExecuteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SchedulesListApplicableOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listApplicable operation. */
export type SchedulesListApplicableResponse = ScheduleList;

/** Optional parameters. */
export interface SchedulesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type SchedulesListNextResponse = ScheduleList;

/** Optional parameters. */
export interface SchedulesListApplicableNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listApplicableNext operation. */
export type SchedulesListApplicableNextResponse = ScheduleList;

/** Optional parameters. */
export interface LabSecretsListOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type LabSecretsListResponse = LabSecretList;

/** Optional parameters. */
export interface LabSecretsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LabSecretsGetResponse = LabSecret;

/** Optional parameters. */
export interface LabSecretsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LabSecretsCreateOrUpdateResponse = LabSecret;

/** Optional parameters. */
export interface LabSecretsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabSecretsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type LabSecretsUpdateResponse = LabSecret;

/** Optional parameters. */
export interface LabSecretsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type LabSecretsListNextResponse = LabSecretList;

/** Optional parameters. */
export interface ServiceRunnersListOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ServiceRunnersListResponse = ServiceRunnerList;

/** Optional parameters. */
export interface ServiceRunnersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServiceRunnersGetResponse = ServiceRunner;

/** Optional parameters. */
export interface ServiceRunnersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServiceRunnersCreateOrUpdateResponse = ServiceRunner;

/** Optional parameters. */
export interface ServiceRunnersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceRunnersListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ServiceRunnersListNextResponse = ServiceRunnerList;

/** Optional parameters. */
export interface SharedGalleriesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=identity)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type SharedGalleriesListResponse = SharedGalleryList;

/** Optional parameters. */
export interface SharedGalleriesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=identity)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type SharedGalleriesGetResponse = SharedGallery;

/** Optional parameters. */
export interface SharedGalleriesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type SharedGalleriesCreateOrUpdateResponse = SharedGallery;

/** Optional parameters. */
export interface SharedGalleriesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface SharedGalleriesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SharedGalleriesUpdateResponse = SharedGallery;

/** Optional parameters. */
export interface SharedGalleriesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=identity)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type SharedGalleriesListNextResponse = SharedGalleryList;

/** Optional parameters. */
export interface SharedImagesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=versions)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type SharedImagesListResponse = SharedImageList;

/** Optional parameters. */
export interface SharedImagesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=versions)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type SharedImagesGetResponse = SharedImage;

/** Optional parameters. */
export interface SharedImagesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type SharedImagesCreateOrUpdateResponse = SharedImage;

/** Optional parameters. */
export interface SharedImagesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface SharedImagesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SharedImagesUpdateResponse = SharedImage;

/** Optional parameters. */
export interface SharedImagesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=versions)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type SharedImagesListNextResponse = SharedImageList;

/** Optional parameters. */
export interface UsersListOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=identity)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type UsersListResponse = UserList;

/** Optional parameters. */
export interface UsersGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=identity)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type UsersGetResponse = User;

/** Optional parameters. */
export interface UsersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Profile of a lab user. */
  user?: User;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type UsersCreateOrUpdateResponse = User;

/** Optional parameters. */
export interface UsersDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface UsersUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type UsersUpdateResponse = User;

/** Optional parameters. */
export interface UsersListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=identity)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type UsersListNextResponse = UserList;

/** Optional parameters. */
export interface DisksListOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=diskType)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type DisksListResponse = DiskList;

/** Optional parameters. */
export interface DisksGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=diskType)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type DisksGetResponse = Disk;

/** Optional parameters. */
export interface DisksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DisksCreateOrUpdateResponse = Disk;

/** Optional parameters. */
export interface DisksDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DisksUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type DisksUpdateResponse = Disk;

/** Optional parameters. */
export interface DisksAttachOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DisksDetachOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DisksListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=diskType)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type DisksListNextResponse = DiskList;

/** Optional parameters. */
export interface EnvironmentsListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=deploymentProperties)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type EnvironmentsListResponse = DtlEnvironmentList;

/** Optional parameters. */
export interface EnvironmentsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=deploymentProperties)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type EnvironmentsGetResponse = DtlEnvironment;

/** Optional parameters. */
export interface EnvironmentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type EnvironmentsCreateOrUpdateResponse = DtlEnvironment;

/** Optional parameters. */
export interface EnvironmentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface EnvironmentsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type EnvironmentsUpdateResponse = DtlEnvironment;

/** Optional parameters. */
export interface EnvironmentsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=deploymentProperties)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type EnvironmentsListNextResponse = DtlEnvironmentList;

/** Optional parameters. */
export interface SecretsListOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=value)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type SecretsListResponse = SecretList;

/** Optional parameters. */
export interface SecretsGetOptionalParams extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=value)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type SecretsGetResponse = Secret;

/** Optional parameters. */
export interface SecretsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SecretsCreateOrUpdateResponse = Secret;

/** Optional parameters. */
export interface SecretsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface SecretsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SecretsUpdateResponse = Secret;

/** Optional parameters. */
export interface SecretsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=value)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type SecretsListNextResponse = SecretList;

/** Optional parameters. */
export interface ServiceFabricsListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=applicableSchedule)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ServiceFabricsListResponse = ServiceFabricList;

/** Optional parameters. */
export interface ServiceFabricsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=applicableSchedule)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ServiceFabricsGetResponse = ServiceFabric;

/** Optional parameters. */
export interface ServiceFabricsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServiceFabricsCreateOrUpdateResponse = ServiceFabric;

/** Optional parameters. */
export interface ServiceFabricsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceFabricsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ServiceFabricsUpdateResponse = ServiceFabric;

/** Optional parameters. */
export interface ServiceFabricsListApplicableSchedulesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listApplicableSchedules operation. */
export type ServiceFabricsListApplicableSchedulesResponse = ApplicableSchedule;

/** Optional parameters. */
export interface ServiceFabricsStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceFabricsStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceFabricsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=applicableSchedule)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ServiceFabricsListNextResponse = ServiceFabricList;

/** Optional parameters. */
export interface ServiceFabricSchedulesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type ServiceFabricSchedulesListResponse = ScheduleList;

/** Optional parameters. */
export interface ServiceFabricSchedulesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ServiceFabricSchedulesGetResponse = Schedule;

/** Optional parameters. */
export interface ServiceFabricSchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ServiceFabricSchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export interface ServiceFabricSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ServiceFabricSchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ServiceFabricSchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export interface ServiceFabricSchedulesExecuteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServiceFabricSchedulesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type ServiceFabricSchedulesListNextResponse = ScheduleList;

/** Optional parameters. */
export interface VirtualMachinesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type VirtualMachinesListResponse = LabVirtualMachineList;

/** Optional parameters. */
export interface VirtualMachinesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type VirtualMachinesGetResponse = LabVirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachinesCreateOrUpdateResponse = LabVirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type VirtualMachinesUpdateResponse = LabVirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesAddDataDiskOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesApplyArtifactsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesClaimOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesClearArtifactResultsOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VirtualMachinesDetachDataDiskOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesGetRdpFileContentsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getRdpFileContents operation. */
export type VirtualMachinesGetRdpFileContentsResponse = RdpConnection;

/** Optional parameters. */
export interface VirtualMachinesListApplicableSchedulesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listApplicableSchedules operation. */
export type VirtualMachinesListApplicableSchedulesResponse = ApplicableSchedule;

/** Optional parameters. */
export interface VirtualMachinesRedeployOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesResizeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesTransferDisksOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesUnClaimOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type VirtualMachinesListNextResponse = LabVirtualMachineList;

/** Optional parameters. */
export interface VirtualMachineSchedulesListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type VirtualMachineSchedulesListResponse = ScheduleList;

/** Optional parameters. */
export interface VirtualMachineSchedulesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type VirtualMachineSchedulesGetResponse = Schedule;

/** Optional parameters. */
export interface VirtualMachineSchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachineSchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export interface VirtualMachineSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VirtualMachineSchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type VirtualMachineSchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export interface VirtualMachineSchedulesExecuteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachineSchedulesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($select=status)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type VirtualMachineSchedulesListNextResponse = ScheduleList;

/** Optional parameters. */
export interface VirtualNetworksListOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=externalSubnets)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type VirtualNetworksListResponse = VirtualNetworkList;

/** Optional parameters. */
export interface VirtualNetworksGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=externalSubnets)' */
  expand?: string;
}

/** Contains response data for the get operation. */
export type VirtualNetworksGetResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type VirtualNetworksUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specify the $expand query. Example: 'properties($expand=externalSubnets)' */
  expand?: string;
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type VirtualNetworksListNextResponse = VirtualNetworkList;

/** Optional parameters. */
export interface BastionHostsListOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type BastionHostsListResponse = BastionHostList;

/** Optional parameters. */
export interface BastionHostsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BastionHostsGetResponse = BastionHost;

/** Optional parameters. */
export interface BastionHostsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BastionHostsCreateOrUpdateResponse = BastionHost;

/** Optional parameters. */
export interface BastionHostsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BastionHostsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type BastionHostsUpdateResponse = BastionHost;

/** Optional parameters. */
export interface BastionHostsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. Example: '$filter=contains(name,'myName')' */
  filter?: string;
  /** The maximum number of resources to return from the operation. Example: '$top=10' */
  top?: number;
  /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
  orderby?: string;
}

/** Contains response data for the listNext operation. */
export type BastionHostsListNextResponse = BastionHostList;

/** Optional parameters. */
export interface DevTestLabsClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
