/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/domainsMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a Domains. */
export class Domains {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a Domains.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Lists domains under a resource group
   * @param resourceGroupName Name of the resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsGetDomainsResponse>
   */
  getDomains(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsGetDomainsResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param callback The callback
   */
  getDomains(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  getDomains(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  getDomains(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainCollection>, callback?: msRest.ServiceCallback<Models.DomainCollection>): Promise<Models.DomainsGetDomainsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getDomainsOperationSpec,
      callback) as Promise<Models.DomainsGetDomainsResponse>;
  }

  /**
   * @summary Gets details of a domain
   * @param resourceGroupName Name of the resource group
   * @param domainName Name of the domain
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsGetDomainResponse>
   */
  getDomain(resourceGroupName: string, domainName: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsGetDomainResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param domainName Name of the domain
   * @param callback The callback
   */
  getDomain(resourceGroupName: string, domainName: string, callback: msRest.ServiceCallback<Models.Domain>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param domainName Name of the domain
   * @param options The optional parameters
   * @param callback The callback
   */
  getDomain(resourceGroupName: string, domainName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Domain>): void;
  getDomain(resourceGroupName: string, domainName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Domain>, callback?: msRest.ServiceCallback<Models.Domain>): Promise<Models.DomainsGetDomainResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        options
      },
      getDomainOperationSpec,
      callback) as Promise<Models.DomainsGetDomainResponse>;
  }

  /**
   * @summary Creates a domain
   * @param resourceGroupName &gt;Name of the resource group
   * @param domainName Name of the domain
   * @param domain Domain registration information
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsCreateOrUpdateDomainResponse>
   */
  createOrUpdateDomain(resourceGroupName: string, domainName: string, domain: Models.Domain, options?: msRest.RequestOptionsBase): Promise<Models.DomainsCreateOrUpdateDomainResponse>;
  /**
   * @param resourceGroupName &gt;Name of the resource group
   * @param domainName Name of the domain
   * @param domain Domain registration information
   * @param callback The callback
   */
  createOrUpdateDomain(resourceGroupName: string, domainName: string, domain: Models.Domain, callback: msRest.ServiceCallback<Models.Domain>): void;
  /**
   * @param resourceGroupName &gt;Name of the resource group
   * @param domainName Name of the domain
   * @param domain Domain registration information
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateDomain(resourceGroupName: string, domainName: string, domain: Models.Domain, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Domain>): void;
  createOrUpdateDomain(resourceGroupName: string, domainName: string, domain: Models.Domain, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Domain>, callback?: msRest.ServiceCallback<Models.Domain>): Promise<Models.DomainsCreateOrUpdateDomainResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        domain,
        options
      },
      createOrUpdateDomainOperationSpec,
      callback) as Promise<Models.DomainsCreateOrUpdateDomainResponse>;
  }

  /**
   * @summary Deletes a domain
   * @param resourceGroupName Name of the resource group
   * @param domainName Name of the domain
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsDeleteDomainResponse>
   */
  deleteDomain(resourceGroupName: string, domainName: string, options?: Models.DomainsDeleteDomainOptionalParams): Promise<Models.DomainsDeleteDomainResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param domainName Name of the domain
   * @param callback The callback
   */
  deleteDomain(resourceGroupName: string, domainName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param domainName Name of the domain
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDomain(resourceGroupName: string, domainName: string, options: Models.DomainsDeleteDomainOptionalParams, callback: msRest.ServiceCallback<any>): void;
  deleteDomain(resourceGroupName: string, domainName: string, options?: Models.DomainsDeleteDomainOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.DomainsDeleteDomainResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        options
      },
      deleteDomainOperationSpec,
      callback) as Promise<Models.DomainsDeleteDomainResponse>;
  }

  /**
   * @summary Creates a domain
   * @param resourceGroupName &gt;Name of the resource group
   * @param domainName Name of the domain
   * @param domain Domain registration information
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsUpdateDomainResponse>
   */
  updateDomain(resourceGroupName: string, domainName: string, domain: Models.Domain, options?: msRest.RequestOptionsBase): Promise<Models.DomainsUpdateDomainResponse>;
  /**
   * @param resourceGroupName &gt;Name of the resource group
   * @param domainName Name of the domain
   * @param domain Domain registration information
   * @param callback The callback
   */
  updateDomain(resourceGroupName: string, domainName: string, domain: Models.Domain, callback: msRest.ServiceCallback<Models.Domain>): void;
  /**
   * @param resourceGroupName &gt;Name of the resource group
   * @param domainName Name of the domain
   * @param domain Domain registration information
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDomain(resourceGroupName: string, domainName: string, domain: Models.Domain, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Domain>): void;
  updateDomain(resourceGroupName: string, domainName: string, domain: Models.Domain, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Domain>, callback?: msRest.ServiceCallback<Models.Domain>): Promise<Models.DomainsUpdateDomainResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        domain,
        options
      },
      updateDomainOperationSpec,
      callback) as Promise<Models.DomainsUpdateDomainResponse>;
  }

  /**
   * @summary Retrieves the latest status of a domain purchase operation
   * @param resourceGroupName Name of the resource group
   * @param domainName Name of the domain
   * @param operationId Domain purchase operation Id
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsGetDomainOperationResponse>
   */
  getDomainOperation(resourceGroupName: string, domainName: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsGetDomainOperationResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param domainName Name of the domain
   * @param operationId Domain purchase operation Id
   * @param callback The callback
   */
  getDomainOperation(resourceGroupName: string, domainName: string, operationId: string, callback: msRest.ServiceCallback<Models.Domain>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param domainName Name of the domain
   * @param operationId Domain purchase operation Id
   * @param options The optional parameters
   * @param callback The callback
   */
  getDomainOperation(resourceGroupName: string, domainName: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Domain>): void;
  getDomainOperation(resourceGroupName: string, domainName: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Domain>, callback?: msRest.ServiceCallback<Models.Domain>): Promise<Models.DomainsGetDomainOperationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainName,
        operationId,
        options
      },
      getDomainOperationOperationSpec,
      callback) as Promise<Models.DomainsGetDomainOperationResponse>;
  }

  /**
   * @summary Lists domains under a resource group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DomainsGetDomainsNextResponse>
   */
  getDomainsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DomainsGetDomainsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getDomainsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDomainsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  getDomainsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainCollection>, callback?: msRest.ServiceCallback<Models.DomainCollection>): Promise<Models.DomainsGetDomainsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getDomainsNextOperationSpec,
      callback) as Promise<Models.DomainsGetDomainsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getDomainsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Domain
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domain",
    mapper: {
      ...Mappers.Domain,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Domain
    },
    202: {
      bodyMapper: Mappers.Domain
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.forceHardDeleteDomain,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domain",
    mapper: {
      ...Mappers.Domain,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Domain
    },
    202: {
      bodyMapper: Mappers.Domain
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDomainOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/operationresults/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.domainName,
    Parameters.operationId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Domain
    },
    202: {
      bodyMapper: Mappers.Domain
    },
    500: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDomainsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
