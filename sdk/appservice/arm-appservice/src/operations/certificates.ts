/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/certificatesMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a Certificates. */
export class Certificates {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a Certificates.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Get certificates for a subscription in the specified resource group.
   * @param resourceGroupName Name of the resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesGetCertificatesResponse>
   */
  getCertificates(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesGetCertificatesResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param callback The callback
   */
  getCertificates(resourceGroupName: string, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificates(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
  getCertificates(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateCollection>, callback?: msRest.ServiceCallback<Models.CertificateCollection>): Promise<Models.CertificatesGetCertificatesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getCertificatesOperationSpec,
      callback) as Promise<Models.CertificatesGetCertificatesResponse>;
  }

  /**
   * @summary Get a certificate by certificate name for a subscription in the specified resource
   * group.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesGetCertificateResponse>
   */
  getCertificate(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesGetCertificateResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param callback The callback
   */
  getCertificate(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.Certificate>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificate(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Certificate>): void;
  getCertificate(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Certificate>, callback?: msRest.ServiceCallback<Models.Certificate>): Promise<Models.CertificatesGetCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getCertificateOperationSpec,
      callback) as Promise<Models.CertificatesGetCertificateResponse>;
  }

  /**
   * @summary Creates or modifies an existing certificate.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param certificateEnvelope Details of certificate if it exists already.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesCreateOrUpdateCertificateResponse>
   */
  createOrUpdateCertificate(resourceGroupName: string, name: string, certificateEnvelope: Models.Certificate, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesCreateOrUpdateCertificateResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param certificateEnvelope Details of certificate if it exists already.
   * @param callback The callback
   */
  createOrUpdateCertificate(resourceGroupName: string, name: string, certificateEnvelope: Models.Certificate, callback: msRest.ServiceCallback<Models.Certificate>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param certificateEnvelope Details of certificate if it exists already.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateCertificate(resourceGroupName: string, name: string, certificateEnvelope: Models.Certificate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Certificate>): void;
  createOrUpdateCertificate(resourceGroupName: string, name: string, certificateEnvelope: Models.Certificate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Certificate>, callback?: msRest.ServiceCallback<Models.Certificate>): Promise<Models.CertificatesCreateOrUpdateCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        certificateEnvelope,
        options
      },
      createOrUpdateCertificateOperationSpec,
      callback) as Promise<Models.CertificatesCreateOrUpdateCertificateResponse>;
  }

  /**
   * @summary Delete a certificate by name in a specified subscription and resourcegroup.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate to be deleted.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesDeleteCertificateResponse>
   */
  deleteCertificate(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesDeleteCertificateResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate to be deleted.
   * @param callback The callback
   */
  deleteCertificate(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate to be deleted.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCertificate(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteCertificate(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificatesDeleteCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteCertificateOperationSpec,
      callback) as Promise<Models.CertificatesDeleteCertificateResponse>;
  }

  /**
   * @summary Creates or modifies an existing certificate.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param certificateEnvelope Details of certificate if it exists already.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesUpdateCertificateResponse>
   */
  updateCertificate(resourceGroupName: string, name: string, certificateEnvelope: Models.Certificate, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesUpdateCertificateResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param certificateEnvelope Details of certificate if it exists already.
   * @param callback The callback
   */
  updateCertificate(resourceGroupName: string, name: string, certificateEnvelope: Models.Certificate, callback: msRest.ServiceCallback<Models.Certificate>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param certificateEnvelope Details of certificate if it exists already.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCertificate(resourceGroupName: string, name: string, certificateEnvelope: Models.Certificate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Certificate>): void;
  updateCertificate(resourceGroupName: string, name: string, certificateEnvelope: Models.Certificate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Certificate>, callback?: msRest.ServiceCallback<Models.Certificate>): Promise<Models.CertificatesUpdateCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        certificateEnvelope,
        options
      },
      updateCertificateOperationSpec,
      callback) as Promise<Models.CertificatesUpdateCertificateResponse>;
  }

  /**
   * @summary Gets the certificate signing requests for a subscription in the specified resource
   * group
   * @param resourceGroupName Name of the resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesGetCsrsResponse>
   */
  getCsrs(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesGetCsrsResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param callback The callback
   */
  getCsrs(resourceGroupName: string, callback: msRest.ServiceCallback<Models.Csr[]>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  getCsrs(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Csr[]>): void;
  getCsrs(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Csr[]>, callback?: msRest.ServiceCallback<Models.Csr[]>): Promise<Models.CertificatesGetCsrsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getCsrsOperationSpec,
      callback) as Promise<Models.CertificatesGetCsrsResponse>;
  }

  /**
   * @summary Gets a certificate signing request by certificate name for a subscription in the
   * specified resource group
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesGetCsrResponse>
   */
  getCsr(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesGetCsrResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param callback The callback
   */
  getCsr(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.Csr>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCsr(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Csr>): void;
  getCsr(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Csr>, callback?: msRest.ServiceCallback<Models.Csr>): Promise<Models.CertificatesGetCsrResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getCsrOperationSpec,
      callback) as Promise<Models.CertificatesGetCsrResponse>;
  }

  /**
   * @summary Creates or modifies an existing certificate signing request.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param csrEnvelope Details of certificate signing request if it exists already.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesCreateOrUpdateCsrResponse>
   */
  createOrUpdateCsr(resourceGroupName: string, name: string, csrEnvelope: Models.Csr, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesCreateOrUpdateCsrResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param csrEnvelope Details of certificate signing request if it exists already.
   * @param callback The callback
   */
  createOrUpdateCsr(resourceGroupName: string, name: string, csrEnvelope: Models.Csr, callback: msRest.ServiceCallback<Models.Csr>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param csrEnvelope Details of certificate signing request if it exists already.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateCsr(resourceGroupName: string, name: string, csrEnvelope: Models.Csr, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Csr>): void;
  createOrUpdateCsr(resourceGroupName: string, name: string, csrEnvelope: Models.Csr, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Csr>, callback?: msRest.ServiceCallback<Models.Csr>): Promise<Models.CertificatesCreateOrUpdateCsrResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        csrEnvelope,
        options
      },
      createOrUpdateCsrOperationSpec,
      callback) as Promise<Models.CertificatesCreateOrUpdateCsrResponse>;
  }

  /**
   * @summary Delete the certificate signing request.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate signing request.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesDeleteCsrResponse>
   */
  deleteCsr(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesDeleteCsrResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate signing request.
   * @param callback The callback
   */
  deleteCsr(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate signing request.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCsr(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteCsr(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificatesDeleteCsrResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteCsrOperationSpec,
      callback) as Promise<Models.CertificatesDeleteCsrResponse>;
  }

  /**
   * @summary Creates or modifies an existing certificate signing request.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param csrEnvelope Details of certificate signing request if it exists already.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesUpdateCsrResponse>
   */
  updateCsr(resourceGroupName: string, name: string, csrEnvelope: Models.Csr, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesUpdateCsrResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param csrEnvelope Details of certificate signing request if it exists already.
   * @param callback The callback
   */
  updateCsr(resourceGroupName: string, name: string, csrEnvelope: Models.Csr, callback: msRest.ServiceCallback<Models.Csr>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the certificate.
   * @param csrEnvelope Details of certificate signing request if it exists already.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCsr(resourceGroupName: string, name: string, csrEnvelope: Models.Csr, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Csr>): void;
  updateCsr(resourceGroupName: string, name: string, csrEnvelope: Models.Csr, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Csr>, callback?: msRest.ServiceCallback<Models.Csr>): Promise<Models.CertificatesUpdateCsrResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        csrEnvelope,
        options
      },
      updateCsrOperationSpec,
      callback) as Promise<Models.CertificatesUpdateCsrResponse>;
  }

  /**
   * @summary Get certificates for a subscription in the specified resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesGetCertificatesNextResponse>
   */
  getCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesGetCertificatesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getCertificatesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificatesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
  getCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateCollection>, callback?: msRest.ServiceCallback<Models.CertificateCollection>): Promise<Models.CertificatesGetCertificatesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getCertificatesNextOperationSpec,
      callback) as Promise<Models.CertificatesGetCertificatesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCertificatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Certificate
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateEnvelope",
    mapper: {
      ...Mappers.Certificate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Certificate
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateEnvelope",
    mapper: {
      ...Mappers.Certificate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Certificate
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCsrsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Csr"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCsrOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Csr
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateCsrOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "csrEnvelope",
    mapper: {
      ...Mappers.Csr,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Csr
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteCsrOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateCsrOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "csrEnvelope",
    mapper: {
      ...Mappers.Csr,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Csr
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCertificatesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
