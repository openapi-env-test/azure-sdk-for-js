/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/classicMobileServicesMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a ClassicMobileServices. */
export class ClassicMobileServices {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a ClassicMobileServices.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Get all mobile services in a resource group.
   * @param resourceGroupName Name of resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.ClassicMobileServicesGetClassicMobileServicesResponse>
   */
  getClassicMobileServices(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ClassicMobileServicesGetClassicMobileServicesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param callback The callback
   */
  getClassicMobileServices(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  getClassicMobileServices(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): void;
  getClassicMobileServices(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClassicMobileServiceCollection>, callback?: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): Promise<Models.ClassicMobileServicesGetClassicMobileServicesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getClassicMobileServicesOperationSpec,
      callback) as Promise<Models.ClassicMobileServicesGetClassicMobileServicesResponse>;
  }

  /**
   * @summary Get a mobile service.
   * @param resourceGroupName Name of resource group
   * @param name Name of mobile service
   * @param [options] The optional parameters
   * @returns Promise<Models.ClassicMobileServicesGetClassicMobileServiceResponse>
   */
  getClassicMobileService(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ClassicMobileServicesGetClassicMobileServiceResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of mobile service
   * @param callback The callback
   */
  getClassicMobileService(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ClassicMobileService>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of mobile service
   * @param options The optional parameters
   * @param callback The callback
   */
  getClassicMobileService(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClassicMobileService>): void;
  getClassicMobileService(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClassicMobileService>, callback?: msRest.ServiceCallback<Models.ClassicMobileService>): Promise<Models.ClassicMobileServicesGetClassicMobileServiceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getClassicMobileServiceOperationSpec,
      callback) as Promise<Models.ClassicMobileServicesGetClassicMobileServiceResponse>;
  }

  /**
   * @summary Delete a mobile service.
   * @param resourceGroupName Name of resource group
   * @param name Name of mobile service
   * @param [options] The optional parameters
   * @returns Promise<Models.ClassicMobileServicesDeleteClassicMobileServiceResponse>
   */
  deleteClassicMobileService(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ClassicMobileServicesDeleteClassicMobileServiceResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of mobile service
   * @param callback The callback
   */
  deleteClassicMobileService(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of mobile service
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteClassicMobileService(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteClassicMobileService(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ClassicMobileServicesDeleteClassicMobileServiceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteClassicMobileServiceOperationSpec,
      callback) as Promise<Models.ClassicMobileServicesDeleteClassicMobileServiceResponse>;
  }

  /**
   * @summary Get all mobile services in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClassicMobileServicesGetClassicMobileServicesNextResponse>
   */
  getClassicMobileServicesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ClassicMobileServicesGetClassicMobileServicesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getClassicMobileServicesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getClassicMobileServicesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): void;
  getClassicMobileServicesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClassicMobileServiceCollection>, callback?: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): Promise<Models.ClassicMobileServicesGetClassicMobileServicesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getClassicMobileServicesNextOperationSpec,
      callback) as Promise<Models.ClassicMobileServicesGetClassicMobileServicesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getClassicMobileServicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClassicMobileServiceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getClassicMobileServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClassicMobileService
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteClassicMobileServiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getClassicMobileServicesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClassicMobileServiceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
