/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/sitesMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a Sites. */
export class Sites {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a Sites.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Retrieves a specific Virtual Network Connection associated with this web app.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteVNETConnectionSlotResponse>
   */
  getSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteVNETConnectionSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  getSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  getSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.SitesGetSiteVNETConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        slot,
        options
      },
      getSiteVNETConnectionSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteVNETConnectionSlotResponse>;
  }

  /**
   * @summary Adds a Virtual Network Connection or updates it's properties.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteVNETConnectionSlotResponse>
   */
  createOrUpdateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteVNETConnectionSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  createOrUpdateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  createOrUpdateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.SitesCreateOrUpdateSiteVNETConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        connectionEnvelope,
        slot,
        options
      },
      createOrUpdateSiteVNETConnectionSlotOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteVNETConnectionSlotResponse>;
  }

  /**
   * @summary Removes the specified Virtual Network Connection association from this web app.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSiteVNETConnectionSlotResponse>
   */
  deleteSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteSiteVNETConnectionSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  deleteSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSiteVNETConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        slot,
        options
      },
      deleteSiteVNETConnectionSlotOperationSpec,
      callback) as Promise<Models.SitesDeleteSiteVNETConnectionSlotResponse>;
  }

  /**
   * @summary Adds a Virtual Network Connection or updates it's properties.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteVNETConnectionSlotResponse>
   */
  updateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteVNETConnectionSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  updateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  updateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.SitesUpdateSiteVNETConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        connectionEnvelope,
        slot,
        options
      },
      updateSiteVNETConnectionSlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteVNETConnectionSlotResponse>;
  }

  /**
   * @summary Retrieves a specific Virtual Network Connection associated with this web app.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteVNETConnectionResponse>
   */
  getSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteVNETConnectionResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param callback The callback
   */
  getSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  getSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.SitesGetSiteVNETConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        options
      },
      getSiteVNETConnectionOperationSpec,
      callback) as Promise<Models.SitesGetSiteVNETConnectionResponse>;
  }

  /**
   * @summary Adds a Virtual Network Connection or updates it's properties.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteVNETConnectionResponse>
   */
  createOrUpdateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteVNETConnectionResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param callback The callback
   */
  createOrUpdateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  createOrUpdateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.SitesCreateOrUpdateSiteVNETConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        connectionEnvelope,
        options
      },
      createOrUpdateSiteVNETConnectionOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteVNETConnectionResponse>;
  }

  /**
   * @summary Removes the specified Virtual Network Connection association from this web app.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSiteVNETConnectionResponse>
   */
  deleteSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteSiteVNETConnectionResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param callback The callback
   */
  deleteSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSiteVNETConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        options
      },
      deleteSiteVNETConnectionOperationSpec,
      callback) as Promise<Models.SitesDeleteSiteVNETConnectionResponse>;
  }

  /**
   * @summary Adds a Virtual Network Connection or updates it's properties.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteVNETConnectionResponse>
   */
  updateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteVNETConnectionResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param callback The callback
   */
  updateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param connectionEnvelope The properties of this Virtual Network Connection
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  updateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: Models.VnetInfo, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.SitesUpdateSiteVNETConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        connectionEnvelope,
        options
      },
      updateSiteVNETConnectionOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteVNETConnectionResponse>;
  }

  /**
   * @summary Retrieves a view of all network features in use on this web app.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteNetworkFeaturesSlotResponse>
   */
  getSiteNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteNetworkFeaturesSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  getSiteNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
  getSiteNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkFeatures>, callback?: msRest.ServiceCallback<Models.NetworkFeatures>): Promise<Models.SitesGetSiteNetworkFeaturesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        view,
        slot,
        options
      },
      getSiteNetworkFeaturesSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteNetworkFeaturesSlotResponse>;
  }

  /**
   * @summary Retrieves a view of all network features in use on this web app.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteNetworkFeaturesResponse>
   */
  getSiteNetworkFeatures(resourceGroupName: string, name: string, view: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteNetworkFeaturesResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param callback The callback
   */
  getSiteNetworkFeatures(resourceGroupName: string, name: string, view: string, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param view The type of view. This can either be "summary" or "detailed".
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteNetworkFeatures(resourceGroupName: string, name: string, view: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkFeatures>): void;
  getSiteNetworkFeatures(resourceGroupName: string, name: string, view: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkFeatures>, callback?: msRest.ServiceCallback<Models.NetworkFeatures>): Promise<Models.SitesGetSiteNetworkFeaturesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        view,
        options
      },
      getSiteNetworkFeaturesOperationSpec,
      callback) as Promise<Models.SitesGetSiteNetworkFeaturesResponse>;
  }

  /**
   * @summary Gets the operation for a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param operationId Id of an operation
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteOperationSlotResponse>
   */
  getSiteOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteOperationSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param operationId Id of an operation
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param operationId Id of an operation
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSiteOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesGetSiteOperationSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        slot,
        options
      },
      getSiteOperationSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteOperationSlotResponse>;
  }

  /**
   * @summary Gets the operation for a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param operationId Id of an operation
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteOperationResponse>
   */
  getSiteOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteOperationResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param operationId Id of an operation
   * @param callback The callback
   */
  getSiteOperation(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param operationId Id of an operation
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteOperation(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSiteOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesGetSiteOperationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        options
      },
      getSiteOperationOperationSpec,
      callback) as Promise<Models.SitesGetSiteOperationResponse>;
  }

  /**
   * @summary Swaps web app slots
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesSwapSlotWithProductionResponse>
   */
  swapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<Models.SitesSwapSlotWithProductionResponse> {
    return this.beginSwapSlotWithProduction(resourceGroupName,name,slotSwapEntity,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SitesSwapSlotWithProductionResponse>;
  }

  /**
   * @summary Swaps web app slots
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name
   * @param slot Name of source slot for the swap
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesSwapSlotsSlotResponse>
   */
  swapSlotsSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesSwapSlotsSlotResponse> {
    return this.beginSwapSlotsSlot(resourceGroupName,name,slotSwapEntity,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SitesSwapSlotsSlotResponse>;
  }

  /**
   * @summary Get the difference in configuration settings between two web app slots
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSlotsDifferencesFromProductionResponse>
   */
  getSlotsDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSlotsDifferencesFromProductionResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name
   * @param callback The callback
   */
  getSlotsDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name
   * @param options The optional parameters
   * @param callback The callback
   */
  getSlotsDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  getSlotsDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotDifferenceCollection>, callback?: msRest.ServiceCallback<Models.SlotDifferenceCollection>): Promise<Models.SitesGetSlotsDifferencesFromProductionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        options
      },
      getSlotsDifferencesFromProductionOperationSpec,
      callback) as Promise<Models.SitesGetSlotsDifferencesFromProductionResponse>;
  }

  /**
   * @summary Get the difference in configuration settings between two web app slots
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name
   * @param slot Name of the source slot
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSlotsDifferencesSlotResponse>
   */
  getSlotsDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSlotsDifferencesSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name
   * @param slot Name of the source slot
   * @param callback The callback
   */
  getSlotsDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name
   * @param slot Name of the source slot
   * @param options The optional parameters
   * @param callback The callback
   */
  getSlotsDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  getSlotsDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotDifferenceCollection>, callback?: msRest.ServiceCallback<Models.SlotDifferenceCollection>): Promise<Models.SitesGetSlotsDifferencesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        slot,
        options
      },
      getSlotsDifferencesSlotOperationSpec,
      callback) as Promise<Models.SitesGetSlotsDifferencesSlotResponse>;
  }

  /**
   * @summary Applies the configuration settings from the target slot onto the current slot
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot
   * will be applied on the source slot
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesApplySlotConfigToProductionResponse>
   */
  applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<Models.SitesApplySlotConfigToProductionResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot
   * will be applied on the source slot
   * @param callback The callback
   */
  applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot
   * will be applied on the source slot
   * @param options The optional parameters
   * @param callback The callback
   */
  applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesApplySlotConfigToProductionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        options
      },
      applySlotConfigToProductionOperationSpec,
      callback) as Promise<Models.SitesApplySlotConfigToProductionResponse>;
  }

  /**
   * @summary Applies the configuration settings from the target slot onto the current slot
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot
   * will be applied on the source slot
   * @param slot Name of the source slot. Settings from the target slot will be applied onto this
   * slot
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesApplySlotConfigSlotResponse>
   */
  applySlotConfigSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesApplySlotConfigSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot
   * will be applied on the source slot
   * @param slot Name of the source slot. Settings from the target slot will be applied onto this
   * slot
   * @param callback The callback
   */
  applySlotConfigSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot
   * will be applied on the source slot
   * @param slot Name of the source slot. Settings from the target slot will be applied onto this
   * slot
   * @param options The optional parameters
   * @param callback The callback
   */
  applySlotConfigSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  applySlotConfigSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesApplySlotConfigSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        slot,
        options
      },
      applySlotConfigSlotOperationSpec,
      callback) as Promise<Models.SitesApplySlotConfigSlotResponse>;
  }

  /**
   * @summary Resets the configuration settings of the current slot if they were previously modified
   * by calling ApplySlotConfig API
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesResetProductionSlotConfigResponse>
   */
  resetProductionSlotConfig(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesResetProductionSlotConfigResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  resetProductionSlotConfig(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  resetProductionSlotConfig(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  resetProductionSlotConfig(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesResetProductionSlotConfigResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      resetProductionSlotConfigOperationSpec,
      callback) as Promise<Models.SitesResetProductionSlotConfigResponse>;
  }

  /**
   * @summary Resets the configuration settings of the current slot if they were previously modified
   * by calling ApplySlotConfig API
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesResetSlotConfigSlotResponse>
   */
  resetSlotConfigSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesResetSlotConfigSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  resetSlotConfigSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  resetSlotConfigSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  resetSlotConfigSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesResetSlotConfigSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      resetSlotConfigSlotOperationSpec,
      callback) as Promise<Models.SitesResetSlotConfigSlotResponse>;
  }

  /**
   * @summary Gets the names of application settings and connection string that remain with the slot
   * during swap operation
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSlotConfigNamesResponse>
   */
  getSlotConfigNames(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSlotConfigNamesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSlotConfigNames(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSlotConfigNames(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
  getSlotConfigNames(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotConfigNamesResource>, callback?: msRest.ServiceCallback<Models.SlotConfigNamesResource>): Promise<Models.SitesGetSlotConfigNamesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSlotConfigNamesOperationSpec,
      callback) as Promise<Models.SitesGetSlotConfigNamesResponse>;
  }

  /**
   * @summary Updates the names of application settings and connection string that remain with the
   * slot during swap operation
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotConfigNames Request body containing the names of application settings and connection
   * strings
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSlotConfigNamesResponse>
   */
  updateSlotConfigNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSlotConfigNamesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotConfigNames Request body containing the names of application settings and connection
   * strings
   * @param callback The callback
   */
  updateSlotConfigNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotConfigNames Request body containing the names of application settings and connection
   * strings
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSlotConfigNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotConfigNamesResource>): void;
  updateSlotConfigNames(resourceGroupName: string, name: string, slotConfigNames: Models.SlotConfigNamesResource, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotConfigNamesResource>, callback?: msRest.ServiceCallback<Models.SlotConfigNamesResource>): Promise<Models.SitesUpdateSlotConfigNamesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slotConfigNames,
        options
      },
      updateSlotConfigNamesOperationSpec,
      callback) as Promise<Models.SitesUpdateSlotConfigNamesResponse>;
  }

  /**
   * @summary Gets all the slots for a web apps
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteSlotsResponse>
   */
  getSiteSlots(resourceGroupName: string, name: string, options?: Models.SitesGetSiteSlotsOptionalParams): Promise<Models.SitesGetSiteSlotsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSiteSlots(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteSlots(resourceGroupName: string, name: string, options: Models.SitesGetSiteSlotsOptionalParams, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getSiteSlots(resourceGroupName: string, name: string, options?: Models.SitesGetSiteSlotsOptionalParams | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.SitesGetSiteSlotsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteSlotsOperationSpec,
      callback) as Promise<Models.SitesGetSiteSlotsResponse>;
  }

  /**
   * @summary Gets the web apps for a subscription in the specified resource group
   * @param resourceGroupName Name of resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSitesResponse>
   */
  getSites(resourceGroupName: string, options?: Models.SitesGetSitesOptionalParams): Promise<Models.SitesGetSitesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param callback The callback
   */
  getSites(resourceGroupName: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  getSites(resourceGroupName: string, options: Models.SitesGetSitesOptionalParams, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getSites(resourceGroupName: string, options?: Models.SitesGetSitesOptionalParams | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.SitesGetSitesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getSitesOperationSpec,
      callback) as Promise<Models.SitesGetSitesResponse>;
  }

  /**
   * @summary Get details of a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteResponse>
   */
  getSite(resourceGroupName: string, name: string, options?: Models.SitesGetSiteOptionalParams): Promise<Models.SitesGetSiteResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.Site>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSite(resourceGroupName: string, name: string, options: Models.SitesGetSiteOptionalParams, callback: msRest.ServiceCallback<Models.Site>): void;
  getSite(resourceGroupName: string, name: string, options?: Models.SitesGetSiteOptionalParams | msRest.ServiceCallback<Models.Site>, callback?: msRest.ServiceCallback<Models.Site>): Promise<Models.SitesGetSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteOperationSpec,
      callback) as Promise<Models.SitesGetSiteResponse>;
  }

  /**
   * @summary Creates a new web app or modifies an existing web app.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the web app
   * @param siteEnvelope Details of web app if it exists already
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteResponse>
   */
  createOrUpdateSite(resourceGroupName: string, name: string, siteEnvelope: Models.Site, options?: Models.SitesCreateOrUpdateSiteOptionalParams): Promise<Models.SitesCreateOrUpdateSiteResponse> {
    return this.beginCreateOrUpdateSite(resourceGroupName,name,siteEnvelope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SitesCreateOrUpdateSiteResponse>;
  }

  /**
   * @summary Deletes a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSiteResponse>
   */
  deleteSite(resourceGroupName: string, name: string, options?: Models.SitesDeleteSiteOptionalParams): Promise<Models.SitesDeleteSiteResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  deleteSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSite(resourceGroupName: string, name: string, options: Models.SitesDeleteSiteOptionalParams, callback: msRest.ServiceCallback<any>): void;
  deleteSite(resourceGroupName: string, name: string, options?: Models.SitesDeleteSiteOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteSiteOperationSpec,
      callback) as Promise<Models.SitesDeleteSiteResponse>;
  }

  /**
   * @summary Get details of a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteSlotResponse>
   */
  getSiteSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesGetSiteSlotOptionalParams): Promise<Models.SitesGetSiteSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.Site>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteSlot(resourceGroupName: string, name: string, slot: string, options: Models.SitesGetSiteSlotOptionalParams, callback: msRest.ServiceCallback<Models.Site>): void;
  getSiteSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesGetSiteSlotOptionalParams | msRest.ServiceCallback<Models.Site>, callback?: msRest.ServiceCallback<Models.Site>): Promise<Models.SitesGetSiteSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteSlotResponse>;
  }

  /**
   * @summary Creates a new web app or modifies an existing web app.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the web app
   * @param siteEnvelope Details of web app if it exists already
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteSlotResponse>
   */
  createOrUpdateSiteSlot(resourceGroupName: string, name: string, siteEnvelope: Models.Site, slot: string, options?: Models.SitesCreateOrUpdateSiteSlotOptionalParams): Promise<Models.SitesCreateOrUpdateSiteSlotResponse> {
    return this.beginCreateOrUpdateSiteSlot(resourceGroupName,name,siteEnvelope,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SitesCreateOrUpdateSiteSlotResponse>;
  }

  /**
   * @summary Deletes a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSiteSlotResponse>
   */
  deleteSiteSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesDeleteSiteSlotOptionalParams): Promise<Models.SitesDeleteSiteSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  deleteSiteSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteSlot(resourceGroupName: string, name: string, slot: string, options: Models.SitesDeleteSiteSlotOptionalParams, callback: msRest.ServiceCallback<any>): void;
  deleteSiteSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesDeleteSiteSlotOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSiteSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      deleteSiteSlotOperationSpec,
      callback) as Promise<Models.SitesDeleteSiteSlotResponse>;
  }

  /**
   * @summary Creates a new web app or modifies an existing web app.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesIsSiteCloneableResponse>
   */
  isSiteCloneable(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesIsSiteCloneableResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the web app
   * @param callback The callback
   */
  isSiteCloneable(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the web app
   * @param options The optional parameters
   * @param callback The callback
   */
  isSiteCloneable(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
  isSiteCloneable(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteCloneability>, callback?: msRest.ServiceCallback<Models.SiteCloneability>): Promise<Models.SitesIsSiteCloneableResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      isSiteCloneableOperationSpec,
      callback) as Promise<Models.SitesIsSiteCloneableResponse>;
  }

  /**
   * @summary Creates a new web app or modifies an existing web app.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesIsSiteCloneableSlotResponse>
   */
  isSiteCloneableSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesIsSiteCloneableSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  isSiteCloneableSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
  /**
   * @param resourceGroupName Name of the resource group
   * @param name Name of the web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  isSiteCloneableSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteCloneability>): void;
  isSiteCloneableSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteCloneability>, callback?: msRest.ServiceCallback<Models.SiteCloneability>): Promise<Models.SitesIsSiteCloneableSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      isSiteCloneableSlotOperationSpec,
      callback) as Promise<Models.SitesIsSiteCloneableSlotResponse>;
  }

  /**
   * @summary Recovers a deleted web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be
   * obtained by calling GetDeletedSites or GetSiteSnapshots API.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesRecoverSiteResponse>
   */
  recoverSite(resourceGroupName: string, name: string, recoveryEntity: Models.CsmSiteRecoveryEntity, options?: msRest.RequestOptionsBase): Promise<Models.SitesRecoverSiteResponse> {
    return this.beginRecoverSite(resourceGroupName,name,recoveryEntity,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SitesRecoverSiteResponse>;
  }

  /**
   * @summary Recovers a deleted web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be
   * obtained by calling GetDeletedSites or GetSiteSnapshots API.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesRecoverSiteSlotResponse>
   */
  recoverSiteSlot(resourceGroupName: string, name: string, recoveryEntity: Models.CsmSiteRecoveryEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesRecoverSiteSlotResponse> {
    return this.beginRecoverSiteSlot(resourceGroupName,name,recoveryEntity,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SitesRecoverSiteSlotResponse>;
  }

  /**
   * @summary Returns all Snapshots to the user.
   * @param resourceGroupName Webspace
   * @param name Website Name
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteSnapshotsResponse>
   */
  getSiteSnapshots(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteSnapshotsResponse>;
  /**
   * @param resourceGroupName Webspace
   * @param name Website Name
   * @param callback The callback
   */
  getSiteSnapshots(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Webspace
   * @param name Website Name
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteSnapshots(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSiteSnapshots(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesGetSiteSnapshotsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteSnapshotsOperationSpec,
      callback) as Promise<Models.SitesGetSiteSnapshotsResponse>;
  }

  /**
   * @summary Returns all Snapshots to the user.
   * @param resourceGroupName Webspace
   * @param name Website Name
   * @param slot Website Slot
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteSnapshotsSlotResponse>
   */
  getSiteSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteSnapshotsSlotResponse>;
  /**
   * @param resourceGroupName Webspace
   * @param name Website Name
   * @param slot Website Slot
   * @param callback The callback
   */
  getSiteSnapshotsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Webspace
   * @param name Website Name
   * @param slot Website Slot
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSiteSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesGetSiteSnapshotsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteSnapshotsSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteSnapshotsSlotResponse>;
  }

  /**
   * @summary Gets deleted web apps in subscription
   * @param resourceGroupName Name of resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetDeletedSitesResponse>
   */
  getDeletedSites(resourceGroupName: string, options?: Models.SitesGetDeletedSitesOptionalParams): Promise<Models.SitesGetDeletedSitesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param callback The callback
   */
  getDeletedSites(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DeletedSiteCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeletedSites(resourceGroupName: string, options: Models.SitesGetDeletedSitesOptionalParams, callback: msRest.ServiceCallback<Models.DeletedSiteCollection>): void;
  getDeletedSites(resourceGroupName: string, options?: Models.SitesGetDeletedSitesOptionalParams | msRest.ServiceCallback<Models.DeletedSiteCollection>, callback?: msRest.ServiceCallback<Models.DeletedSiteCollection>): Promise<Models.SitesGetDeletedSitesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getDeletedSitesOperationSpec,
      callback) as Promise<Models.SitesGetDeletedSitesResponse>;
  }

  /**
   * @summary List deployments
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetDeploymentsResponse>
   */
  getDeployments(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetDeploymentsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getDeployments(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployments(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  getDeployments(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.SitesGetDeploymentsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getDeploymentsOperationSpec,
      callback) as Promise<Models.SitesGetDeploymentsResponse>;
  }

  /**
   * @summary List deployments
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetDeploymentsSlotResponse>
   */
  getDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetDeploymentsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getDeploymentsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  getDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.SitesGetDeploymentsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getDeploymentsSlotOperationSpec,
      callback) as Promise<Models.SitesGetDeploymentsSlotResponse>;
  }

  /**
   * @summary List deployments
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param instanceId Id of web app instance
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetInstanceDeploymentsResponse>
   */
  getInstanceDeployments(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetInstanceDeploymentsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param instanceId Id of web app instance
   * @param callback The callback
   */
  getInstanceDeployments(resourceGroupName: string, name: string, instanceId: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param instanceId Id of web app instance
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceDeployments(resourceGroupName: string, name: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  getInstanceDeployments(resourceGroupName: string, name: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.SitesGetInstanceDeploymentsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        instanceId,
        options
      },
      getInstanceDeploymentsOperationSpec,
      callback) as Promise<Models.SitesGetInstanceDeploymentsResponse>;
  }

  /**
   * @summary List deployments
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetInstanceDeploymentsSlotResponse>
   */
  getInstanceDeploymentsSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetInstanceDeploymentsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param callback The callback
   */
  getInstanceDeploymentsSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceDeploymentsSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  getInstanceDeploymentsSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.SitesGetInstanceDeploymentsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        instanceId,
        options
      },
      getInstanceDeploymentsSlotOperationSpec,
      callback) as Promise<Models.SitesGetInstanceDeploymentsSlotResponse>;
  }

  /**
   * @summary Get the deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param instanceId Id of web app instance
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetInstanceDeploymentResponse>
   */
  getInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetInstanceDeploymentResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param instanceId Id of web app instance
   * @param callback The callback
   */
  getInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param instanceId Id of web app instance
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  getInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.SitesGetInstanceDeploymentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        instanceId,
        options
      },
      getInstanceDeploymentOperationSpec,
      callback) as Promise<Models.SitesGetInstanceDeploymentResponse>;
  }

  /**
   * @summary Create a deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param instanceId Id of web app instance
   * @param deployment Details of deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateInstanceDeploymentResponse>
   */
  createInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateInstanceDeploymentResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param instanceId Id of web app instance
   * @param deployment Details of deployment
   * @param callback The callback
   */
  createInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, deployment: Models.Deployment, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param instanceId Id of web app instance
   * @param deployment Details of deployment
   * @param options The optional parameters
   * @param callback The callback
   */
  createInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, deployment: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  createInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.SitesCreateInstanceDeploymentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        instanceId,
        deployment,
        options
      },
      createInstanceDeploymentOperationSpec,
      callback) as Promise<Models.SitesCreateInstanceDeploymentResponse>;
  }

  /**
   * @summary Delete the deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param instanceId Id of web app instance
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteInstanceDeploymentResponse>
   */
  deleteInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteInstanceDeploymentResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param instanceId Id of web app instance
   * @param callback The callback
   */
  deleteInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param instanceId Id of web app instance
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteInstanceDeploymentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        instanceId,
        options
      },
      deleteInstanceDeploymentOperationSpec,
      callback) as Promise<Models.SitesDeleteInstanceDeploymentResponse>;
  }

  /**
   * @summary Get the deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetDeploymentResponse>
   */
  getDeployment(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetDeploymentResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param callback The callback
   */
  getDeployment(resourceGroupName: string, name: string, id: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeployment(resourceGroupName: string, name: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  getDeployment(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.SitesGetDeploymentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        options
      },
      getDeploymentOperationSpec,
      callback) as Promise<Models.SitesGetDeploymentResponse>;
  }

  /**
   * @summary Create a deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param deployment Details of deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateDeploymentResponse>
   */
  createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateDeploymentResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param deployment Details of deployment
   * @param callback The callback
   */
  createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param deployment Details of deployment
   * @param options The optional parameters
   * @param callback The callback
   */
  createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  createDeployment(resourceGroupName: string, name: string, id: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.SitesCreateDeploymentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        deployment,
        options
      },
      createDeploymentOperationSpec,
      callback) as Promise<Models.SitesCreateDeploymentResponse>;
  }

  /**
   * @summary Delete the deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteDeploymentResponse>
   */
  deleteDeployment(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteDeploymentResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param callback The callback
   */
  deleteDeployment(resourceGroupName: string, name: string, id: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDeployment(resourceGroupName: string, name: string, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteDeployment(resourceGroupName: string, name: string, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteDeploymentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        options
      },
      deleteDeploymentOperationSpec,
      callback) as Promise<Models.SitesDeleteDeploymentResponse>;
  }

  /**
   * @summary Get the deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetDeploymentSlotResponse>
   */
  getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetDeploymentSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.SitesGetDeploymentSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        options
      },
      getDeploymentSlotOperationSpec,
      callback) as Promise<Models.SitesGetDeploymentSlotResponse>;
  }

  /**
   * @summary Create a deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param deployment Details of deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateDeploymentSlotResponse>
   */
  createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateDeploymentSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param deployment Details of deployment
   * @param callback The callback
   */
  createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param deployment Details of deployment
   * @param options The optional parameters
   * @param callback The callback
   */
  createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.SitesCreateDeploymentSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        deployment,
        options
      },
      createDeploymentSlotOperationSpec,
      callback) as Promise<Models.SitesCreateDeploymentSlotResponse>;
  }

  /**
   * @summary Delete the deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteDeploymentSlotResponse>
   */
  deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteDeploymentSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteDeploymentSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        options
      },
      deleteDeploymentSlotOperationSpec,
      callback) as Promise<Models.SitesDeleteDeploymentSlotResponse>;
  }

  /**
   * @summary Get the deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetInstanceDeploymentSlotResponse>
   */
  getInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetInstanceDeploymentSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param callback The callback
   */
  getInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  getInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.SitesGetInstanceDeploymentSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        instanceId,
        options
      },
      getInstanceDeploymentSlotOperationSpec,
      callback) as Promise<Models.SitesGetInstanceDeploymentSlotResponse>;
  }

  /**
   * @summary Create a deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param deployment Details of deployment
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateInstanceDeploymentSlotResponse>
   */
  createInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateInstanceDeploymentSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param deployment Details of deployment
   * @param callback The callback
   */
  createInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, deployment: Models.Deployment, callback: msRest.ServiceCallback<Models.Deployment>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param deployment Details of deployment
   * @param options The optional parameters
   * @param callback The callback
   */
  createInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, deployment: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Deployment>): void;
  createInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, deployment: Models.Deployment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Deployment>, callback?: msRest.ServiceCallback<Models.Deployment>): Promise<Models.SitesCreateInstanceDeploymentSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        instanceId,
        deployment,
        options
      },
      createInstanceDeploymentSlotOperationSpec,
      callback) as Promise<Models.SitesCreateInstanceDeploymentSlotResponse>;
  }

  /**
   * @summary Delete the deployment
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteInstanceDeploymentSlotResponse>
   */
  deleteInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteInstanceDeploymentSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param callback The callback
   */
  deleteInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param id Id of the deployment
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId Id of web app instance
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteInstanceDeploymentSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        id,
        slot,
        instanceId,
        options
      },
      deleteInstanceDeploymentSlotOperationSpec,
      callback) as Promise<Models.SitesDeleteInstanceDeploymentSlotResponse>;
  }

  /**
   * @summary Gets all instance of a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteInstanceIdentifiersResponse>
   */
  getSiteInstanceIdentifiers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteInstanceIdentifiersResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSiteInstanceIdentifiers(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteInstanceCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteInstanceIdentifiers(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteInstanceCollection>): void;
  getSiteInstanceIdentifiers(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteInstanceCollection>, callback?: msRest.ServiceCallback<Models.SiteInstanceCollection>): Promise<Models.SitesGetSiteInstanceIdentifiersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteInstanceIdentifiersOperationSpec,
      callback) as Promise<Models.SitesGetSiteInstanceIdentifiersResponse>;
  }

  /**
   * @summary Gets all instance of a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteInstanceIdentifiersSlotResponse>
   */
  getSiteInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteInstanceIdentifiersSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteInstanceCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteInstanceCollection>): void;
  getSiteInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteInstanceCollection>, callback?: msRest.ServiceCallback<Models.SiteInstanceCollection>): Promise<Models.SitesGetSiteInstanceIdentifiersSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteInstanceIdentifiersSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteInstanceIdentifiersSlotResponse>;
  }

  /**
   * @summary Get web app hostname bindings
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteHostNameBindingsResponse>
   */
  getSiteHostNameBindings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteHostNameBindingsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSiteHostNameBindings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteHostNameBindings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  getSiteHostNameBindings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBindingCollection>, callback?: msRest.ServiceCallback<Models.HostNameBindingCollection>): Promise<Models.SitesGetSiteHostNameBindingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteHostNameBindingsOperationSpec,
      callback) as Promise<Models.SitesGetSiteHostNameBindingsResponse>;
  }

  /**
   * @summary Get web app hostname bindings
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteHostNameBindingsSlotResponse>
   */
  getSiteHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteHostNameBindingsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  getSiteHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBindingCollection>, callback?: msRest.ServiceCallback<Models.HostNameBindingCollection>): Promise<Models.SitesGetSiteHostNameBindingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteHostNameBindingsSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteHostNameBindingsSlotResponse>;
  }

  /**
   * @summary Get web app binding for a hostname
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteHostNameBindingResponse>
   */
  getSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteHostNameBindingResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param callback The callback
   */
  getSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  getSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBinding>, callback?: msRest.ServiceCallback<Models.HostNameBinding>): Promise<Models.SitesGetSiteHostNameBindingResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        hostName,
        options
      },
      getSiteHostNameBindingOperationSpec,
      callback) as Promise<Models.SitesGetSiteHostNameBindingResponse>;
  }

  /**
   * @summary Creates a web app hostname binding
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param hostNameBinding Host name binding information
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteHostNameBindingResponse>
   */
  createOrUpdateSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteHostNameBindingResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param hostNameBinding Host name binding information
   * @param callback The callback
   */
  createOrUpdateSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param hostNameBinding Host name binding information
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  createOrUpdateSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBinding>, callback?: msRest.ServiceCallback<Models.HostNameBinding>): Promise<Models.SitesCreateOrUpdateSiteHostNameBindingResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        hostName,
        hostNameBinding,
        options
      },
      createOrUpdateSiteHostNameBindingOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteHostNameBindingResponse>;
  }

  /**
   * @summary Deletes a host name binding
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSiteHostNameBindingResponse>
   */
  deleteSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteSiteHostNameBindingResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param callback The callback
   */
  deleteSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSiteHostNameBindingResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        hostName,
        options
      },
      deleteSiteHostNameBindingOperationSpec,
      callback) as Promise<Models.SitesDeleteSiteHostNameBindingResponse>;
  }

  /**
   * @summary Get web app binding for a hostname
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param hostName Name of host
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteHostNameBindingSlotResponse>
   */
  getSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteHostNameBindingSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param hostName Name of host
   * @param callback The callback
   */
  getSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param hostName Name of host
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  getSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBinding>, callback?: msRest.ServiceCallback<Models.HostNameBinding>): Promise<Models.SitesGetSiteHostNameBindingSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        hostName,
        options
      },
      getSiteHostNameBindingSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteHostNameBindingSlotResponse>;
  }

  /**
   * @summary Creates a web app hostname binding
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param hostNameBinding Host name binding information
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteHostNameBindingSlotResponse>
   */
  createOrUpdateSiteHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteHostNameBindingSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param hostNameBinding Host name binding information
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  createOrUpdateSiteHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param hostName Name of host
   * @param hostNameBinding Host name binding information
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBinding>): void;
  createOrUpdateSiteHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: Models.HostNameBinding, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBinding>, callback?: msRest.ServiceCallback<Models.HostNameBinding>): Promise<Models.SitesCreateOrUpdateSiteHostNameBindingSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        hostName,
        hostNameBinding,
        slot,
        options
      },
      createOrUpdateSiteHostNameBindingSlotOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteHostNameBindingSlotResponse>;
  }

  /**
   * @summary Deletes a host name binding
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param hostName Name of host
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSiteHostNameBindingSlotResponse>
   */
  deleteSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteSiteHostNameBindingSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param hostName Name of host
   * @param callback The callback
   */
  deleteSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param hostName Name of host
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSiteHostNameBindingSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        hostName,
        options
      },
      deleteSiteHostNameBindingSlotOperationSpec,
      callback) as Promise<Models.SitesDeleteSiteHostNameBindingSlotResponse>;
  }

  /**
   * @summary Gets the configuration of the web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteConfigResponse>
   */
  getSiteConfig(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteConfigResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSiteConfig(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteConfig(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  getSiteConfig(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfig>, callback?: msRest.ServiceCallback<Models.SiteConfig>): Promise<Models.SitesGetSiteConfigResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteConfigOperationSpec,
      callback) as Promise<Models.SitesGetSiteConfigResponse>;
  }

  /**
   * @summary Update the configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteConfigResponse>
   */
  createOrUpdateSiteConfig(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteConfigResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param callback The callback
   */
  createOrUpdateSiteConfig(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteConfig(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  createOrUpdateSiteConfig(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfig>, callback?: msRest.ServiceCallback<Models.SiteConfig>): Promise<Models.SitesCreateOrUpdateSiteConfigResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteConfig,
        options
      },
      createOrUpdateSiteConfigOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteConfigResponse>;
  }

  /**
   * @summary Update the configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteConfigResponse>
   */
  updateSiteConfig(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteConfigResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param callback The callback
   */
  updateSiteConfig(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteConfig(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  updateSiteConfig(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfig>, callback?: msRest.ServiceCallback<Models.SiteConfig>): Promise<Models.SitesUpdateSiteConfigResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteConfig,
        options
      },
      updateSiteConfigOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteConfigResponse>;
  }

  /**
   * @summary Gets the configuration of the web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteConfigSlotResponse>
   */
  getSiteConfigSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteConfigSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteConfigSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteConfigSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  getSiteConfigSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfig>, callback?: msRest.ServiceCallback<Models.SiteConfig>): Promise<Models.SitesGetSiteConfigSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteConfigSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteConfigSlotResponse>;
  }

  /**
   * @summary Update the configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteConfigSlotResponse>
   */
  createOrUpdateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteConfigSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  createOrUpdateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, slot: string, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  createOrUpdateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfig>, callback?: msRest.ServiceCallback<Models.SiteConfig>): Promise<Models.SitesCreateOrUpdateSiteConfigSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteConfig,
        slot,
        options
      },
      createOrUpdateSiteConfigSlotOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteConfigSlotResponse>;
  }

  /**
   * @summary Update the configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteConfigSlotResponse>
   */
  updateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteConfigSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  updateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, slot: string, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteConfig Request body that contains the configuration setting for the web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteConfig>): void;
  updateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: Models.SiteConfig, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteConfig>, callback?: msRest.ServiceCallback<Models.SiteConfig>): Promise<Models.SitesUpdateSiteConfigSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteConfig,
        slot,
        options
      },
      updateSiteConfigSlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteConfigSlotResponse>;
  }

  /**
   * @summary Get the source control configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteSourceControlResponse>
   */
  getSiteSourceControl(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteSourceControlResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSiteSourceControl(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteSourceControl(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  getSiteSourceControl(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSourceControl>, callback?: msRest.ServiceCallback<Models.SiteSourceControl>): Promise<Models.SitesGetSiteSourceControlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteSourceControlOperationSpec,
      callback) as Promise<Models.SitesGetSiteSourceControlResponse>;
  }

  /**
   * @summary Update the source control configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteSourceControlResponse>
   */
  createOrUpdateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteSourceControlResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param callback The callback
   */
  createOrUpdateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  createOrUpdateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSourceControl>, callback?: msRest.ServiceCallback<Models.SiteSourceControl>): Promise<Models.SitesCreateOrUpdateSiteSourceControlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteSourceControl,
        options
      },
      createOrUpdateSiteSourceControlOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteSourceControlResponse>;
  }

  /**
   * @summary Delete source control configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSiteSourceControlResponse>
   */
  deleteSiteSourceControl(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteSiteSourceControlResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  deleteSiteSourceControl(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteSourceControl(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteSiteSourceControl(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSiteSourceControlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteSiteSourceControlOperationSpec,
      callback) as Promise<Models.SitesDeleteSiteSourceControlResponse>;
  }

  /**
   * @summary Update the source control configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteSourceControlResponse>
   */
  updateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteSourceControlResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param callback The callback
   */
  updateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  updateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSourceControl>, callback?: msRest.ServiceCallback<Models.SiteSourceControl>): Promise<Models.SitesUpdateSiteSourceControlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteSourceControl,
        options
      },
      updateSiteSourceControlOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteSourceControlResponse>;
  }

  /**
   * @summary Get the source control configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteSourceControlSlotResponse>
   */
  getSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteSourceControlSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  getSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSourceControl>, callback?: msRest.ServiceCallback<Models.SiteSourceControl>): Promise<Models.SitesGetSiteSourceControlSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteSourceControlSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteSourceControlSlotResponse>;
  }

  /**
   * @summary Update the source control configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteSourceControlSlotResponse>
   */
  createOrUpdateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteSourceControlSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  createOrUpdateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  createOrUpdateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSourceControl>, callback?: msRest.ServiceCallback<Models.SiteSourceControl>): Promise<Models.SitesCreateOrUpdateSiteSourceControlSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteSourceControl,
        slot,
        options
      },
      createOrUpdateSiteSourceControlSlotOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteSourceControlSlotResponse>;
  }

  /**
   * @summary Delete source control configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSiteSourceControlSlotResponse>
   */
  deleteSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteSiteSourceControlSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  deleteSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSiteSourceControlSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      deleteSiteSourceControlSlotOperationSpec,
      callback) as Promise<Models.SitesDeleteSiteSourceControlSlotResponse>;
  }

  /**
   * @summary Update the source control configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteSourceControlSlotResponse>
   */
  updateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteSourceControlSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  updateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteSourceControl Request body that contains the source control parameters
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteSourceControl>): void;
  updateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: Models.SiteSourceControl, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteSourceControl>, callback?: msRest.ServiceCallback<Models.SiteSourceControl>): Promise<Models.SitesUpdateSiteSourceControlSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteSourceControl,
        slot,
        options
      },
      updateSiteSourceControlSlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteSourceControlSlotResponse>;
  }

  /**
   * @summary Gets the application settings of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteAppSettingsSlotResponse>
   */
  listSiteAppSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteAppSettingsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  listSiteAppSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteAppSettingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listSiteAppSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.SitesListSiteAppSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSiteAppSettingsSlotOperationSpec,
      callback) as Promise<Models.SitesListSiteAppSettingsSlotResponse>;
  }

  /**
   * @summary Gets the application settings of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteAppSettingsResponse>
   */
  listSiteAppSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteAppSettingsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  listSiteAppSettings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteAppSettings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listSiteAppSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.SitesListSiteAppSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSiteAppSettingsOperationSpec,
      callback) as Promise<Models.SitesListSiteAppSettingsResponse>;
  }

  /**
   * @summary Updates the application settings of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param appSettings Application settings of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteAppSettingsResponse>
   */
  updateSiteAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteAppSettingsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param appSettings Application settings of web app
   * @param callback The callback
   */
  updateSiteAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param appSettings Application settings of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  updateSiteAppSettings(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.SitesUpdateSiteAppSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        appSettings,
        options
      },
      updateSiteAppSettingsOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteAppSettingsResponse>;
  }

  /**
   * @summary Updates the application settings of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param appSettings Application settings of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteAppSettingsSlotResponse>
   */
  updateSiteAppSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteAppSettingsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param appSettings Application settings of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  updateSiteAppSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param appSettings Application settings of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteAppSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  updateSiteAppSettingsSlot(resourceGroupName: string, name: string, appSettings: Models.StringDictionary, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.SitesUpdateSiteAppSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        appSettings,
        slot,
        options
      },
      updateSiteAppSettingsSlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteAppSettingsSlotResponse>;
  }

  /**
   * @summary Gets the connection strings associated with web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteConnectionStringsResponse>
   */
  listSiteConnectionStrings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteConnectionStringsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  listSiteConnectionStrings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteConnectionStrings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  listSiteConnectionStrings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionStringDictionary>, callback?: msRest.ServiceCallback<Models.ConnectionStringDictionary>): Promise<Models.SitesListSiteConnectionStringsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSiteConnectionStringsOperationSpec,
      callback) as Promise<Models.SitesListSiteConnectionStringsResponse>;
  }

  /**
   * @summary Gets the connection strings associated with web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteConnectionStringsSlotResponse>
   */
  listSiteConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteConnectionStringsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  listSiteConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  listSiteConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionStringDictionary>, callback?: msRest.ServiceCallback<Models.ConnectionStringDictionary>): Promise<Models.SitesListSiteConnectionStringsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSiteConnectionStringsSlotOperationSpec,
      callback) as Promise<Models.SitesListSiteConnectionStringsSlotResponse>;
  }

  /**
   * @summary Updates the connection strings associated with web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param connectionStrings Connection strings associated with web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteConnectionStringsResponse>
   */
  updateSiteConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteConnectionStringsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param connectionStrings Connection strings associated with web app
   * @param callback The callback
   */
  updateSiteConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param connectionStrings Connection strings associated with web app
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  updateSiteConnectionStrings(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionStringDictionary>, callback?: msRest.ServiceCallback<Models.ConnectionStringDictionary>): Promise<Models.SitesUpdateSiteConnectionStringsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        connectionStrings,
        options
      },
      updateSiteConnectionStringsOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteConnectionStringsResponse>;
  }

  /**
   * @summary Updates the connection strings associated with web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param connectionStrings Connection strings associated with web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteConnectionStringsSlotResponse>
   */
  updateSiteConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteConnectionStringsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param connectionStrings Connection strings associated with web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  updateSiteConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param connectionStrings Connection strings associated with web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStringDictionary>): void;
  updateSiteConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: Models.ConnectionStringDictionary, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionStringDictionary>, callback?: msRest.ServiceCallback<Models.ConnectionStringDictionary>): Promise<Models.SitesUpdateSiteConnectionStringsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        connectionStrings,
        slot,
        options
      },
      updateSiteConnectionStringsSlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteConnectionStringsSlotResponse>;
  }

  /**
   * @summary Gets the Authentication / Authorization settings associated with web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteAuthSettingsResponse>
   */
  listSiteAuthSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteAuthSettingsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  listSiteAuthSettings(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteAuthSettings(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  listSiteAuthSettings(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteAuthSettings>, callback?: msRest.ServiceCallback<Models.SiteAuthSettings>): Promise<Models.SitesListSiteAuthSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSiteAuthSettingsOperationSpec,
      callback) as Promise<Models.SitesListSiteAuthSettingsResponse>;
  }

  /**
   * @summary Gets the Authentication / Authorization settings associated with web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteAuthSettingsSlotResponse>
   */
  listSiteAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteAuthSettingsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  listSiteAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  listSiteAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteAuthSettings>, callback?: msRest.ServiceCallback<Models.SiteAuthSettings>): Promise<Models.SitesListSiteAuthSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSiteAuthSettingsSlotOperationSpec,
      callback) as Promise<Models.SitesListSiteAuthSettingsSlotResponse>;
  }

  /**
   * @summary Updates the Authentication / Authorization settings associated with web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteAuthSettings Auth settings associated with web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteAuthSettingsResponse>
   */
  updateSiteAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteAuthSettingsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteAuthSettings Auth settings associated with web app
   * @param callback The callback
   */
  updateSiteAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteAuthSettings Auth settings associated with web app
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  updateSiteAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteAuthSettings>, callback?: msRest.ServiceCallback<Models.SiteAuthSettings>): Promise<Models.SitesUpdateSiteAuthSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteAuthSettings,
        options
      },
      updateSiteAuthSettingsOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteAuthSettingsResponse>;
  }

  /**
   * @summary Updates the Authentication / Authorization settings associated with web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteAuthSettings Auth settings associated with web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteAuthSettingsSlotResponse>
   */
  updateSiteAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteAuthSettingsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteAuthSettings Auth settings associated with web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  updateSiteAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteAuthSettings Auth settings associated with web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteAuthSettings>): void;
  updateSiteAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: Models.SiteAuthSettings, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteAuthSettings>, callback?: msRest.ServiceCallback<Models.SiteAuthSettings>): Promise<Models.SitesUpdateSiteAuthSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteAuthSettings,
        slot,
        options
      },
      updateSiteAuthSettingsSlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteAuthSettingsSlotResponse>;
  }

  /**
   * @summary Gets the web app publishing credentials
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSitePublishingCredentialsResponse>
   */
  listSitePublishingCredentials(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSitePublishingCredentialsResponse> {
    return this.beginListSitePublishingCredentials(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SitesListSitePublishingCredentialsResponse>;
  }

  /**
   * @summary Gets the web app publishing credentials
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSitePublishingCredentialsSlotResponse>
   */
  listSitePublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSitePublishingCredentialsSlotResponse> {
    return this.beginListSitePublishingCredentialsSlot(resourceGroupName,name,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SitesListSitePublishingCredentialsSlotResponse>;
  }

  /**
   * @summary Gets the web app meta data.
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteMetadataResponse>
   */
  listSiteMetadata(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteMetadataResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  listSiteMetadata(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteMetadata(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listSiteMetadata(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.SitesListSiteMetadataResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSiteMetadataOperationSpec,
      callback) as Promise<Models.SitesListSiteMetadataResponse>;
  }

  /**
   * @summary Gets the web app meta data.
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteMetadataSlotResponse>
   */
  listSiteMetadataSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteMetadataSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  listSiteMetadataSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteMetadataSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  listSiteMetadataSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.SitesListSiteMetadataSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSiteMetadataSlotOperationSpec,
      callback) as Promise<Models.SitesListSiteMetadataSlotResponse>;
  }

  /**
   * @summary Updates the meta data for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param metadata Meta data of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteMetadataResponse>
   */
  updateSiteMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteMetadataResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param metadata Meta data of web app
   * @param callback The callback
   */
  updateSiteMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param metadata Meta data of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  updateSiteMetadata(resourceGroupName: string, name: string, metadata: Models.StringDictionary, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.SitesUpdateSiteMetadataResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        metadata,
        options
      },
      updateSiteMetadataOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteMetadataResponse>;
  }

  /**
   * @summary Updates the meta data for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param metadata Meta data of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteMetadataSlotResponse>
   */
  updateSiteMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteMetadataSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param metadata Meta data of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  updateSiteMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param metadata Meta data of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StringDictionary>): void;
  updateSiteMetadataSlot(resourceGroupName: string, name: string, metadata: Models.StringDictionary, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StringDictionary>, callback?: msRest.ServiceCallback<Models.StringDictionary>): Promise<Models.SitesUpdateSiteMetadataSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        metadata,
        slot,
        options
      },
      updateSiteMetadataSlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteMetadataSlotResponse>;
  }

  /**
   * @summary Gets the web app logs configuration
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteLogsConfigResponse>
   */
  getSiteLogsConfig(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteLogsConfigResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSiteLogsConfig(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteLogsConfig(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  getSiteLogsConfig(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteLogsConfig>, callback?: msRest.ServiceCallback<Models.SiteLogsConfig>): Promise<Models.SitesGetSiteLogsConfigResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteLogsConfigOperationSpec,
      callback) as Promise<Models.SitesGetSiteLogsConfigResponse>;
  }

  /**
   * @summary Updates the meta data for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteLogsConfig Site logs configuration
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteLogsConfigResponse>
   */
  updateSiteLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteLogsConfigResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteLogsConfig Site logs configuration
   * @param callback The callback
   */
  updateSiteLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteLogsConfig Site logs configuration
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  updateSiteLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteLogsConfig>, callback?: msRest.ServiceCallback<Models.SiteLogsConfig>): Promise<Models.SitesUpdateSiteLogsConfigResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteLogsConfig,
        options
      },
      updateSiteLogsConfigOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteLogsConfigResponse>;
  }

  /**
   * @summary Gets the web app logs configuration
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteLogsConfigSlotResponse>
   */
  getSiteLogsConfigSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteLogsConfigSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteLogsConfigSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteLogsConfigSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  getSiteLogsConfigSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteLogsConfig>, callback?: msRest.ServiceCallback<Models.SiteLogsConfig>): Promise<Models.SitesGetSiteLogsConfigSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteLogsConfigSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteLogsConfigSlotResponse>;
  }

  /**
   * @summary Updates the meta data for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteLogsConfig Site logs configuration
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteLogsConfigSlotResponse>
   */
  updateSiteLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteLogsConfigSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteLogsConfig Site logs configuration
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  updateSiteLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param siteLogsConfig Site logs configuration
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteLogsConfig>): void;
  updateSiteLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: Models.SiteLogsConfig, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteLogsConfig>, callback?: msRest.ServiceCallback<Models.SiteLogsConfig>): Promise<Models.SitesUpdateSiteLogsConfigSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        siteLogsConfig,
        slot,
        options
      },
      updateSiteLogsConfigSlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteLogsConfigSlotResponse>;
  }

  /**
   * @param resourceGroupName
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSitePremierAddOnsResponse>
   */
  listSitePremierAddOns(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSitePremierAddOnsResponse>;
  /**
   * @param resourceGroupName
   * @param name
   * @param callback The callback
   */
  listSitePremierAddOns(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  listSitePremierAddOns(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listSitePremierAddOns(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesListSitePremierAddOnsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSitePremierAddOnsOperationSpec,
      callback) as Promise<Models.SitesListSitePremierAddOnsResponse>;
  }

  /**
   * @param resourceGroupName
   * @param name
   * @param slot
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSitePremierAddOnsSlotResponse>
   */
  listSitePremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSitePremierAddOnsSlotResponse>;
  /**
   * @param resourceGroupName
   * @param name
   * @param slot
   * @param callback The callback
   */
  listSitePremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName
   * @param name
   * @param slot
   * @param options The optional parameters
   * @param callback The callback
   */
  listSitePremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listSitePremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesListSitePremierAddOnsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSitePremierAddOnsSlotOperationSpec,
      callback) as Promise<Models.SitesListSitePremierAddOnsSlotResponse>;
  }

  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSitePremierAddOnResponse>
   */
  getSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSitePremierAddOnResponse>;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param callback The callback
   */
  getSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param options The optional parameters
   * @param callback The callback
   */
  getSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesGetSitePremierAddOnResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        options
      },
      getSitePremierAddOnOperationSpec,
      callback) as Promise<Models.SitesGetSitePremierAddOnResponse>;
  }

  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param premierAddOn
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesAddSitePremierAddOnResponse>
   */
  addSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnRequest, options?: msRest.RequestOptionsBase): Promise<Models.SitesAddSitePremierAddOnResponse>;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param premierAddOn
   * @param callback The callback
   */
  addSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnRequest, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param premierAddOn
   * @param options The optional parameters
   * @param callback The callback
   */
  addSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  addSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesAddSitePremierAddOnResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        premierAddOn,
        options
      },
      addSitePremierAddOnOperationSpec,
      callback) as Promise<Models.SitesAddSitePremierAddOnResponse>;
  }

  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSitePremierAddOnResponse>
   */
  deleteSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteSitePremierAddOnResponse>;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param callback The callback
   */
  deleteSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSitePremierAddOnResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        options
      },
      deleteSitePremierAddOnOperationSpec,
      callback) as Promise<Models.SitesDeleteSitePremierAddOnResponse>;
  }

  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param slot
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSitePremierAddOnSlotResponse>
   */
  getSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSitePremierAddOnSlotResponse>;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param slot
   * @param callback The callback
   */
  getSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param slot
   * @param options The optional parameters
   * @param callback The callback
   */
  getSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesGetSitePremierAddOnSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        slot,
        options
      },
      getSitePremierAddOnSlotOperationSpec,
      callback) as Promise<Models.SitesGetSitePremierAddOnSlotResponse>;
  }

  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param premierAddOn
   * @param slot
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesAddSitePremierAddOnSlotResponse>
   */
  addSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesAddSitePremierAddOnSlotResponse>;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param premierAddOn
   * @param slot
   * @param callback The callback
   */
  addSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnRequest, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param premierAddOn
   * @param slot
   * @param options The optional parameters
   * @param callback The callback
   */
  addSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  addSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: Models.PremierAddOnRequest, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesAddSitePremierAddOnSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        premierAddOn,
        slot,
        options
      },
      addSitePremierAddOnSlotOperationSpec,
      callback) as Promise<Models.SitesAddSitePremierAddOnSlotResponse>;
  }

  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param slot
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSitePremierAddOnSlotResponse>
   */
  deleteSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteSitePremierAddOnSlotResponse>;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param slot
   * @param callback The callback
   */
  deleteSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName
   * @param name
   * @param premierAddOnName
   * @param slot
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSitePremierAddOnSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        slot,
        options
      },
      deleteSitePremierAddOnSlotOperationSpec,
      callback) as Promise<Models.SitesDeleteSitePremierAddOnSlotResponse>;
  }

  /**
   * @summary Gets the backup configuration for a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteBackupConfigurationResponse>
   */
  getSiteBackupConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteBackupConfigurationResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSiteBackupConfiguration(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteBackupConfiguration(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  getSiteBackupConfiguration(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupRequest>, callback?: msRest.ServiceCallback<Models.BackupRequest>): Promise<Models.SitesGetSiteBackupConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteBackupConfigurationOperationSpec,
      callback) as Promise<Models.SitesGetSiteBackupConfigurationResponse>;
  }

  /**
   * @summary Gets the backup configuration for a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteBackupConfigurationSlotResponse>
   */
  getSiteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteBackupConfigurationSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  getSiteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupRequest>, callback?: msRest.ServiceCallback<Models.BackupRequest>): Promise<Models.SitesGetSiteBackupConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteBackupConfigurationSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteBackupConfigurationSlotResponse>;
  }

  /**
   * @summary Updates backup configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteBackupConfigurationResponse>
   */
  updateSiteBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteBackupConfigurationResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param callback The callback
   */
  updateSiteBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  updateSiteBackupConfiguration(resourceGroupName: string, name: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupRequest>, callback?: msRest.ServiceCallback<Models.BackupRequest>): Promise<Models.SitesUpdateSiteBackupConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        options
      },
      updateSiteBackupConfigurationOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteBackupConfigurationResponse>;
  }

  /**
   * @summary Updates backup configuration of web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteBackupConfigurationSlotResponse>
   */
  updateSiteBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteBackupConfigurationSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  updateSiteBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupRequest>): void;
  updateSiteBackupConfigurationSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupRequest>, callback?: msRest.ServiceCallback<Models.BackupRequest>): Promise<Models.SitesUpdateSiteBackupConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        slot,
        options
      },
      updateSiteBackupConfigurationSlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteBackupConfigurationSlotResponse>;
  }

  /**
   * @summary Creates web app backup
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesBackupSiteResponse>
   */
  backupSite(resourceGroupName: string, name: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.SitesBackupSiteResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param callback The callback
   */
  backupSite(resourceGroupName: string, name: string, request: Models.BackupRequest, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param options The optional parameters
   * @param callback The callback
   */
  backupSite(resourceGroupName: string, name: string, request: Models.BackupRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  backupSite(resourceGroupName: string, name: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.SitesBackupSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        options
      },
      backupSiteOperationSpec,
      callback) as Promise<Models.SitesBackupSiteResponse>;
  }

  /**
   * @summary Creates web app backup
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesBackupSiteSlotResponse>
   */
  backupSiteSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesBackupSiteSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  backupSiteSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on backup request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  backupSiteSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  backupSiteSlot(resourceGroupName: string, name: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.SitesBackupSiteSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        slot,
        options
      },
      backupSiteSlotOperationSpec,
      callback) as Promise<Models.SitesBackupSiteSlotResponse>;
  }

  /**
   * @summary Discovers existing web app backups that can be restored
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on restore request
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDiscoverSiteRestoreResponse>
   */
  discoverSiteRestore(resourceGroupName: string, name: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<Models.SitesDiscoverSiteRestoreResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on restore request
   * @param callback The callback
   */
  discoverSiteRestore(resourceGroupName: string, name: string, request: Models.RestoreRequest, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on restore request
   * @param options The optional parameters
   * @param callback The callback
   */
  discoverSiteRestore(resourceGroupName: string, name: string, request: Models.RestoreRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
  discoverSiteRestore(resourceGroupName: string, name: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RestoreRequest>, callback?: msRest.ServiceCallback<Models.RestoreRequest>): Promise<Models.SitesDiscoverSiteRestoreResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        options
      },
      discoverSiteRestoreOperationSpec,
      callback) as Promise<Models.SitesDiscoverSiteRestoreResponse>;
  }

  /**
   * @summary Discovers existing web app backups that can be restored
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on restore request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDiscoverSiteRestoreSlotResponse>
   */
  discoverSiteRestoreSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDiscoverSiteRestoreSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on restore request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  discoverSiteRestoreSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param request Information on restore request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  discoverSiteRestoreSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RestoreRequest>): void;
  discoverSiteRestoreSlot(resourceGroupName: string, name: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RestoreRequest>, callback?: msRest.ServiceCallback<Models.RestoreRequest>): Promise<Models.SitesDiscoverSiteRestoreSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        request,
        slot,
        options
      },
      discoverSiteRestoreSlotOperationSpec,
      callback) as Promise<Models.SitesDiscoverSiteRestoreSlotResponse>;
  }

  /**
   * @summary Lists all available backups for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteBackupsResponse>
   */
  listSiteBackups(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteBackupsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  listSiteBackups(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteBackups(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listSiteBackups(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.SitesListSiteBackupsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSiteBackupsOperationSpec,
      callback) as Promise<Models.SitesListSiteBackupsResponse>;
  }

  /**
   * @summary Lists all available backups for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteBackupsSlotResponse>
   */
  listSiteBackupsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteBackupsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  listSiteBackupsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteBackupsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listSiteBackupsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.SitesListSiteBackupsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSiteBackupsSlotOperationSpec,
      callback) as Promise<Models.SitesListSiteBackupsSlotResponse>;
  }

  /**
   * @summary Gets status of a web app backup that may be in progress.
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteBackupStatusResponse>
   */
  getSiteBackupStatus(resourceGroupName: string, name: string, backupId: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteBackupStatusResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param callback The callback
   */
  getSiteBackupStatus(resourceGroupName: string, name: string, backupId: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteBackupStatus(resourceGroupName: string, name: string, backupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  getSiteBackupStatus(resourceGroupName: string, name: string, backupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.SitesGetSiteBackupStatusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        options
      },
      getSiteBackupStatusOperationSpec,
      callback) as Promise<Models.SitesGetSiteBackupStatusResponse>;
  }

  /**
   * @summary Deletes a backup from Azure Storage
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteBackupResponse>
   */
  deleteBackup(resourceGroupName: string, name: string, backupId: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteBackupResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param callback The callback
   */
  deleteBackup(resourceGroupName: string, name: string, backupId: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBackup(resourceGroupName: string, name: string, backupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  deleteBackup(resourceGroupName: string, name: string, backupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.SitesDeleteBackupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        options
      },
      deleteBackupOperationSpec,
      callback) as Promise<Models.SitesDeleteBackupResponse>;
  }

  /**
   * @summary Gets status of a web app backup that may be in progress.
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteBackupStatusSlotResponse>
   */
  getSiteBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteBackupStatusSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  getSiteBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.SitesGetSiteBackupStatusSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        slot,
        options
      },
      getSiteBackupStatusSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteBackupStatusSlotResponse>;
  }

  /**
   * @summary Deletes a backup from Azure Storage
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteBackupSlotResponse>
   */
  deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteBackupSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.SitesDeleteBackupSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        slot,
        options
      },
      deleteBackupSlotOperationSpec,
      callback) as Promise<Models.SitesDeleteBackupSlotResponse>;
  }

  /**
   * @summary Gets status of a web app backup that may be in progress, including secrets associated
   * with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for
   * the backup if a new URL is passed in the request body.
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param request Information on backup request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteBackupStatusSecretsSlotResponse>
   */
  getSiteBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteBackupStatusSecretsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param request Information on backup request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param request Information on backup request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  getSiteBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.SitesGetSiteBackupStatusSecretsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        request,
        slot,
        options
      },
      getSiteBackupStatusSecretsSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteBackupStatusSecretsSlotResponse>;
  }

  /**
   * @summary Gets status of a web app backup that may be in progress, including secrets associated
   * with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for
   * the backup if a new URL is passed in the request body.
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param request Information on backup request
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteBackupStatusSecretsResponse>
   */
  getSiteBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteBackupStatusSecretsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param request Information on backup request
   * @param callback The callback
   */
  getSiteBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup
   * @param request Information on backup request
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItem>): void;
  getSiteBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: Models.BackupRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItem>, callback?: msRest.ServiceCallback<Models.BackupItem>): Promise<Models.SitesGetSiteBackupStatusSecretsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        backupId,
        request,
        options
      },
      getSiteBackupStatusSecretsOperationSpec,
      callback) as Promise<Models.SitesGetSiteBackupStatusSecretsResponse>;
  }

  /**
   * @summary Restores a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup to restore
   * @param request Information on restore request
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesRestoreSiteResponse>
   */
  restoreSite(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<Models.SitesRestoreSiteResponse> {
    return this.beginRestoreSite(resourceGroupName,name,backupId,request,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SitesRestoreSiteResponse>;
  }

  /**
   * @summary Restores a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup to restore
   * @param request Information on restore request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesRestoreSiteSlotResponse>
   */
  restoreSiteSlot(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesRestoreSiteSlotResponse> {
    return this.beginRestoreSiteSlot(resourceGroupName,name,backupId,request,slot,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SitesRestoreSiteSlotResponse>;
  }

  /**
   * @summary Gets the quota usage numbers for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteUsagesResponse>
   */
  getSiteUsages(resourceGroupName: string, name: string, options?: Models.SitesGetSiteUsagesOptionalParams): Promise<Models.SitesGetSiteUsagesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSiteUsages(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteUsages(resourceGroupName: string, name: string, options: Models.SitesGetSiteUsagesOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  getSiteUsages(resourceGroupName: string, name: string, options?: Models.SitesGetSiteUsagesOptionalParams | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.SitesGetSiteUsagesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteUsagesOperationSpec,
      callback) as Promise<Models.SitesGetSiteUsagesResponse>;
  }

  /**
   * @summary Gets the quota usage numbers for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteUsagesSlotResponse>
   */
  getSiteUsagesSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesGetSiteUsagesSlotOptionalParams): Promise<Models.SitesGetSiteUsagesSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteUsagesSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteUsagesSlot(resourceGroupName: string, name: string, slot: string, options: Models.SitesGetSiteUsagesSlotOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  getSiteUsagesSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesGetSiteUsagesSlotOptionalParams | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.SitesGetSiteUsagesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteUsagesSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteUsagesSlotResponse>;
  }

  /**
   * @summary Gets metrics for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteMetricsResponse>
   */
  getSiteMetrics(resourceGroupName: string, name: string, options?: Models.SitesGetSiteMetricsOptionalParams): Promise<Models.SitesGetSiteMetricsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSiteMetrics(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteMetrics(resourceGroupName: string, name: string, options: Models.SitesGetSiteMetricsOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getSiteMetrics(resourceGroupName: string, name: string, options?: Models.SitesGetSiteMetricsOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.SitesGetSiteMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteMetricsOperationSpec,
      callback) as Promise<Models.SitesGetSiteMetricsResponse>;
  }

  /**
   * @summary Gets metrics for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteMetricsSlotResponse>
   */
  getSiteMetricsSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesGetSiteMetricsSlotOptionalParams): Promise<Models.SitesGetSiteMetricsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteMetricsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteMetricsSlot(resourceGroupName: string, name: string, slot: string, options: Models.SitesGetSiteMetricsSlotOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getSiteMetricsSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesGetSiteMetricsSlotOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.SitesGetSiteMetricsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteMetricsSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteMetricsSlotResponse>;
  }

  /**
   * @summary Gets metric definitions for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteMetricDefinitionsSlotResponse>
   */
  getSiteMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteMetricDefinitionsSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  getSiteMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  getSiteMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionCollection>, callback?: msRest.ServiceCallback<Models.MetricDefinitionCollection>): Promise<Models.SitesGetSiteMetricDefinitionsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteMetricDefinitionsSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteMetricDefinitionsSlotResponse>;
  }

  /**
   * @summary Gets metric definitions for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteMetricDefinitionsResponse>
   */
  getSiteMetricDefinitions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteMetricDefinitionsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  getSiteMetricDefinitions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteMetricDefinitions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  getSiteMetricDefinitions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionCollection>, callback?: msRest.ServiceCallback<Models.MetricDefinitionCollection>): Promise<Models.SitesGetSiteMetricDefinitionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteMetricDefinitionsOperationSpec,
      callback) as Promise<Models.SitesGetSiteMetricDefinitionsResponse>;
  }

  /**
   * @summary Gets the publishing profile for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSitePublishingProfileXmlResponse>
   */
  listSitePublishingProfileXml(resourceGroupName: string, name: string, options?: Models.SitesListSitePublishingProfileXmlOptionalParams): Promise<Models.SitesListSitePublishingProfileXmlResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  listSitePublishingProfileXml(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  listSitePublishingProfileXml(resourceGroupName: string, name: string, options: Models.SitesListSitePublishingProfileXmlOptionalParams, callback: msRest.ServiceCallback<void>): void;
  listSitePublishingProfileXml(resourceGroupName: string, name: string, options?: Models.SitesListSitePublishingProfileXmlOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.SitesListSitePublishingProfileXmlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSitePublishingProfileXmlOperationSpec,
      callback) as Promise<Models.SitesListSitePublishingProfileXmlResponse>;
  }

  /**
   * @summary Gets the publishing profile for web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSitePublishingProfileXmlSlotResponse>
   */
  listSitePublishingProfileXmlSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesListSitePublishingProfileXmlSlotOptionalParams): Promise<Models.SitesListSitePublishingProfileXmlSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  listSitePublishingProfileXmlSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSitePublishingProfileXmlSlot(resourceGroupName: string, name: string, slot: string, options: Models.SitesListSitePublishingProfileXmlSlotOptionalParams, callback: msRest.ServiceCallback<void>): void;
  listSitePublishingProfileXmlSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesListSitePublishingProfileXmlSlotOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.SitesListSitePublishingProfileXmlSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSitePublishingProfileXmlSlotOperationSpec,
      callback) as Promise<Models.SitesListSitePublishingProfileXmlSlotResponse>;
  }

  /**
   * @summary Restarts web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesRestartSiteSlotResponse>
   */
  restartSiteSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesRestartSiteSlotOptionalParams): Promise<Models.SitesRestartSiteSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  restartSiteSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  restartSiteSlot(resourceGroupName: string, name: string, slot: string, options: Models.SitesRestartSiteSlotOptionalParams, callback: msRest.ServiceCallback<any>): void;
  restartSiteSlot(resourceGroupName: string, name: string, slot: string, options?: Models.SitesRestartSiteSlotOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesRestartSiteSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      restartSiteSlotOperationSpec,
      callback) as Promise<Models.SitesRestartSiteSlotResponse>;
  }

  /**
   * @summary Restarts web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesRestartSiteResponse>
   */
  restartSite(resourceGroupName: string, name: string, options?: Models.SitesRestartSiteOptionalParams): Promise<Models.SitesRestartSiteResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  restartSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  restartSite(resourceGroupName: string, name: string, options: Models.SitesRestartSiteOptionalParams, callback: msRest.ServiceCallback<any>): void;
  restartSite(resourceGroupName: string, name: string, options?: Models.SitesRestartSiteOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesRestartSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      restartSiteOperationSpec,
      callback) as Promise<Models.SitesRestartSiteResponse>;
  }

  /**
   * @summary Starts web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesStartSiteResponse>
   */
  startSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesStartSiteResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  startSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  startSite(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  startSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesStartSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      startSiteOperationSpec,
      callback) as Promise<Models.SitesStartSiteResponse>;
  }

  /**
   * @summary Starts web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesStartSiteSlotResponse>
   */
  startSiteSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesStartSiteSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  startSiteSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  startSiteSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  startSiteSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesStartSiteSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      startSiteSlotOperationSpec,
      callback) as Promise<Models.SitesStartSiteSlotResponse>;
  }

  /**
   * @summary Stops web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesStopSiteResponse>
   */
  stopSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesStopSiteResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  stopSite(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  stopSite(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  stopSite(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesStopSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      stopSiteOperationSpec,
      callback) as Promise<Models.SitesStopSiteResponse>;
  }

  /**
   * @summary Stops web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesStopSiteSlotResponse>
   */
  stopSiteSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesStopSiteSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  stopSiteSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  stopSiteSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  stopSiteSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesStopSiteSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      stopSiteSlotOperationSpec,
      callback) as Promise<Models.SitesStopSiteSlotResponse>;
  }

  /**
   * @param resourceGroupName
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesSyncSiteRepositoryResponse>
   */
  syncSiteRepository(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesSyncSiteRepositoryResponse>;
  /**
   * @param resourceGroupName
   * @param name
   * @param callback The callback
   */
  syncSiteRepository(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  syncSiteRepository(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  syncSiteRepository(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesSyncSiteRepositoryResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      syncSiteRepositoryOperationSpec,
      callback) as Promise<Models.SitesSyncSiteRepositoryResponse>;
  }

  /**
   * @param resourceGroupName
   * @param name
   * @param slot
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesSyncSiteRepositorySlotResponse>
   */
  syncSiteRepositorySlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesSyncSiteRepositorySlotResponse>;
  /**
   * @param resourceGroupName
   * @param name
   * @param slot
   * @param callback The callback
   */
  syncSiteRepositorySlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName
   * @param name
   * @param slot
   * @param options The optional parameters
   * @param callback The callback
   */
  syncSiteRepositorySlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  syncSiteRepositorySlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesSyncSiteRepositorySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      syncSiteRepositorySlotOperationSpec,
      callback) as Promise<Models.SitesSyncSiteRepositorySlotResponse>;
  }

  /**
   * @summary Generates new random app publishing password
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGenerateNewSitePublishingPasswordSlotResponse>
   */
  generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGenerateNewSitePublishingPasswordSlotResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param callback The callback
   */
  generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The optional parameters
   * @param callback The callback
   */
  generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesGenerateNewSitePublishingPasswordSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      generateNewSitePublishingPasswordSlotOperationSpec,
      callback) as Promise<Models.SitesGenerateNewSitePublishingPasswordSlotResponse>;
  }

  /**
   * @summary Generates new random app publishing password
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGenerateNewSitePublishingPasswordResponse>
   */
  generateNewSitePublishingPassword(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGenerateNewSitePublishingPasswordResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param callback The callback
   */
  generateNewSitePublishingPassword(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param options The optional parameters
   * @param callback The callback
   */
  generateNewSitePublishingPassword(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  generateNewSitePublishingPassword(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesGenerateNewSitePublishingPasswordResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      generateNewSitePublishingPasswordOperationSpec,
      callback) as Promise<Models.SitesGenerateNewSitePublishingPasswordResponse>;
  }

  /**
   * @summary Retrieves a BizTalk Hybrid Connection identified by its entity name.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteRelayServiceConnectionResponse>
   */
  getSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteRelayServiceConnectionResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param callback The callback
   */
  getSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  getSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.SitesGetSiteRelayServiceConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        options
      },
      getSiteRelayServiceConnectionOperationSpec,
      callback) as Promise<Models.SitesGetSiteRelayServiceConnectionResponse>;
  }

  /**
   * @summary Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteRelayServiceConnectionResponse>
   */
  createOrUpdateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteRelayServiceConnectionResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param callback The callback
   */
  createOrUpdateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  createOrUpdateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.SitesCreateOrUpdateSiteRelayServiceConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        connectionEnvelope,
        options
      },
      createOrUpdateSiteRelayServiceConnectionOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteRelayServiceConnectionResponse>;
  }

  /**
   * @summary Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSiteRelayServiceConnectionResponse>
   */
  deleteSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteSiteRelayServiceConnectionResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param callback The callback
   */
  deleteSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSiteRelayServiceConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        options
      },
      deleteSiteRelayServiceConnectionOperationSpec,
      callback) as Promise<Models.SitesDeleteSiteRelayServiceConnectionResponse>;
  }

  /**
   * @summary Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteRelayServiceConnectionResponse>
   */
  updateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteRelayServiceConnectionResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param callback The callback
   */
  updateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  updateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.SitesUpdateSiteRelayServiceConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        connectionEnvelope,
        options
      },
      updateSiteRelayServiceConnectionOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteRelayServiceConnectionResponse>;
  }

  /**
   * @summary Retrieves a BizTalk Hybrid Connection identified by its entity name.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteRelayServiceConnectionSlotResponse>
   */
  getSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteRelayServiceConnectionSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  getSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  getSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.SitesGetSiteRelayServiceConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        slot,
        options
      },
      getSiteRelayServiceConnectionSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteRelayServiceConnectionSlotResponse>;
  }

  /**
   * @summary Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteRelayServiceConnectionSlotResponse>
   */
  createOrUpdateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteRelayServiceConnectionSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  createOrUpdateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  createOrUpdateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.SitesCreateOrUpdateSiteRelayServiceConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        connectionEnvelope,
        slot,
        options
      },
      createOrUpdateSiteRelayServiceConnectionSlotOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteRelayServiceConnectionSlotResponse>;
  }

  /**
   * @summary Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesDeleteSiteRelayServiceConnectionSlotResponse>
   */
  deleteSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesDeleteSiteRelayServiceConnectionSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  deleteSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesDeleteSiteRelayServiceConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        slot,
        options
      },
      deleteSiteRelayServiceConnectionSlotOperationSpec,
      callback) as Promise<Models.SitesDeleteSiteRelayServiceConnectionSlotResponse>;
  }

  /**
   * @summary Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteRelayServiceConnectionSlotResponse>
   */
  updateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteRelayServiceConnectionSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  updateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param entityName The name by which the Hybrid Connection is identified
   * @param connectionEnvelope The details of the Hybrid Connection
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  updateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: Models.RelayServiceConnectionEntity, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.SitesUpdateSiteRelayServiceConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        connectionEnvelope,
        slot,
        options
      },
      updateSiteRelayServiceConnectionSlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteRelayServiceConnectionSlotResponse>;
  }

  /**
   * @summary Retrieves all BizTalk Hybrid Connections associated with this web app.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param slot The name of the slot for the web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteRelayServiceConnectionsSlotResponse>
   */
  listSiteRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteRelayServiceConnectionsSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param slot The name of the slot for the web app.
   * @param callback The callback
   */
  listSiteRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param slot The name of the slot for the web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  listSiteRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.SitesListSiteRelayServiceConnectionsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      listSiteRelayServiceConnectionsSlotOperationSpec,
      callback) as Promise<Models.SitesListSiteRelayServiceConnectionsSlotResponse>;
  }

  /**
   * @summary Retrieves all BizTalk Hybrid Connections associated with this web app.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteRelayServiceConnectionsResponse>
   */
  listSiteRelayServiceConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteRelayServiceConnectionsResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param callback The callback
   */
  listSiteRelayServiceConnections(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteRelayServiceConnections(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): void;
  listSiteRelayServiceConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RelayServiceConnectionEntity>, callback?: msRest.ServiceCallback<Models.RelayServiceConnectionEntity>): Promise<Models.SitesListSiteRelayServiceConnectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listSiteRelayServiceConnectionsOperationSpec,
      callback) as Promise<Models.SitesListSiteRelayServiceConnectionsResponse>;
  }

  /**
   * @summary Retrieves a Virtual Network connection gateway associated with this web app and virtual
   * network.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteVnetGatewaySlotResponse>
   */
  getSiteVnetGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteVnetGatewaySlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  getSiteVnetGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteVnetGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSiteVnetGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesGetSiteVnetGatewaySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        slot,
        options
      },
      getSiteVnetGatewaySlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteVnetGatewaySlotResponse>;
  }

  /**
   * @summary Updates the Virtual Network Gateway.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteVNETConnectionGatewaySlotResponse>
   */
  createOrUpdateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteVNETConnectionGatewaySlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  createOrUpdateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  createOrUpdateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.SitesCreateOrUpdateSiteVNETConnectionGatewaySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        slot,
        options
      },
      createOrUpdateSiteVNETConnectionGatewaySlotOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteVNETConnectionGatewaySlotResponse>;
  }

  /**
   * @summary Updates the Virtual Network Gateway.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteVNETConnectionGatewaySlotResponse>
   */
  updateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteVNETConnectionGatewaySlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  updateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  updateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.SitesUpdateSiteVNETConnectionGatewaySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        slot,
        options
      },
      updateSiteVNETConnectionGatewaySlotOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteVNETConnectionGatewaySlotResponse>;
  }

  /**
   * @summary Retrieves a Virtual Network connection gateway associated with this web app and virtual
   * network.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteVnetGatewayResponse>
   */
  getSiteVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteVnetGatewayResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param callback The callback
   */
  getSiteVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getSiteVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SitesGetSiteVnetGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        options
      },
      getSiteVnetGatewayOperationSpec,
      callback) as Promise<Models.SitesGetSiteVnetGatewayResponse>;
  }

  /**
   * @summary Updates the Virtual Network Gateway.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesCreateOrUpdateSiteVNETConnectionGatewayResponse>
   */
  createOrUpdateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase): Promise<Models.SitesCreateOrUpdateSiteVNETConnectionGatewayResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param callback The callback
   */
  createOrUpdateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  createOrUpdateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.SitesCreateOrUpdateSiteVNETConnectionGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        options
      },
      createOrUpdateSiteVNETConnectionGatewayOperationSpec,
      callback) as Promise<Models.SitesCreateOrUpdateSiteVNETConnectionGatewayResponse>;
  }

  /**
   * @summary Updates the Virtual Network Gateway.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesUpdateSiteVNETConnectionGatewayResponse>
   */
  updateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase): Promise<Models.SitesUpdateSiteVNETConnectionGatewayResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param callback The callback
   */
  updateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param vnetName The name of the Virtual Network
   * @param gatewayName The name of the gateway. The only gateway that exists presently is "primary"
   * @param connectionEnvelope The properties to update this gateway with.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  updateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.SitesUpdateSiteVNETConnectionGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        options
      },
      updateSiteVNETConnectionGatewayOperationSpec,
      callback) as Promise<Models.SitesUpdateSiteVNETConnectionGatewayResponse>;
  }

  /**
   * @summary Retrieves a list of all Virtual Network Connections associated with this web app.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteVNETConnectionsResponse>
   */
  getSiteVNETConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteVNETConnectionsResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param callback The callback
   */
  getSiteVNETConnections(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteVNETConnections(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  getSiteVNETConnections(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo[]>, callback?: msRest.ServiceCallback<Models.VnetInfo[]>): Promise<Models.SitesGetSiteVNETConnectionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getSiteVNETConnectionsOperationSpec,
      callback) as Promise<Models.SitesGetSiteVNETConnectionsResponse>;
  }

  /**
   * @summary Retrieves a list of all Virtual Network Connections associated with this web app.
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param slot The name of the slot for this web app.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteVNETConnectionsSlotResponse>
   */
  getSiteVNETConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteVNETConnectionsSlotResponse>;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param slot The name of the slot for this web app.
   * @param callback The callback
   */
  getSiteVNETConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  /**
   * @param resourceGroupName The resource group name
   * @param name The name of the web app
   * @param slot The name of the slot for this web app.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteVNETConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  getSiteVNETConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo[]>, callback?: msRest.ServiceCallback<Models.VnetInfo[]>): Promise<Models.SitesGetSiteVNETConnectionsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      getSiteVNETConnectionsSlotOperationSpec,
      callback) as Promise<Models.SitesGetSiteVNETConnectionsSlotResponse>;
  }

  /**
   * @summary Swaps web app slots
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSwapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        options
      },
      beginSwapSlotWithProductionOperationSpec,
      options);
  }

  /**
   * @summary Swaps web app slots
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slotSwapEntity Request body that contains the target slot name
   * @param slot Name of source slot for the swap
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSwapSlotsSlot(resourceGroupName: string, name: string, slotSwapEntity: Models.CsmSlotEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        slotSwapEntity,
        slot,
        options
      },
      beginSwapSlotsSlotOperationSpec,
      options);
  }

  /**
   * @summary Creates a new web app or modifies an existing web app.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the web app
   * @param siteEnvelope Details of web app if it exists already
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateSite(resourceGroupName: string, name: string, siteEnvelope: Models.Site, options?: Models.SitesBeginCreateOrUpdateSiteOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        siteEnvelope,
        options
      },
      beginCreateOrUpdateSiteOperationSpec,
      options);
  }

  /**
   * @summary Creates a new web app or modifies an existing web app.
   * @param resourceGroupName Name of the resource group
   * @param name Name of the web app
   * @param siteEnvelope Details of web app if it exists already
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateSiteSlot(resourceGroupName: string, name: string, siteEnvelope: Models.Site, slot: string, options?: Models.SitesBeginCreateOrUpdateSiteSlotOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        siteEnvelope,
        slot,
        options
      },
      beginCreateOrUpdateSiteSlotOperationSpec,
      options);
  }

  /**
   * @summary Recovers a deleted web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be
   * obtained by calling GetDeletedSites or GetSiteSnapshots API.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRecoverSite(resourceGroupName: string, name: string, recoveryEntity: Models.CsmSiteRecoveryEntity, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        recoveryEntity,
        options
      },
      beginRecoverSiteOperationSpec,
      options);
  }

  /**
   * @summary Recovers a deleted web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be
   * obtained by calling GetDeletedSites or GetSiteSnapshots API.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRecoverSiteSlot(resourceGroupName: string, name: string, recoveryEntity: Models.CsmSiteRecoveryEntity, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        recoveryEntity,
        slot,
        options
      },
      beginRecoverSiteSlotOperationSpec,
      options);
  }

  /**
   * @summary Gets the web app publishing credentials
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginListSitePublishingCredentials(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginListSitePublishingCredentialsOperationSpec,
      options);
  }

  /**
   * @summary Gets the web app publishing credentials
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginListSitePublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        slot,
        options
      },
      beginListSitePublishingCredentialsSlotOperationSpec,
      options);
  }

  /**
   * @summary Restores a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup to restore
   * @param request Information on restore request
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestoreSite(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        backupId,
        request,
        options
      },
      beginRestoreSiteOperationSpec,
      options);
  }

  /**
   * @summary Restores a web app
   * @param resourceGroupName Name of resource group
   * @param name Name of web app
   * @param backupId Id of backup to restore
   * @param request Information on restore request
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestoreSiteSlot(resourceGroupName: string, name: string, backupId: string, request: Models.RestoreRequest, slot: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        backupId,
        request,
        slot,
        options
      },
      beginRestoreSiteSlotOperationSpec,
      options);
  }

  /**
   * @summary Get the difference in configuration settings between two web app slots
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSlotsDifferencesFromProductionNextResponse>
   */
  getSlotsDifferencesFromProductionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSlotsDifferencesFromProductionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSlotsDifferencesFromProductionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSlotsDifferencesFromProductionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  getSlotsDifferencesFromProductionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotDifferenceCollection>, callback?: msRest.ServiceCallback<Models.SlotDifferenceCollection>): Promise<Models.SitesGetSlotsDifferencesFromProductionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSlotsDifferencesFromProductionNextOperationSpec,
      callback) as Promise<Models.SitesGetSlotsDifferencesFromProductionNextResponse>;
  }

  /**
   * @summary Get the difference in configuration settings between two web app slots
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSlotsDifferencesSlotNextResponse>
   */
  getSlotsDifferencesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSlotsDifferencesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSlotsDifferencesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSlotsDifferencesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SlotDifferenceCollection>): void;
  getSlotsDifferencesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SlotDifferenceCollection>, callback?: msRest.ServiceCallback<Models.SlotDifferenceCollection>): Promise<Models.SitesGetSlotsDifferencesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSlotsDifferencesSlotNextOperationSpec,
      callback) as Promise<Models.SitesGetSlotsDifferencesSlotNextResponse>;
  }

  /**
   * @summary Gets all the slots for a web apps
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteSlotsNextResponse>
   */
  getSiteSlotsNext(nextPageLink: string, options?: Models.SitesGetSiteSlotsNextOptionalParams): Promise<Models.SitesGetSiteSlotsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteSlotsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteSlotsNext(nextPageLink: string, options: Models.SitesGetSiteSlotsNextOptionalParams, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getSiteSlotsNext(nextPageLink: string, options?: Models.SitesGetSiteSlotsNextOptionalParams | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.SitesGetSiteSlotsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteSlotsNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteSlotsNextResponse>;
  }

  /**
   * @summary Gets the web apps for a subscription in the specified resource group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSitesNextResponse>
   */
  getSitesNext(nextPageLink: string, options?: Models.SitesGetSitesNextOptionalParams): Promise<Models.SitesGetSitesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSitesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSitesNext(nextPageLink: string, options: Models.SitesGetSitesNextOptionalParams, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getSitesNext(nextPageLink: string, options?: Models.SitesGetSitesNextOptionalParams | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.SitesGetSitesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSitesNextOperationSpec,
      callback) as Promise<Models.SitesGetSitesNextResponse>;
  }

  /**
   * @summary Gets deleted web apps in subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetDeletedSitesNextResponse>
   */
  getDeletedSitesNext(nextPageLink: string, options?: Models.SitesGetDeletedSitesNextOptionalParams): Promise<Models.SitesGetDeletedSitesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getDeletedSitesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeletedSiteCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeletedSitesNext(nextPageLink: string, options: Models.SitesGetDeletedSitesNextOptionalParams, callback: msRest.ServiceCallback<Models.DeletedSiteCollection>): void;
  getDeletedSitesNext(nextPageLink: string, options?: Models.SitesGetDeletedSitesNextOptionalParams | msRest.ServiceCallback<Models.DeletedSiteCollection>, callback?: msRest.ServiceCallback<Models.DeletedSiteCollection>): Promise<Models.SitesGetDeletedSitesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getDeletedSitesNextOperationSpec,
      callback) as Promise<Models.SitesGetDeletedSitesNextResponse>;
  }

  /**
   * @summary List deployments
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetDeploymentsNextResponse>
   */
  getDeploymentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetDeploymentsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getDeploymentsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeploymentsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  getDeploymentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.SitesGetDeploymentsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getDeploymentsNextOperationSpec,
      callback) as Promise<Models.SitesGetDeploymentsNextResponse>;
  }

  /**
   * @summary List deployments
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetDeploymentsSlotNextResponse>
   */
  getDeploymentsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetDeploymentsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getDeploymentsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDeploymentsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  getDeploymentsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.SitesGetDeploymentsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getDeploymentsSlotNextOperationSpec,
      callback) as Promise<Models.SitesGetDeploymentsSlotNextResponse>;
  }

  /**
   * @summary List deployments
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetInstanceDeploymentsNextResponse>
   */
  getInstanceDeploymentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetInstanceDeploymentsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getInstanceDeploymentsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceDeploymentsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  getInstanceDeploymentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.SitesGetInstanceDeploymentsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getInstanceDeploymentsNextOperationSpec,
      callback) as Promise<Models.SitesGetInstanceDeploymentsNextResponse>;
  }

  /**
   * @summary List deployments
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetInstanceDeploymentsSlotNextResponse>
   */
  getInstanceDeploymentsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetInstanceDeploymentsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getInstanceDeploymentsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getInstanceDeploymentsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentCollection>): void;
  getInstanceDeploymentsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentCollection>, callback?: msRest.ServiceCallback<Models.DeploymentCollection>): Promise<Models.SitesGetInstanceDeploymentsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getInstanceDeploymentsSlotNextOperationSpec,
      callback) as Promise<Models.SitesGetInstanceDeploymentsSlotNextResponse>;
  }

  /**
   * @summary Gets all instance of a web app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteInstanceIdentifiersNextResponse>
   */
  getSiteInstanceIdentifiersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteInstanceIdentifiersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteInstanceIdentifiersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteInstanceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteInstanceIdentifiersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteInstanceCollection>): void;
  getSiteInstanceIdentifiersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteInstanceCollection>, callback?: msRest.ServiceCallback<Models.SiteInstanceCollection>): Promise<Models.SitesGetSiteInstanceIdentifiersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteInstanceIdentifiersNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteInstanceIdentifiersNextResponse>;
  }

  /**
   * @summary Gets all instance of a web app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteInstanceIdentifiersSlotNextResponse>
   */
  getSiteInstanceIdentifiersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteInstanceIdentifiersSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteInstanceIdentifiersSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteInstanceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteInstanceIdentifiersSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteInstanceCollection>): void;
  getSiteInstanceIdentifiersSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteInstanceCollection>, callback?: msRest.ServiceCallback<Models.SiteInstanceCollection>): Promise<Models.SitesGetSiteInstanceIdentifiersSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteInstanceIdentifiersSlotNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteInstanceIdentifiersSlotNextResponse>;
  }

  /**
   * @summary Get web app hostname bindings
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteHostNameBindingsNextResponse>
   */
  getSiteHostNameBindingsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteHostNameBindingsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteHostNameBindingsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteHostNameBindingsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  getSiteHostNameBindingsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBindingCollection>, callback?: msRest.ServiceCallback<Models.HostNameBindingCollection>): Promise<Models.SitesGetSiteHostNameBindingsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteHostNameBindingsNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteHostNameBindingsNextResponse>;
  }

  /**
   * @summary Get web app hostname bindings
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteHostNameBindingsSlotNextResponse>
   */
  getSiteHostNameBindingsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteHostNameBindingsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteHostNameBindingsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteHostNameBindingsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostNameBindingCollection>): void;
  getSiteHostNameBindingsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostNameBindingCollection>, callback?: msRest.ServiceCallback<Models.HostNameBindingCollection>): Promise<Models.SitesGetSiteHostNameBindingsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteHostNameBindingsSlotNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteHostNameBindingsSlotNextResponse>;
  }

  /**
   * @summary Lists all available backups for web app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteBackupsNextResponse>
   */
  listSiteBackupsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteBackupsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteBackupsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteBackupsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listSiteBackupsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.SitesListSiteBackupsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteBackupsNextOperationSpec,
      callback) as Promise<Models.SitesListSiteBackupsNextResponse>;
  }

  /**
   * @summary Lists all available backups for web app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesListSiteBackupsSlotNextResponse>
   */
  listSiteBackupsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesListSiteBackupsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteBackupsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteBackupsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupItemCollection>): void;
  listSiteBackupsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupItemCollection>, callback?: msRest.ServiceCallback<Models.BackupItemCollection>): Promise<Models.SitesListSiteBackupsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteBackupsSlotNextOperationSpec,
      callback) as Promise<Models.SitesListSiteBackupsSlotNextResponse>;
  }

  /**
   * @summary Gets the quota usage numbers for web app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteUsagesNextResponse>
   */
  getSiteUsagesNext(nextPageLink: string, options?: Models.SitesGetSiteUsagesNextOptionalParams): Promise<Models.SitesGetSiteUsagesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteUsagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteUsagesNext(nextPageLink: string, options: Models.SitesGetSiteUsagesNextOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  getSiteUsagesNext(nextPageLink: string, options?: Models.SitesGetSiteUsagesNextOptionalParams | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.SitesGetSiteUsagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteUsagesNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteUsagesNextResponse>;
  }

  /**
   * @summary Gets the quota usage numbers for web app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteUsagesSlotNextResponse>
   */
  getSiteUsagesSlotNext(nextPageLink: string, options?: Models.SitesGetSiteUsagesSlotNextOptionalParams): Promise<Models.SitesGetSiteUsagesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteUsagesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteUsagesSlotNext(nextPageLink: string, options: Models.SitesGetSiteUsagesSlotNextOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  getSiteUsagesSlotNext(nextPageLink: string, options?: Models.SitesGetSiteUsagesSlotNextOptionalParams | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.SitesGetSiteUsagesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteUsagesSlotNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteUsagesSlotNextResponse>;
  }

  /**
   * @summary Gets metrics for web app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteMetricsNextResponse>
   */
  getSiteMetricsNext(nextPageLink: string, options?: Models.SitesGetSiteMetricsNextOptionalParams): Promise<Models.SitesGetSiteMetricsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteMetricsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteMetricsNext(nextPageLink: string, options: Models.SitesGetSiteMetricsNextOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getSiteMetricsNext(nextPageLink: string, options?: Models.SitesGetSiteMetricsNextOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.SitesGetSiteMetricsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteMetricsNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteMetricsNextResponse>;
  }

  /**
   * @summary Gets metrics for web app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteMetricsSlotNextResponse>
   */
  getSiteMetricsSlotNext(nextPageLink: string, options?: Models.SitesGetSiteMetricsSlotNextOptionalParams): Promise<Models.SitesGetSiteMetricsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteMetricsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteMetricsSlotNext(nextPageLink: string, options: Models.SitesGetSiteMetricsSlotNextOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getSiteMetricsSlotNext(nextPageLink: string, options?: Models.SitesGetSiteMetricsSlotNextOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.SitesGetSiteMetricsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteMetricsSlotNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteMetricsSlotNextResponse>;
  }

  /**
   * @summary Gets metric definitions for web app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteMetricDefinitionsSlotNextResponse>
   */
  getSiteMetricDefinitionsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteMetricDefinitionsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteMetricDefinitionsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteMetricDefinitionsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  getSiteMetricDefinitionsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionCollection>, callback?: msRest.ServiceCallback<Models.MetricDefinitionCollection>): Promise<Models.SitesGetSiteMetricDefinitionsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteMetricDefinitionsSlotNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteMetricDefinitionsSlotNextResponse>;
  }

  /**
   * @summary Gets metric definitions for web app
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SitesGetSiteMetricDefinitionsNextResponse>
   */
  getSiteMetricDefinitionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SitesGetSiteMetricDefinitionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSiteMetricDefinitionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteMetricDefinitionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  getSiteMetricDefinitionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionCollection>, callback?: msRest.ServiceCallback<Models.MetricDefinitionCollection>): Promise<Models.SitesGetSiteMetricDefinitionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSiteMetricDefinitionsNextOperationSpec,
      callback) as Promise<Models.SitesGetSiteMetricDefinitionsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getSiteVNETConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteVNETConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteVNETConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteVNETConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteVNETConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteVNETConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteVNETConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteVNETConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteNetworkFeaturesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.view,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFeatures
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteNetworkFeaturesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.view,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkFeatures
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteOperationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/operationresults/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/operationresults/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSlotsDifferencesFromProductionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSlotsDifferencesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const applySlotConfigToProductionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const applySlotConfigSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const resetProductionSlotConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const resetSlotConfigSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSlotConfigNamesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SlotConfigNamesResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSlotConfigNamesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotConfigNames",
    mapper: {
      ...Mappers.SlotConfigNamesResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SlotConfigNamesResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteSlotsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSitesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.includeSiteTypes,
    Parameters.includeSlots,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.deleteMetrics,
    Parameters.deleteEmptyServerFarm,
    Parameters.skipDnsRegistration,
    Parameters.deleteAllSlots,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.deleteMetrics,
    Parameters.deleteEmptyServerFarm,
    Parameters.skipDnsRegistration,
    Parameters.deleteAllSlots,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const isSiteCloneableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCloneability
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const isSiteCloneableSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCloneability
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteSnapshotsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteSnapshotsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDeletedSitesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/deletedSites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.includeSiteTypes,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDeploymentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDeploymentsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getInstanceDeploymentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getInstanceDeploymentsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getInstanceDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createInstanceDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "deployment",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteInstanceDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "deployment",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteDeploymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDeploymentSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createDeploymentSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "deployment",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteDeploymentSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getInstanceDeploymentSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createInstanceDeploymentSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "deployment",
    mapper: {
      ...Mappers.Deployment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Deployment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteInstanceDeploymentSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.id,
    Parameters.slot,
    Parameters.instanceId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteInstanceIdentifiersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteInstanceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteInstanceIdentifiersSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteInstanceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteHostNameBindingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteHostNameBindingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteHostNameBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteHostNameBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "hostNameBinding",
    mapper: {
      ...Mappers.HostNameBinding,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteHostNameBindingOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteHostNameBindingSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.hostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteHostNameBindingSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.hostName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "hostNameBinding",
    mapper: {
      ...Mappers.HostNameBinding,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBinding
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteHostNameBindingSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.hostName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteConfig",
    mapper: {
      ...Mappers.SiteConfig,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteConfig",
    mapper: {
      ...Mappers.SiteConfig,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteConfigSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteConfigSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteConfig",
    mapper: {
      ...Mappers.SiteConfig,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteConfigSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteConfig",
    mapper: {
      ...Mappers.SiteConfig,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteSourceControl",
    mapper: {
      ...Mappers.SiteSourceControl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteSourceControl",
    mapper: {
      ...Mappers.SiteSourceControl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteSourceControlSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteSourceControlSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteSourceControl",
    mapper: {
      ...Mappers.SiteSourceControl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    201: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteSourceControlSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteSourceControlSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteSourceControl",
    mapper: {
      ...Mappers.SiteSourceControl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteSourceControl
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteAppSettingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteAppSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteAppSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "appSettings",
    mapper: {
      ...Mappers.StringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteAppSettingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "appSettings",
    mapper: {
      ...Mappers.StringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteConnectionStringsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteConnectionStringsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteConnectionStringsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionStrings",
    mapper: {
      ...Mappers.ConnectionStringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteConnectionStringsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionStrings",
    mapper: {
      ...Mappers.ConnectionStringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteAuthSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteAuthSettingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteAuthSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteAuthSettings",
    mapper: {
      ...Mappers.SiteAuthSettings,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteAuthSettingsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteAuthSettings",
    mapper: {
      ...Mappers.SiteAuthSettings,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteAuthSettings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteMetadataSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteMetadataOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "metadata",
    mapper: {
      ...Mappers.StringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteMetadataSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "metadata",
    mapper: {
      ...Mappers.StringDictionary,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StringDictionary
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteLogsConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteLogsConfigOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteLogsConfig",
    mapper: {
      ...Mappers.SiteLogsConfig,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteLogsConfigSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteLogsConfigSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteLogsConfig",
    mapper: {
      ...Mappers.SiteLogsConfig,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SiteLogsConfig
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSitePremierAddOnsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSitePremierAddOnsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSitePremierAddOnOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const addSitePremierAddOnOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "premierAddOn",
    mapper: {
      ...Mappers.PremierAddOnRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSitePremierAddOnOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSitePremierAddOnSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const addSitePremierAddOnSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "premierAddOn",
    mapper: {
      ...Mappers.PremierAddOnRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSitePremierAddOnSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.premierAddOnName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteBackupConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteBackupConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteBackupConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteBackupConfigurationSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupRequest
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const backupSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const backupSiteSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const discoverSiteRestoreOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/discover",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.RestoreRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RestoreRequest
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const discoverSiteRestoreSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/discover",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.RestoreRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RestoreRequest
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteBackupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteBackupsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteBackupStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteBackupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteBackupStatusSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteBackupSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteBackupStatusSecretsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteBackupStatusSecretsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.BackupRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupItem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteUsagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter1,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteUsagesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter1,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteMetricsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteMetricDefinitionsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteMetricDefinitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSitePublishingProfileXmlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      format: [
        "options",
        "format"
      ]
    },
    mapper: {
      ...Mappers.CsmPublishingProfileOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSitePublishingProfileXmlSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      format: [
        "options",
        "format"
      ]
    },
    mapper: {
      ...Mappers.CsmPublishingProfileOptions,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const restartSiteSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.softRestart,
    Parameters.synchronous,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const restartSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.softRestart,
    Parameters.synchronous,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const startSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const startSiteSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const stopSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const stopSiteSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const syncSiteRepositoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const syncSiteRepositorySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const generateNewSitePublishingPasswordSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const generateNewSitePublishingPasswordOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteRelayServiceConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteRelayServiceConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.RelayServiceConnectionEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteRelayServiceConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteRelayServiceConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.RelayServiceConnectionEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteRelayServiceConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteRelayServiceConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.RelayServiceConnectionEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSiteRelayServiceConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteRelayServiceConnectionSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.entityName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.RelayServiceConnectionEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteRelayServiceConnectionsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteRelayServiceConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelayServiceConnectionEntity
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteVnetGatewaySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteVNETConnectionGatewaySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteVNETConnectionGatewaySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteVnetGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateSiteVNETConnectionGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSiteVNETConnectionGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteVNETConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteVNETConnectionsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginSwapSlotWithProductionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginSwapSlotsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "slotSwapEntity",
    mapper: {
      ...Mappers.CsmSlotEntity,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.skipDnsRegistration,
    Parameters.skipCustomDomainVerification,
    Parameters.forceDnsRegistration,
    Parameters.ttlInSeconds,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteEnvelope",
    mapper: {
      ...Mappers.Site,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    202: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateSiteSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.skipDnsRegistration,
    Parameters.skipCustomDomainVerification,
    Parameters.forceDnsRegistration,
    Parameters.ttlInSeconds,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "siteEnvelope",
    mapper: {
      ...Mappers.Site,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Site
    },
    202: {
      bodyMapper: Mappers.Site
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRecoverSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "recoveryEntity",
    mapper: {
      ...Mappers.CsmSiteRecoveryEntity,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.Site
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRecoverSiteSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "recoveryEntity",
    mapper: {
      ...Mappers.CsmSiteRecoveryEntity,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.Site
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginListSitePublishingCredentialsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginListSitePublishingCredentialsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRestoreSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.RestoreRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RestoreResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRestoreSiteSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.backupId,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.RestoreRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RestoreResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSlotsDifferencesFromProductionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSlotsDifferencesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SlotDifferenceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteSlotsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSitesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.includeSiteTypes,
    Parameters.includeSlots,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDeletedSitesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.includeSiteTypes,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDeploymentsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDeploymentsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getInstanceDeploymentsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getInstanceDeploymentsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteInstanceIdentifiersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteInstanceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteInstanceIdentifiersSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteInstanceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteHostNameBindingsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteHostNameBindingsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostNameBindingCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteBackupsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listSiteBackupsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupItemCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteUsagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.filter1,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteUsagesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.filter1,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteMetricsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteMetricsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteMetricDefinitionsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSiteMetricDefinitionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
