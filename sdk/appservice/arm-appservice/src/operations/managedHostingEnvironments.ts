/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/managedHostingEnvironmentsMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a ManagedHostingEnvironments. */
export class ManagedHostingEnvironments {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a ManagedHostingEnvironments.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Get properties of a managed hosting environment.
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentResponse>
   */
  getManagedHostingEnvironment(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param callback The callback
   */
  getManagedHostingEnvironment(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ManagedHostingEnvironment>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironment(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedHostingEnvironment>): void;
  getManagedHostingEnvironment(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedHostingEnvironment>, callback?: msRest.ServiceCallback<Models.ManagedHostingEnvironment>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getManagedHostingEnvironmentOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentResponse>;
  }

  /**
   * @summary Create or update a managed hosting environment.
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentResponse>
   */
  createOrUpdateManagedHostingEnvironment(resourceGroupName: string, name: string, managedHostingEnvironmentEnvelope: Models.HostingEnvironment, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentResponse> {
    return this.beginCreateOrUpdateManagedHostingEnvironment(resourceGroupName,name,managedHostingEnvironmentEnvelope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ManagedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentResponse>;
  }

  /**
   * @summary Delete a managed hosting environment.
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHostingEnvironmentsDeleteManagedHostingEnvironmentResponse>
   */
  deleteManagedHostingEnvironment(resourceGroupName: string, name: string, options?: Models.ManagedHostingEnvironmentsDeleteManagedHostingEnvironmentOptionalParams): Promise<Models.ManagedHostingEnvironmentsDeleteManagedHostingEnvironmentResponse> {
    return this.beginDeleteManagedHostingEnvironment(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ManagedHostingEnvironmentsDeleteManagedHostingEnvironmentResponse>;
  }

  /**
   * @summary Get all managed hosting environments in a resource group.
   * @param resourceGroupName Name of resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentsResponse>
   */
  getManagedHostingEnvironments(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param callback The callback
   */
  getManagedHostingEnvironments(resourceGroupName: string, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironments(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  getManagedHostingEnvironments(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostingEnvironmentCollection>, callback?: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getManagedHostingEnvironmentsOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentsResponse>;
  }

  /**
   * @summary Get list of ip addresses assigned to a managed hosting environment
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentVipsResponse>
   */
  getManagedHostingEnvironmentVips(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentVipsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param callback The callback
   */
  getManagedHostingEnvironmentVips(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.AddressResponse>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironmentVips(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AddressResponse>): void;
  getManagedHostingEnvironmentVips(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AddressResponse>, callback?: msRest.ServiceCallback<Models.AddressResponse>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentVipsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getManagedHostingEnvironmentVipsOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentVipsResponse>;
  }

  /**
   * @summary Get status of an operation on a managed hosting environment.
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param operationId operation identifier GUID
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperationResponse>
   */
  getManagedHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperationResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param operationId operation identifier GUID
   * @param callback The callback
   */
  getManagedHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param operationId operation identifier GUID
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getManagedHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        options
      },
      getManagedHostingEnvironmentOperationOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentOperationResponse>;
  }

  /**
   * @summary Get all sites on the managed hosting environment.
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesResponse>
   */
  getManagedHostingEnvironmentSites(resourceGroupName: string, name: string, options?: Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesOptionalParams): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param callback The callback
   */
  getManagedHostingEnvironmentSites(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironmentSites(resourceGroupName: string, name: string, options: Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesOptionalParams, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getManagedHostingEnvironmentSites(resourceGroupName: string, name: string, options?: Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesOptionalParams | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getManagedHostingEnvironmentSitesOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesResponse>;
  }

  /**
   * @summary Get all serverfarms (App Service Plans) on the managed hosting environment.
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansResponse>
   */
  getManagedHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param callback The callback
   */
  getManagedHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getManagedHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getManagedHostingEnvironmentWebHostingPlansOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansResponse>;
  }

  /**
   * @summary Get all serverfarms (App Service Plans) on the managed hosting environment.
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsResponse>
   */
  getManagedHostingEnvironmentServerFarms(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param callback The callback
   */
  getManagedHostingEnvironmentServerFarms(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironmentServerFarms(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getManagedHostingEnvironmentServerFarms(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getManagedHostingEnvironmentServerFarmsOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsResponse>;
  }

  /**
   * @summary Create or update a managed hosting environment.
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateManagedHostingEnvironment(resourceGroupName: string, name: string, managedHostingEnvironmentEnvelope: Models.HostingEnvironment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        managedHostingEnvironmentEnvelope,
        options
      },
      beginCreateOrUpdateManagedHostingEnvironmentOperationSpec,
      options);
  }

  /**
   * @summary Delete a managed hosting environment.
   * @param resourceGroupName Name of resource group
   * @param name Name of managed hosting environment
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteManagedHostingEnvironment(resourceGroupName: string, name: string, options?: Models.ManagedHostingEnvironmentsBeginDeleteManagedHostingEnvironmentOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginDeleteManagedHostingEnvironmentOperationSpec,
      options);
  }

  /**
   * @summary Get all managed hosting environments in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentsNextResponse>
   */
  getManagedHostingEnvironmentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getManagedHostingEnvironmentsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironmentsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  getManagedHostingEnvironmentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostingEnvironmentCollection>, callback?: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getManagedHostingEnvironmentsNextOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentsNextResponse>;
  }

  /**
   * @summary Get all sites on the managed hosting environment.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesNextResponse>
   */
  getManagedHostingEnvironmentSitesNext(nextPageLink: string, options?: Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesNextOptionalParams): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getManagedHostingEnvironmentSitesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironmentSitesNext(nextPageLink: string, options: Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesNextOptionalParams, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getManagedHostingEnvironmentSitesNext(nextPageLink: string, options?: Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesNextOptionalParams | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getManagedHostingEnvironmentSitesNextOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentSitesNextResponse>;
  }

  /**
   * @summary Get all serverfarms (App Service Plans) on the managed hosting environment.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansNextResponse>
   */
  getManagedHostingEnvironmentWebHostingPlansNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getManagedHostingEnvironmentWebHostingPlansNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironmentWebHostingPlansNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getManagedHostingEnvironmentWebHostingPlansNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getManagedHostingEnvironmentWebHostingPlansNextOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansNextResponse>;
  }

  /**
   * @summary Get all serverfarms (App Service Plans) on the managed hosting environment.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsNextResponse>
   */
  getManagedHostingEnvironmentServerFarmsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getManagedHostingEnvironmentServerFarmsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getManagedHostingEnvironmentServerFarmsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getManagedHostingEnvironmentServerFarmsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getManagedHostingEnvironmentServerFarmsNextOperationSpec,
      callback) as Promise<Models.ManagedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getManagedHostingEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHostingEnvironment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getManagedHostingEnvironmentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostingEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getManagedHostingEnvironmentVipsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/capacities/virtualip",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AddressResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getManagedHostingEnvironmentOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/operations/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    404: {},
    500: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getManagedHostingEnvironmentSitesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/sites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getManagedHostingEnvironmentWebHostingPlansOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/webhostingplans",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getManagedHostingEnvironmentServerFarmsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/serverfarms",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateManagedHostingEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "managedHostingEnvironmentEnvelope",
    mapper: {
      ...Mappers.HostingEnvironment,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.HostingEnvironment
    },
    400: {},
    404: {},
    409: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteManagedHostingEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.forceDelete,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    400: {},
    404: {},
    409: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getManagedHostingEnvironmentsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostingEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getManagedHostingEnvironmentSitesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getManagedHostingEnvironmentWebHostingPlansNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getManagedHostingEnvironmentServerFarmsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
