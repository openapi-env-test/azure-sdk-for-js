/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/globalDomainRegistrationMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a GlobalDomainRegistration. */
export class GlobalDomainRegistration {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a GlobalDomainRegistration.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Lists all domains in a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalDomainRegistrationGetAllDomainsResponse>
   */
  getAllDomains(options?: msRest.RequestOptionsBase): Promise<Models.GlobalDomainRegistrationGetAllDomainsResponse>;
  /**
   * @param callback The callback
   */
  getAllDomains(callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllDomains(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  getAllDomains(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainCollection>, callback?: msRest.ServiceCallback<Models.DomainCollection>): Promise<Models.GlobalDomainRegistrationGetAllDomainsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllDomainsOperationSpec,
      callback) as Promise<Models.GlobalDomainRegistrationGetAllDomainsResponse>;
  }

  /**
   * @summary Generates a single sign on request for domain management portal
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalDomainRegistrationGetDomainControlCenterSsoRequestResponse>
   */
  getDomainControlCenterSsoRequest(options?: msRest.RequestOptionsBase): Promise<Models.GlobalDomainRegistrationGetDomainControlCenterSsoRequestResponse>;
  /**
   * @param callback The callback
   */
  getDomainControlCenterSsoRequest(callback: msRest.ServiceCallback<Models.DomainControlCenterSsoRequest>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getDomainControlCenterSsoRequest(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainControlCenterSsoRequest>): void;
  getDomainControlCenterSsoRequest(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainControlCenterSsoRequest>, callback?: msRest.ServiceCallback<Models.DomainControlCenterSsoRequest>): Promise<Models.GlobalDomainRegistrationGetDomainControlCenterSsoRequestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getDomainControlCenterSsoRequestOperationSpec,
      callback) as Promise<Models.GlobalDomainRegistrationGetDomainControlCenterSsoRequestResponse>;
  }

  /**
   * @summary Validates domain registration information
   * @param domainRegistrationInput Domain registration information
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalDomainRegistrationValidateDomainPurchaseInformationResponse>
   */
  validateDomainPurchaseInformation(domainRegistrationInput: Models.DomainRegistrationInput, options?: msRest.RequestOptionsBase): Promise<Models.GlobalDomainRegistrationValidateDomainPurchaseInformationResponse>;
  /**
   * @param domainRegistrationInput Domain registration information
   * @param callback The callback
   */
  validateDomainPurchaseInformation(domainRegistrationInput: Models.DomainRegistrationInput, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param domainRegistrationInput Domain registration information
   * @param options The optional parameters
   * @param callback The callback
   */
  validateDomainPurchaseInformation(domainRegistrationInput: Models.DomainRegistrationInput, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  validateDomainPurchaseInformation(domainRegistrationInput: Models.DomainRegistrationInput, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GlobalDomainRegistrationValidateDomainPurchaseInformationResponse> {
    return this.client.sendOperationRequest(
      {
        domainRegistrationInput,
        options
      },
      validateDomainPurchaseInformationOperationSpec,
      callback) as Promise<Models.GlobalDomainRegistrationValidateDomainPurchaseInformationResponse>;
  }

  /**
   * @summary Checks if a domain is available for registration
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalDomainRegistrationCheckDomainAvailabilityResponse>
   */
  checkDomainAvailability(options?: Models.GlobalDomainRegistrationCheckDomainAvailabilityOptionalParams): Promise<Models.GlobalDomainRegistrationCheckDomainAvailabilityResponse>;
  /**
   * @param callback The callback
   */
  checkDomainAvailability(callback: msRest.ServiceCallback<Models.DomainAvailablilityCheckResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  checkDomainAvailability(options: Models.GlobalDomainRegistrationCheckDomainAvailabilityOptionalParams, callback: msRest.ServiceCallback<Models.DomainAvailablilityCheckResult>): void;
  checkDomainAvailability(options?: Models.GlobalDomainRegistrationCheckDomainAvailabilityOptionalParams | msRest.ServiceCallback<Models.DomainAvailablilityCheckResult>, callback?: msRest.ServiceCallback<Models.DomainAvailablilityCheckResult>): Promise<Models.GlobalDomainRegistrationCheckDomainAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      checkDomainAvailabilityOperationSpec,
      callback) as Promise<Models.GlobalDomainRegistrationCheckDomainAvailabilityResponse>;
  }

  /**
   * @summary Lists domain recommendations based on keywords
   * @param parameters Domain recommendation search parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalDomainRegistrationListDomainRecommendationsResponse>
   */
  listDomainRecommendations(parameters: Models.DomainRecommendationSearchParameters, options?: msRest.RequestOptionsBase): Promise<Models.GlobalDomainRegistrationListDomainRecommendationsResponse>;
  /**
   * @param parameters Domain recommendation search parameters
   * @param callback The callback
   */
  listDomainRecommendations(parameters: Models.DomainRecommendationSearchParameters, callback: msRest.ServiceCallback<Models.NameIdentifierCollection>): void;
  /**
   * @param parameters Domain recommendation search parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  listDomainRecommendations(parameters: Models.DomainRecommendationSearchParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NameIdentifierCollection>): void;
  listDomainRecommendations(parameters: Models.DomainRecommendationSearchParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NameIdentifierCollection>, callback?: msRest.ServiceCallback<Models.NameIdentifierCollection>): Promise<Models.GlobalDomainRegistrationListDomainRecommendationsResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        options
      },
      listDomainRecommendationsOperationSpec,
      callback) as Promise<Models.GlobalDomainRegistrationListDomainRecommendationsResponse>;
  }

  /**
   * @summary Lists all domains in a subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalDomainRegistrationGetAllDomainsNextResponse>
   */
  getAllDomainsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalDomainRegistrationGetAllDomainsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getAllDomainsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllDomainsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DomainCollection>): void;
  getAllDomainsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DomainCollection>, callback?: msRest.ServiceCallback<Models.DomainCollection>): Promise<Models.GlobalDomainRegistrationGetAllDomainsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getAllDomainsNextOperationSpec,
      callback) as Promise<Models.GlobalDomainRegistrationGetAllDomainsNextResponse>;
  }

  /**
   * @summary Lists domain recommendations based on keywords
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalDomainRegistrationListDomainRecommendationsNextResponse>
   */
  listDomainRecommendationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalDomainRegistrationListDomainRecommendationsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listDomainRecommendationsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NameIdentifierCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDomainRecommendationsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NameIdentifierCollection>): void;
  listDomainRecommendationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NameIdentifierCollection>, callback?: msRest.ServiceCallback<Models.NameIdentifierCollection>): Promise<Models.GlobalDomainRegistrationListDomainRecommendationsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listDomainRecommendationsNextOperationSpec,
      callback) as Promise<Models.GlobalDomainRegistrationListDomainRecommendationsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllDomainsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDomainControlCenterSsoRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainControlCenterSsoRequest
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const validateDomainPurchaseInformationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "domainRegistrationInput",
    mapper: {
      ...Mappers.DomainRegistrationInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkDomainAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      name: [
        "options",
        "name"
      ]
    },
    mapper: {
      ...Mappers.NameIdentifier,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DomainAvailablilityCheckResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listDomainRecommendationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DomainRecommendationSearchParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NameIdentifierCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllDomainsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DomainCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listDomainRecommendationsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NameIdentifierCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
