/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/hostingEnvironmentsMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a HostingEnvironments. */
export class HostingEnvironments {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a HostingEnvironments.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Get properties of hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentResponse>
   */
  getHostingEnvironment(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironment(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HostingEnvironment>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironment(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostingEnvironment>): void;
  getHostingEnvironment(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostingEnvironment>, callback?: msRest.ServiceCallback<Models.HostingEnvironment>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentResponse>;
  }

  /**
   * @summary Create or update a hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsCreateOrUpdateHostingEnvironmentResponse>
   */
  createOrUpdateHostingEnvironment(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: Models.HostingEnvironment, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsCreateOrUpdateHostingEnvironmentResponse> {
    return this.beginCreateOrUpdateHostingEnvironment(resourceGroupName,name,hostingEnvironmentEnvelope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.HostingEnvironmentsCreateOrUpdateHostingEnvironmentResponse>;
  }

  /**
   * @summary Delete a hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsDeleteHostingEnvironmentResponse>
   */
  deleteHostingEnvironment(resourceGroupName: string, name: string, options?: Models.HostingEnvironmentsDeleteHostingEnvironmentOptionalParams): Promise<Models.HostingEnvironmentsDeleteHostingEnvironmentResponse> {
    return this.beginDeleteHostingEnvironment(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.HostingEnvironmentsDeleteHostingEnvironmentResponse>;
  }

  /**
   * @summary Get diagnostic information for hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentDiagnosticsResponse>
   */
  getHostingEnvironmentDiagnostics(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentDiagnosticsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentDiagnostics(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.HostingEnvironmentDiagnostics[]>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentDiagnostics(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostingEnvironmentDiagnostics[]>): void;
  getHostingEnvironmentDiagnostics(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostingEnvironmentDiagnostics[]>, callback?: msRest.ServiceCallback<Models.HostingEnvironmentDiagnostics[]>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentDiagnosticsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentDiagnosticsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentDiagnosticsResponse>;
  }

  /**
   * @summary Get diagnostic information for hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param diagnosticsName Name of the diagnostics
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentDiagnosticsItemResponse>
   */
  getHostingEnvironmentDiagnosticsItem(resourceGroupName: string, name: string, diagnosticsName: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentDiagnosticsItemResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param diagnosticsName Name of the diagnostics
   * @param callback The callback
   */
  getHostingEnvironmentDiagnosticsItem(resourceGroupName: string, name: string, diagnosticsName: string, callback: msRest.ServiceCallback<Models.HostingEnvironmentDiagnostics>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param diagnosticsName Name of the diagnostics
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentDiagnosticsItem(resourceGroupName: string, name: string, diagnosticsName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostingEnvironmentDiagnostics>): void;
  getHostingEnvironmentDiagnosticsItem(resourceGroupName: string, name: string, diagnosticsName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostingEnvironmentDiagnostics>, callback?: msRest.ServiceCallback<Models.HostingEnvironmentDiagnostics>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentDiagnosticsItemResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        diagnosticsName,
        options
      },
      getHostingEnvironmentDiagnosticsItemOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentDiagnosticsItemResponse>;
  }

  /**
   * @summary Get used, available, and total worker capacity for hostingEnvironment (App Service
   * Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentCapacitiesResponse>
   */
  getHostingEnvironmentCapacities(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentCapacitiesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentCapacities(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.StampCapacityCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentCapacities(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StampCapacityCollection>): void;
  getHostingEnvironmentCapacities(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StampCapacityCollection>, callback?: msRest.ServiceCallback<Models.StampCapacityCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentCapacitiesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentCapacitiesOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentCapacitiesResponse>;
  }

  /**
   * @summary Get IP addresses assigned to the hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentVipsResponse>
   */
  getHostingEnvironmentVips(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentVipsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentVips(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.AddressResponse>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentVips(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AddressResponse>): void;
  getHostingEnvironmentVips(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AddressResponse>, callback?: msRest.ServiceCallback<Models.AddressResponse>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentVipsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentVipsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentVipsResponse>;
  }

  /**
   * @summary Get all hostingEnvironments (App Service Environments) in a resource group.
   * @param resourceGroupName Name of resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentsResponse>
   */
  getHostingEnvironments(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param callback The callback
   */
  getHostingEnvironments(resourceGroupName: string, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironments(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  getHostingEnvironments(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostingEnvironmentCollection>, callback?: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getHostingEnvironmentsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentsResponse>;
  }

  /**
   * @summary Reboots all machines in a hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsRebootHostingEnvironmentResponse>
   */
  rebootHostingEnvironment(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsRebootHostingEnvironmentResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  rebootHostingEnvironment(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  rebootHostingEnvironment(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  rebootHostingEnvironment(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.HostingEnvironmentsRebootHostingEnvironmentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      rebootHostingEnvironmentOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsRebootHostingEnvironmentResponse>;
  }

  /**
   * @summary List all currently running operations on the hostingEnvironment (App Service
   * Environment)
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentOperationsResponse>
   */
  getHostingEnvironmentOperations(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentOperationsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentOperations(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentOperations(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getHostingEnvironmentOperations(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentOperationsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentOperationsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentOperationsResponse>;
  }

  /**
   * @summary Get status of an operation on a hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param operationId operation identifier GUID
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentOperationResponse>
   */
  getHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentOperationResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param operationId operation identifier GUID
   * @param callback The callback
   */
  getHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param operationId operation identifier GUID
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentOperationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        options
      },
      getHostingEnvironmentOperationOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentOperationResponse>;
  }

  /**
   * @summary Get global metrics of hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricsResponse>
   */
  getHostingEnvironmentMetrics(resourceGroupName: string, name: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentMetricsOptionalParams): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentMetrics(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentMetrics(resourceGroupName: string, name: string, options: Models.HostingEnvironmentsGetHostingEnvironmentMetricsOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getHostingEnvironmentMetrics(resourceGroupName: string, name: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentMetricsOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentMetricsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricsResponse>;
  }

  /**
   * @summary Get global metric definitions of hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricDefinitionsResponse>
   */
  getHostingEnvironmentMetricDefinitions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricDefinitionsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentMetricDefinitions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.MetricDefinition>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentMetricDefinitions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinition>): void;
  getHostingEnvironmentMetricDefinitions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinition>, callback?: msRest.ServiceCallback<Models.MetricDefinition>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricDefinitionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentMetricDefinitionsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricDefinitionsResponse>;
  }

  /**
   * @summary Get global usages of hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentUsagesResponse>
   */
  getHostingEnvironmentUsages(resourceGroupName: string, name: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentUsagesOptionalParams): Promise<Models.HostingEnvironmentsGetHostingEnvironmentUsagesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentUsages(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentUsages(resourceGroupName: string, name: string, options: Models.HostingEnvironmentsGetHostingEnvironmentUsagesOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  getHostingEnvironmentUsages(resourceGroupName: string, name: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentUsagesOptionalParams | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentUsagesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentUsagesOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentUsagesResponse>;
  }

  /**
   * @summary Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsResponse>
   */
  getHostingEnvironmentMultiRoleMetrics(resourceGroupName: string, name: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsOptionalParams): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleMetrics(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleMetrics(resourceGroupName: string, name: string, options: Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getHostingEnvironmentMultiRoleMetrics(resourceGroupName: string, name: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentMultiRoleMetricsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsResponse>;
  }

  /**
   * @summary Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsResponse>
   */
  getHostingEnvironmentWebWorkerMetrics(resourceGroupName: string, name: string, workerPoolName: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsOptionalParams): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerMetrics(resourceGroupName: string, name: string, workerPoolName: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerMetrics(resourceGroupName: string, name: string, workerPoolName: string, options: Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getHostingEnvironmentWebWorkerMetrics(resourceGroupName: string, name: string, workerPoolName: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        workerPoolName,
        options
      },
      getHostingEnvironmentWebWorkerMetricsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsResponse>;
  }

  /**
   * @summary Get metric definitions for a multiRole pool of a hostingEnvironment (App Service
   * Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsResponse>
   */
  getHostingEnvironmentMultiRoleMetricDefinitions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleMetricDefinitions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleMetricDefinitions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  getHostingEnvironmentMultiRoleMetricDefinitions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionCollection>, callback?: msRest.ServiceCallback<Models.MetricDefinitionCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentMultiRoleMetricDefinitionsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsResponse>;
  }

  /**
   * @summary Get metric definitions for a worker pool of a hostingEnvironment (App Service
   * Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsResponse>
   */
  getHostingEnvironmentWebWorkerMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  getHostingEnvironmentWebWorkerMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionCollection>, callback?: msRest.ServiceCallback<Models.MetricDefinitionCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        workerPoolName,
        options
      },
      getHostingEnvironmentWebWorkerMetricDefinitionsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsResponse>;
  }

  /**
   * @summary Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesResponse>
   */
  getHostingEnvironmentMultiRoleUsages(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleUsages(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.UsageCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleUsages(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsageCollection>): void;
  getHostingEnvironmentMultiRoleUsages(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UsageCollection>, callback?: msRest.ServiceCallback<Models.UsageCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentMultiRoleUsagesOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesResponse>;
  }

  /**
   * @summary Get usages for a worker pool of a hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesResponse>
   */
  getHostingEnvironmentWebWorkerUsages(resourceGroupName: string, name: string, workerPoolName: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerUsages(resourceGroupName: string, name: string, workerPoolName: string, callback: msRest.ServiceCallback<Models.UsageCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerUsages(resourceGroupName: string, name: string, workerPoolName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsageCollection>): void;
  getHostingEnvironmentWebWorkerUsages(resourceGroupName: string, name: string, workerPoolName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UsageCollection>, callback?: msRest.ServiceCallback<Models.UsageCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        workerPoolName,
        options
      },
      getHostingEnvironmentWebWorkerUsagesOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesResponse>;
  }

  /**
   * @summary Get all sites on the hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentSitesResponse>
   */
  getHostingEnvironmentSites(resourceGroupName: string, name: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentSitesOptionalParams): Promise<Models.HostingEnvironmentsGetHostingEnvironmentSitesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentSites(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentSites(resourceGroupName: string, name: string, options: Models.HostingEnvironmentsGetHostingEnvironmentSitesOptionalParams, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getHostingEnvironmentSites(resourceGroupName: string, name: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentSitesOptionalParams | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentSitesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentSitesOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentSitesResponse>;
  }

  /**
   * @summary Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service
   * Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebHostingPlansResponse>
   */
  getHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebHostingPlansResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebHostingPlansResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentWebHostingPlansOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebHostingPlansResponse>;
  }

  /**
   * @summary Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service
   * Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentServerFarmsResponse>
   */
  getHostingEnvironmentServerFarms(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentServerFarmsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getHostingEnvironmentServerFarms(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentServerFarms(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getHostingEnvironmentServerFarms(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentServerFarmsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getHostingEnvironmentServerFarmsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentServerFarmsResponse>;
  }

  /**
   * @summary Get all multi role pools
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetMultiRolePoolsResponse>
   */
  getMultiRolePools(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetMultiRolePoolsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getMultiRolePools(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WorkerPoolCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiRolePools(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkerPoolCollection>): void;
  getMultiRolePools(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkerPoolCollection>, callback?: msRest.ServiceCallback<Models.WorkerPoolCollection>): Promise<Models.HostingEnvironmentsGetMultiRolePoolsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getMultiRolePoolsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetMultiRolePoolsResponse>;
  }

  /**
   * @summary Get properties of a multiRole pool.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetMultiRolePoolResponse>
   */
  getMultiRolePool(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetMultiRolePoolResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getMultiRolePool(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WorkerPool>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiRolePool(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkerPool>): void;
  getMultiRolePool(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkerPool>, callback?: msRest.ServiceCallback<Models.WorkerPool>): Promise<Models.HostingEnvironmentsGetMultiRolePoolResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getMultiRolePoolOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetMultiRolePoolResponse>;
  }

  /**
   * @summary Create or update a multiRole pool.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param multiRolePoolEnvelope Properties of multiRole pool
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsCreateOrUpdateMultiRolePoolResponse>
   */
  createOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: Models.WorkerPool, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsCreateOrUpdateMultiRolePoolResponse> {
    return this.beginCreateOrUpdateMultiRolePool(resourceGroupName,name,multiRolePoolEnvelope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.HostingEnvironmentsCreateOrUpdateMultiRolePoolResponse>;
  }

  /**
   * @summary Get available skus for scaling a multiRole pool.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetMultiRolePoolSkusResponse>
   */
  getMultiRolePoolSkus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetMultiRolePoolSkusResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getMultiRolePoolSkus(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SkuInfoCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiRolePoolSkus(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SkuInfoCollection>): void;
  getMultiRolePoolSkus(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SkuInfoCollection>, callback?: msRest.ServiceCallback<Models.SkuInfoCollection>): Promise<Models.HostingEnvironmentsGetMultiRolePoolSkusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getMultiRolePoolSkusOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetMultiRolePoolSkusResponse>;
  }

  /**
   * @summary Get all worker pools
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetWorkerPoolsResponse>
   */
  getWorkerPools(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetWorkerPoolsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param callback The callback
   */
  getWorkerPools(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.WorkerPoolCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param options The optional parameters
   * @param callback The callback
   */
  getWorkerPools(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkerPoolCollection>): void;
  getWorkerPools(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkerPoolCollection>, callback?: msRest.ServiceCallback<Models.WorkerPoolCollection>): Promise<Models.HostingEnvironmentsGetWorkerPoolsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getWorkerPoolsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetWorkerPoolsResponse>;
  }

  /**
   * @summary Get properties of a worker pool.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetWorkerPoolResponse>
   */
  getWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetWorkerPoolResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param callback The callback
   */
  getWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, callback: msRest.ServiceCallback<Models.WorkerPool>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param options The optional parameters
   * @param callback The callback
   */
  getWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkerPool>): void;
  getWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkerPool>, callback?: msRest.ServiceCallback<Models.WorkerPool>): Promise<Models.HostingEnvironmentsGetWorkerPoolResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        workerPoolName,
        options
      },
      getWorkerPoolOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetWorkerPoolResponse>;
  }

  /**
   * @summary Create or update a worker pool.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param workerPoolEnvelope Properties of worker pool
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsCreateOrUpdateWorkerPoolResponse>
   */
  createOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: Models.WorkerPool, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsCreateOrUpdateWorkerPoolResponse> {
    return this.beginCreateOrUpdateWorkerPool(resourceGroupName,name,workerPoolName,workerPoolEnvelope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.HostingEnvironmentsCreateOrUpdateWorkerPoolResponse>;
  }

  /**
   * @summary Get available skus for scaling a worker pool.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetWorkerPoolSkusResponse>
   */
  getWorkerPoolSkus(resourceGroupName: string, name: string, workerPoolName: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetWorkerPoolSkusResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param callback The callback
   */
  getWorkerPoolSkus(resourceGroupName: string, name: string, workerPoolName: string, callback: msRest.ServiceCallback<Models.SkuInfoCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param options The optional parameters
   * @param callback The callback
   */
  getWorkerPoolSkus(resourceGroupName: string, name: string, workerPoolName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SkuInfoCollection>): void;
  getWorkerPoolSkus(resourceGroupName: string, name: string, workerPoolName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SkuInfoCollection>, callback?: msRest.ServiceCallback<Models.SkuInfoCollection>): Promise<Models.HostingEnvironmentsGetWorkerPoolSkusResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        workerPoolName,
        options
      },
      getWorkerPoolSkusOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetWorkerPoolSkusResponse>;
  }

  /**
   * @summary Get metrics for a specific instance of a worker pool of a hostingEnvironment (App
   * Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param instance Name of instance in the worker pool
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetWorkerPoolInstanceMetricsResponse>
   */
  getWorkerPoolInstanceMetrics(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options?: Models.HostingEnvironmentsGetWorkerPoolInstanceMetricsOptionalParams): Promise<Models.HostingEnvironmentsGetWorkerPoolInstanceMetricsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param instance Name of instance in the worker pool
   * @param callback The callback
   */
  getWorkerPoolInstanceMetrics(resourceGroupName: string, name: string, workerPoolName: string, instance: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param instance Name of instance in the worker pool
   * @param options The optional parameters
   * @param callback The callback
   */
  getWorkerPoolInstanceMetrics(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options: Models.HostingEnvironmentsGetWorkerPoolInstanceMetricsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  getWorkerPoolInstanceMetrics(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options?: Models.HostingEnvironmentsGetWorkerPoolInstanceMetricsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.HostingEnvironmentsGetWorkerPoolInstanceMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        workerPoolName,
        instance,
        options
      },
      getWorkerPoolInstanceMetricsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetWorkerPoolInstanceMetricsResponse>;
  }

  /**
   * @summary Get metric definitions for a specific instance of a worker pool of a hostingEnvironment
   * (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param instance Name of instance in the worker pool
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsResponse>
   */
  getWorkerPoolInstanceMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param instance Name of instance in the worker pool
   * @param callback The callback
   */
  getWorkerPoolInstanceMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, instance: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param instance Name of instance in the worker pool
   * @param options The optional parameters
   * @param callback The callback
   */
  getWorkerPoolInstanceMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getWorkerPoolInstanceMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        workerPoolName,
        instance,
        options
      },
      getWorkerPoolInstanceMetricDefinitionsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsResponse>;
  }

  /**
   * @summary Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App
   * Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param instance Name of instance in the multiRole pool
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricsResponse>
   */
  getMultiRolePoolInstanceMetrics(resourceGroupName: string, name: string, instance: string, options?: Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricsOptionalParams): Promise<Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param instance Name of instance in the multiRole pool
   * @param callback The callback
   */
  getMultiRolePoolInstanceMetrics(resourceGroupName: string, name: string, instance: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param instance Name of instance in the multiRole pool
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiRolePoolInstanceMetrics(resourceGroupName: string, name: string, instance: string, options: Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricsOptionalParams, callback: msRest.ServiceCallback<any>): void;
  getMultiRolePoolInstanceMetrics(resourceGroupName: string, name: string, instance: string, options?: Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricsOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        instance,
        options
      },
      getMultiRolePoolInstanceMetricsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricsResponse>;
  }

  /**
   * @summary Get metric definitions for a specific instance of a multiRole pool of a
   * hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param instance Name of instance in the multiRole pool&gt;
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsResponse>
   */
  getMultiRolePoolInstanceMetricDefinitions(resourceGroupName: string, name: string, instance: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param instance Name of instance in the multiRole pool&gt;
   * @param callback The callback
   */
  getMultiRolePoolInstanceMetricDefinitions(resourceGroupName: string, name: string, instance: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param instance Name of instance in the multiRole pool&gt;
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiRolePoolInstanceMetricDefinitions(resourceGroupName: string, name: string, instance: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  getMultiRolePoolInstanceMetricDefinitions(resourceGroupName: string, name: string, instance: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        instance,
        options
      },
      getMultiRolePoolInstanceMetricDefinitionsOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsResponse>;
  }

  /**
   * @summary Suspends the hostingEnvironment.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsSuspendHostingEnvironmentResponse>
   */
  suspendHostingEnvironment(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsSuspendHostingEnvironmentResponse> {
    return this.beginSuspendHostingEnvironment(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.HostingEnvironmentsSuspendHostingEnvironmentResponse>;
  }

  /**
   * @summary Resumes the hostingEnvironment.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsResumeHostingEnvironmentResponse>
   */
  resumeHostingEnvironment(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsResumeHostingEnvironmentResponse> {
    return this.beginResumeHostingEnvironment(resourceGroupName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.HostingEnvironmentsResumeHostingEnvironmentResponse>;
  }

  /**
   * @summary Create or update a hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateHostingEnvironment(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: Models.HostingEnvironment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        hostingEnvironmentEnvelope,
        options
      },
      beginCreateOrUpdateHostingEnvironmentOperationSpec,
      options);
  }

  /**
   * @summary Delete a hostingEnvironment (App Service Environment).
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteHostingEnvironment(resourceGroupName: string, name: string, options?: Models.HostingEnvironmentsBeginDeleteHostingEnvironmentOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginDeleteHostingEnvironmentOperationSpec,
      options);
  }

  /**
   * @summary Create or update a multiRole pool.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param multiRolePoolEnvelope Properties of multiRole pool
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: Models.WorkerPool, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        multiRolePoolEnvelope,
        options
      },
      beginCreateOrUpdateMultiRolePoolOperationSpec,
      options);
  }

  /**
   * @summary Create or update a worker pool.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param workerPoolName Name of worker pool
   * @param workerPoolEnvelope Properties of worker pool
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: Models.WorkerPool, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        workerPoolName,
        workerPoolEnvelope,
        options
      },
      beginCreateOrUpdateWorkerPoolOperationSpec,
      options);
  }

  /**
   * @summary Suspends the hostingEnvironment.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSuspendHostingEnvironment(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginSuspendHostingEnvironmentOperationSpec,
      options);
  }

  /**
   * @summary Resumes the hostingEnvironment.
   * @param resourceGroupName Name of resource group
   * @param name Name of hostingEnvironment (App Service Environment)
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginResumeHostingEnvironment(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        options
      },
      beginResumeHostingEnvironmentOperationSpec,
      options);
  }

  /**
   * @summary Get used, available, and total worker capacity for hostingEnvironment (App Service
   * Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentCapacitiesNextResponse>
   */
  getHostingEnvironmentCapacitiesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentCapacitiesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentCapacitiesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StampCapacityCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentCapacitiesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StampCapacityCollection>): void;
  getHostingEnvironmentCapacitiesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StampCapacityCollection>, callback?: msRest.ServiceCallback<Models.StampCapacityCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentCapacitiesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentCapacitiesNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentCapacitiesNextResponse>;
  }

  /**
   * @summary Get all hostingEnvironments (App Service Environments) in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentsNextResponse>
   */
  getHostingEnvironmentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  getHostingEnvironmentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostingEnvironmentCollection>, callback?: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentsNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentsNextResponse>;
  }

  /**
   * @summary Get global metrics of hostingEnvironment (App Service Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricsNextResponse>
   */
  getHostingEnvironmentMetricsNext(nextPageLink: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentMetricsNextOptionalParams): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentMetricsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentMetricsNext(nextPageLink: string, options: Models.HostingEnvironmentsGetHostingEnvironmentMetricsNextOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getHostingEnvironmentMetricsNext(nextPageLink: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentMetricsNextOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentMetricsNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentMetricsNextResponse>;
  }

  /**
   * @summary Get global usages of hostingEnvironment (App Service Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentUsagesNextResponse>
   */
  getHostingEnvironmentUsagesNext(nextPageLink: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentUsagesNextOptionalParams): Promise<Models.HostingEnvironmentsGetHostingEnvironmentUsagesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentUsagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentUsagesNext(nextPageLink: string, options: Models.HostingEnvironmentsGetHostingEnvironmentUsagesNextOptionalParams, callback: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): void;
  getHostingEnvironmentUsagesNext(nextPageLink: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentUsagesNextOptionalParams | msRest.ServiceCallback<Models.CsmUsageQuotaCollection>, callback?: msRest.ServiceCallback<Models.CsmUsageQuotaCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentUsagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentUsagesNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentUsagesNextResponse>;
  }

  /**
   * @summary Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsNextResponse>
   */
  getHostingEnvironmentMultiRoleMetricsNext(nextPageLink: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsNextOptionalParams): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleMetricsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleMetricsNext(nextPageLink: string, options: Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsNextOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getHostingEnvironmentMultiRoleMetricsNext(nextPageLink: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsNextOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentMultiRoleMetricsNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsNextResponse>;
  }

  /**
   * @summary Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsNextResponse>
   */
  getHostingEnvironmentWebWorkerMetricsNext(nextPageLink: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsNextOptionalParams): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerMetricsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerMetricsNext(nextPageLink: string, options: Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsNextOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getHostingEnvironmentWebWorkerMetricsNext(nextPageLink: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsNextOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentWebWorkerMetricsNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsNextResponse>;
  }

  /**
   * @summary Get metric definitions for a multiRole pool of a hostingEnvironment (App Service
   * Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsNextResponse>
   */
  getHostingEnvironmentMultiRoleMetricDefinitionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleMetricDefinitionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleMetricDefinitionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  getHostingEnvironmentMultiRoleMetricDefinitionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionCollection>, callback?: msRest.ServiceCallback<Models.MetricDefinitionCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentMultiRoleMetricDefinitionsNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsNextResponse>;
  }

  /**
   * @summary Get metric definitions for a worker pool of a hostingEnvironment (App Service
   * Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsNextResponse>
   */
  getHostingEnvironmentWebWorkerMetricDefinitionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerMetricDefinitionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerMetricDefinitionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  getHostingEnvironmentWebWorkerMetricDefinitionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionCollection>, callback?: msRest.ServiceCallback<Models.MetricDefinitionCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentWebWorkerMetricDefinitionsNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsNextResponse>;
  }

  /**
   * @summary Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesNextResponse>
   */
  getHostingEnvironmentMultiRoleUsagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleUsagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.UsageCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentMultiRoleUsagesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsageCollection>): void;
  getHostingEnvironmentMultiRoleUsagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UsageCollection>, callback?: msRest.ServiceCallback<Models.UsageCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentMultiRoleUsagesNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesNextResponse>;
  }

  /**
   * @summary Get usages for a worker pool of a hostingEnvironment (App Service Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesNextResponse>
   */
  getHostingEnvironmentWebWorkerUsagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerUsagesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.UsageCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentWebWorkerUsagesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsageCollection>): void;
  getHostingEnvironmentWebWorkerUsagesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UsageCollection>, callback?: msRest.ServiceCallback<Models.UsageCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentWebWorkerUsagesNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesNextResponse>;
  }

  /**
   * @summary Get all sites on the hostingEnvironment (App Service Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentSitesNextResponse>
   */
  getHostingEnvironmentSitesNext(nextPageLink: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentSitesNextOptionalParams): Promise<Models.HostingEnvironmentsGetHostingEnvironmentSitesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentSitesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentSitesNext(nextPageLink: string, options: Models.HostingEnvironmentsGetHostingEnvironmentSitesNextOptionalParams, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getHostingEnvironmentSitesNext(nextPageLink: string, options?: Models.HostingEnvironmentsGetHostingEnvironmentSitesNextOptionalParams | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentSitesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentSitesNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentSitesNextResponse>;
  }

  /**
   * @summary Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service
   * Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebHostingPlansNextResponse>
   */
  getHostingEnvironmentWebHostingPlansNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebHostingPlansNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentWebHostingPlansNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentWebHostingPlansNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getHostingEnvironmentWebHostingPlansNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebHostingPlansNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentWebHostingPlansNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentWebHostingPlansNextResponse>;
  }

  /**
   * @summary Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service
   * Environment).
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetHostingEnvironmentServerFarmsNextResponse>
   */
  getHostingEnvironmentServerFarmsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetHostingEnvironmentServerFarmsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getHostingEnvironmentServerFarmsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentServerFarmsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getHostingEnvironmentServerFarmsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.HostingEnvironmentsGetHostingEnvironmentServerFarmsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getHostingEnvironmentServerFarmsNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetHostingEnvironmentServerFarmsNextResponse>;
  }

  /**
   * @summary Get all multi role pools
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetMultiRolePoolsNextResponse>
   */
  getMultiRolePoolsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetMultiRolePoolsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getMultiRolePoolsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WorkerPoolCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiRolePoolsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkerPoolCollection>): void;
  getMultiRolePoolsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkerPoolCollection>, callback?: msRest.ServiceCallback<Models.WorkerPoolCollection>): Promise<Models.HostingEnvironmentsGetMultiRolePoolsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiRolePoolsNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetMultiRolePoolsNextResponse>;
  }

  /**
   * @summary Get available skus for scaling a multiRole pool.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetMultiRolePoolSkusNextResponse>
   */
  getMultiRolePoolSkusNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetMultiRolePoolSkusNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getMultiRolePoolSkusNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SkuInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMultiRolePoolSkusNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SkuInfoCollection>): void;
  getMultiRolePoolSkusNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SkuInfoCollection>, callback?: msRest.ServiceCallback<Models.SkuInfoCollection>): Promise<Models.HostingEnvironmentsGetMultiRolePoolSkusNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getMultiRolePoolSkusNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetMultiRolePoolSkusNextResponse>;
  }

  /**
   * @summary Get all worker pools
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetWorkerPoolsNextResponse>
   */
  getWorkerPoolsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetWorkerPoolsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getWorkerPoolsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WorkerPoolCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getWorkerPoolsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkerPoolCollection>): void;
  getWorkerPoolsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkerPoolCollection>, callback?: msRest.ServiceCallback<Models.WorkerPoolCollection>): Promise<Models.HostingEnvironmentsGetWorkerPoolsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getWorkerPoolsNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetWorkerPoolsNextResponse>;
  }

  /**
   * @summary Get available skus for scaling a worker pool.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsGetWorkerPoolSkusNextResponse>
   */
  getWorkerPoolSkusNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsGetWorkerPoolSkusNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getWorkerPoolSkusNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SkuInfoCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getWorkerPoolSkusNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SkuInfoCollection>): void;
  getWorkerPoolSkusNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SkuInfoCollection>, callback?: msRest.ServiceCallback<Models.SkuInfoCollection>): Promise<Models.HostingEnvironmentsGetWorkerPoolSkusNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getWorkerPoolSkusNextOperationSpec,
      callback) as Promise<Models.HostingEnvironmentsGetWorkerPoolSkusNextResponse>;
  }

  /**
   * @summary Suspends the hostingEnvironment.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsSuspendHostingEnvironmentNextResponse>
   */
  suspendHostingEnvironmentNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsSuspendHostingEnvironmentNextResponse> {
    return this.beginSuspendHostingEnvironmentNext(nextPageLink,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.HostingEnvironmentsSuspendHostingEnvironmentNextResponse>;
  }

  /**
   * @summary Resumes the hostingEnvironment.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HostingEnvironmentsResumeHostingEnvironmentNextResponse>
   */
  resumeHostingEnvironmentNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HostingEnvironmentsResumeHostingEnvironmentNextResponse> {
    return this.beginResumeHostingEnvironmentNext(nextPageLink,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.HostingEnvironmentsResumeHostingEnvironmentNextResponse>;
  }

  /**
   * @summary Suspends the hostingEnvironment.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSuspendHostingEnvironmentNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        nextPageLink,
        options
      },
      beginSuspendHostingEnvironmentNextOperationSpec,
      options);
  }

  /**
   * @summary Resumes the hostingEnvironment.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginResumeHostingEnvironmentNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        nextPageLink,
        options
      },
      beginResumeHostingEnvironmentNextOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getHostingEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostingEnvironment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentDiagnosticsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostingEnvironmentDiagnostics"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentDiagnosticsItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.diagnosticsName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostingEnvironmentDiagnostics
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentCapacitiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StampCapacityCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentVipsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AddressResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostingEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const rebootHostingEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    400: {},
    404: {},
    409: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentOperationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    404: {},
    500: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metrics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentMetricDefinitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinition
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentUsagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentMultiRoleMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metrics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain,
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentWebWorkerMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metrics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentMultiRoleMetricDefinitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentWebWorkerMetricDefinitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentMultiRoleUsagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsageCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentWebWorkerUsagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsageCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentSitesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentWebHostingPlansOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/webhostingplans",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentServerFarmsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiRolePoolsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiRolePoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPool
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiRolePoolSkusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SkuInfoCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getWorkerPoolsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getWorkerPoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPool
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getWorkerPoolSkusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SkuInfoCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getWorkerPoolInstanceMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metrics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName,
    Parameters.instance,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getWorkerPoolInstanceMetricDefinitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName,
    Parameters.instance,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiRolePoolInstanceMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metrics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instance,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.details,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiRolePoolInstanceMetricDefinitionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.instance,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateHostingEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "hostingEnvironmentEnvelope",
    mapper: {
      ...Mappers.HostingEnvironment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HostingEnvironment
    },
    202: {
      bodyMapper: Mappers.HostingEnvironment
    },
    400: {},
    404: {},
    409: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteHostingEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.forceDelete,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    202: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    400: {},
    404: {},
    409: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateMultiRolePoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "multiRolePoolEnvelope",
    mapper: {
      ...Mappers.WorkerPool,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPool
    },
    202: {
      bodyMapper: Mappers.WorkerPool
    },
    400: {},
    404: {},
    409: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateWorkerPoolOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerPoolName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "workerPoolEnvelope",
    mapper: {
      ...Mappers.WorkerPool,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPool
    },
    202: {
      bodyMapper: Mappers.WorkerPool
    },
    400: {},
    404: {},
    409: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginSuspendHostingEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    202: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginResumeHostingEnvironmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    202: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentCapacitiesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StampCapacityCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostingEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentMetricsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentUsagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CsmUsageQuotaCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentMultiRoleMetricsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain,
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentWebWorkerMetricsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentMultiRoleMetricDefinitionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentWebWorkerMetricDefinitionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentMultiRoleUsagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsageCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentWebWorkerUsagesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsageCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentSitesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.propertiesToInclude,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentWebHostingPlansNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHostingEnvironmentServerFarmsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiRolePoolsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getMultiRolePoolSkusNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SkuInfoCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getWorkerPoolsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkerPoolCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getWorkerPoolSkusNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SkuInfoCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginSuspendHostingEnvironmentNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    202: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginResumeHostingEnvironmentNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    202: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
