/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/certificateOrdersMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a CertificateOrders. */
export class CertificateOrders {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a CertificateOrders.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Get certificate associated with the certificate order
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersGetCertificateResponse>
   */
  getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersGetCertificateResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param callback The callback
   */
  getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, callback: msRest.ServiceCallback<Models.CertificateOrderCertificate>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderCertificate>): void;
  getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderCertificate>, callback?: msRest.ServiceCallback<Models.CertificateOrderCertificate>): Promise<Models.CertificateOrdersGetCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        name,
        options
      },
      getCertificateOperationSpec,
      callback) as Promise<Models.CertificateOrdersGetCertificateResponse>;
  }

  /**
   * @summary Associates a Key Vault secret to a certificate store that will be used for storing the
   * certificate once it's ready
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param keyVaultCertificate Key Vault secret csm Id
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersCreateOrUpdateCertificateResponse>
   */
  createOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.CertificateOrderCertificate, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersCreateOrUpdateCertificateResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param keyVaultCertificate Key Vault secret csm Id
   * @param callback The callback
   */
  createOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.CertificateOrderCertificate, callback: msRest.ServiceCallback<Models.CertificateOrderCertificate>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param keyVaultCertificate Key Vault secret csm Id
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.CertificateOrderCertificate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderCertificate>): void;
  createOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.CertificateOrderCertificate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderCertificate>, callback?: msRest.ServiceCallback<Models.CertificateOrderCertificate>): Promise<Models.CertificateOrdersCreateOrUpdateCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        name,
        keyVaultCertificate,
        options
      },
      createOrUpdateCertificateOperationSpec,
      callback) as Promise<Models.CertificateOrdersCreateOrUpdateCertificateResponse>;
  }

  /**
   * @summary Deletes the certificate associated with the certificate order
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersDeleteCertificateResponse>
   */
  deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersDeleteCertificateResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param callback The callback
   */
  deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificateOrdersDeleteCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        name,
        options
      },
      deleteCertificateOperationSpec,
      callback) as Promise<Models.CertificateOrdersDeleteCertificateResponse>;
  }

  /**
   * @summary Associates a Key Vault secret to a certificate store that will be used for storing the
   * certificate once it's ready
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param keyVaultCertificate Key Vault secret csm Id
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersUpdateCertificateResponse>
   */
  updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.CertificateOrderCertificate, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersUpdateCertificateResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param keyVaultCertificate Key Vault secret csm Id
   * @param callback The callback
   */
  updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.CertificateOrderCertificate, callback: msRest.ServiceCallback<Models.CertificateOrderCertificate>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param name Certificate name
   * @param keyVaultCertificate Key Vault secret csm Id
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.CertificateOrderCertificate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderCertificate>): void;
  updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: Models.CertificateOrderCertificate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderCertificate>, callback?: msRest.ServiceCallback<Models.CertificateOrderCertificate>): Promise<Models.CertificateOrdersUpdateCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        name,
        keyVaultCertificate,
        options
      },
      updateCertificateOperationSpec,
      callback) as Promise<Models.CertificateOrdersUpdateCertificateResponse>;
  }

  /**
   * @summary Get a certificate order
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersGetCertificateOrderResponse>
   */
  getCertificateOrder(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersGetCertificateOrderResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param callback The callback
   */
  getCertificateOrder(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CertificateOrder>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificateOrder(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrder>): void;
  getCertificateOrder(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrder>, callback?: msRest.ServiceCallback<Models.CertificateOrder>): Promise<Models.CertificateOrdersGetCertificateOrderResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getCertificateOrderOperationSpec,
      callback) as Promise<Models.CertificateOrdersGetCertificateOrderResponse>;
  }

  /**
   * @summary Create or update a certificate purchase order
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersCreateOrUpdateCertificateOrderResponse>
   */
  createOrUpdateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: Models.CertificateOrder, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersCreateOrUpdateCertificateOrderResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
   * @param callback The callback
   */
  createOrUpdateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: Models.CertificateOrder, callback: msRest.ServiceCallback<Models.CertificateOrder>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: Models.CertificateOrder, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrder>): void;
  createOrUpdateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: Models.CertificateOrder, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrder>, callback?: msRest.ServiceCallback<Models.CertificateOrder>): Promise<Models.CertificateOrdersCreateOrUpdateCertificateOrderResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        certificateDistinguishedName,
        options
      },
      createOrUpdateCertificateOrderOperationSpec,
      callback) as Promise<Models.CertificateOrdersCreateOrUpdateCertificateOrderResponse>;
  }

  /**
   * @summary Delete an existing certificate order
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersDeleteCertificateOrderResponse>
   */
  deleteCertificateOrder(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersDeleteCertificateOrderResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param callback The callback
   */
  deleteCertificateOrder(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCertificateOrder(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteCertificateOrder(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificateOrdersDeleteCertificateOrderResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteCertificateOrderOperationSpec,
      callback) as Promise<Models.CertificateOrdersDeleteCertificateOrderResponse>;
  }

  /**
   * @summary Create or update a certificate purchase order
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersUpdateCertificateOrderResponse>
   */
  updateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: Models.CertificateOrder, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersUpdateCertificateOrderResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
   * @param callback The callback
   */
  updateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: Models.CertificateOrder, callback: msRest.ServiceCallback<Models.CertificateOrder>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: Models.CertificateOrder, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrder>): void;
  updateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: Models.CertificateOrder, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrder>, callback?: msRest.ServiceCallback<Models.CertificateOrder>): Promise<Models.CertificateOrdersUpdateCertificateOrderResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        certificateDistinguishedName,
        options
      },
      updateCertificateOrderOperationSpec,
      callback) as Promise<Models.CertificateOrdersUpdateCertificateOrderResponse>;
  }

  /**
   * @summary Get certificate orders in a resource group
   * @param resourceGroupName Azure resource group name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersGetCertificateOrdersResponse>
   */
  getCertificateOrders(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersGetCertificateOrdersResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param callback The callback
   */
  getCertificateOrders(resourceGroupName: string, callback: msRest.ServiceCallback<Models.CertificateOrderCollection>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificateOrders(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderCollection>): void;
  getCertificateOrders(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderCollection>, callback?: msRest.ServiceCallback<Models.CertificateOrderCollection>): Promise<Models.CertificateOrdersGetCertificateOrdersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getCertificateOrdersOperationSpec,
      callback) as Promise<Models.CertificateOrdersGetCertificateOrdersResponse>;
  }

  /**
   * @summary List all certificates associated with a certificate order (only one certificate can be
   * associated with an order at a time)
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersGetCertificatesResponse>
   */
  getCertificates(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersGetCertificatesResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param callback The callback
   */
  getCertificates(resourceGroupName: string, certificateOrderName: string, callback: msRest.ServiceCallback<Models.CertificateOrderCertificateCollection>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param certificateOrderName Certificate name
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificates(resourceGroupName: string, certificateOrderName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderCertificateCollection>): void;
  getCertificates(resourceGroupName: string, certificateOrderName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderCertificateCollection>, callback?: msRest.ServiceCallback<Models.CertificateOrderCertificateCollection>): Promise<Models.CertificateOrdersGetCertificatesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        options
      },
      getCertificatesOperationSpec,
      callback) as Promise<Models.CertificateOrdersGetCertificatesResponse>;
  }

  /**
   * @summary Reissue an existing certificate order
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param reissueCertificateOrderRequest Reissue parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersReissueCertificateOrderResponse>
   */
  reissueCertificateOrder(resourceGroupName: string, name: string, reissueCertificateOrderRequest: Models.ReissueCertificateOrderRequest, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersReissueCertificateOrderResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param reissueCertificateOrderRequest Reissue parameters
   * @param callback The callback
   */
  reissueCertificateOrder(resourceGroupName: string, name: string, reissueCertificateOrderRequest: Models.ReissueCertificateOrderRequest, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param reissueCertificateOrderRequest Reissue parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  reissueCertificateOrder(resourceGroupName: string, name: string, reissueCertificateOrderRequest: Models.ReissueCertificateOrderRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  reissueCertificateOrder(resourceGroupName: string, name: string, reissueCertificateOrderRequest: Models.ReissueCertificateOrderRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificateOrdersReissueCertificateOrderResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        reissueCertificateOrderRequest,
        options
      },
      reissueCertificateOrderOperationSpec,
      callback) as Promise<Models.CertificateOrdersReissueCertificateOrderResponse>;
  }

  /**
   * @summary Renew an existing certificate order
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param renewCertificateOrderRequest Renew parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersRenewCertificateOrderResponse>
   */
  renewCertificateOrder(resourceGroupName: string, name: string, renewCertificateOrderRequest: Models.RenewCertificateOrderRequest, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersRenewCertificateOrderResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param renewCertificateOrderRequest Renew parameters
   * @param callback The callback
   */
  renewCertificateOrder(resourceGroupName: string, name: string, renewCertificateOrderRequest: Models.RenewCertificateOrderRequest, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate name
   * @param renewCertificateOrderRequest Renew parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  renewCertificateOrder(resourceGroupName: string, name: string, renewCertificateOrderRequest: Models.RenewCertificateOrderRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  renewCertificateOrder(resourceGroupName: string, name: string, renewCertificateOrderRequest: Models.RenewCertificateOrderRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificateOrdersRenewCertificateOrderResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        renewCertificateOrderRequest,
        options
      },
      renewCertificateOrderOperationSpec,
      callback) as Promise<Models.CertificateOrdersRenewCertificateOrderResponse>;
  }

  /**
   * @summary Retrieve the list of certificate actions
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersRetrieveCertificateActionsResponse>
   */
  retrieveCertificateActions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersRetrieveCertificateActionsResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param callback The callback
   */
  retrieveCertificateActions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CertificateOrderAction[]>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param options The optional parameters
   * @param callback The callback
   */
  retrieveCertificateActions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderAction[]>): void;
  retrieveCertificateActions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderAction[]>, callback?: msRest.ServiceCallback<Models.CertificateOrderAction[]>): Promise<Models.CertificateOrdersRetrieveCertificateActionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      retrieveCertificateActionsOperationSpec,
      callback) as Promise<Models.CertificateOrdersRetrieveCertificateActionsResponse>;
  }

  /**
   * @summary Retrieve email history
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersRetrieveCertificateEmailHistoryResponse>
   */
  retrieveCertificateEmailHistory(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersRetrieveCertificateEmailHistoryResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param callback The callback
   */
  retrieveCertificateEmailHistory(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.CertificateEmail[]>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param options The optional parameters
   * @param callback The callback
   */
  retrieveCertificateEmailHistory(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateEmail[]>): void;
  retrieveCertificateEmailHistory(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateEmail[]>, callback?: msRest.ServiceCallback<Models.CertificateEmail[]>): Promise<Models.CertificateOrdersRetrieveCertificateEmailHistoryResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      retrieveCertificateEmailHistoryOperationSpec,
      callback) as Promise<Models.CertificateOrdersRetrieveCertificateEmailHistoryResponse>;
  }

  /**
   * @summary Resend certificate email
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersResendCertificateEmailResponse>
   */
  resendCertificateEmail(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersResendCertificateEmailResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param callback The callback
   */
  resendCertificateEmail(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param options The optional parameters
   * @param callback The callback
   */
  resendCertificateEmail(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  resendCertificateEmail(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificateOrdersResendCertificateEmailResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      resendCertificateEmailOperationSpec,
      callback) as Promise<Models.CertificateOrdersResendCertificateEmailResponse>;
  }

  /**
   * @summary Verify domain ownership for this certificate order
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersVerifyDomainOwnershipResponse>
   */
  verifyDomainOwnership(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersVerifyDomainOwnershipResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param callback The callback
   */
  verifyDomainOwnership(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param name Certificate order name
   * @param options The optional parameters
   * @param callback The callback
   */
  verifyDomainOwnership(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  verifyDomainOwnership(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificateOrdersVerifyDomainOwnershipResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      verifyDomainOwnershipOperationSpec,
      callback) as Promise<Models.CertificateOrdersVerifyDomainOwnershipResponse>;
  }

  /**
   * @summary Get certificate orders in a resource group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersGetCertificateOrdersNextResponse>
   */
  getCertificateOrdersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersGetCertificateOrdersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getCertificateOrdersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CertificateOrderCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificateOrdersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderCollection>): void;
  getCertificateOrdersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderCollection>, callback?: msRest.ServiceCallback<Models.CertificateOrderCollection>): Promise<Models.CertificateOrdersGetCertificateOrdersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getCertificateOrdersNextOperationSpec,
      callback) as Promise<Models.CertificateOrdersGetCertificateOrdersNextResponse>;
  }

  /**
   * @summary List all certificates associated with a certificate order (only one certificate can be
   * associated with an order at a time)
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOrdersGetCertificatesNextResponse>
   */
  getCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOrdersGetCertificatesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getCertificatesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CertificateOrderCertificateCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCertificatesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderCertificateCollection>): void;
  getCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderCertificateCollection>, callback?: msRest.ServiceCallback<Models.CertificateOrderCertificateCollection>): Promise<Models.CertificateOrdersGetCertificatesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getCertificatesNextOperationSpec,
      callback) as Promise<Models.CertificateOrdersGetCertificatesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrderCertificate
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "keyVaultCertificate",
    mapper: {
      ...Mappers.CertificateOrderCertificate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrderCertificate
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "keyVaultCertificate",
    mapper: {
      ...Mappers.CertificateOrderCertificate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrderCertificate
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCertificateOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrder
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateCertificateOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateDistinguishedName",
    mapper: {
      ...Mappers.CertificateOrder,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrder
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteCertificateOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateCertificateOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateDistinguishedName",
    mapper: {
      ...Mappers.CertificateOrder,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrder
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCertificateOrdersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrderCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCertificatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrderCertificateCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const reissueCertificateOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/reissue",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "reissueCertificateOrderRequest",
    mapper: {
      ...Mappers.ReissueCertificateOrderRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const renewCertificateOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/renew",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "renewCertificateOrderRequest",
    mapper: {
      ...Mappers.RenewCertificateOrderRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const retrieveCertificateActionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateOrderAction"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const retrieveCertificateEmailHistoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CertificateEmail"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const resendCertificateEmailOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/resendEmail",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const verifyDomainOwnershipOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/verifyDomainOwnership",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCertificateOrdersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrderCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCertificatesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrderCertificateCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
