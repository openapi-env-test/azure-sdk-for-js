/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/providerMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a Provider. */
export class Provider {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a Provider.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Gets the source controls available for Azure websites
   * @param [options] The optional parameters
   * @returns Promise<Models.ProviderGetSourceControlsResponse>
   */
  getSourceControls(options?: msRest.RequestOptionsBase): Promise<Models.ProviderGetSourceControlsResponse>;
  /**
   * @param callback The callback
   */
  getSourceControls(callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSourceControls(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
  getSourceControls(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceControlCollection>, callback?: msRest.ServiceCallback<Models.SourceControlCollection>): Promise<Models.ProviderGetSourceControlsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSourceControlsOperationSpec,
      callback) as Promise<Models.ProviderGetSourceControlsResponse>;
  }

  /**
   * @summary Gets source control token
   * @param sourceControlType Type of source control
   * @param [options] The optional parameters
   * @returns Promise<Models.ProviderGetSourceControlResponse>
   */
  getSourceControl(sourceControlType: string, options?: msRest.RequestOptionsBase): Promise<Models.ProviderGetSourceControlResponse>;
  /**
   * @param sourceControlType Type of source control
   * @param callback The callback
   */
  getSourceControl(sourceControlType: string, callback: msRest.ServiceCallback<Models.SourceControl>): void;
  /**
   * @param sourceControlType Type of source control
   * @param options The optional parameters
   * @param callback The callback
   */
  getSourceControl(sourceControlType: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControl>): void;
  getSourceControl(sourceControlType: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceControl>, callback?: msRest.ServiceCallback<Models.SourceControl>): Promise<Models.ProviderGetSourceControlResponse> {
    return this.client.sendOperationRequest(
      {
        sourceControlType,
        options
      },
      getSourceControlOperationSpec,
      callback) as Promise<Models.ProviderGetSourceControlResponse>;
  }

  /**
   * @summary Updates source control token
   * @param sourceControlType Type of source control
   * @param requestMessage Source control token information
   * @param [options] The optional parameters
   * @returns Promise<Models.ProviderUpdateSourceControlResponse>
   */
  updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, options?: msRest.RequestOptionsBase): Promise<Models.ProviderUpdateSourceControlResponse>;
  /**
   * @param sourceControlType Type of source control
   * @param requestMessage Source control token information
   * @param callback The callback
   */
  updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, callback: msRest.ServiceCallback<Models.SourceControl>): void;
  /**
   * @param sourceControlType Type of source control
   * @param requestMessage Source control token information
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControl>): void;
  updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceControl>, callback?: msRest.ServiceCallback<Models.SourceControl>): Promise<Models.ProviderUpdateSourceControlResponse> {
    return this.client.sendOperationRequest(
      {
        sourceControlType,
        requestMessage,
        options
      },
      updateSourceControlOperationSpec,
      callback) as Promise<Models.ProviderUpdateSourceControlResponse>;
  }

  /**
   * @summary Gets publishing user
   * @param [options] The optional parameters
   * @returns Promise<Models.ProviderGetPublishingUserResponse>
   */
  getPublishingUser(options?: msRest.RequestOptionsBase): Promise<Models.ProviderGetPublishingUserResponse>;
  /**
   * @param callback The callback
   */
  getPublishingUser(callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPublishingUser(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
  getPublishingUser(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.ProviderGetPublishingUserResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getPublishingUserOperationSpec,
      callback) as Promise<Models.ProviderGetPublishingUserResponse>;
  }

  /**
   * @summary Updates publishing user
   * @param requestMessage Details of publishing user
   * @param [options] The optional parameters
   * @returns Promise<Models.ProviderUpdatePublishingUserResponse>
   */
  updatePublishingUser(requestMessage: Models.User, options?: msRest.RequestOptionsBase): Promise<Models.ProviderUpdatePublishingUserResponse>;
  /**
   * @param requestMessage Details of publishing user
   * @param callback The callback
   */
  updatePublishingUser(requestMessage: Models.User, callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param requestMessage Details of publishing user
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePublishingUser(requestMessage: Models.User, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
  updatePublishingUser(requestMessage: Models.User, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.ProviderUpdatePublishingUserResponse> {
    return this.client.sendOperationRequest(
      {
        requestMessage,
        options
      },
      updatePublishingUserOperationSpec,
      callback) as Promise<Models.ProviderUpdatePublishingUserResponse>;
  }

  /**
   * @summary Gets the source controls available for Azure websites
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProviderGetSourceControlsNextResponse>
   */
  getSourceControlsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProviderGetSourceControlsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSourceControlsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSourceControlsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
  getSourceControlsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceControlCollection>, callback?: msRest.ServiceCallback<Models.SourceControlCollection>): Promise<Models.ProviderGetSourceControlsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSourceControlsNextOperationSpec,
      callback) as Promise<Models.ProviderGetSourceControlsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getSourceControlsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Web/sourcecontrols",
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SourceControlCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
  urlParameters: [
    Parameters.sourceControlType
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SourceControl
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
  urlParameters: [
    Parameters.sourceControlType
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "requestMessage",
    mapper: {
      ...Mappers.SourceControl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SourceControl
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPublishingUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Web/publishingUsers/web",
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updatePublishingUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Web/publishingUsers/web",
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "requestMessage",
    mapper: {
      ...Mappers.User,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSourceControlsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SourceControlCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
