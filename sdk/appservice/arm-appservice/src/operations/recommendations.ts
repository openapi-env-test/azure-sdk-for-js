/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/recommendationsMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a Recommendations. */
export class Recommendations {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a Recommendations.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Gets a list of recommendations associated with the specified subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.RecommendationsGetRecommendationBySubscriptionResponse>
   */
  getRecommendationBySubscription(options?: Models.RecommendationsGetRecommendationBySubscriptionOptionalParams): Promise<Models.RecommendationsGetRecommendationBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  getRecommendationBySubscription(callback: msRest.ServiceCallback<Models.Recommendation[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getRecommendationBySubscription(options: Models.RecommendationsGetRecommendationBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.Recommendation[]>): void;
  getRecommendationBySubscription(options?: Models.RecommendationsGetRecommendationBySubscriptionOptionalParams | msRest.ServiceCallback<Models.Recommendation[]>, callback?: msRest.ServiceCallback<Models.Recommendation[]>): Promise<Models.RecommendationsGetRecommendationBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getRecommendationBySubscriptionOperationSpec,
      callback) as Promise<Models.RecommendationsGetRecommendationBySubscriptionResponse>;
  }

  /**
   * @summary Gets the detailed properties of the recommendation object for the specified web site.
   * @param resourceGroupName Resource group name
   * @param siteName Site name
   * @param name Recommendation rule name
   * @param [options] The optional parameters
   * @returns Promise<Models.RecommendationsGetRuleDetailsBySiteNameResponse>
   */
  getRuleDetailsBySiteName(resourceGroupName: string, siteName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.RecommendationsGetRuleDetailsBySiteNameResponse>;
  /**
   * @param resourceGroupName Resource group name
   * @param siteName Site name
   * @param name Recommendation rule name
   * @param callback The callback
   */
  getRuleDetailsBySiteName(resourceGroupName: string, siteName: string, name: string, callback: msRest.ServiceCallback<Models.RecommendationRule>): void;
  /**
   * @param resourceGroupName Resource group name
   * @param siteName Site name
   * @param name Recommendation rule name
   * @param options The optional parameters
   * @param callback The callback
   */
  getRuleDetailsBySiteName(resourceGroupName: string, siteName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RecommendationRule>): void;
  getRuleDetailsBySiteName(resourceGroupName: string, siteName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RecommendationRule>, callback?: msRest.ServiceCallback<Models.RecommendationRule>): Promise<Models.RecommendationsGetRuleDetailsBySiteNameResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        name,
        options
      },
      getRuleDetailsBySiteNameOperationSpec,
      callback) as Promise<Models.RecommendationsGetRuleDetailsBySiteNameResponse>;
  }

  /**
   * @summary Gets a list of recommendations associated with the specified web site.
   * @param resourceGroupName Resource group name
   * @param siteName Site name
   * @param [options] The optional parameters
   * @returns Promise<Models.RecommendationsGetRecommendedRulesForSiteResponse>
   */
  getRecommendedRulesForSite(resourceGroupName: string, siteName: string, options?: Models.RecommendationsGetRecommendedRulesForSiteOptionalParams): Promise<Models.RecommendationsGetRecommendedRulesForSiteResponse>;
  /**
   * @param resourceGroupName Resource group name
   * @param siteName Site name
   * @param callback The callback
   */
  getRecommendedRulesForSite(resourceGroupName: string, siteName: string, callback: msRest.ServiceCallback<Models.Recommendation[]>): void;
  /**
   * @param resourceGroupName Resource group name
   * @param siteName Site name
   * @param options The optional parameters
   * @param callback The callback
   */
  getRecommendedRulesForSite(resourceGroupName: string, siteName: string, options: Models.RecommendationsGetRecommendedRulesForSiteOptionalParams, callback: msRest.ServiceCallback<Models.Recommendation[]>): void;
  getRecommendedRulesForSite(resourceGroupName: string, siteName: string, options?: Models.RecommendationsGetRecommendedRulesForSiteOptionalParams | msRest.ServiceCallback<Models.Recommendation[]>, callback?: msRest.ServiceCallback<Models.Recommendation[]>): Promise<Models.RecommendationsGetRecommendedRulesForSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        options
      },
      getRecommendedRulesForSiteOperationSpec,
      callback) as Promise<Models.RecommendationsGetRecommendedRulesForSiteResponse>;
  }

  /**
   * @summary Gets the list of past recommendations optionally specified by the time range.
   * @param resourceGroupName Resource group name
   * @param siteName Site name
   * @param [options] The optional parameters
   * @returns Promise<Models.RecommendationsGetRecommendationHistoryForSiteResponse>
   */
  getRecommendationHistoryForSite(resourceGroupName: string, siteName: string, options?: Models.RecommendationsGetRecommendationHistoryForSiteOptionalParams): Promise<Models.RecommendationsGetRecommendationHistoryForSiteResponse>;
  /**
   * @param resourceGroupName Resource group name
   * @param siteName Site name
   * @param callback The callback
   */
  getRecommendationHistoryForSite(resourceGroupName: string, siteName: string, callback: msRest.ServiceCallback<Models.Recommendation[]>): void;
  /**
   * @param resourceGroupName Resource group name
   * @param siteName Site name
   * @param options The optional parameters
   * @param callback The callback
   */
  getRecommendationHistoryForSite(resourceGroupName: string, siteName: string, options: Models.RecommendationsGetRecommendationHistoryForSiteOptionalParams, callback: msRest.ServiceCallback<Models.Recommendation[]>): void;
  getRecommendationHistoryForSite(resourceGroupName: string, siteName: string, options?: Models.RecommendationsGetRecommendationHistoryForSiteOptionalParams | msRest.ServiceCallback<Models.Recommendation[]>, callback?: msRest.ServiceCallback<Models.Recommendation[]>): Promise<Models.RecommendationsGetRecommendationHistoryForSiteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        options
      },
      getRecommendationHistoryForSiteOperationSpec,
      callback) as Promise<Models.RecommendationsGetRecommendationHistoryForSiteResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getRecommendationBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.featured,
    Parameters.filter1,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Recommendation"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getRuleDetailsBySiteNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RecommendationRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getRecommendedRulesForSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.featured,
    Parameters.siteSku,
    Parameters.numSlots,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Recommendation"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getRecommendationHistoryForSiteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Recommendation"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
