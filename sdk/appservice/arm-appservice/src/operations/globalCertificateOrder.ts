/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/globalCertificateOrderMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a GlobalCertificateOrder. */
export class GlobalCertificateOrder {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a GlobalCertificateOrder.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Lists all domains in a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalCertificateOrderGetAllCertificateOrdersResponse>
   */
  getAllCertificateOrders(options?: msRest.RequestOptionsBase): Promise<Models.GlobalCertificateOrderGetAllCertificateOrdersResponse>;
  /**
   * @param callback The callback
   */
  getAllCertificateOrders(callback: msRest.ServiceCallback<Models.CertificateOrderCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllCertificateOrders(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderCollection>): void;
  getAllCertificateOrders(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderCollection>, callback?: msRest.ServiceCallback<Models.CertificateOrderCollection>): Promise<Models.GlobalCertificateOrderGetAllCertificateOrdersResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllCertificateOrdersOperationSpec,
      callback) as Promise<Models.GlobalCertificateOrderGetAllCertificateOrdersResponse>;
  }

  /**
   * @summary Validate certificate purchase information
   * @param certificateOrder Certificate order
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalCertificateOrderValidateCertificatePurchaseInformationResponse>
   */
  validateCertificatePurchaseInformation(certificateOrder: Models.CertificateOrder, options?: msRest.RequestOptionsBase): Promise<Models.GlobalCertificateOrderValidateCertificatePurchaseInformationResponse>;
  /**
   * @param certificateOrder Certificate order
   * @param callback The callback
   */
  validateCertificatePurchaseInformation(certificateOrder: Models.CertificateOrder, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param certificateOrder Certificate order
   * @param options The optional parameters
   * @param callback The callback
   */
  validateCertificatePurchaseInformation(certificateOrder: Models.CertificateOrder, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  validateCertificatePurchaseInformation(certificateOrder: Models.CertificateOrder, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GlobalCertificateOrderValidateCertificatePurchaseInformationResponse> {
    return this.client.sendOperationRequest(
      {
        certificateOrder,
        options
      },
      validateCertificatePurchaseInformationOperationSpec,
      callback) as Promise<Models.GlobalCertificateOrderValidateCertificatePurchaseInformationResponse>;
  }

  /**
   * @summary Lists all domains in a subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalCertificateOrderGetAllCertificateOrdersNextResponse>
   */
  getAllCertificateOrdersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalCertificateOrderGetAllCertificateOrdersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getAllCertificateOrdersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CertificateOrderCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllCertificateOrdersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateOrderCollection>): void;
  getAllCertificateOrdersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateOrderCollection>, callback?: msRest.ServiceCallback<Models.CertificateOrderCollection>): Promise<Models.GlobalCertificateOrderGetAllCertificateOrdersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getAllCertificateOrdersNextOperationSpec,
      callback) as Promise<Models.GlobalCertificateOrderGetAllCertificateOrdersNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAllCertificateOrdersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrderCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const validateCertificatePurchaseInformationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateOrder",
    mapper: {
      ...Mappers.CertificateOrder,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllCertificateOrdersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateOrderCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
