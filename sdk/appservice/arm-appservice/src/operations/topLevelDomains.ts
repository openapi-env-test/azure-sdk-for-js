/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/topLevelDomainsMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a TopLevelDomains. */
export class TopLevelDomains {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a TopLevelDomains.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Lists all top level domains supported for registration
   * @param [options] The optional parameters
   * @returns Promise<Models.TopLevelDomainsGetGetTopLevelDomainsResponse>
   */
  getGetTopLevelDomains(options?: msRest.RequestOptionsBase): Promise<Models.TopLevelDomainsGetGetTopLevelDomainsResponse>;
  /**
   * @param callback The callback
   */
  getGetTopLevelDomains(callback: msRest.ServiceCallback<Models.TopLevelDomainCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getGetTopLevelDomains(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TopLevelDomainCollection>): void;
  getGetTopLevelDomains(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TopLevelDomainCollection>, callback?: msRest.ServiceCallback<Models.TopLevelDomainCollection>): Promise<Models.TopLevelDomainsGetGetTopLevelDomainsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getGetTopLevelDomainsOperationSpec,
      callback) as Promise<Models.TopLevelDomainsGetGetTopLevelDomainsResponse>;
  }

  /**
   * @summary Gets details of a top level domain
   * @param name Name of the top level domain
   * @param [options] The optional parameters
   * @returns Promise<Models.TopLevelDomainsGetTopLevelDomainResponse>
   */
  getTopLevelDomain(name: string, options?: msRest.RequestOptionsBase): Promise<Models.TopLevelDomainsGetTopLevelDomainResponse>;
  /**
   * @param name Name of the top level domain
   * @param callback The callback
   */
  getTopLevelDomain(name: string, callback: msRest.ServiceCallback<Models.TopLevelDomain>): void;
  /**
   * @param name Name of the top level domain
   * @param options The optional parameters
   * @param callback The callback
   */
  getTopLevelDomain(name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TopLevelDomain>): void;
  getTopLevelDomain(name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TopLevelDomain>, callback?: msRest.ServiceCallback<Models.TopLevelDomain>): Promise<Models.TopLevelDomainsGetTopLevelDomainResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      getTopLevelDomainOperationSpec,
      callback) as Promise<Models.TopLevelDomainsGetTopLevelDomainResponse>;
  }

  /**
   * @summary Lists legal agreements that user needs to accept before purchasing domain
   * @param name Name of the top level domain
   * @param [options] The optional parameters
   * @returns Promise<Models.TopLevelDomainsListTopLevelDomainAgreementsResponse>
   */
  listTopLevelDomainAgreements(name: string, options?: Models.TopLevelDomainsListTopLevelDomainAgreementsOptionalParams): Promise<Models.TopLevelDomainsListTopLevelDomainAgreementsResponse>;
  /**
   * @param name Name of the top level domain
   * @param callback The callback
   */
  listTopLevelDomainAgreements(name: string, callback: msRest.ServiceCallback<Models.TldLegalAgreementCollection>): void;
  /**
   * @param name Name of the top level domain
   * @param options The optional parameters
   * @param callback The callback
   */
  listTopLevelDomainAgreements(name: string, options: Models.TopLevelDomainsListTopLevelDomainAgreementsOptionalParams, callback: msRest.ServiceCallback<Models.TldLegalAgreementCollection>): void;
  listTopLevelDomainAgreements(name: string, options?: Models.TopLevelDomainsListTopLevelDomainAgreementsOptionalParams | msRest.ServiceCallback<Models.TldLegalAgreementCollection>, callback?: msRest.ServiceCallback<Models.TldLegalAgreementCollection>): Promise<Models.TopLevelDomainsListTopLevelDomainAgreementsResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      listTopLevelDomainAgreementsOperationSpec,
      callback) as Promise<Models.TopLevelDomainsListTopLevelDomainAgreementsResponse>;
  }

  /**
   * @summary Lists all top level domains supported for registration
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.TopLevelDomainsGetGetTopLevelDomainsNextResponse>
   */
  getGetTopLevelDomainsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TopLevelDomainsGetGetTopLevelDomainsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getGetTopLevelDomainsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TopLevelDomainCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getGetTopLevelDomainsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TopLevelDomainCollection>): void;
  getGetTopLevelDomainsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TopLevelDomainCollection>, callback?: msRest.ServiceCallback<Models.TopLevelDomainCollection>): Promise<Models.TopLevelDomainsGetGetTopLevelDomainsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getGetTopLevelDomainsNextOperationSpec,
      callback) as Promise<Models.TopLevelDomainsGetGetTopLevelDomainsNextResponse>;
  }

  /**
   * @summary Lists legal agreements that user needs to accept before purchasing domain
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.TopLevelDomainsListTopLevelDomainAgreementsNextResponse>
   */
  listTopLevelDomainAgreementsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TopLevelDomainsListTopLevelDomainAgreementsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listTopLevelDomainAgreementsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TldLegalAgreementCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listTopLevelDomainAgreementsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TldLegalAgreementCollection>): void;
  listTopLevelDomainAgreementsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TldLegalAgreementCollection>, callback?: msRest.ServiceCallback<Models.TldLegalAgreementCollection>): Promise<Models.TopLevelDomainsListTopLevelDomainAgreementsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listTopLevelDomainAgreementsNextOperationSpec,
      callback) as Promise<Models.TopLevelDomainsListTopLevelDomainAgreementsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getGetTopLevelDomainsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TopLevelDomainCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTopLevelDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TopLevelDomain
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listTopLevelDomainAgreementsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements",
  urlParameters: [
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      includePrivacy: [
        "options",
        "includePrivacy"
      ]
    },
    mapper: {
      ...Mappers.TopLevelDomainAgreementOption,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TldLegalAgreementCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getGetTopLevelDomainsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TopLevelDomainCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listTopLevelDomainAgreementsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TldLegalAgreementCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
