/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/serverFarmsMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a ServerFarms. */
export class ServerFarms {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a ServerFarms.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Gets collection of App Service Plans in a resource group for a given subscription.
   * @param resourceGroupName Name of resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmsResponse>
   */
  getServerFarms(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetServerFarmsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param callback The callback
   */
  getServerFarms(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarms(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getServerFarms(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.ServerFarmsGetServerFarmsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      getServerFarmsOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmsResponse>;
  }

  /**
   * @summary Gets specified App Service Plan in a resource group
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmResponse>
   */
  getServerFarm(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetServerFarmResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param callback The callback
   */
  getServerFarm(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ServerFarmWithRichSku>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarm(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmWithRichSku>): void;
  getServerFarm(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmWithRichSku>, callback?: msRest.ServiceCallback<Models.ServerFarmWithRichSku>): Promise<Models.ServerFarmsGetServerFarmResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getServerFarmOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmResponse>;
  }

  /**
   * @summary Creates or updates an App Service Plan
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param serverFarmEnvelope Details of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsCreateOrUpdateServerFarmResponse>
   */
  createOrUpdateServerFarm(resourceGroupName: string, name: string, serverFarmEnvelope: Models.ServerFarmWithRichSku, options?: Models.ServerFarmsCreateOrUpdateServerFarmOptionalParams): Promise<Models.ServerFarmsCreateOrUpdateServerFarmResponse> {
    return this.beginCreateOrUpdateServerFarm(resourceGroupName,name,serverFarmEnvelope,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ServerFarmsCreateOrUpdateServerFarmResponse>;
  }

  /**
   * @summary Deletes a App Service Plan
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsDeleteServerFarmResponse>
   */
  deleteServerFarm(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsDeleteServerFarmResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param callback The callback
   */
  deleteServerFarm(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteServerFarm(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteServerFarm(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ServerFarmsDeleteServerFarmResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      deleteServerFarmOperationSpec,
      callback) as Promise<Models.ServerFarmsDeleteServerFarmResponse>;
  }

  /**
   * @summary Queries for App Service Plan metrics
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmMetricsResponse>
   */
  getServerFarmMetrics(resourceGroupName: string, name: string, options?: Models.ServerFarmsGetServerFarmMetricsOptionalParams): Promise<Models.ServerFarmsGetServerFarmMetricsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param callback The callback
   */
  getServerFarmMetrics(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarmMetrics(resourceGroupName: string, name: string, options: Models.ServerFarmsGetServerFarmMetricsOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getServerFarmMetrics(resourceGroupName: string, name: string, options?: Models.ServerFarmsGetServerFarmMetricsOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.ServerFarmsGetServerFarmMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getServerFarmMetricsOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmMetricsResponse>;
  }

  /**
   * @summary List of metrics that can be queried for an App Service Plan
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmMetricDefintionsResponse>
   */
  getServerFarmMetricDefintions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetServerFarmMetricDefintionsResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param callback The callback
   */
  getServerFarmMetricDefintions(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarmMetricDefintions(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  getServerFarmMetricDefintions(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionCollection>, callback?: msRest.ServiceCallback<Models.MetricDefinitionCollection>): Promise<Models.ServerFarmsGetServerFarmMetricDefintionsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getServerFarmMetricDefintionsOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmMetricDefintionsResponse>;
  }

  /**
   * @summary Gets list of VNets associated with App Service Plan
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetVnetsForServerFarmResponse>
   */
  getVnetsForServerFarm(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetVnetsForServerFarmResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param callback The callback
   */
  getVnetsForServerFarm(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param options The optional parameters
   * @param callback The callback
   */
  getVnetsForServerFarm(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo[]>): void;
  getVnetsForServerFarm(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo[]>, callback?: msRest.ServiceCallback<Models.VnetInfo[]>): Promise<Models.ServerFarmsGetVnetsForServerFarmResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getVnetsForServerFarmOperationSpec,
      callback) as Promise<Models.ServerFarmsGetVnetsForServerFarmResponse>;
  }

  /**
   * @summary Gets a vnet associated with an App Service Plan
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetVnetFromServerFarmResponse>
   */
  getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetVnetFromServerFarmResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param callback The callback
   */
  getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param options The optional parameters
   * @param callback The callback
   */
  getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetInfo>): void;
  getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetInfo>, callback?: msRest.ServiceCallback<Models.VnetInfo>): Promise<Models.ServerFarmsGetVnetFromServerFarmResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        options
      },
      getVnetFromServerFarmOperationSpec,
      callback) as Promise<Models.ServerFarmsGetVnetFromServerFarmResponse>;
  }

  /**
   * @summary Gets a list of all routes associated with a vnet, in an app service plan
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetRoutesForVnetResponse>
   */
  getRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetRoutesForVnetResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param callback The callback
   */
  getRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param options The optional parameters
   * @param callback The callback
   */
  getRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
  getRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetRoute[]>, callback?: msRest.ServiceCallback<Models.VnetRoute[]>): Promise<Models.ServerFarmsGetRoutesForVnetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        options
      },
      getRoutesForVnetOperationSpec,
      callback) as Promise<Models.ServerFarmsGetRoutesForVnetResponse>;
  }

  /**
   * @summary Gets a specific route associated with a vnet, in an app service plan
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetRouteForVnetResponse>
   */
  getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetRouteForVnetResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param callback The callback
   */
  getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param options The optional parameters
   * @param callback The callback
   */
  getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute[]>): void;
  getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetRoute[]>, callback?: msRest.ServiceCallback<Models.VnetRoute[]>): Promise<Models.ServerFarmsGetRouteForVnetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        options
      },
      getRouteForVnetOperationSpec,
      callback) as Promise<Models.ServerFarmsGetRouteForVnetResponse>;
  }

  /**
   * @summary Creates a new route or updates an existing route for a vnet in an app service plan.
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param route The route object
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsCreateOrUpdateVnetRouteResponse>
   */
  createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsCreateOrUpdateVnetRouteResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param route The route object
   * @param callback The callback
   */
  createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param route The route object
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
  createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetRoute>, callback?: msRest.ServiceCallback<Models.VnetRoute>): Promise<Models.ServerFarmsCreateOrUpdateVnetRouteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        route,
        options
      },
      createOrUpdateVnetRouteOperationSpec,
      callback) as Promise<Models.ServerFarmsCreateOrUpdateVnetRouteResponse>;
  }

  /**
   * @summary Deletes an existing route for a vnet in an app service plan.
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsDeleteVnetRouteResponse>
   */
  deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsDeleteVnetRouteResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param callback The callback
   */
  deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ServerFarmsDeleteVnetRouteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        options
      },
      deleteVnetRouteOperationSpec,
      callback) as Promise<Models.ServerFarmsDeleteVnetRouteResponse>;
  }

  /**
   * @summary Creates a new route or updates an existing route for a vnet in an app service plan.
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param route The route object
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsUpdateVnetRouteResponse>
   */
  updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsUpdateVnetRouteResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param route The route object
   * @param callback The callback
   */
  updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param vnetName Name of virtual network
   * @param routeName Name of the virtual network route
   * @param route The route object
   * @param options The optional parameters
   * @param callback The callback
   */
  updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetRoute>): void;
  updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: Models.VnetRoute, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetRoute>, callback?: msRest.ServiceCallback<Models.VnetRoute>): Promise<Models.ServerFarmsUpdateVnetRouteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        routeName,
        route,
        options
      },
      updateVnetRouteOperationSpec,
      callback) as Promise<Models.ServerFarmsUpdateVnetRouteResponse>;
  }

  /**
   * @summary Gets the vnet gateway.
   * @param resourceGroupName Name of resource group
   * @param name Name of the App Service Plan
   * @param vnetName Name of the virtual network
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmVnetGatewayResponse>
   */
  getServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetServerFarmVnetGatewayResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of the App Service Plan
   * @param vnetName Name of the virtual network
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param callback The callback
   */
  getServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of the App Service Plan
   * @param vnetName Name of the virtual network
   * @param gatewayName Name of the gateway. Only the 'primary' gateway is supported.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  getServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.ServerFarmsGetServerFarmVnetGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        options
      },
      getServerFarmVnetGatewayOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmVnetGatewayResponse>;
  }

  /**
   * @summary Updates the vnet gateway
   * @param resourceGroupName The resource group
   * @param name The name of the App Service Plan
   * @param vnetName The name of the virtual network
   * @param gatewayName The name of the gateway. Only 'primary' is supported.
   * @param connectionEnvelope The gateway entity.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsUpdateServerFarmVnetGatewayResponse>
   */
  updateServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsUpdateServerFarmVnetGatewayResponse>;
  /**
   * @param resourceGroupName The resource group
   * @param name The name of the App Service Plan
   * @param vnetName The name of the virtual network
   * @param gatewayName The name of the gateway. Only 'primary' is supported.
   * @param connectionEnvelope The gateway entity.
   * @param callback The callback
   */
  updateServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  /**
   * @param resourceGroupName The resource group
   * @param name The name of the App Service Plan
   * @param vnetName The name of the virtual network
   * @param gatewayName The name of the gateway. Only 'primary' is supported.
   * @param connectionEnvelope The gateway entity.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetGateway>): void;
  updateServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: Models.VnetGateway, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetGateway>, callback?: msRest.ServiceCallback<Models.VnetGateway>): Promise<Models.ServerFarmsUpdateServerFarmVnetGatewayResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        vnetName,
        gatewayName,
        connectionEnvelope,
        options
      },
      updateServerFarmVnetGatewayOperationSpec,
      callback) as Promise<Models.ServerFarmsUpdateServerFarmVnetGatewayResponse>;
  }

  /**
   * @summary Gets list of Apps associated with an App Service Plan
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmSitesResponse>
   */
  getServerFarmSites(resourceGroupName: string, name: string, options?: Models.ServerFarmsGetServerFarmSitesOptionalParams): Promise<Models.ServerFarmsGetServerFarmSitesResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param callback The callback
   */
  getServerFarmSites(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarmSites(resourceGroupName: string, name: string, options: Models.ServerFarmsGetServerFarmSitesOptionalParams, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getServerFarmSites(resourceGroupName: string, name: string, options?: Models.ServerFarmsGetServerFarmSitesOptionalParams | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.ServerFarmsGetServerFarmSitesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      getServerFarmSitesOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmSitesResponse>;
  }

  /**
   * @summary Submit a reboot request for a worker machine in the specified server farm
   * @param resourceGroupName Name of resource group
   * @param name Name of server farm
   * @param workerName Name of worker machine, typically starts with RD
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsRebootWorkerForServerFarmResponse>
   */
  rebootWorkerForServerFarm(resourceGroupName: string, name: string, workerName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsRebootWorkerForServerFarmResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of server farm
   * @param workerName Name of worker machine, typically starts with RD
   * @param callback The callback
   */
  rebootWorkerForServerFarm(resourceGroupName: string, name: string, workerName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of server farm
   * @param workerName Name of worker machine, typically starts with RD
   * @param options The optional parameters
   * @param callback The callback
   */
  rebootWorkerForServerFarm(resourceGroupName: string, name: string, workerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  rebootWorkerForServerFarm(resourceGroupName: string, name: string, workerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ServerFarmsRebootWorkerForServerFarmResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        workerName,
        options
      },
      rebootWorkerForServerFarmOperationSpec,
      callback) as Promise<Models.ServerFarmsRebootWorkerForServerFarmResponse>;
  }

  /**
   * @summary Restarts web apps in a specified App Service Plan
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsRestartSitesForServerFarmResponse>
   */
  restartSitesForServerFarm(resourceGroupName: string, name: string, options?: Models.ServerFarmsRestartSitesForServerFarmOptionalParams): Promise<Models.ServerFarmsRestartSitesForServerFarmResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param callback The callback
   */
  restartSitesForServerFarm(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param options The optional parameters
   * @param callback The callback
   */
  restartSitesForServerFarm(resourceGroupName: string, name: string, options: Models.ServerFarmsRestartSitesForServerFarmOptionalParams, callback: msRest.ServiceCallback<any>): void;
  restartSitesForServerFarm(resourceGroupName: string, name: string, options?: Models.ServerFarmsRestartSitesForServerFarmOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.ServerFarmsRestartSitesForServerFarmResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      restartSitesForServerFarmOperationSpec,
      callback) as Promise<Models.ServerFarmsRestartSitesForServerFarmResponse>;
  }

  /**
   * @summary Gets a server farm operation
   * @param resourceGroupName Name of resource group
   * @param name Name of server farm
   * @param operationId Id of Server farm operation"&gt;
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmOperationResponse>
   */
  getServerFarmOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetServerFarmOperationResponse>;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of server farm
   * @param operationId Id of Server farm operation"&gt;
   * @param callback The callback
   */
  getServerFarmOperation(resourceGroupName: string, name: string, operationId: string, callback: msRest.ServiceCallback<Models.ServerFarmWithRichSku>): void;
  /**
   * @param resourceGroupName Name of resource group
   * @param name Name of server farm
   * @param operationId Id of Server farm operation"&gt;
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarmOperation(resourceGroupName: string, name: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmWithRichSku>): void;
  getServerFarmOperation(resourceGroupName: string, name: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmWithRichSku>, callback?: msRest.ServiceCallback<Models.ServerFarmWithRichSku>): Promise<Models.ServerFarmsGetServerFarmOperationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        operationId,
        options
      },
      getServerFarmOperationOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmOperationResponse>;
  }

  /**
   * @summary Creates or updates an App Service Plan
   * @param resourceGroupName Name of resource group
   * @param name Name of App Service Plan
   * @param serverFarmEnvelope Details of App Service Plan
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateServerFarm(resourceGroupName: string, name: string, serverFarmEnvelope: Models.ServerFarmWithRichSku, options?: Models.ServerFarmsBeginCreateOrUpdateServerFarmOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        name,
        serverFarmEnvelope,
        options
      },
      beginCreateOrUpdateServerFarmOperationSpec,
      options);
  }

  /**
   * @summary Gets collection of App Service Plans in a resource group for a given subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmsNextResponse>
   */
  getServerFarmsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetServerFarmsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getServerFarmsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarmsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getServerFarmsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.ServerFarmsGetServerFarmsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getServerFarmsNextOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmsNextResponse>;
  }

  /**
   * @summary Queries for App Service Plan metrics
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmMetricsNextResponse>
   */
  getServerFarmMetricsNext(nextPageLink: string, options?: Models.ServerFarmsGetServerFarmMetricsNextOptionalParams): Promise<Models.ServerFarmsGetServerFarmMetricsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getServerFarmMetricsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarmMetricsNext(nextPageLink: string, options: Models.ServerFarmsGetServerFarmMetricsNextOptionalParams, callback: msRest.ServiceCallback<Models.ResourceMetricCollection>): void;
  getServerFarmMetricsNext(nextPageLink: string, options?: Models.ServerFarmsGetServerFarmMetricsNextOptionalParams | msRest.ServiceCallback<Models.ResourceMetricCollection>, callback?: msRest.ServiceCallback<Models.ResourceMetricCollection>): Promise<Models.ServerFarmsGetServerFarmMetricsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getServerFarmMetricsNextOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmMetricsNextResponse>;
  }

  /**
   * @summary List of metrics that can be queried for an App Service Plan
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmMetricDefintionsNextResponse>
   */
  getServerFarmMetricDefintionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ServerFarmsGetServerFarmMetricDefintionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getServerFarmMetricDefintionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarmMetricDefintionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MetricDefinitionCollection>): void;
  getServerFarmMetricDefintionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MetricDefinitionCollection>, callback?: msRest.ServiceCallback<Models.MetricDefinitionCollection>): Promise<Models.ServerFarmsGetServerFarmMetricDefintionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getServerFarmMetricDefintionsNextOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmMetricDefintionsNextResponse>;
  }

  /**
   * @summary Gets list of Apps associated with an App Service Plan
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServerFarmsGetServerFarmSitesNextResponse>
   */
  getServerFarmSitesNext(nextPageLink: string, options?: Models.ServerFarmsGetServerFarmSitesNextOptionalParams): Promise<Models.ServerFarmsGetServerFarmSitesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getServerFarmSitesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getServerFarmSitesNext(nextPageLink: string, options: Models.ServerFarmsGetServerFarmSitesNextOptionalParams, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getServerFarmSitesNext(nextPageLink: string, options?: Models.ServerFarmsGetServerFarmSitesNextOptionalParams | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.ServerFarmsGetServerFarmSitesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getServerFarmSitesNextOperationSpec,
      callback) as Promise<Models.ServerFarmsGetServerFarmSitesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getServerFarmsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getServerFarmOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmWithRichSku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteServerFarmOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getServerFarmMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metrics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getServerFarmMetricDefintionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getVnetsForServerFarmOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetInfo"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getVnetFromServerFarmOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VnetInfo
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getRoutesForVnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetRoute"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getRouteForVnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetRoute"
            }
          }
        }
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateVnetRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "route",
    mapper: {
      ...Mappers.VnetRoute,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetRoute
    },
    400: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteVnetRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateVnetRouteOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "route",
    mapper: {
      ...Mappers.VnetRoute,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetRoute
    },
    400: {},
    404: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getServerFarmVnetGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateServerFarmVnetGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.vnetName,
    Parameters.gatewayName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectionEnvelope",
    mapper: {
      ...Mappers.VnetGateway,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetGateway
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getServerFarmSitesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.skipToken,
    Parameters.filter1,
    Parameters.top0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const rebootWorkerForServerFarmOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.workerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const restartSitesForServerFarmOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.softRestart,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getServerFarmOperationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/operationresults/{operationId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.operationId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmWithRichSku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateServerFarmOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.allowPendingState,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "serverFarmEnvelope",
    mapper: {
      ...Mappers.ServerFarmWithRichSku,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmWithRichSku
    },
    202: {
      bodyMapper: Mappers.ServerFarmWithRichSku
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getServerFarmsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getServerFarmMetricsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.details,
    Parameters.filter0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ResourceMetricCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getServerFarmMetricDefintionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getServerFarmSitesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.skipToken,
    Parameters.filter1,
    Parameters.top0,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
