/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/globalMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a Global. */
export class Global {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a Global.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Gets publishing credentials for the subscription owner
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetSubscriptionPublishingCredentialsResponse>
   */
  getSubscriptionPublishingCredentials(options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetSubscriptionPublishingCredentialsResponse>;
  /**
   * @param callback The callback
   */
  getSubscriptionPublishingCredentials(callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSubscriptionPublishingCredentials(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
  getSubscriptionPublishingCredentials(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.GlobalGetSubscriptionPublishingCredentialsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSubscriptionPublishingCredentialsOperationSpec,
      callback) as Promise<Models.GlobalGetSubscriptionPublishingCredentialsResponse>;
  }

  /**
   * @summary Updates publishing credentials for the subscription owner
   * @param requestMessage requestMessage with new publishing credentials
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalUpdateSubscriptionPublishingCredentialsResponse>
   */
  updateSubscriptionPublishingCredentials(requestMessage: Models.User, options?: msRest.RequestOptionsBase): Promise<Models.GlobalUpdateSubscriptionPublishingCredentialsResponse>;
  /**
   * @param requestMessage requestMessage with new publishing credentials
   * @param callback The callback
   */
  updateSubscriptionPublishingCredentials(requestMessage: Models.User, callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param requestMessage requestMessage with new publishing credentials
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSubscriptionPublishingCredentials(requestMessage: Models.User, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
  updateSubscriptionPublishingCredentials(requestMessage: Models.User, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.GlobalUpdateSubscriptionPublishingCredentialsResponse> {
    return this.client.sendOperationRequest(
      {
        requestMessage,
        options
      },
      updateSubscriptionPublishingCredentialsOperationSpec,
      callback) as Promise<Models.GlobalUpdateSubscriptionPublishingCredentialsResponse>;
  }

  /**
   * @summary Gets list of available geo regions
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetSubscriptionGeoRegionsResponse>
   */
  getSubscriptionGeoRegions(options?: Models.GlobalGetSubscriptionGeoRegionsOptionalParams): Promise<Models.GlobalGetSubscriptionGeoRegionsResponse>;
  /**
   * @param callback The callback
   */
  getSubscriptionGeoRegions(callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSubscriptionGeoRegions(options: Models.GlobalGetSubscriptionGeoRegionsOptionalParams, callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
  getSubscriptionGeoRegions(options?: Models.GlobalGetSubscriptionGeoRegionsOptionalParams | msRest.ServiceCallback<Models.GeoRegionCollection>, callback?: msRest.ServiceCallback<Models.GeoRegionCollection>): Promise<Models.GlobalGetSubscriptionGeoRegionsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getSubscriptionGeoRegionsOperationSpec,
      callback) as Promise<Models.GlobalGetSubscriptionGeoRegionsResponse>;
  }

  /**
   * @summary Get all certificates for a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllCertificatesResponse>
   */
  getAllCertificates(options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetAllCertificatesResponse>;
  /**
   * @param callback The callback
   */
  getAllCertificates(callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllCertificates(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
  getAllCertificates(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateCollection>, callback?: msRest.ServiceCallback<Models.CertificateCollection>): Promise<Models.GlobalGetAllCertificatesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllCertificatesOperationSpec,
      callback) as Promise<Models.GlobalGetAllCertificatesResponse>;
  }

  /**
   * @summary Gets all App Service Plans for a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllServerFarmsResponse>
   */
  getAllServerFarms(options?: Models.GlobalGetAllServerFarmsOptionalParams): Promise<Models.GlobalGetAllServerFarmsResponse>;
  /**
   * @param callback The callback
   */
  getAllServerFarms(callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllServerFarms(options: Models.GlobalGetAllServerFarmsOptionalParams, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getAllServerFarms(options?: Models.GlobalGetAllServerFarmsOptionalParams | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.GlobalGetAllServerFarmsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllServerFarmsOperationSpec,
      callback) as Promise<Models.GlobalGetAllServerFarmsResponse>;
  }

  /**
   * @summary Gets all Web Apps for a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllSitesResponse>
   */
  getAllSites(options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetAllSitesResponse>;
  /**
   * @param callback The callback
   */
  getAllSites(callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllSites(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getAllSites(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.GlobalGetAllSitesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllSitesOperationSpec,
      callback) as Promise<Models.GlobalGetAllSitesResponse>;
  }

  /**
   * @summary Gets all hostingEnvironments (App Service Environment) for a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllHostingEnvironmentsResponse>
   */
  getAllHostingEnvironments(options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetAllHostingEnvironmentsResponse>;
  /**
   * @param callback The callback
   */
  getAllHostingEnvironments(callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllHostingEnvironments(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  getAllHostingEnvironments(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostingEnvironmentCollection>, callback?: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): Promise<Models.GlobalGetAllHostingEnvironmentsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllHostingEnvironmentsOperationSpec,
      callback) as Promise<Models.GlobalGetAllHostingEnvironmentsResponse>;
  }

  /**
   * @summary Gets all managed hosting environments for a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllManagedHostingEnvironmentsResponse>
   */
  getAllManagedHostingEnvironments(options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetAllManagedHostingEnvironmentsResponse>;
  /**
   * @param callback The callback
   */
  getAllManagedHostingEnvironments(callback: msRest.ServiceCallback<Models.ManagedHostingEnvironmentCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllManagedHostingEnvironments(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedHostingEnvironmentCollection>): void;
  getAllManagedHostingEnvironments(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedHostingEnvironmentCollection>, callback?: msRest.ServiceCallback<Models.ManagedHostingEnvironmentCollection>): Promise<Models.GlobalGetAllManagedHostingEnvironmentsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllManagedHostingEnvironmentsOperationSpec,
      callback) as Promise<Models.GlobalGetAllManagedHostingEnvironmentsResponse>;
  }

  /**
   * @summary Gets all mobile services for a subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllClassicMobileServicesResponse>
   */
  getAllClassicMobileServices(options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetAllClassicMobileServicesResponse>;
  /**
   * @param callback The callback
   */
  getAllClassicMobileServices(callback: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllClassicMobileServices(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): void;
  getAllClassicMobileServices(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClassicMobileServiceCollection>, callback?: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): Promise<Models.GlobalGetAllClassicMobileServicesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllClassicMobileServicesOperationSpec,
      callback) as Promise<Models.GlobalGetAllClassicMobileServicesResponse>;
  }

  /**
   * @summary List premier add on offers
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalListPremierAddOnOffersResponse>
   */
  listPremierAddOnOffers(options?: msRest.RequestOptionsBase): Promise<Models.GlobalListPremierAddOnOffersResponse>;
  /**
   * @param callback The callback
   */
  listPremierAddOnOffers(callback: msRest.ServiceCallback<any>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listPremierAddOnOffers(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listPremierAddOnOffers(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GlobalListPremierAddOnOffersResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listPremierAddOnOffersOperationSpec,
      callback) as Promise<Models.GlobalListPremierAddOnOffersResponse>;
  }

  /**
   * @summary Whether hosting environment name is available
   * @param name Hosting environment name
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalIsHostingEnvironmentNameAvailableResponse>
   */
  isHostingEnvironmentNameAvailable(name: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalIsHostingEnvironmentNameAvailableResponse>;
  /**
   * @param name Hosting environment name
   * @param callback The callback
   */
  isHostingEnvironmentNameAvailable(name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param name Hosting environment name
   * @param options The optional parameters
   * @param callback The callback
   */
  isHostingEnvironmentNameAvailable(name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  isHostingEnvironmentNameAvailable(name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GlobalIsHostingEnvironmentNameAvailableResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      isHostingEnvironmentNameAvailableOperationSpec,
      callback) as Promise<Models.GlobalIsHostingEnvironmentNameAvailableResponse>;
  }

  /**
   * @summary Whether hosting environment name is available
   * @param name Hosting environment name
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalIsHostingEnvironmentWithLegacyNameAvailableResponse>
   */
  isHostingEnvironmentWithLegacyNameAvailable(name: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalIsHostingEnvironmentWithLegacyNameAvailableResponse>;
  /**
   * @param name Hosting environment name
   * @param callback The callback
   */
  isHostingEnvironmentWithLegacyNameAvailable(name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param name Hosting environment name
   * @param options The optional parameters
   * @param callback The callback
   */
  isHostingEnvironmentWithLegacyNameAvailable(name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  isHostingEnvironmentWithLegacyNameAvailable(name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.GlobalIsHostingEnvironmentWithLegacyNameAvailableResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        options
      },
      isHostingEnvironmentWithLegacyNameAvailableOperationSpec,
      callback) as Promise<Models.GlobalIsHostingEnvironmentWithLegacyNameAvailableResponse>;
  }

  /**
   * @summary Check if resource name is available
   * @param request Name availability request
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalCheckNameAvailabilityResponse>
   */
  checkNameAvailability(request: Models.ResourceNameAvailabilityRequest, options?: msRest.RequestOptionsBase): Promise<Models.GlobalCheckNameAvailabilityResponse>;
  /**
   * @param request Name availability request
   * @param callback The callback
   */
  checkNameAvailability(request: Models.ResourceNameAvailabilityRequest, callback: msRest.ServiceCallback<Models.ResourceNameAvailability>): void;
  /**
   * @param request Name availability request
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(request: Models.ResourceNameAvailabilityRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceNameAvailability>): void;
  checkNameAvailability(request: Models.ResourceNameAvailabilityRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ResourceNameAvailability>, callback?: msRest.ServiceCallback<Models.ResourceNameAvailability>): Promise<Models.GlobalCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        request,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.GlobalCheckNameAvailabilityResponse>;
  }

  /**
   * @summary Gets list of available geo regions
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetSubscriptionGeoRegionsNextResponse>
   */
  getSubscriptionGeoRegionsNext(nextPageLink: string, options?: Models.GlobalGetSubscriptionGeoRegionsNextOptionalParams): Promise<Models.GlobalGetSubscriptionGeoRegionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getSubscriptionGeoRegionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSubscriptionGeoRegionsNext(nextPageLink: string, options: Models.GlobalGetSubscriptionGeoRegionsNextOptionalParams, callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
  getSubscriptionGeoRegionsNext(nextPageLink: string, options?: Models.GlobalGetSubscriptionGeoRegionsNextOptionalParams | msRest.ServiceCallback<Models.GeoRegionCollection>, callback?: msRest.ServiceCallback<Models.GeoRegionCollection>): Promise<Models.GlobalGetSubscriptionGeoRegionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getSubscriptionGeoRegionsNextOperationSpec,
      callback) as Promise<Models.GlobalGetSubscriptionGeoRegionsNextResponse>;
  }

  /**
   * @summary Get all certificates for a subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllCertificatesNextResponse>
   */
  getAllCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetAllCertificatesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getAllCertificatesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllCertificatesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateCollection>): void;
  getAllCertificatesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateCollection>, callback?: msRest.ServiceCallback<Models.CertificateCollection>): Promise<Models.GlobalGetAllCertificatesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getAllCertificatesNextOperationSpec,
      callback) as Promise<Models.GlobalGetAllCertificatesNextResponse>;
  }

  /**
   * @summary Gets all App Service Plans for a subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllServerFarmsNextResponse>
   */
  getAllServerFarmsNext(nextPageLink: string, options?: Models.GlobalGetAllServerFarmsNextOptionalParams): Promise<Models.GlobalGetAllServerFarmsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getAllServerFarmsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllServerFarmsNext(nextPageLink: string, options: Models.GlobalGetAllServerFarmsNextOptionalParams, callback: msRest.ServiceCallback<Models.ServerFarmCollection>): void;
  getAllServerFarmsNext(nextPageLink: string, options?: Models.GlobalGetAllServerFarmsNextOptionalParams | msRest.ServiceCallback<Models.ServerFarmCollection>, callback?: msRest.ServiceCallback<Models.ServerFarmCollection>): Promise<Models.GlobalGetAllServerFarmsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getAllServerFarmsNextOperationSpec,
      callback) as Promise<Models.GlobalGetAllServerFarmsNextResponse>;
  }

  /**
   * @summary Gets all Web Apps for a subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllSitesNextResponse>
   */
  getAllSitesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetAllSitesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getAllSitesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllSitesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SiteCollection>): void;
  getAllSitesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SiteCollection>, callback?: msRest.ServiceCallback<Models.SiteCollection>): Promise<Models.GlobalGetAllSitesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getAllSitesNextOperationSpec,
      callback) as Promise<Models.GlobalGetAllSitesNextResponse>;
  }

  /**
   * @summary Gets all hostingEnvironments (App Service Environment) for a subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllHostingEnvironmentsNextResponse>
   */
  getAllHostingEnvironmentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetAllHostingEnvironmentsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getAllHostingEnvironmentsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllHostingEnvironmentsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): void;
  getAllHostingEnvironmentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HostingEnvironmentCollection>, callback?: msRest.ServiceCallback<Models.HostingEnvironmentCollection>): Promise<Models.GlobalGetAllHostingEnvironmentsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getAllHostingEnvironmentsNextOperationSpec,
      callback) as Promise<Models.GlobalGetAllHostingEnvironmentsNextResponse>;
  }

  /**
   * @summary Gets all managed hosting environments for a subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllManagedHostingEnvironmentsNextResponse>
   */
  getAllManagedHostingEnvironmentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetAllManagedHostingEnvironmentsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getAllManagedHostingEnvironmentsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedHostingEnvironmentCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllManagedHostingEnvironmentsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedHostingEnvironmentCollection>): void;
  getAllManagedHostingEnvironmentsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedHostingEnvironmentCollection>, callback?: msRest.ServiceCallback<Models.ManagedHostingEnvironmentCollection>): Promise<Models.GlobalGetAllManagedHostingEnvironmentsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getAllManagedHostingEnvironmentsNextOperationSpec,
      callback) as Promise<Models.GlobalGetAllManagedHostingEnvironmentsNextResponse>;
  }

  /**
   * @summary Gets all mobile services for a subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GlobalGetAllClassicMobileServicesNextResponse>
   */
  getAllClassicMobileServicesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GlobalGetAllClassicMobileServicesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  getAllClassicMobileServicesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllClassicMobileServicesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): void;
  getAllClassicMobileServicesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClassicMobileServiceCollection>, callback?: msRest.ServiceCallback<Models.ClassicMobileServiceCollection>): Promise<Models.GlobalGetAllClassicMobileServicesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      getAllClassicMobileServicesNextOperationSpec,
      callback) as Promise<Models.GlobalGetAllClassicMobileServicesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getSubscriptionPublishingCredentialsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingCredentials",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSubscriptionPublishingCredentialsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingCredentials",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "requestMessage",
    mapper: {
      ...Mappers.User,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSubscriptionGeoRegionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.sku,
    Parameters.linuxWorkersEnabled,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GeoRegionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllCertificatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllServerFarmsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.detailed,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllSitesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllHostingEnvironmentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostingEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllManagedHostingEnvironmentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/managedHostingEnvironments",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHostingEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllClassicMobileServicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/classicMobileServices",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClassicMobileServiceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listPremierAddOnOffersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const isHostingEnvironmentNameAvailableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/ishostingenvironmentnameavailable",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.name,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const isHostingEnvironmentWithLegacyNameAvailableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/ishostingenvironmentnameavailable/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.ResourceNameAvailabilityRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ResourceNameAvailability
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSubscriptionGeoRegionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.sku,
    Parameters.linuxWorkersEnabled,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GeoRegionCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllCertificatesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllServerFarmsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.detailed,
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServerFarmCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllSitesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SiteCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllHostingEnvironmentsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HostingEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllManagedHostingEnvironmentsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedHostingEnvironmentCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAllClassicMobileServicesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClassicMobileServiceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
