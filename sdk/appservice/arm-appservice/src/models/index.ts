/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Key Vault container for a certificate that is purchased through Azure.
 */
export interface AppServiceCertificate {
  /**
   * Key Vault resource Id.
   */
  keyVaultId?: string;
  /**
   * Key Vault secret name.
   */
  keyVaultSecretName?: string;
  /**
   * Status of the Key Vault secret. Possible values include: 'Initialized',
   * 'WaitingOnCertificateOrder', 'Succeeded', 'CertificateOrderFailed',
   * 'OperationNotPermittedOnKeyVault', 'AzureServiceUnauthorizedToAccessKeyVault',
   * 'KeyVaultDoesNotExist', 'KeyVaultSecretDoesNotExist', 'UnknownError', 'ExternalPrivateKey',
   * 'Unknown'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: KeyVaultSecretStatus;
}

/**
 * Azure resource. This resource is tracked in Azure Resource Manager
 */
export interface Resource extends BaseResource {
  /**
   * Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Kind of resource.
   */
  kind?: string;
  /**
   * Resource Location.
   */
  location: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Key Vault container ARM resource for a certificate that is purchased through Azure.
 */
export interface AppServiceCertificateResource extends Resource {
  /**
   * Key Vault resource Id.
   */
  keyVaultId?: string;
  /**
   * Key Vault secret name.
   */
  keyVaultSecretName?: string;
  /**
   * Status of the Key Vault secret. Possible values include: 'Initialized',
   * 'WaitingOnCertificateOrder', 'Succeeded', 'CertificateOrderFailed',
   * 'OperationNotPermittedOnKeyVault', 'AzureServiceUnauthorizedToAccessKeyVault',
   * 'KeyVaultDoesNotExist', 'KeyVaultSecretDoesNotExist', 'UnknownError', 'ExternalPrivateKey',
   * 'Unknown'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: KeyVaultSecretStatus;
}

/**
 * SSL certificate details.
 */
export interface CertificateDetails {
  /**
   * Certificate Version.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly version?: number;
  /**
   * Certificate Serial Number.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serialNumber?: string;
  /**
   * Certificate Thumbprint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly thumbprint?: string;
  /**
   * Certificate Subject.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subject?: string;
  /**
   * Date Certificate is valid from.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly notBefore?: Date;
  /**
   * Date Certificate is valid to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly notAfter?: Date;
  /**
   * Certificate Signature algorithm.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly signatureAlgorithm?: string;
  /**
   * Certificate Issuer.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly issuer?: string;
  /**
   * Raw certificate data.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly rawData?: string;
}

/**
 * SSL certificate purchase order.
 */
export interface AppServiceCertificateOrder extends Resource {
  /**
   * State of the Key Vault secret.
   */
  certificates?: { [propertyName: string]: AppServiceCertificate };
  /**
   * Certificate distinguished name.
   */
  distinguishedName?: string;
  /**
   * Domain verification token.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly domainVerificationToken?: string;
  /**
   * Duration in years (must be between 1 and 3). Default value: 1.
   */
  validityInYears?: number;
  /**
   * Certificate key size. Default value: 2048.
   */
  keySize?: number;
  /**
   * Certificate product type. Possible values include: 'StandardDomainValidatedSsl',
   * 'StandardDomainValidatedWildCardSsl'
   */
  productType: CertificateProductType;
  /**
   * <code>true</code> if the certificate should be automatically renewed when it expires;
   * otherwise, <code>false</code>. Default value: true.
   */
  autoRenew?: boolean;
  /**
   * Status of certificate order. Possible values include: 'Succeeded', 'Failed', 'Canceled',
   * 'InProgress', 'Deleting'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Current order status. Possible values include: 'Pendingissuance', 'Issued', 'Revoked',
   * 'Canceled', 'Denied', 'Pendingrevocation', 'PendingRekey', 'Unused', 'Expired', 'NotSubmitted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CertificateOrderStatus;
  /**
   * Signed certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly signedCertificate?: CertificateDetails;
  /**
   * Last CSR that was created for this order.
   */
  csr?: string;
  /**
   * Intermediate certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly intermediate?: CertificateDetails;
  /**
   * Root certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly root?: CertificateDetails;
  /**
   * Current serial number of the certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serialNumber?: string;
  /**
   * Certificate last issuance time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastCertificateIssuanceTime?: Date;
  /**
   * Certificate expiration time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly expirationTime?: Date;
  /**
   * <code>true</code> if private key is external; otherwise, <code>false</code>.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isPrivateKeyExternal?: boolean;
  /**
   * Reasons why App Service Certificate is not renewable at the current moment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly appServiceCertificateNotRenewableReasons?: string[];
  /**
   * Time stamp when the certificate would be auto renewed next
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextAutoRenewalTimeStamp?: Date;
}

/**
 * Azure proxy only resource. This resource is not tracked by Azure Resource Manager.
 */
export interface ProxyOnlyResource extends BaseResource {
  /**
   * Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Kind of resource.
   */
  kind?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * ARM resource for a certificate order that is purchased through Azure.
 */
export interface AppServiceCertificateOrderPatchResource extends ProxyOnlyResource {
  /**
   * State of the Key Vault secret.
   */
  certificates?: { [propertyName: string]: AppServiceCertificate };
  /**
   * Certificate distinguished name.
   */
  distinguishedName?: string;
  /**
   * Domain verification token.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly domainVerificationToken?: string;
  /**
   * Duration in years (must be between 1 and 3). Default value: 1.
   */
  validityInYears?: number;
  /**
   * Certificate key size. Default value: 2048.
   */
  keySize?: number;
  /**
   * Certificate product type. Possible values include: 'StandardDomainValidatedSsl',
   * 'StandardDomainValidatedWildCardSsl'
   */
  productType: CertificateProductType;
  /**
   * <code>true</code> if the certificate should be automatically renewed when it expires;
   * otherwise, <code>false</code>. Default value: true.
   */
  autoRenew?: boolean;
  /**
   * Status of certificate order. Possible values include: 'Succeeded', 'Failed', 'Canceled',
   * 'InProgress', 'Deleting'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Current order status. Possible values include: 'Pendingissuance', 'Issued', 'Revoked',
   * 'Canceled', 'Denied', 'Pendingrevocation', 'PendingRekey', 'Unused', 'Expired', 'NotSubmitted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: CertificateOrderStatus;
  /**
   * Signed certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly signedCertificate?: CertificateDetails;
  /**
   * Last CSR that was created for this order.
   */
  csr?: string;
  /**
   * Intermediate certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly intermediate?: CertificateDetails;
  /**
   * Root certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly root?: CertificateDetails;
  /**
   * Current serial number of the certificate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serialNumber?: string;
  /**
   * Certificate last issuance time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastCertificateIssuanceTime?: Date;
  /**
   * Certificate expiration time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly expirationTime?: Date;
  /**
   * <code>true</code> if private key is external; otherwise, <code>false</code>.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isPrivateKeyExternal?: boolean;
  /**
   * Reasons why App Service Certificate is not renewable at the current moment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly appServiceCertificateNotRenewableReasons?: string[];
  /**
   * Time stamp when the certificate would be auto renewed next
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextAutoRenewalTimeStamp?: Date;
}

/**
 * Key Vault container ARM resource for a certificate that is purchased through Azure.
 */
export interface AppServiceCertificatePatchResource extends ProxyOnlyResource {
  /**
   * Key Vault resource Id.
   */
  keyVaultId?: string;
  /**
   * Key Vault secret name.
   */
  keyVaultSecretName?: string;
  /**
   * Status of the Key Vault secret. Possible values include: 'Initialized',
   * 'WaitingOnCertificateOrder', 'Succeeded', 'CertificateOrderFailed',
   * 'OperationNotPermittedOnKeyVault', 'AzureServiceUnauthorizedToAccessKeyVault',
   * 'KeyVaultDoesNotExist', 'KeyVaultSecretDoesNotExist', 'UnknownError', 'ExternalPrivateKey',
   * 'Unknown'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: KeyVaultSecretStatus;
}

/**
 * SSL certificate email.
 */
export interface CertificateEmail extends ProxyOnlyResource {
  /**
   * Email id.
   */
  emailId?: string;
  /**
   * Time stamp.
   */
  timeStamp?: Date;
}

/**
 * Certificate order action.
 */
export interface CertificateOrderAction extends ProxyOnlyResource {
  /**
   * Action type. Possible values include: 'CertificateIssued', 'CertificateOrderCanceled',
   * 'CertificateOrderCreated', 'CertificateRevoked', 'DomainValidationComplete', 'FraudDetected',
   * 'OrgNameChange', 'OrgValidationComplete', 'SanDrop', 'FraudCleared', 'CertificateExpired',
   * 'CertificateExpirationWarning', 'FraudDocumentationRequired', 'Unknown'
   */
  certificateOrderActionType?: CertificateOrderActionType;
  /**
   * Time at which the certificate action was performed.
   */
  createdAt?: Date;
}

/**
 * Class representing certificate reissue request.
 */
export interface ReissueCertificateOrderRequest extends ProxyOnlyResource {
  /**
   * Certificate Key Size.
   */
  keySize?: number;
  /**
   * Delay in hours to revoke existing certificate after the new certificate is issued.
   */
  delayExistingRevokeInHours?: number;
  /**
   * Csr to be used for re-key operation.
   */
  csr?: string;
  /**
   * Should we change the ASC type (from managed private key to external private key and vice
   * versa).
   */
  isPrivateKeyExternal?: boolean;
}

/**
 * Class representing certificate renew request.
 */
export interface RenewCertificateOrderRequest extends ProxyOnlyResource {
  /**
   * Certificate Key Size.
   */
  keySize?: number;
  /**
   * Csr to be used for re-key operation.
   */
  csr?: string;
  /**
   * Should we change the ASC type (from managed private key to external private key and vice
   * versa).
   */
  isPrivateKeyExternal?: boolean;
}

/**
 * Site seal
 */
export interface SiteSeal {
  /**
   * HTML snippet
   */
  html: string;
}

/**
 * Site seal request.
 */
export interface SiteSealRequest {
  /**
   * If <code>true</code> use the light color theme for site seal; otherwise, use the default color
   * theme.
   */
  lightTheme?: boolean;
  /**
   * Locale of site seal.
   */
  locale?: string;
}

/**
 * Virtual Network route contract used to pass routing information for a Virtual Network.
 */
export interface VnetRoute extends ProxyOnlyResource {
  /**
   * The name of this route. This is only returned by the server and does not need to be set by the
   * client.
   */
  vnetRouteName?: string;
  /**
   * The starting address for this route. This may also include a CIDR notation, in which case the
   * end address must not be specified.
   */
  startAddress?: string;
  /**
   * The ending address for this route. If the start address is specified in CIDR notation, this
   * must be omitted.
   */
  endAddress?: string;
  /**
   * The type of route this is:
   * DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918
   * INHERITED - Routes inherited from the real Virtual Network routes
   * STATIC - Static route set on the app only
   *
   * These values will be used for syncing an app's routes with those from a Virtual Network.
   * Possible values include: 'DEFAULT', 'INHERITED', 'STATIC'
   */
  routeType?: RouteType;
}

/**
 * Virtual Network information contract.
 */
export interface VnetInfo extends ProxyOnlyResource {
  /**
   * The Virtual Network's resource ID.
   */
  vnetResourceId?: string;
  /**
   * The client certificate thumbprint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly certThumbprint?: string;
  /**
   * A certificate file (.cer) blob containing the public key of the private key used to
   * authenticate a
   * Point-To-Site VPN connection.
   */
  certBlob?: Uint8Array;
  /**
   * The routes that this Virtual Network connection uses.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly routes?: VnetRoute[];
  /**
   * <code>true</code> if a resync is required; otherwise, <code>false</code>.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resyncRequired?: boolean;
  /**
   * DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP
   * addresses.
   */
  dnsServers?: string;
}

/**
 * The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to
 * the VPN package.
 */
export interface VnetGateway extends ProxyOnlyResource {
  /**
   * The Virtual Network name.
   */
  vnetName?: string;
  /**
   * The URI where the VPN package can be downloaded.
   */
  vpnPackageUri: string;
}

/**
 * User credentials used for publishing activity.
 */
export interface User extends ProxyOnlyResource {
  /**
   * Username
   */
  userName?: string;
  /**
   * Username used for publishing.
   */
  publishingUserName: string;
  /**
   * Password used for publishing.
   */
  publishingPassword?: string;
  /**
   * Password hash used for publishing.
   */
  publishingPasswordHash?: string;
  /**
   * Password hash salt used for publishing.
   */
  publishingPasswordHashSalt?: string;
}

/**
 * Specifies the web app that snapshot contents will be written to.
 */
export interface SnapshotRecoveryTarget {
  /**
   * Geographical location of the target web app, e.g. SouthEastAsia, SouthCentralUS
   */
  location?: string;
  /**
   * ARM resource ID of the target app.
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
   * for production slots and
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
   * for other slots.
   */
  id?: string;
}

/**
 * Details about app recovery operation.
 */
export interface SnapshotRecoveryRequest extends ProxyOnlyResource {
  /**
   * Point in time in which the app recovery should be attempted, formatted as a DateTime string.
   */
  snapshotTime?: string;
  /**
   * Specifies the web app that snapshot contents will be written to.
   */
  recoveryTarget?: SnapshotRecoveryTarget;
  /**
   * If <code>true</code> the recovery operation can overwrite source app; otherwise,
   * <code>false</code>.
   */
  overwrite: boolean;
  /**
   * If true, site configuration, in addition to content, will be reverted.
   */
  recoverConfiguration?: boolean;
  /**
   * If true, custom hostname conflicts will be ignored when recovering to a target web app.
   * This setting is only necessary when RecoverConfiguration is enabled.
   */
  ignoreConflictingHostNames?: boolean;
}

/**
 * Metrics availability and retention.
 */
export interface ResourceMetricAvailability {
  /**
   * Time grain .
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timeGrain?: string;
  /**
   * Retention period for the current time grain.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly retention?: string;
}

/**
 * Name of a metric for any resource .
 */
export interface ResourceMetricName {
  /**
   * metric name value.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
  /**
   * Localized metric name value.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localizedValue?: string;
}

/**
 * Metadata for the metrics.
 */
export interface ResourceMetricDefinition extends ProxyOnlyResource {
  /**
   * Name of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceMetricDefinitionName?: ResourceMetricName;
  /**
   * Unit of the metric.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: string;
  /**
   * Primary aggregation type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryAggregationType?: string;
  /**
   * List of time grains supported for the metric together with retention period.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metricAvailabilities?: ResourceMetricAvailability[];
  /**
   * Resource URI.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceUri?: string;
  /**
   * Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceMetricDefinitionId?: string;
  /**
   * Resource metric definition properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly properties?: { [propertyName: string]: string };
}

/**
 * Push settings for the App.
 */
export interface PushSettings extends ProxyOnlyResource {
  /**
   * Gets or sets a flag indicating whether the Push endpoint is enabled.
   */
  isPushEnabled: boolean;
  /**
   * Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push
   * registration endpoint.
   */
  tagWhitelistJson?: string;
  /**
   * Gets or sets a JSON string containing a list of tags that require user authentication to be
   * used in the push registration endpoint.
   * Tags can consist of alphanumeric characters and the following:
   * '_', '@', '#', '.', ':', '-'.
   * Validation should be performed at the PushRequestHandler.
   */
  tagsRequiringAuth?: string;
  /**
   * Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user
   * claims in the push registration endpoint.
   */
  dynamicTagsJson?: string;
}

/**
 * A domain specific resource identifier.
 */
export interface Identifier extends ProxyOnlyResource {
  /**
   * String representation of the identity.
   */
  identifierId?: string;
}

/**
 * Hybrid Connection key contract. This has the send key name and value for a Hybrid Connection.
 */
export interface HybridConnectionKey extends ProxyOnlyResource {
  /**
   * The name of the send key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sendKeyName?: string;
  /**
   * The value of the send key.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sendKeyValue?: string;
}

/**
 * Hybrid Connection contract. This is used to configure a Hybrid Connection.
 */
export interface HybridConnection extends ProxyOnlyResource {
  /**
   * The name of the Service Bus namespace.
   */
  serviceBusNamespace?: string;
  /**
   * The name of the Service Bus relay.
   */
  relayName?: string;
  /**
   * The ARM URI to the Service Bus relay.
   */
  relayArmUri?: string;
  /**
   * The hostname of the endpoint.
   */
  hostname?: string;
  /**
   * The port of the endpoint.
   */
  port?: number;
  /**
   * The name of the Service Bus key which has Send permissions. This is used to authenticate to
   * Service Bus.
   */
  sendKeyName?: string;
  /**
   * The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key
   * will not be returned
   * normally, use the POST /listKeys API instead.
   */
  sendKeyValue?: string;
  /**
   * The suffix for the service bus endpoint. By default this is .servicebus.windows.net
   */
  serviceBusSuffix?: string;
}

/**
 * Managed service identity.
 */
export interface ManagedServiceIdentity {
  /**
   * Type of managed service identity. Possible values include: 'SystemAssigned'
   */
  type?: ManagedServiceIdentityType;
  /**
   * Tenant of managed service identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * Principal Id of managed service identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
}

/**
 * The status of the last successful slot swap operation.
 */
export interface SlotSwapStatus {
  /**
   * The time the last successful slot swap completed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestampUtc?: Date;
  /**
   * The source slot of the last swap operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceSlotName?: string;
  /**
   * The destination slot of the last swap operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly destinationSlotName?: string;
}

/**
 * Information needed for cloning operation.
 */
export interface CloningInfo {
  /**
   * Correlation ID of cloning operation. This ID ties multiple cloning operations
   * together to use the same snapshot.
   */
  correlationId?: string;
  /**
   * <code>true</code> to overwrite destination app; otherwise, <code>false</code>.
   */
  overwrite?: boolean;
  /**
   * <code>true</code> to clone custom hostnames from source app; otherwise, <code>false</code>.
   */
  cloneCustomHostNames?: boolean;
  /**
   * <code>true</code> to clone source control from source app; otherwise, <code>false</code>.
   */
  cloneSourceControl?: boolean;
  /**
   * ARM resource ID of the source app. App resource ID is of the form
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
   * for production slots and
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
   * for other slots.
   */
  sourceWebAppId: string;
  /**
   * App Service Environment.
   */
  hostingEnvironment?: string;
  /**
   * Application setting overrides for cloned app. If specified, these settings override the
   * settings cloned
   * from source app. Otherwise, application settings from source app are retained.
   */
  appSettingsOverrides?: { [propertyName: string]: string };
  /**
   * <code>true</code> to configure load balancing for source and destination app.
   */
  configureLoadBalancing?: boolean;
  /**
   * ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource
   * ID is of the form
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
   */
  trafficManagerProfileId?: string;
  /**
   * Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does
   * not already exist.
   */
  trafficManagerProfileName?: string;
  /**
   * <code>true</code> if quotas should be ignored; otherwise, <code>false</code>.
   */
  ignoreQuotas?: boolean;
}

/**
 * Specification for an App Service Environment to use for this resource.
 */
export interface HostingEnvironmentProfile {
  /**
   * Resource ID of the App Service Environment.
   */
  id?: string;
  /**
   * Name of the App Service Environment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type of the App Service Environment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * IP security restriction on an app.
 */
export interface IpSecurityRestriction {
  /**
   * IP address the security restriction is valid for.
   */
  ipAddress: string;
  /**
   * Subnet mask for the range of IP addresses the restriction is valid for.
   */
  subnetMask?: string;
}

/**
 * Information about the formal API definition for the app.
 */
export interface ApiDefinitionInfo {
  /**
   * The URL of the API definition.
   */
  url?: string;
}

/**
 * Cross-Origin Resource Sharing (CORS) settings for the app.
 */
export interface CorsSettings {
  /**
   * Gets or sets the list of origins that should be allowed to make cross-origin
   * calls (for example: http://example.com:12345). Use "*" to allow all.
   */
  allowedOrigins?: string[];
}

/**
 * Custom action to be executed
 * when an auto heal rule is triggered.
 */
export interface AutoHealCustomAction {
  /**
   * Executable to be run.
   */
  exe?: string;
  /**
   * Parameters for the executable.
   */
  parameters?: string;
}

/**
 * Actions which to take by the auto-heal module when a rule is triggered.
 */
export interface AutoHealActions {
  /**
   * Predefined action to be taken. Possible values include: 'Recycle', 'LogEvent', 'CustomAction'
   */
  actionType?: AutoHealActionType;
  /**
   * Custom action to be taken.
   */
  customAction?: AutoHealCustomAction;
  /**
   * Minimum time the process must execute
   * before taking the action
   */
  minProcessExecutionTime?: string;
}

/**
 * Trigger based on request execution time.
 */
export interface SlowRequestsBasedTrigger {
  /**
   * Time taken.
   */
  timeTaken?: string;
  /**
   * Request Count.
   */
  count?: number;
  /**
   * Time interval.
   */
  timeInterval?: string;
}

/**
 * Trigger based on status code.
 */
export interface StatusCodesBasedTrigger {
  /**
   * HTTP status code.
   */
  status?: number;
  /**
   * Request Sub Status.
   */
  subStatus?: number;
  /**
   * Win32 error code.
   */
  win32Status?: number;
  /**
   * Request Count.
   */
  count?: number;
  /**
   * Time interval.
   */
  timeInterval?: string;
}

/**
 * Trigger based on total requests.
 */
export interface RequestsBasedTrigger {
  /**
   * Request Count.
   */
  count?: number;
  /**
   * Time interval.
   */
  timeInterval?: string;
}

/**
 * Triggers for auto-heal.
 */
export interface AutoHealTriggers {
  /**
   * A rule based on total requests.
   */
  requests?: RequestsBasedTrigger;
  /**
   * A rule based on private bytes.
   */
  privateBytesInKB?: number;
  /**
   * A rule based on status codes.
   */
  statusCodes?: StatusCodesBasedTrigger[];
  /**
   * A rule based on request execution time.
   */
  slowRequests?: SlowRequestsBasedTrigger;
}

/**
 * Rules that can be defined for auto-heal.
 */
export interface AutoHealRules {
  /**
   * Conditions that describe when to execute the auto-heal actions.
   */
  triggers?: AutoHealTriggers;
  /**
   * Actions to be executed when a rule is triggered.
   */
  actions?: AutoHealActions;
}

/**
 * Metric limits set on an app.
 */
export interface SiteLimits {
  /**
   * Maximum allowed CPU usage percentage.
   */
  maxPercentageCpu?: number;
  /**
   * Maximum allowed memory usage in MB.
   */
  maxMemoryInMb?: number;
  /**
   * Maximum allowed disk size usage in MB.
   */
  maxDiskSizeInMb?: number;
}

/**
 * Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to
 * gradually change routing % based on performance.
 */
export interface RampUpRule {
  /**
   * Hostname of a slot to which the traffic will be redirected if decided to. E.g.
   * myapp-stage.azurewebsites.net.
   */
  actionHostName?: string;
  /**
   * Percentage of the traffic which will be redirected to <code>ActionHostName</code>.
   */
  reroutePercentage?: number;
  /**
   * In auto ramp up scenario this is the step to add/remove from <code>ReroutePercentage</code>
   * until it reaches
   * <code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are
   * checked every N minutes specified in <code>ChangeIntervalInMinutes</code>.
   * Custom decision algorithm can be provided in TiPCallback site extension which URL can be
   * specified in <code>ChangeDecisionCallbackUrl</code>.
   */
  changeStep?: number;
  /**
   * Specifies interval in minutes to reevaluate ReroutePercentage.
   */
  changeIntervalInMinutes?: number;
  /**
   * Specifies lower boundary above which ReroutePercentage will stay.
   */
  minReroutePercentage?: number;
  /**
   * Specifies upper boundary below which ReroutePercentage will stay.
   */
  maxReroutePercentage?: number;
  /**
   * Custom decision algorithm can be provided in TiPCallback site extension which URL can be
   * specified. See TiPCallback site extension for the scaffold and contracts.
   * https://www.siteextensions.net/packages/TiPCallback/
   */
  changeDecisionCallbackUrl?: string;
  /**
   * Name of the routing rule. The recommended name would be to point to the slot which will
   * receive the traffic in the experiment.
   */
  name?: string;
}

/**
 * Routing rules in production experiments.
 */
export interface Experiments {
  /**
   * List of ramp-up rules.
   */
  rampUpRules?: RampUpRule[];
}

/**
 * Directory for virtual application.
 */
export interface VirtualDirectory {
  /**
   * Path to virtual application.
   */
  virtualPath?: string;
  /**
   * Physical path.
   */
  physicalPath?: string;
}

/**
 * Virtual application in an app.
 */
export interface VirtualApplication {
  /**
   * Virtual path.
   */
  virtualPath?: string;
  /**
   * Physical path.
   */
  physicalPath?: string;
  /**
   * <code>true</code> if preloading is enabled; otherwise, <code>false</code>.
   */
  preloadEnabled?: boolean;
  /**
   * Virtual directories for virtual application.
   */
  virtualDirectories?: VirtualDirectory[];
}

/**
 * The IIS handler mappings used to define which handler processes HTTP requests with certain
 * extension.
 * For example, it is used to configure php-cgi.exe process to handle all HTTP requests with *.php
 * extension.
 */
export interface HandlerMapping {
  /**
   * Requests with this extension will be handled using the specified FastCGI application.
   */
  extension?: string;
  /**
   * The absolute path to the FastCGI application.
   */
  scriptProcessor?: string;
  /**
   * Command-line arguments to be passed to the script processor.
   */
  argumentsProperty?: string;
}

/**
 * MachineKey of an app.
 */
export interface SiteMachineKey {
  /**
   * MachineKey validation.
   */
  validation?: string;
  /**
   * Validation key.
   */
  validationKey?: string;
  /**
   * Algorithm used for decryption.
   */
  decryption?: string;
  /**
   * Decryption key.
   */
  decryptionKey?: string;
}

/**
 * Database connection string information.
 */
export interface ConnStringInfo {
  /**
   * Name of connection string.
   */
  name?: string;
  /**
   * Connection string value.
   */
  connectionString?: string;
  /**
   * Type of database. Possible values include: 'MySql', 'SQLServer', 'SQLAzure', 'Custom',
   * 'NotificationHub', 'ServiceBus', 'EventHub', 'ApiHub', 'DocDb', 'RedisCache', 'PostgreSQL'
   */
  type?: ConnectionStringType;
}

/**
 * Name value pair.
 */
export interface NameValuePair {
  /**
   * Pair name.
   */
  name?: string;
  /**
   * Pair value.
   */
  value?: string;
}

/**
 * Configuration of an App Service app.
 */
export interface SiteConfig {
  /**
   * Number of workers.
   */
  numberOfWorkers?: number;
  /**
   * Default documents.
   */
  defaultDocuments?: string[];
  /**
   * .NET Framework version. Default value: 'v4.6'.
   */
  netFrameworkVersion?: string;
  /**
   * Version of PHP.
   */
  phpVersion?: string;
  /**
   * Version of Python.
   */
  pythonVersion?: string;
  /**
   * Version of Node.js.
   */
  nodeVersion?: string;
  /**
   * Linux App Framework and version
   */
  linuxFxVersion?: string;
  /**
   * <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
   */
  requestTracingEnabled?: boolean;
  /**
   * Request tracing expiration time.
   */
  requestTracingExpirationTime?: Date;
  /**
   * <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
   */
  remoteDebuggingEnabled?: boolean;
  /**
   * Remote debugging version.
   */
  remoteDebuggingVersion?: string;
  /**
   * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
   */
  httpLoggingEnabled?: boolean;
  /**
   * HTTP logs directory size limit.
   */
  logsDirectorySizeLimit?: number;
  /**
   * <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
   */
  detailedErrorLoggingEnabled?: boolean;
  /**
   * Publishing user name.
   */
  publishingUsername?: string;
  /**
   * Application settings.
   */
  appSettings?: NameValuePair[];
  /**
   * Connection strings.
   */
  connectionStrings?: ConnStringInfo[];
  /**
   * Site MachineKey.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly machineKey?: SiteMachineKey;
  /**
   * Handler mappings.
   */
  handlerMappings?: HandlerMapping[];
  /**
   * Document root.
   */
  documentRoot?: string;
  /**
   * SCM type. Possible values include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub',
   * 'CodePlexGit', 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
   * 'OneDrive', 'VSO'
   */
  scmType?: ScmType;
  /**
   * <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
   */
  use32BitWorkerProcess?: boolean;
  /**
   * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
   */
  webSocketsEnabled?: boolean;
  /**
   * <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
   */
  alwaysOn?: boolean;
  /**
   * Java version.
   */
  javaVersion?: string;
  /**
   * Java container.
   */
  javaContainer?: string;
  /**
   * Java container version.
   */
  javaContainerVersion?: string;
  /**
   * App command line to launch.
   */
  appCommandLine?: string;
  /**
   * Managed pipeline mode. Possible values include: 'Integrated', 'Classic'
   */
  managedPipelineMode?: ManagedPipelineMode;
  /**
   * Virtual applications.
   */
  virtualApplications?: VirtualApplication[];
  /**
   * Site load balancing. Possible values include: 'WeightedRoundRobin', 'LeastRequests',
   * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
   */
  loadBalancing?: SiteLoadBalancing;
  /**
   * This is work around for polymorphic types.
   */
  experiments?: Experiments;
  /**
   * Site limits.
   */
  limits?: SiteLimits;
  /**
   * <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
   */
  autoHealEnabled?: boolean;
  /**
   * Auto Heal rules.
   */
  autoHealRules?: AutoHealRules;
  /**
   * Tracing options.
   */
  tracingOptions?: string;
  /**
   * Virtual Network name.
   */
  vnetName?: string;
  /**
   * Cross-Origin Resource Sharing (CORS) settings.
   */
  cors?: CorsSettings;
  /**
   * Push endpoint settings.
   */
  push?: PushSettings;
  /**
   * Information about the formal API definition for the app.
   */
  apiDefinition?: ApiDefinitionInfo;
  /**
   * Auto-swap slot name.
   */
  autoSwapSlotName?: string;
  /**
   * <code>true</code> to enable local MySQL; otherwise, <code>false</code>. Default value: false.
   */
  localMySqlEnabled?: boolean;
  /**
   * IP security restrictions.
   */
  ipSecurityRestrictions?: IpSecurityRestriction[];
  /**
   * Http20Enabled: configures a web site to allow clients to connect over http2.0. Default value:
   * true.
   */
  http20Enabled?: boolean;
  /**
   * MinTlsVersion: configures the minimum version of TLS required for SSL requests. Possible
   * values include: '1.0', '1.1', '1.2'
   */
  minTlsVersion?: SupportedTlsVersions;
}

/**
 * SSL-enabled hostname.
 */
export interface HostNameSslState {
  /**
   * Hostname.
   */
  name?: string;
  /**
   * SSL type. Possible values include: 'Disabled', 'SniEnabled', 'IpBasedEnabled'
   */
  sslState?: SslState;
  /**
   * Virtual IP address assigned to the hostname if IP based SSL is enabled.
   */
  virtualIP?: string;
  /**
   * SSL certificate thumbprint.
   */
  thumbprint?: string;
  /**
   * Set to <code>true</code> to update existing hostname.
   */
  toUpdate?: boolean;
  /**
   * Indicates whether the hostname is a standard or repository hostname. Possible values include:
   * 'Standard', 'Repository'
   */
  hostType?: HostType;
}

/**
 * A web app, a mobile app backend, or an API app.
 */
export interface Site extends Resource {
  /**
   * Current state of the app.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: string;
  /**
   * Hostnames associated with the app.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostNames?: string[];
  /**
   * Name of the repository site.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly repositorySiteName?: string;
  /**
   * State indicating whether the app has exceeded its quota usage. Read-only. Possible values
   * include: 'Normal', 'Exceeded'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageState?: UsageState;
  /**
   * <code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to
   * false disables the app (takes the app offline).
   */
  enabled?: boolean;
  /**
   * Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled.
   * Otherwise,
   * the app is not served on those hostnames.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly enabledHostNames?: string[];
  /**
   * Management information availability state for the app. Possible values include: 'Normal',
   * 'Limited', 'DisasterRecoveryMode'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly availabilityState?: SiteAvailabilityState;
  /**
   * Hostname SSL states are used to manage the SSL bindings for app's hostnames.
   */
  hostNameSslStates?: HostNameSslState[];
  /**
   * Resource ID of the associated App Service plan, formatted as:
   * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
   */
  serverFarmId?: string;
  /**
   * <code>true</code> if reserved; otherwise, <code>false</code>. Default value: false.
   */
  reserved?: boolean;
  /**
   * Last time the app was modified, in UTC. Read-only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModifiedTimeUtc?: Date;
  /**
   * Configuration of the app.
   */
  siteConfig?: SiteConfig;
  /**
   * Azure Traffic Manager hostnames associated with the app. Read-only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trafficManagerHostNames?: string[];
  /**
   * <code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise,
   * <code>false</code>. The default is <code>false</code>. Default value: false.
   */
  scmSiteAlsoStopped?: boolean;
  /**
   * Specifies which deployment slot this app will swap into. Read-only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetSwapSlot?: string;
  /**
   * App Service Environment to use for the app.
   */
  hostingEnvironmentProfile?: HostingEnvironmentProfile;
  /**
   * <code>true</code> to enable client affinity; <code>false</code> to stop sending session
   * affinity cookies, which route client requests in the same session to the same instance.
   * Default is <code>true</code>.
   */
  clientAffinityEnabled?: boolean;
  /**
   * <code>true</code> to enable client certificate authentication (TLS mutual authentication);
   * otherwise, <code>false</code>. Default is <code>false</code>.
   */
  clientCertEnabled?: boolean;
  /**
   * <code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.
   * If <code>true</code>, the app is only accessible via API management process.
   */
  hostNamesDisabled?: boolean;
  /**
   * List of IP addresses that the app uses for outbound connections (e.g. database access).
   * Includes VIPs from tenants that site can be hosted with current settings. Read-only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outboundIpAddresses?: string;
  /**
   * List of IP addresses that the app uses for outbound connections (e.g. database access).
   * Includes VIPs from all tenants. Read-only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly possibleOutboundIpAddresses?: string;
  /**
   * Size of the function container.
   */
  containerSize?: number;
  /**
   * Maximum allowed daily memory-time quota (applicable on dynamic apps only).
   */
  dailyMemoryTimeQuota?: number;
  /**
   * App suspended till in case memory-time quota is exceeded.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly suspendedTill?: Date;
  /**
   * Maximum number of workers.
   * This only applies to Functions container.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxNumberOfWorkers?: number;
  /**
   * If specified during app creation, the app is cloned from a source app.
   */
  cloningInfo?: CloningInfo;
  /**
   * If specified during app creation, the app is created from a previous snapshot.
   */
  snapshotInfo?: SnapshotRecoveryRequest;
  /**
   * Name of the resource group the app belongs to. Read-only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceGroup?: string;
  /**
   * <code>true</code> if the app is a default container; otherwise, <code>false</code>.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDefaultContainer?: boolean;
  /**
   * Default hostname of the app. Read-only.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly defaultHostName?: string;
  /**
   * Status of the last deployment slot swap operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly slotSwapStatus?: SlotSwapStatus;
  /**
   * HttpsOnly: configures a web site to accept only https requests. Issues redirect for
   * http requests
   */
  httpsOnly?: boolean;
  identity?: ManagedServiceIdentity;
}

/**
 * Describes the capabilities/features allowed for a specific SKU.
 */
export interface Capability {
  /**
   * Name of the SKU capability.
   */
  name?: string;
  /**
   * Value of the SKU capability.
   */
  value?: string;
  /**
   * Reason of the SKU capability.
   */
  reason?: string;
}

/**
 * Description of the App Service plan scale options.
 */
export interface SkuCapacity {
  /**
   * Minimum number of workers for this App Service plan SKU.
   */
  minimum?: number;
  /**
   * Maximum number of workers for this App Service plan SKU.
   */
  maximum?: number;
  /**
   * Default number of workers for this App Service plan SKU.
   */
  default?: number;
  /**
   * Available scale configurations for an App Service plan.
   */
  scaleType?: string;
}

/**
 * Description of a SKU for a scalable resource.
 */
export interface SkuDescription {
  /**
   * Name of the resource SKU.
   */
  name?: string;
  /**
   * Service tier of the resource SKU.
   */
  tier?: string;
  /**
   * Size specifier of the resource SKU.
   */
  size?: string;
  /**
   * Family code of the resource SKU.
   */
  family?: string;
  /**
   * Current number of instances assigned to the resource.
   */
  capacity?: number;
  /**
   * Min, max, and default scale values of the SKU.
   */
  skuCapacity?: SkuCapacity;
  /**
   * Locations of the SKU.
   */
  locations?: string[];
  /**
   * Capabilities of the SKU, e.g., is traffic manager enabled?
   */
  capabilities?: Capability[];
}

/**
 * App Service plan.
 */
export interface AppServicePlan extends Resource {
  /**
   * Name for the App Service plan.
   */
  appServicePlanName: string;
  /**
   * Target worker tier assigned to the App Service plan.
   */
  workerTierName?: string;
  /**
   * App Service plan status. Possible values include: 'Ready', 'Pending', 'Creating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: StatusOptions;
  /**
   * App Service plan subscription.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subscription?: string;
  /**
   * App Service plan administration site.
   */
  adminSiteName?: string;
  /**
   * Specification for the App Service Environment to use for the App Service plan.
   */
  hostingEnvironmentProfile?: HostingEnvironmentProfile;
  /**
   * Maximum number of instances that can be assigned to this App Service plan.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maximumNumberOfWorkers?: number;
  /**
   * Geographical location for the App Service plan.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly geoRegion?: string;
  /**
   * If <code>true</code>, apps assigned to this App Service plan can be scaled independently.
   * If <code>false</code>, apps assigned to this App Service plan will scale to all instances of
   * the plan. Default value: false.
   */
  perSiteScaling?: boolean;
  /**
   * Number of apps assigned to this App Service plan.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfSites?: number;
  /**
   * If <code>true</code>, this App Service Plan owns spot instances.
   */
  isSpot?: boolean;
  /**
   * The time when the server farm expires. Valid only if it is a spot server farm.
   */
  spotExpirationTime?: Date;
  /**
   * Resource group of the App Service plan.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceGroup?: string;
  /**
   * If Linux app service plan <code>true</code>, <code>false</code> otherwise. Default value:
   * false.
   */
  reserved?: boolean;
  /**
   * Scaling worker count.
   */
  targetWorkerCount?: number;
  /**
   * Scaling worker size ID.
   */
  targetWorkerSizeId?: number;
  /**
   * Provisioning state of the App Service Environment. Possible values include: 'Succeeded',
   * 'Failed', 'Canceled', 'InProgress', 'Deleting'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  sku?: SkuDescription;
}

/**
 * Identifies an object.
 */
export interface NameIdentifier {
  /**
   * Name of the object.
   */
  name?: string;
}

/**
 * Retention policy of a resource metric.
 */
export interface MetricAvailability {
  timeGrain?: string;
  blobDuration?: string;
}

/**
 * Dimension of a resource metric. For e.g. instance specific HTTP requests for a web app,
 * where instance name is dimension of the metric HTTP request
 */
export interface Dimension {
  name?: string;
  displayName?: string;
  internalName?: string;
  toBeExportedForShoebox?: boolean;
}

/**
 * Definition of a single resource metric.
 */
export interface MetricSpecification {
  name?: string;
  displayName?: string;
  displayDescription?: string;
  unit?: string;
  aggregationType?: string;
  supportsInstanceLevelAggregation?: boolean;
  enableRegionalMdmAccount?: boolean;
  sourceMdmAccount?: string;
  sourceMdmNamespace?: string;
  metricFilterPattern?: string;
  fillGapWithZero?: boolean;
  isInternal?: boolean;
  dimensions?: Dimension[];
  category?: string;
  availabilities?: MetricAvailability[];
}

/**
 * Resource metrics service provided by Microsoft.Insights resource provider.
 */
export interface ServiceSpecification {
  metricSpecifications?: MetricSpecification[];
}

/**
 * Properties available for a Microsoft.Web resource provider operation.
 */
export interface CsmOperationDescriptionProperties {
  serviceSpecification?: ServiceSpecification;
}

/**
 * Meta data about operation used for display in portal.
 */
export interface CsmOperationDisplay {
  provider?: string;
  resource?: string;
  operation?: string;
  description?: string;
}

/**
 * Description of an operation available for Microsoft.Web resource provider.
 */
export interface CsmOperationDescription {
  name?: string;
  display?: CsmOperationDisplay;
  origin?: string;
  properties?: CsmOperationDescriptionProperties;
}

/**
 * Optional Parameters.
 */
export interface AppServiceCertificateOrdersResendRequestEmailsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Name of the object.
   */
  name?: string;
}

/**
 * An interface representing WebSiteManagementClientOptions.
 */
export interface WebSiteManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Collection of certificate orders.
 * @extends Array<AppServiceCertificateOrder>
 */
export interface AppServiceCertificateOrderCollection extends Array<AppServiceCertificateOrder> {
  /**
   * Link to next page of resources.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Collection of certificate order certificates.
 * @extends Array<AppServiceCertificateResource>
 */
export interface AppServiceCertificateCollection extends Array<AppServiceCertificateResource> {
  /**
   * Link to next page of resources.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Collection of Azure resource manager operation metadata.
 * @extends Array<CsmOperationDescription>
 */
export interface CsmOperationCollection extends Array<CsmOperationDescription> {
  /**
   * Link to next page of resources.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for KeyVaultSecretStatus.
 * Possible values include: 'Initialized', 'WaitingOnCertificateOrder', 'Succeeded',
 * 'CertificateOrderFailed', 'OperationNotPermittedOnKeyVault',
 * 'AzureServiceUnauthorizedToAccessKeyVault', 'KeyVaultDoesNotExist',
 * 'KeyVaultSecretDoesNotExist', 'UnknownError', 'ExternalPrivateKey', 'Unknown'
 * @readonly
 * @enum {string}
 */
export type KeyVaultSecretStatus = 'Initialized' | 'WaitingOnCertificateOrder' | 'Succeeded' | 'CertificateOrderFailed' | 'OperationNotPermittedOnKeyVault' | 'AzureServiceUnauthorizedToAccessKeyVault' | 'KeyVaultDoesNotExist' | 'KeyVaultSecretDoesNotExist' | 'UnknownError' | 'ExternalPrivateKey' | 'Unknown';

/**
 * Defines values for CertificateProductType.
 * Possible values include: 'StandardDomainValidatedSsl', 'StandardDomainValidatedWildCardSsl'
 * @readonly
 * @enum {string}
 */
export type CertificateProductType = 'StandardDomainValidatedSsl' | 'StandardDomainValidatedWildCardSsl';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Succeeded' | 'Failed' | 'Canceled' | 'InProgress' | 'Deleting';

/**
 * Defines values for CertificateOrderStatus.
 * Possible values include: 'Pendingissuance', 'Issued', 'Revoked', 'Canceled', 'Denied',
 * 'Pendingrevocation', 'PendingRekey', 'Unused', 'Expired', 'NotSubmitted'
 * @readonly
 * @enum {string}
 */
export type CertificateOrderStatus = 'Pendingissuance' | 'Issued' | 'Revoked' | 'Canceled' | 'Denied' | 'Pendingrevocation' | 'PendingRekey' | 'Unused' | 'Expired' | 'NotSubmitted';

/**
 * Defines values for CertificateOrderActionType.
 * Possible values include: 'CertificateIssued', 'CertificateOrderCanceled',
 * 'CertificateOrderCreated', 'CertificateRevoked', 'DomainValidationComplete', 'FraudDetected',
 * 'OrgNameChange', 'OrgValidationComplete', 'SanDrop', 'FraudCleared', 'CertificateExpired',
 * 'CertificateExpirationWarning', 'FraudDocumentationRequired', 'Unknown'
 * @readonly
 * @enum {string}
 */
export type CertificateOrderActionType = 'CertificateIssued' | 'CertificateOrderCanceled' | 'CertificateOrderCreated' | 'CertificateRevoked' | 'DomainValidationComplete' | 'FraudDetected' | 'OrgNameChange' | 'OrgValidationComplete' | 'SanDrop' | 'FraudCleared' | 'CertificateExpired' | 'CertificateExpirationWarning' | 'FraudDocumentationRequired' | 'Unknown';

/**
 * Defines values for RouteType.
 * Possible values include: 'DEFAULT', 'INHERITED', 'STATIC'
 * @readonly
 * @enum {string}
 */
export type RouteType = 'DEFAULT' | 'INHERITED' | 'STATIC';

/**
 * Defines values for ManagedServiceIdentityType.
 * Possible values include: 'SystemAssigned'
 * @readonly
 * @enum {string}
 */
export type ManagedServiceIdentityType = 'SystemAssigned';

/**
 * Defines values for AutoHealActionType.
 * Possible values include: 'Recycle', 'LogEvent', 'CustomAction'
 * @readonly
 * @enum {string}
 */
export type AutoHealActionType = 'Recycle' | 'LogEvent' | 'CustomAction';

/**
 * Defines values for ConnectionStringType.
 * Possible values include: 'MySql', 'SQLServer', 'SQLAzure', 'Custom', 'NotificationHub',
 * 'ServiceBus', 'EventHub', 'ApiHub', 'DocDb', 'RedisCache', 'PostgreSQL'
 * @readonly
 * @enum {string}
 */
export type ConnectionStringType = 'MySql' | 'SQLServer' | 'SQLAzure' | 'Custom' | 'NotificationHub' | 'ServiceBus' | 'EventHub' | 'ApiHub' | 'DocDb' | 'RedisCache' | 'PostgreSQL';

/**
 * Defines values for ScmType.
 * Possible values include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
 * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive', 'VSO'
 * @readonly
 * @enum {string}
 */
export type ScmType = 'None' | 'Dropbox' | 'Tfs' | 'LocalGit' | 'GitHub' | 'CodePlexGit' | 'CodePlexHg' | 'BitbucketGit' | 'BitbucketHg' | 'ExternalGit' | 'ExternalHg' | 'OneDrive' | 'VSO';

/**
 * Defines values for ManagedPipelineMode.
 * Possible values include: 'Integrated', 'Classic'
 * @readonly
 * @enum {string}
 */
export type ManagedPipelineMode = 'Integrated' | 'Classic';

/**
 * Defines values for SiteLoadBalancing.
 * Possible values include: 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime',
 * 'WeightedTotalTraffic', 'RequestHash'
 * @readonly
 * @enum {string}
 */
export type SiteLoadBalancing = 'WeightedRoundRobin' | 'LeastRequests' | 'LeastResponseTime' | 'WeightedTotalTraffic' | 'RequestHash';

/**
 * Defines values for SupportedTlsVersions.
 * Possible values include: '1.0', '1.1', '1.2'
 * @readonly
 * @enum {string}
 */
export type SupportedTlsVersions = '1.0' | '1.1' | '1.2';

/**
 * Defines values for SslState.
 * Possible values include: 'Disabled', 'SniEnabled', 'IpBasedEnabled'
 * @readonly
 * @enum {string}
 */
export type SslState = 'Disabled' | 'SniEnabled' | 'IpBasedEnabled';

/**
 * Defines values for HostType.
 * Possible values include: 'Standard', 'Repository'
 * @readonly
 * @enum {string}
 */
export type HostType = 'Standard' | 'Repository';

/**
 * Defines values for UsageState.
 * Possible values include: 'Normal', 'Exceeded'
 * @readonly
 * @enum {string}
 */
export type UsageState = 'Normal' | 'Exceeded';

/**
 * Defines values for SiteAvailabilityState.
 * Possible values include: 'Normal', 'Limited', 'DisasterRecoveryMode'
 * @readonly
 * @enum {string}
 */
export type SiteAvailabilityState = 'Normal' | 'Limited' | 'DisasterRecoveryMode';

/**
 * Defines values for StatusOptions.
 * Possible values include: 'Ready', 'Pending', 'Creating'
 * @readonly
 * @enum {string}
 */
export type StatusOptions = 'Ready' | 'Pending' | 'Creating';

/**
 * Contains response data for the list operation.
 */
export type AppServiceCertificateOrdersListResponse = AppServiceCertificateOrderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateOrderCollection;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type AppServiceCertificateOrdersListByResourceGroupResponse = AppServiceCertificateOrderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateOrderCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AppServiceCertificateOrdersGetResponse = AppServiceCertificateOrder & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateOrder;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AppServiceCertificateOrdersCreateOrUpdateResponse = AppServiceCertificateOrder & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateOrder;
    };
};

/**
 * Contains response data for the update operation.
 */
export type AppServiceCertificateOrdersUpdateResponse = AppServiceCertificateOrder & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateOrder;
    };
};

/**
 * Contains response data for the listCertificates operation.
 */
export type AppServiceCertificateOrdersListCertificatesResponse = AppServiceCertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateCollection;
    };
};

/**
 * Contains response data for the getCertificate operation.
 */
export type AppServiceCertificateOrdersGetCertificateResponse = AppServiceCertificateResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateResource;
    };
};

/**
 * Contains response data for the createOrUpdateCertificate operation.
 */
export type AppServiceCertificateOrdersCreateOrUpdateCertificateResponse = AppServiceCertificateResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateResource;
    };
};

/**
 * Contains response data for the updateCertificate operation.
 */
export type AppServiceCertificateOrdersUpdateCertificateResponse = AppServiceCertificateResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateResource;
    };
};

/**
 * Contains response data for the retrieveSiteSeal operation.
 */
export type AppServiceCertificateOrdersRetrieveSiteSealResponse = SiteSeal & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SiteSeal;
    };
};

/**
 * Contains response data for the retrieveCertificateActions operation.
 */
export type AppServiceCertificateOrdersRetrieveCertificateActionsResponse = Array<CertificateOrderAction> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CertificateOrderAction[];
    };
};

/**
 * Contains response data for the retrieveCertificateEmailHistory operation.
 */
export type AppServiceCertificateOrdersRetrieveCertificateEmailHistoryResponse = Array<CertificateEmail> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CertificateEmail[];
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type AppServiceCertificateOrdersBeginCreateOrUpdateResponse = AppServiceCertificateOrder & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateOrder;
    };
};

/**
 * Contains response data for the beginCreateOrUpdateCertificate operation.
 */
export type AppServiceCertificateOrdersBeginCreateOrUpdateCertificateResponse = AppServiceCertificateResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateResource;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AppServiceCertificateOrdersListNextResponse = AppServiceCertificateOrderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateOrderCollection;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type AppServiceCertificateOrdersListByResourceGroupNextResponse = AppServiceCertificateOrderCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateOrderCollection;
    };
};

/**
 * Contains response data for the listCertificatesNext operation.
 */
export type AppServiceCertificateOrdersListCertificatesNextResponse = AppServiceCertificateCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AppServiceCertificateCollection;
    };
};

/**
 * Contains response data for the listOperations operation.
 */
export type CertificateRegistrationProviderListOperationsResponse = CsmOperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CsmOperationCollection;
    };
};

/**
 * Contains response data for the listOperationsNext operation.
 */
export type CertificateRegistrationProviderListOperationsNextResponse = CsmOperationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CsmOperationCollection;
    };
};
