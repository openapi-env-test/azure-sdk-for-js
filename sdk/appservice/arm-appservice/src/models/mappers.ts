/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const FileSystemApplicationLogsConfig: msRest.CompositeMapper = {
  serializedName: "FileSystemApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "FileSystemApplicationLogsConfig",
    modelProperties: {
      level: {
        serializedName: "level",
        defaultValue: 'Off',
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "Verbose",
            "Information",
            "Warning",
            "Error"
          ]
        }
      }
    }
  }
};

export const AzureTableStorageApplicationLogsConfig: msRest.CompositeMapper = {
  serializedName: "AzureTableStorageApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "AzureTableStorageApplicationLogsConfig",
    modelProperties: {
      level: {
        serializedName: "level",
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "Verbose",
            "Information",
            "Warning",
            "Error"
          ]
        }
      },
      sasUrl: {
        required: true,
        serializedName: "sasUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBlobStorageApplicationLogsConfig: msRest.CompositeMapper = {
  serializedName: "AzureBlobStorageApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "AzureBlobStorageApplicationLogsConfig",
    modelProperties: {
      level: {
        serializedName: "level",
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "Verbose",
            "Information",
            "Warning",
            "Error"
          ]
        }
      },
      sasUrl: {
        serializedName: "sasUrl",
        type: {
          name: "String"
        }
      },
      retentionInDays: {
        serializedName: "retentionInDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationLogsConfig: msRest.CompositeMapper = {
  serializedName: "ApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "ApplicationLogsConfig",
    modelProperties: {
      fileSystem: {
        serializedName: "fileSystem",
        type: {
          name: "Composite",
          className: "FileSystemApplicationLogsConfig"
        }
      },
      azureTableStorage: {
        serializedName: "azureTableStorage",
        type: {
          name: "Composite",
          className: "AzureTableStorageApplicationLogsConfig"
        }
      },
      azureBlobStorage: {
        serializedName: "azureBlobStorage",
        type: {
          name: "Composite",
          className: "AzureBlobStorageApplicationLogsConfig"
        }
      }
    }
  }
};

export const AzureBlobStorageHttpLogsConfig: msRest.CompositeMapper = {
  serializedName: "AzureBlobStorageHttpLogsConfig",
  type: {
    name: "Composite",
    className: "AzureBlobStorageHttpLogsConfig",
    modelProperties: {
      sasUrl: {
        serializedName: "sasUrl",
        type: {
          name: "String"
        }
      },
      retentionInDays: {
        serializedName: "retentionInDays",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DatabaseBackupSetting: msRest.CompositeMapper = {
  serializedName: "DatabaseBackupSetting",
  type: {
    name: "Composite",
    className: "DatabaseBackupSetting",
    modelProperties: {
      databaseType: {
        required: true,
        serializedName: "databaseType",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      connectionStringName: {
        serializedName: "connectionStringName",
        type: {
          name: "String"
        }
      },
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyOnlyResource: msRest.CompositeMapper = {
  serializedName: "ProxyOnlyResource",
  type: {
    name: "Composite",
    className: "ProxyOnlyResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupItem: msRest.CompositeMapper = {
  serializedName: "BackupItem",
  type: {
    name: "Composite",
    className: "BackupItem",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      backupId: {
        readOnly: true,
        serializedName: "properties.id",
        type: {
          name: "Number"
        }
      },
      storageAccountUrl: {
        readOnly: true,
        serializedName: "properties.storageAccountUrl",
        type: {
          name: "String"
        }
      },
      blobName: {
        readOnly: true,
        serializedName: "properties.blobName",
        type: {
          name: "String"
        }
      },
      backupItemName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "InProgress",
            "Failed",
            "Succeeded",
            "TimedOut",
            "Created",
            "Skipped",
            "PartiallySucceeded",
            "DeleteInProgress",
            "DeleteFailed",
            "Deleted"
          ]
        }
      },
      sizeInBytes: {
        readOnly: true,
        serializedName: "properties.sizeInBytes",
        type: {
          name: "Number"
        }
      },
      created: {
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      log: {
        readOnly: true,
        serializedName: "properties.log",
        type: {
          name: "String"
        }
      },
      databases: {
        readOnly: true,
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBackupSetting"
            }
          }
        }
      },
      scheduled: {
        readOnly: true,
        serializedName: "properties.scheduled",
        type: {
          name: "Boolean"
        }
      },
      lastRestoreTimeStamp: {
        readOnly: true,
        serializedName: "properties.lastRestoreTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      finishedTimeStamp: {
        readOnly: true,
        serializedName: "properties.finishedTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      correlationId: {
        readOnly: true,
        serializedName: "properties.correlationId",
        type: {
          name: "String"
        }
      },
      websiteSizeInBytes: {
        readOnly: true,
        serializedName: "properties.websiteSizeInBytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupSchedule: msRest.CompositeMapper = {
  serializedName: "BackupSchedule",
  type: {
    name: "Composite",
    className: "BackupSchedule",
    modelProperties: {
      frequencyInterval: {
        required: true,
        serializedName: "frequencyInterval",
        defaultValue: 7,
        type: {
          name: "Number"
        }
      },
      frequencyUnit: {
        required: true,
        serializedName: "frequencyUnit",
        defaultValue: 'Day',
        type: {
          name: "Enum",
          allowedValues: [
            "Day",
            "Hour"
          ]
        }
      },
      keepAtLeastOneBackup: {
        required: true,
        serializedName: "keepAtLeastOneBackup",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      retentionPeriodInDays: {
        required: true,
        serializedName: "retentionPeriodInDays",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      lastExecutionTime: {
        readOnly: true,
        serializedName: "lastExecutionTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BackupRequest: msRest.CompositeMapper = {
  serializedName: "BackupRequest",
  type: {
    name: "Composite",
    className: "BackupRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      backupRequestName: {
        required: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      storageAccountUrl: {
        required: true,
        serializedName: "properties.storageAccountUrl",
        type: {
          name: "String"
        }
      },
      backupSchedule: {
        serializedName: "properties.backupSchedule",
        type: {
          name: "Composite",
          className: "BackupSchedule"
        }
      },
      databases: {
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBackupSetting"
            }
          }
        }
      },
      backupRequestType: {
        serializedName: "properties.type",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Clone",
            "Relocation",
            "Snapshot"
          ]
        }
      }
    }
  }
};

export const ConnStringValueTypePair: msRest.CompositeMapper = {
  serializedName: "ConnStringValueTypePair",
  type: {
    name: "Composite",
    className: "ConnStringValueTypePair",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "MySql",
            "SQLServer",
            "SQLAzure",
            "Custom",
            "NotificationHub",
            "ServiceBus",
            "EventHub",
            "ApiHub",
            "DocDb",
            "RedisCache",
            "PostgreSQL"
          ]
        }
      }
    }
  }
};

export const ConnectionStringDictionary: msRest.CompositeMapper = {
  serializedName: "ConnectionStringDictionary",
  type: {
    name: "Composite",
    className: "ConnectionStringDictionary",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ConnStringValueTypePair"
            }
          }
        }
      }
    }
  }
};

export const ContinuousWebJob: msRest.CompositeMapper = {
  serializedName: "ContinuousWebJob",
  type: {
    name: "Composite",
    className: "ContinuousWebJob",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Initializing",
            "Starting",
            "Running",
            "PendingRestart",
            "Stopped"
          ]
        }
      },
      detailedStatus: {
        serializedName: "properties.detailedStatus",
        type: {
          name: "String"
        }
      },
      logUrl: {
        serializedName: "properties.logUrl",
        type: {
          name: "String"
        }
      },
      continuousWebJobName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      runCommand: {
        serializedName: "properties.runCommand",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      },
      extraInfoUrl: {
        serializedName: "properties.extraInfoUrl",
        type: {
          name: "String"
        }
      },
      jobType: {
        serializedName: "properties.jobType",
        type: {
          name: "Enum",
          allowedValues: [
            "Continuous",
            "Triggered"
          ]
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "String"
        }
      },
      usingSdk: {
        serializedName: "properties.usingSdk",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const CsmPublishingProfileOptions: msRest.CompositeMapper = {
  serializedName: "CsmPublishingProfileOptions",
  type: {
    name: "Composite",
    className: "CsmPublishingProfileOptions",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmSlotEntity: msRest.CompositeMapper = {
  serializedName: "CsmSlotEntity",
  type: {
    name: "Composite",
    className: "CsmSlotEntity",
    modelProperties: {
      targetSlot: {
        required: true,
        serializedName: "targetSlot",
        type: {
          name: "String"
        }
      },
      preserveVnet: {
        required: true,
        serializedName: "preserveVnet",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ErrorEntity: msRest.CompositeMapper = {
  serializedName: "ErrorEntity",
  type: {
    name: "Composite",
    className: "ErrorEntity",
    modelProperties: {
      extendedCode: {
        serializedName: "extendedCode",
        type: {
          name: "String"
        }
      },
      messageTemplate: {
        serializedName: "messageTemplate",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      innerErrors: {
        serializedName: "innerErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorEntity"
            }
          }
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomHostnameAnalysisResult: msRest.CompositeMapper = {
  serializedName: "CustomHostnameAnalysisResult",
  type: {
    name: "Composite",
    className: "CustomHostnameAnalysisResult",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      isHostnameAlreadyVerified: {
        readOnly: true,
        serializedName: "properties.isHostnameAlreadyVerified",
        type: {
          name: "Boolean"
        }
      },
      customDomainVerificationTest: {
        readOnly: true,
        serializedName: "properties.customDomainVerificationTest",
        type: {
          name: "Enum",
          allowedValues: [
            "Passed",
            "Failed",
            "Skipped"
          ]
        }
      },
      customDomainVerificationFailureInfo: {
        readOnly: true,
        serializedName: "properties.customDomainVerificationFailureInfo",
        type: {
          name: "Composite",
          className: "ErrorEntity"
        }
      },
      hasConflictOnScaleUnit: {
        readOnly: true,
        serializedName: "properties.hasConflictOnScaleUnit",
        type: {
          name: "Boolean"
        }
      },
      hasConflictAcrossSubscription: {
        readOnly: true,
        serializedName: "properties.hasConflictAcrossSubscription",
        type: {
          name: "Boolean"
        }
      },
      conflictingAppResourceId: {
        readOnly: true,
        serializedName: "properties.conflictingAppResourceId",
        type: {
          name: "String"
        }
      },
      cNameRecords: {
        serializedName: "properties.cNameRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      txtRecords: {
        serializedName: "properties.txtRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      aRecords: {
        serializedName: "properties.aRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      alternateCNameRecords: {
        serializedName: "properties.alternateCNameRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      alternateTxtRecords: {
        serializedName: "properties.alternateTxtRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Deployment: msRest.CompositeMapper = {
  serializedName: "Deployment",
  type: {
    name: "Composite",
    className: "Deployment",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      deploymentId: {
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Number"
        }
      },
      message: {
        serializedName: "properties.message",
        type: {
          name: "String"
        }
      },
      author: {
        serializedName: "properties.author",
        type: {
          name: "String"
        }
      },
      deployer: {
        serializedName: "properties.deployer",
        type: {
          name: "String"
        }
      },
      authorEmail: {
        serializedName: "properties.authorEmail",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      active: {
        serializedName: "properties.active",
        type: {
          name: "Boolean"
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnabledConfig: msRest.CompositeMapper = {
  serializedName: "EnabledConfig",
  type: {
    name: "Composite",
    className: "EnabledConfig",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FileSystemHttpLogsConfig: msRest.CompositeMapper = {
  serializedName: "FileSystemHttpLogsConfig",
  type: {
    name: "Composite",
    className: "FileSystemHttpLogsConfig",
    modelProperties: {
      retentionInMb: {
        serializedName: "retentionInMb",
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 25
        },
        type: {
          name: "Number"
        }
      },
      retentionInDays: {
        serializedName: "retentionInDays",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FunctionEnvelope: msRest.CompositeMapper = {
  serializedName: "FunctionEnvelope",
  type: {
    name: "Composite",
    className: "FunctionEnvelope",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      functionEnvelopeName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      functionAppId: {
        readOnly: true,
        serializedName: "properties.functionAppId",
        type: {
          name: "String"
        }
      },
      scriptRootPathHref: {
        serializedName: "properties.scriptRootPathHref",
        type: {
          name: "String"
        }
      },
      scriptHref: {
        serializedName: "properties.scriptHref",
        type: {
          name: "String"
        }
      },
      configHref: {
        serializedName: "properties.configHref",
        type: {
          name: "String"
        }
      },
      secretsFileHref: {
        serializedName: "properties.secretsFileHref",
        type: {
          name: "String"
        }
      },
      href: {
        serializedName: "properties.href",
        type: {
          name: "String"
        }
      },
      config: {
        serializedName: "properties.config",
        type: {
          name: "Object"
        }
      },
      files: {
        serializedName: "properties.files",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      testData: {
        serializedName: "properties.testData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionSecrets: msRest.CompositeMapper = {
  serializedName: "FunctionSecrets",
  type: {
    name: "Composite",
    className: "FunctionSecrets",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      key: {
        serializedName: "properties.key",
        type: {
          name: "String"
        }
      },
      triggerUrl: {
        serializedName: "properties.triggerUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostNameBinding: msRest.CompositeMapper = {
  serializedName: "HostNameBinding",
  type: {
    name: "Composite",
    className: "HostNameBinding",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      siteName: {
        serializedName: "properties.siteName",
        type: {
          name: "String"
        }
      },
      domainId: {
        serializedName: "properties.domainId",
        type: {
          name: "String"
        }
      },
      azureResourceName: {
        serializedName: "properties.azureResourceName",
        type: {
          name: "String"
        }
      },
      azureResourceType: {
        serializedName: "properties.azureResourceType",
        type: {
          name: "Enum",
          allowedValues: [
            "Website",
            "TrafficManager"
          ]
        }
      },
      customHostNameDnsRecordType: {
        serializedName: "properties.customHostNameDnsRecordType",
        type: {
          name: "Enum",
          allowedValues: [
            "CName",
            "A"
          ]
        }
      },
      hostNameType: {
        serializedName: "properties.hostNameType",
        type: {
          name: "Enum",
          allowedValues: [
            "Verified",
            "Managed"
          ]
        }
      },
      sslState: {
        serializedName: "properties.sslState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "SniEnabled",
            "IpBasedEnabled"
          ]
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      virtualIP: {
        readOnly: true,
        serializedName: "properties.virtualIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpLogsConfig: msRest.CompositeMapper = {
  serializedName: "HttpLogsConfig",
  type: {
    name: "Composite",
    className: "HttpLogsConfig",
    modelProperties: {
      fileSystem: {
        serializedName: "fileSystem",
        type: {
          name: "Composite",
          className: "FileSystemHttpLogsConfig"
        }
      },
      azureBlobStorage: {
        serializedName: "azureBlobStorage",
        type: {
          name: "Composite",
          className: "AzureBlobStorageHttpLogsConfig"
        }
      }
    }
  }
};

export const MSDeploy: msRest.CompositeMapper = {
  serializedName: "MSDeploy",
  type: {
    name: "Composite",
    className: "MSDeploy",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      packageUri: {
        serializedName: "properties.packageUri",
        type: {
          name: "String"
        }
      },
      connectionString: {
        serializedName: "properties.connectionString",
        type: {
          name: "String"
        }
      },
      dbType: {
        serializedName: "properties.dbType",
        type: {
          name: "String"
        }
      },
      setParametersXmlFileUri: {
        serializedName: "properties.setParametersXmlFileUri",
        type: {
          name: "String"
        }
      },
      setParameters: {
        serializedName: "properties.setParameters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      skipAppData: {
        serializedName: "properties.skipAppData",
        type: {
          name: "Boolean"
        }
      },
      appOffline: {
        serializedName: "properties.appOffline",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MSDeployLogEntry: msRest.CompositeMapper = {
  serializedName: "MSDeployLogEntry",
  type: {
    name: "Composite",
    className: "MSDeployLogEntry",
    modelProperties: {
      time: {
        readOnly: true,
        serializedName: "time",
        type: {
          name: "DateTime"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "Message",
            "Warning",
            "Error"
          ]
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MSDeployLog: msRest.CompositeMapper = {
  serializedName: "MSDeployLog",
  type: {
    name: "Composite",
    className: "MSDeployLog",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      entries: {
        readOnly: true,
        serializedName: "properties.entries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MSDeployLogEntry"
            }
          }
        }
      }
    }
  }
};

export const MSDeployStatus: msRest.CompositeMapper = {
  serializedName: "MSDeployStatus",
  type: {
    name: "Composite",
    className: "MSDeployStatus",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      deployer: {
        readOnly: true,
        serializedName: "properties.deployer",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "accepted",
            "running",
            "succeeded",
            "failed",
            "canceled"
          ]
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      complete: {
        readOnly: true,
        serializedName: "properties.complete",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MigrateMySqlRequest: msRest.CompositeMapper = {
  serializedName: "MigrateMySqlRequest",
  type: {
    name: "Composite",
    className: "MigrateMySqlRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      connectionString: {
        required: true,
        serializedName: "properties.connectionString",
        type: {
          name: "String"
        }
      },
      migrationType: {
        required: true,
        serializedName: "properties.migrationType",
        type: {
          name: "Enum",
          allowedValues: [
            "LocalToRemote",
            "RemoteToLocal"
          ]
        }
      }
    }
  }
};

export const MigrateMySqlStatus: msRest.CompositeMapper = {
  serializedName: "MigrateMySqlStatus",
  type: {
    name: "Composite",
    className: "MigrateMySqlStatus",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      migrationOperationStatus: {
        readOnly: true,
        serializedName: "properties.migrationOperationStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "InProgress",
            "Failed",
            "Succeeded",
            "TimedOut",
            "Created"
          ]
        }
      },
      operationId: {
        readOnly: true,
        serializedName: "properties.operationId",
        type: {
          name: "String"
        }
      },
      localMySqlEnabled: {
        readOnly: true,
        serializedName: "properties.localMySqlEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VnetRoute: msRest.CompositeMapper = {
  serializedName: "VnetRoute",
  type: {
    name: "Composite",
    className: "VnetRoute",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetRouteName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      startAddress: {
        serializedName: "properties.startAddress",
        type: {
          name: "String"
        }
      },
      endAddress: {
        serializedName: "properties.endAddress",
        type: {
          name: "String"
        }
      },
      routeType: {
        serializedName: "properties.routeType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetInfo: msRest.CompositeMapper = {
  serializedName: "VnetInfo",
  type: {
    name: "Composite",
    className: "VnetInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetResourceId: {
        serializedName: "properties.vnetResourceId",
        type: {
          name: "String"
        }
      },
      certThumbprint: {
        readOnly: true,
        serializedName: "properties.certThumbprint",
        type: {
          name: "String"
        }
      },
      certBlob: {
        serializedName: "properties.certBlob",
        type: {
          name: "ByteArray"
        }
      },
      routes: {
        readOnly: true,
        serializedName: "properties.routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetRoute"
            }
          }
        }
      },
      resyncRequired: {
        readOnly: true,
        serializedName: "properties.resyncRequired",
        type: {
          name: "Boolean"
        }
      },
      dnsServers: {
        serializedName: "properties.dnsServers",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RelayServiceConnectionEntity: msRest.CompositeMapper = {
  serializedName: "RelayServiceConnectionEntity",
  type: {
    name: "Composite",
    className: "RelayServiceConnectionEntity",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      entityName: {
        serializedName: "properties.entityName",
        type: {
          name: "String"
        }
      },
      entityConnectionString: {
        serializedName: "properties.entityConnectionString",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "properties.resourceType",
        type: {
          name: "String"
        }
      },
      resourceConnectionString: {
        serializedName: "properties.resourceConnectionString",
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "properties.hostname",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      biztalkUri: {
        serializedName: "properties.biztalkUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnection: msRest.CompositeMapper = {
  serializedName: "HybridConnection",
  type: {
    name: "Composite",
    className: "HybridConnection",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      relayName: {
        serializedName: "properties.relayName",
        type: {
          name: "String"
        }
      },
      relayArmUri: {
        serializedName: "properties.relayArmUri",
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "properties.hostname",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      sendKeyName: {
        serializedName: "properties.sendKeyName",
        type: {
          name: "String"
        }
      },
      sendKeyValue: {
        serializedName: "properties.sendKeyValue",
        type: {
          name: "String"
        }
      },
      serviceBusSuffix: {
        serializedName: "properties.serviceBusSuffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFeatures: msRest.CompositeMapper = {
  serializedName: "NetworkFeatures",
  type: {
    name: "Composite",
    className: "NetworkFeatures",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      virtualNetworkName: {
        readOnly: true,
        serializedName: "properties.virtualNetworkName",
        type: {
          name: "String"
        }
      },
      virtualNetworkConnection: {
        readOnly: true,
        serializedName: "properties.virtualNetworkConnection",
        type: {
          name: "Composite",
          className: "VnetInfo"
        }
      },
      hybridConnections: {
        readOnly: true,
        serializedName: "properties.hybridConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RelayServiceConnectionEntity"
            }
          }
        }
      },
      hybridConnectionsV2: {
        readOnly: true,
        serializedName: "properties.hybridConnectionsV2",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridConnection"
            }
          }
        }
      }
    }
  }
};

export const PerfMonSample: msRest.CompositeMapper = {
  serializedName: "PerfMonSample",
  type: {
    name: "Composite",
    className: "PerfMonSample",
    modelProperties: {
      time: {
        serializedName: "time",
        type: {
          name: "DateTime"
        }
      },
      instanceName: {
        serializedName: "instanceName",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      },
      coreCount: {
        serializedName: "coreCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PerfMonSet: msRest.CompositeMapper = {
  serializedName: "PerfMonSet",
  type: {
    name: "Composite",
    className: "PerfMonSet",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerfMonSample"
            }
          }
        }
      }
    }
  }
};

export const PerfMonResponse: msRest.CompositeMapper = {
  serializedName: "PerfMonResponse",
  type: {
    name: "Composite",
    className: "PerfMonResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Composite",
          className: "PerfMonSet"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PremierAddOn: msRest.CompositeMapper = {
  serializedName: "PremierAddOn",
  type: {
    name: "Composite",
    className: "PremierAddOn",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "properties.product",
        type: {
          name: "String"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      premierAddOnName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      premierAddOnLocation: {
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      premierAddOnTags: {
        serializedName: "properties.tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      marketplacePublisher: {
        serializedName: "properties.marketplacePublisher",
        type: {
          name: "String"
        }
      },
      marketplaceOffer: {
        serializedName: "properties.marketplaceOffer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessThreadInfo: msRest.CompositeMapper = {
  serializedName: "ProcessThreadInfo",
  type: {
    name: "Composite",
    className: "ProcessThreadInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      processThreadInfoId: {
        serializedName: "properties.id",
        type: {
          name: "Number"
        }
      },
      href: {
        serializedName: "properties.href",
        type: {
          name: "String"
        }
      },
      process: {
        serializedName: "properties.process",
        type: {
          name: "String"
        }
      },
      startAddress: {
        serializedName: "properties.startAddress",
        type: {
          name: "String"
        }
      },
      currentPriority: {
        serializedName: "properties.currentPriority",
        type: {
          name: "Number"
        }
      },
      priorityLevel: {
        serializedName: "properties.priorityLevel",
        type: {
          name: "String"
        }
      },
      basePriority: {
        serializedName: "properties.basePriority",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      totalProcessorTime: {
        serializedName: "properties.totalProcessorTime",
        type: {
          name: "String"
        }
      },
      userProcessorTime: {
        serializedName: "properties.userProcessorTime",
        type: {
          name: "String"
        }
      },
      priviledgedProcessorTime: {
        serializedName: "properties.priviledgedProcessorTime",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      waitReason: {
        serializedName: "properties.waitReason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessModuleInfo: msRest.CompositeMapper = {
  serializedName: "ProcessModuleInfo",
  type: {
    name: "Composite",
    className: "ProcessModuleInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      baseAddress: {
        serializedName: "properties.baseAddress",
        type: {
          name: "String"
        }
      },
      fileName: {
        serializedName: "properties.fileName",
        type: {
          name: "String"
        }
      },
      href: {
        serializedName: "properties.href",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "properties.filePath",
        type: {
          name: "String"
        }
      },
      moduleMemorySize: {
        serializedName: "properties.moduleMemorySize",
        type: {
          name: "Number"
        }
      },
      fileVersion: {
        serializedName: "properties.fileVersion",
        type: {
          name: "String"
        }
      },
      fileDescription: {
        serializedName: "properties.fileDescription",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "properties.product",
        type: {
          name: "String"
        }
      },
      productVersion: {
        serializedName: "properties.productVersion",
        type: {
          name: "String"
        }
      },
      isDebug: {
        serializedName: "properties.isDebug",
        type: {
          name: "Boolean"
        }
      },
      language: {
        serializedName: "properties.language",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessInfo: msRest.CompositeMapper = {
  serializedName: "ProcessInfo",
  type: {
    name: "Composite",
    className: "ProcessInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      processInfoId: {
        serializedName: "properties.id",
        type: {
          name: "Number"
        }
      },
      processInfoName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      href: {
        serializedName: "properties.href",
        type: {
          name: "String"
        }
      },
      miniDump: {
        serializedName: "properties.miniDump",
        type: {
          name: "String"
        }
      },
      isProfileRunning: {
        serializedName: "properties.isProfileRunning",
        type: {
          name: "Boolean"
        }
      },
      isIisProfileRunning: {
        serializedName: "properties.isIisProfileRunning",
        type: {
          name: "Boolean"
        }
      },
      iisProfileTimeoutInSeconds: {
        serializedName: "properties.iisProfileTimeoutInSeconds",
        type: {
          name: "Number"
        }
      },
      parent: {
        serializedName: "properties.parent",
        type: {
          name: "String"
        }
      },
      children: {
        serializedName: "properties.children",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      threads: {
        serializedName: "properties.threads",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessThreadInfo"
            }
          }
        }
      },
      openFileHandles: {
        serializedName: "properties.openFileHandles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      modules: {
        serializedName: "properties.modules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessModuleInfo"
            }
          }
        }
      },
      fileName: {
        serializedName: "properties.fileName",
        type: {
          name: "String"
        }
      },
      commandLine: {
        serializedName: "properties.commandLine",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      handleCount: {
        serializedName: "properties.handleCount",
        type: {
          name: "Number"
        }
      },
      moduleCount: {
        serializedName: "properties.moduleCount",
        type: {
          name: "Number"
        }
      },
      threadCount: {
        serializedName: "properties.threadCount",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      totalProcessorTime: {
        serializedName: "properties.totalProcessorTime",
        type: {
          name: "String"
        }
      },
      userProcessorTime: {
        serializedName: "properties.userProcessorTime",
        type: {
          name: "String"
        }
      },
      privilegedProcessorTime: {
        serializedName: "properties.privilegedProcessorTime",
        type: {
          name: "String"
        }
      },
      workingSet64: {
        serializedName: "properties.workingSet64",
        type: {
          name: "Number"
        }
      },
      peakWorkingSet64: {
        serializedName: "properties.peakWorkingSet64",
        type: {
          name: "Number"
        }
      },
      privateMemorySize64: {
        serializedName: "properties.privateMemorySize64",
        type: {
          name: "Number"
        }
      },
      virtualMemorySize64: {
        serializedName: "properties.virtualMemorySize64",
        type: {
          name: "Number"
        }
      },
      peakVirtualMemorySize64: {
        serializedName: "properties.peakVirtualMemorySize64",
        type: {
          name: "Number"
        }
      },
      pagedSystemMemorySize64: {
        serializedName: "properties.pagedSystemMemorySize64",
        type: {
          name: "Number"
        }
      },
      nonpagedSystemMemorySize64: {
        serializedName: "properties.nonpagedSystemMemorySize64",
        type: {
          name: "Number"
        }
      },
      pagedMemorySize64: {
        serializedName: "properties.pagedMemorySize64",
        type: {
          name: "Number"
        }
      },
      peakPagedMemorySize64: {
        serializedName: "properties.peakPagedMemorySize64",
        type: {
          name: "Number"
        }
      },
      timeStamp: {
        serializedName: "properties.timeStamp",
        type: {
          name: "DateTime"
        }
      },
      environmentVariables: {
        serializedName: "properties.environmentVariables",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      isScmSite: {
        serializedName: "properties.isScmSite",
        type: {
          name: "Boolean"
        }
      },
      isWebJob: {
        serializedName: "properties.isWebJob",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicCertificate: msRest.CompositeMapper = {
  serializedName: "PublicCertificate",
  type: {
    name: "Composite",
    className: "PublicCertificate",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      blob: {
        serializedName: "properties.blob",
        type: {
          name: "ByteArray"
        }
      },
      publicCertificateLocation: {
        serializedName: "properties.publicCertificateLocation",
        type: {
          name: "Enum",
          allowedValues: [
            "CurrentUserMy",
            "LocalMachineMy",
            "Unknown"
          ]
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoreRequest: msRest.CompositeMapper = {
  serializedName: "RestoreRequest",
  type: {
    name: "Composite",
    className: "RestoreRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      storageAccountUrl: {
        required: true,
        serializedName: "properties.storageAccountUrl",
        type: {
          name: "String"
        }
      },
      blobName: {
        serializedName: "properties.blobName",
        type: {
          name: "String"
        }
      },
      overwrite: {
        required: true,
        serializedName: "properties.overwrite",
        type: {
          name: "Boolean"
        }
      },
      siteName: {
        serializedName: "properties.siteName",
        type: {
          name: "String"
        }
      },
      databases: {
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBackupSetting"
            }
          }
        }
      },
      ignoreConflictingHostNames: {
        serializedName: "properties.ignoreConflictingHostNames",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ignoreDatabases: {
        serializedName: "properties.ignoreDatabases",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      appServicePlan: {
        serializedName: "properties.appServicePlan",
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "properties.operationType",
        defaultValue: 'Default',
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Clone",
            "Relocation",
            "Snapshot"
          ]
        }
      },
      adjustConnectionStrings: {
        serializedName: "properties.adjustConnectionStrings",
        type: {
          name: "Boolean"
        }
      },
      hostingEnvironment: {
        serializedName: "properties.hostingEnvironment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoreResponse: msRest.CompositeMapper = {
  serializedName: "RestoreResponse",
  type: {
    name: "Composite",
    className: "RestoreResponse",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      operationId: {
        readOnly: true,
        serializedName: "properties.operationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteAuthSettings: msRest.CompositeMapper = {
  serializedName: "SiteAuthSettings",
  type: {
    name: "Composite",
    className: "SiteAuthSettings",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      runtimeVersion: {
        serializedName: "properties.runtimeVersion",
        type: {
          name: "String"
        }
      },
      unauthenticatedClientAction: {
        serializedName: "properties.unauthenticatedClientAction",
        type: {
          name: "Enum",
          allowedValues: [
            "RedirectToLoginPage",
            "AllowAnonymous"
          ]
        }
      },
      tokenStoreEnabled: {
        serializedName: "properties.tokenStoreEnabled",
        type: {
          name: "Boolean"
        }
      },
      allowedExternalRedirectUrls: {
        serializedName: "properties.allowedExternalRedirectUrls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      defaultProvider: {
        serializedName: "properties.defaultProvider",
        type: {
          name: "Enum",
          allowedValues: [
            "AzureActiveDirectory",
            "Facebook",
            "Google",
            "MicrosoftAccount",
            "Twitter"
          ]
        }
      },
      tokenRefreshExtensionHours: {
        serializedName: "properties.tokenRefreshExtensionHours",
        type: {
          name: "Number"
        }
      },
      clientId: {
        serializedName: "properties.clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "properties.clientSecret",
        type: {
          name: "String"
        }
      },
      issuer: {
        serializedName: "properties.issuer",
        type: {
          name: "String"
        }
      },
      allowedAudiences: {
        serializedName: "properties.allowedAudiences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      additionalLoginParams: {
        serializedName: "properties.additionalLoginParams",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      googleClientId: {
        serializedName: "properties.googleClientId",
        type: {
          name: "String"
        }
      },
      googleClientSecret: {
        serializedName: "properties.googleClientSecret",
        type: {
          name: "String"
        }
      },
      googleOAuthScopes: {
        serializedName: "properties.googleOAuthScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      facebookAppId: {
        serializedName: "properties.facebookAppId",
        type: {
          name: "String"
        }
      },
      facebookAppSecret: {
        serializedName: "properties.facebookAppSecret",
        type: {
          name: "String"
        }
      },
      facebookOAuthScopes: {
        serializedName: "properties.facebookOAuthScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      twitterConsumerKey: {
        serializedName: "properties.twitterConsumerKey",
        type: {
          name: "String"
        }
      },
      twitterConsumerSecret: {
        serializedName: "properties.twitterConsumerSecret",
        type: {
          name: "String"
        }
      },
      microsoftAccountClientId: {
        serializedName: "properties.microsoftAccountClientId",
        type: {
          name: "String"
        }
      },
      microsoftAccountClientSecret: {
        serializedName: "properties.microsoftAccountClientSecret",
        type: {
          name: "String"
        }
      },
      microsoftAccountOAuthScopes: {
        serializedName: "properties.microsoftAccountOAuthScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SiteCloneabilityCriterion: msRest.CompositeMapper = {
  serializedName: "SiteCloneabilityCriterion",
  type: {
    name: "Composite",
    className: "SiteCloneabilityCriterion",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteCloneability: msRest.CompositeMapper = {
  serializedName: "SiteCloneability",
  type: {
    name: "Composite",
    className: "SiteCloneability",
    modelProperties: {
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: [
            "Cloneable",
            "PartiallyCloneable",
            "NotCloneable"
          ]
        }
      },
      blockingFeatures: {
        serializedName: "blockingFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteCloneabilityCriterion"
            }
          }
        }
      },
      unsupportedFeatures: {
        serializedName: "unsupportedFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteCloneabilityCriterion"
            }
          }
        }
      },
      blockingCharacteristics: {
        serializedName: "blockingCharacteristics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteCloneabilityCriterion"
            }
          }
        }
      }
    }
  }
};

export const NameValuePair: msRest.CompositeMapper = {
  serializedName: "NameValuePair",
  type: {
    name: "Composite",
    className: "NameValuePair",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnStringInfo: msRest.CompositeMapper = {
  serializedName: "ConnStringInfo",
  type: {
    name: "Composite",
    className: "ConnStringInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "MySql",
            "SQLServer",
            "SQLAzure",
            "Custom",
            "NotificationHub",
            "ServiceBus",
            "EventHub",
            "ApiHub",
            "DocDb",
            "RedisCache",
            "PostgreSQL"
          ]
        }
      }
    }
  }
};

export const SiteMachineKey: msRest.CompositeMapper = {
  serializedName: "SiteMachineKey",
  type: {
    name: "Composite",
    className: "SiteMachineKey",
    modelProperties: {
      validation: {
        serializedName: "validation",
        type: {
          name: "String"
        }
      },
      validationKey: {
        serializedName: "validationKey",
        type: {
          name: "String"
        }
      },
      decryption: {
        serializedName: "decryption",
        type: {
          name: "String"
        }
      },
      decryptionKey: {
        serializedName: "decryptionKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HandlerMapping: msRest.CompositeMapper = {
  serializedName: "HandlerMapping",
  type: {
    name: "Composite",
    className: "HandlerMapping",
    modelProperties: {
      extension: {
        serializedName: "extension",
        type: {
          name: "String"
        }
      },
      scriptProcessor: {
        serializedName: "scriptProcessor",
        type: {
          name: "String"
        }
      },
      argumentsProperty: {
        serializedName: "arguments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualDirectory: msRest.CompositeMapper = {
  serializedName: "VirtualDirectory",
  type: {
    name: "Composite",
    className: "VirtualDirectory",
    modelProperties: {
      virtualPath: {
        serializedName: "virtualPath",
        type: {
          name: "String"
        }
      },
      physicalPath: {
        serializedName: "physicalPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualApplication: msRest.CompositeMapper = {
  serializedName: "VirtualApplication",
  type: {
    name: "Composite",
    className: "VirtualApplication",
    modelProperties: {
      virtualPath: {
        serializedName: "virtualPath",
        type: {
          name: "String"
        }
      },
      physicalPath: {
        serializedName: "physicalPath",
        type: {
          name: "String"
        }
      },
      preloadEnabled: {
        serializedName: "preloadEnabled",
        type: {
          name: "Boolean"
        }
      },
      virtualDirectories: {
        serializedName: "virtualDirectories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDirectory"
            }
          }
        }
      }
    }
  }
};

export const RampUpRule: msRest.CompositeMapper = {
  serializedName: "RampUpRule",
  type: {
    name: "Composite",
    className: "RampUpRule",
    modelProperties: {
      actionHostName: {
        serializedName: "actionHostName",
        type: {
          name: "String"
        }
      },
      reroutePercentage: {
        serializedName: "reroutePercentage",
        type: {
          name: "Number"
        }
      },
      changeStep: {
        serializedName: "changeStep",
        type: {
          name: "Number"
        }
      },
      changeIntervalInMinutes: {
        serializedName: "changeIntervalInMinutes",
        type: {
          name: "Number"
        }
      },
      minReroutePercentage: {
        serializedName: "minReroutePercentage",
        type: {
          name: "Number"
        }
      },
      maxReroutePercentage: {
        serializedName: "maxReroutePercentage",
        type: {
          name: "Number"
        }
      },
      changeDecisionCallbackUrl: {
        serializedName: "changeDecisionCallbackUrl",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Experiments: msRest.CompositeMapper = {
  serializedName: "Experiments",
  type: {
    name: "Composite",
    className: "Experiments",
    modelProperties: {
      rampUpRules: {
        serializedName: "rampUpRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RampUpRule"
            }
          }
        }
      }
    }
  }
};

export const SiteLimits: msRest.CompositeMapper = {
  serializedName: "SiteLimits",
  type: {
    name: "Composite",
    className: "SiteLimits",
    modelProperties: {
      maxPercentageCpu: {
        serializedName: "maxPercentageCpu",
        type: {
          name: "Number"
        }
      },
      maxMemoryInMb: {
        serializedName: "maxMemoryInMb",
        type: {
          name: "Number"
        }
      },
      maxDiskSizeInMb: {
        serializedName: "maxDiskSizeInMb",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RequestsBasedTrigger: msRest.CompositeMapper = {
  serializedName: "RequestsBasedTrigger",
  type: {
    name: "Composite",
    className: "RequestsBasedTrigger",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatusCodesBasedTrigger: msRest.CompositeMapper = {
  serializedName: "StatusCodesBasedTrigger",
  type: {
    name: "Composite",
    className: "StatusCodesBasedTrigger",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Number"
        }
      },
      subStatus: {
        serializedName: "subStatus",
        type: {
          name: "Number"
        }
      },
      win32Status: {
        serializedName: "win32Status",
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlowRequestsBasedTrigger: msRest.CompositeMapper = {
  serializedName: "SlowRequestsBasedTrigger",
  type: {
    name: "Composite",
    className: "SlowRequestsBasedTrigger",
    modelProperties: {
      timeTaken: {
        serializedName: "timeTaken",
        type: {
          name: "String"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoHealTriggers: msRest.CompositeMapper = {
  serializedName: "AutoHealTriggers",
  type: {
    name: "Composite",
    className: "AutoHealTriggers",
    modelProperties: {
      requests: {
        serializedName: "requests",
        type: {
          name: "Composite",
          className: "RequestsBasedTrigger"
        }
      },
      privateBytesInKB: {
        serializedName: "privateBytesInKB",
        type: {
          name: "Number"
        }
      },
      statusCodes: {
        serializedName: "statusCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StatusCodesBasedTrigger"
            }
          }
        }
      },
      slowRequests: {
        serializedName: "slowRequests",
        type: {
          name: "Composite",
          className: "SlowRequestsBasedTrigger"
        }
      }
    }
  }
};

export const AutoHealCustomAction: msRest.CompositeMapper = {
  serializedName: "AutoHealCustomAction",
  type: {
    name: "Composite",
    className: "AutoHealCustomAction",
    modelProperties: {
      exe: {
        serializedName: "exe",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoHealActions: msRest.CompositeMapper = {
  serializedName: "AutoHealActions",
  type: {
    name: "Composite",
    className: "AutoHealActions",
    modelProperties: {
      actionType: {
        serializedName: "actionType",
        type: {
          name: "Enum",
          allowedValues: [
            "Recycle",
            "LogEvent",
            "CustomAction"
          ]
        }
      },
      customAction: {
        serializedName: "customAction",
        type: {
          name: "Composite",
          className: "AutoHealCustomAction"
        }
      },
      minProcessExecutionTime: {
        serializedName: "minProcessExecutionTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoHealRules: msRest.CompositeMapper = {
  serializedName: "AutoHealRules",
  type: {
    name: "Composite",
    className: "AutoHealRules",
    modelProperties: {
      triggers: {
        serializedName: "triggers",
        type: {
          name: "Composite",
          className: "AutoHealTriggers"
        }
      },
      actions: {
        serializedName: "actions",
        type: {
          name: "Composite",
          className: "AutoHealActions"
        }
      }
    }
  }
};

export const CorsSettings: msRest.CompositeMapper = {
  serializedName: "CorsSettings",
  type: {
    name: "Composite",
    className: "CorsSettings",
    modelProperties: {
      allowedOrigins: {
        serializedName: "allowedOrigins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PushSettings: msRest.CompositeMapper = {
  serializedName: "PushSettings",
  type: {
    name: "Composite",
    className: "PushSettings",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      isPushEnabled: {
        required: true,
        serializedName: "properties.isPushEnabled",
        type: {
          name: "Boolean"
        }
      },
      tagWhitelistJson: {
        serializedName: "properties.tagWhitelistJson",
        type: {
          name: "String"
        }
      },
      tagsRequiringAuth: {
        serializedName: "properties.tagsRequiringAuth",
        type: {
          name: "String"
        }
      },
      dynamicTagsJson: {
        serializedName: "properties.dynamicTagsJson",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiDefinitionInfo: msRest.CompositeMapper = {
  serializedName: "ApiDefinitionInfo",
  type: {
    name: "Composite",
    className: "ApiDefinitionInfo",
    modelProperties: {
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpSecurityRestriction: msRest.CompositeMapper = {
  serializedName: "IpSecurityRestriction",
  type: {
    name: "Composite",
    className: "IpSecurityRestriction",
    modelProperties: {
      ipAddress: {
        required: true,
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      subnetMask: {
        serializedName: "subnetMask",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfig: msRest.CompositeMapper = {
  serializedName: "SiteConfig",
  type: {
    name: "Composite",
    className: "SiteConfig",
    modelProperties: {
      numberOfWorkers: {
        serializedName: "numberOfWorkers",
        type: {
          name: "Number"
        }
      },
      defaultDocuments: {
        serializedName: "defaultDocuments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      netFrameworkVersion: {
        serializedName: "netFrameworkVersion",
        defaultValue: 'v4.6',
        type: {
          name: "String"
        }
      },
      phpVersion: {
        serializedName: "phpVersion",
        type: {
          name: "String"
        }
      },
      pythonVersion: {
        serializedName: "pythonVersion",
        type: {
          name: "String"
        }
      },
      nodeVersion: {
        serializedName: "nodeVersion",
        type: {
          name: "String"
        }
      },
      linuxFxVersion: {
        serializedName: "linuxFxVersion",
        type: {
          name: "String"
        }
      },
      requestTracingEnabled: {
        serializedName: "requestTracingEnabled",
        type: {
          name: "Boolean"
        }
      },
      requestTracingExpirationTime: {
        serializedName: "requestTracingExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      remoteDebuggingEnabled: {
        serializedName: "remoteDebuggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      remoteDebuggingVersion: {
        serializedName: "remoteDebuggingVersion",
        type: {
          name: "String"
        }
      },
      httpLoggingEnabled: {
        serializedName: "httpLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      logsDirectorySizeLimit: {
        serializedName: "logsDirectorySizeLimit",
        type: {
          name: "Number"
        }
      },
      detailedErrorLoggingEnabled: {
        serializedName: "detailedErrorLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      publishingUsername: {
        serializedName: "publishingUsername",
        type: {
          name: "String"
        }
      },
      appSettings: {
        serializedName: "appSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      connectionStrings: {
        serializedName: "connectionStrings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnStringInfo"
            }
          }
        }
      },
      machineKey: {
        readOnly: true,
        serializedName: "machineKey",
        type: {
          name: "Composite",
          className: "SiteMachineKey"
        }
      },
      handlerMappings: {
        serializedName: "handlerMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HandlerMapping"
            }
          }
        }
      },
      documentRoot: {
        serializedName: "documentRoot",
        type: {
          name: "String"
        }
      },
      scmType: {
        serializedName: "scmType",
        type: {
          name: "String"
        }
      },
      use32BitWorkerProcess: {
        serializedName: "use32BitWorkerProcess",
        type: {
          name: "Boolean"
        }
      },
      webSocketsEnabled: {
        serializedName: "webSocketsEnabled",
        type: {
          name: "Boolean"
        }
      },
      alwaysOn: {
        serializedName: "alwaysOn",
        type: {
          name: "Boolean"
        }
      },
      javaVersion: {
        serializedName: "javaVersion",
        type: {
          name: "String"
        }
      },
      javaContainer: {
        serializedName: "javaContainer",
        type: {
          name: "String"
        }
      },
      javaContainerVersion: {
        serializedName: "javaContainerVersion",
        type: {
          name: "String"
        }
      },
      appCommandLine: {
        serializedName: "appCommandLine",
        type: {
          name: "String"
        }
      },
      managedPipelineMode: {
        serializedName: "managedPipelineMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Integrated",
            "Classic"
          ]
        }
      },
      virtualApplications: {
        serializedName: "virtualApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualApplication"
            }
          }
        }
      },
      loadBalancing: {
        serializedName: "loadBalancing",
        type: {
          name: "Enum",
          allowedValues: [
            "WeightedRoundRobin",
            "LeastRequests",
            "LeastResponseTime",
            "WeightedTotalTraffic",
            "RequestHash"
          ]
        }
      },
      experiments: {
        serializedName: "experiments",
        type: {
          name: "Composite",
          className: "Experiments"
        }
      },
      limits: {
        serializedName: "limits",
        type: {
          name: "Composite",
          className: "SiteLimits"
        }
      },
      autoHealEnabled: {
        serializedName: "autoHealEnabled",
        type: {
          name: "Boolean"
        }
      },
      autoHealRules: {
        serializedName: "autoHealRules",
        type: {
          name: "Composite",
          className: "AutoHealRules"
        }
      },
      tracingOptions: {
        serializedName: "tracingOptions",
        type: {
          name: "String"
        }
      },
      vnetName: {
        serializedName: "vnetName",
        type: {
          name: "String"
        }
      },
      cors: {
        serializedName: "cors",
        type: {
          name: "Composite",
          className: "CorsSettings"
        }
      },
      push: {
        serializedName: "push",
        type: {
          name: "Composite",
          className: "PushSettings"
        }
      },
      apiDefinition: {
        serializedName: "apiDefinition",
        type: {
          name: "Composite",
          className: "ApiDefinitionInfo"
        }
      },
      autoSwapSlotName: {
        serializedName: "autoSwapSlotName",
        type: {
          name: "String"
        }
      },
      localMySqlEnabled: {
        serializedName: "localMySqlEnabled",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ipSecurityRestrictions: {
        serializedName: "ipSecurityRestrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      http20Enabled: {
        serializedName: "http20Enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      minTlsVersion: {
        serializedName: "minTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfigResource: msRest.CompositeMapper = {
  serializedName: "SiteConfigResource",
  type: {
    name: "Composite",
    className: "SiteConfigResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      numberOfWorkers: {
        serializedName: "properties.numberOfWorkers",
        type: {
          name: "Number"
        }
      },
      defaultDocuments: {
        serializedName: "properties.defaultDocuments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      netFrameworkVersion: {
        serializedName: "properties.netFrameworkVersion",
        defaultValue: 'v4.6',
        type: {
          name: "String"
        }
      },
      phpVersion: {
        serializedName: "properties.phpVersion",
        type: {
          name: "String"
        }
      },
      pythonVersion: {
        serializedName: "properties.pythonVersion",
        type: {
          name: "String"
        }
      },
      nodeVersion: {
        serializedName: "properties.nodeVersion",
        type: {
          name: "String"
        }
      },
      linuxFxVersion: {
        serializedName: "properties.linuxFxVersion",
        type: {
          name: "String"
        }
      },
      requestTracingEnabled: {
        serializedName: "properties.requestTracingEnabled",
        type: {
          name: "Boolean"
        }
      },
      requestTracingExpirationTime: {
        serializedName: "properties.requestTracingExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      remoteDebuggingEnabled: {
        serializedName: "properties.remoteDebuggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      remoteDebuggingVersion: {
        serializedName: "properties.remoteDebuggingVersion",
        type: {
          name: "String"
        }
      },
      httpLoggingEnabled: {
        serializedName: "properties.httpLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      logsDirectorySizeLimit: {
        serializedName: "properties.logsDirectorySizeLimit",
        type: {
          name: "Number"
        }
      },
      detailedErrorLoggingEnabled: {
        serializedName: "properties.detailedErrorLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      publishingUsername: {
        serializedName: "properties.publishingUsername",
        type: {
          name: "String"
        }
      },
      appSettings: {
        serializedName: "properties.appSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      connectionStrings: {
        serializedName: "properties.connectionStrings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnStringInfo"
            }
          }
        }
      },
      machineKey: {
        readOnly: true,
        serializedName: "properties.machineKey",
        type: {
          name: "Composite",
          className: "SiteMachineKey"
        }
      },
      handlerMappings: {
        serializedName: "properties.handlerMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HandlerMapping"
            }
          }
        }
      },
      documentRoot: {
        serializedName: "properties.documentRoot",
        type: {
          name: "String"
        }
      },
      scmType: {
        serializedName: "properties.scmType",
        type: {
          name: "String"
        }
      },
      use32BitWorkerProcess: {
        serializedName: "properties.use32BitWorkerProcess",
        type: {
          name: "Boolean"
        }
      },
      webSocketsEnabled: {
        serializedName: "properties.webSocketsEnabled",
        type: {
          name: "Boolean"
        }
      },
      alwaysOn: {
        serializedName: "properties.alwaysOn",
        type: {
          name: "Boolean"
        }
      },
      javaVersion: {
        serializedName: "properties.javaVersion",
        type: {
          name: "String"
        }
      },
      javaContainer: {
        serializedName: "properties.javaContainer",
        type: {
          name: "String"
        }
      },
      javaContainerVersion: {
        serializedName: "properties.javaContainerVersion",
        type: {
          name: "String"
        }
      },
      appCommandLine: {
        serializedName: "properties.appCommandLine",
        type: {
          name: "String"
        }
      },
      managedPipelineMode: {
        serializedName: "properties.managedPipelineMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Integrated",
            "Classic"
          ]
        }
      },
      virtualApplications: {
        serializedName: "properties.virtualApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualApplication"
            }
          }
        }
      },
      loadBalancing: {
        serializedName: "properties.loadBalancing",
        type: {
          name: "Enum",
          allowedValues: [
            "WeightedRoundRobin",
            "LeastRequests",
            "LeastResponseTime",
            "WeightedTotalTraffic",
            "RequestHash"
          ]
        }
      },
      experiments: {
        serializedName: "properties.experiments",
        type: {
          name: "Composite",
          className: "Experiments"
        }
      },
      limits: {
        serializedName: "properties.limits",
        type: {
          name: "Composite",
          className: "SiteLimits"
        }
      },
      autoHealEnabled: {
        serializedName: "properties.autoHealEnabled",
        type: {
          name: "Boolean"
        }
      },
      autoHealRules: {
        serializedName: "properties.autoHealRules",
        type: {
          name: "Composite",
          className: "AutoHealRules"
        }
      },
      tracingOptions: {
        serializedName: "properties.tracingOptions",
        type: {
          name: "String"
        }
      },
      vnetName: {
        serializedName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Composite",
          className: "CorsSettings"
        }
      },
      push: {
        serializedName: "properties.push",
        type: {
          name: "Composite",
          className: "PushSettings"
        }
      },
      apiDefinition: {
        serializedName: "properties.apiDefinition",
        type: {
          name: "Composite",
          className: "ApiDefinitionInfo"
        }
      },
      autoSwapSlotName: {
        serializedName: "properties.autoSwapSlotName",
        type: {
          name: "String"
        }
      },
      localMySqlEnabled: {
        serializedName: "properties.localMySqlEnabled",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ipSecurityRestrictions: {
        serializedName: "properties.ipSecurityRestrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      http20Enabled: {
        serializedName: "properties.http20Enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      minTlsVersion: {
        serializedName: "properties.minTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfigurationSnapshotInfo: msRest.CompositeMapper = {
  serializedName: "SiteConfigurationSnapshotInfo",
  type: {
    name: "Composite",
    className: "SiteConfigurationSnapshotInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      time: {
        readOnly: true,
        serializedName: "properties.time",
        type: {
          name: "DateTime"
        }
      },
      siteConfigurationSnapshotInfoId: {
        readOnly: true,
        serializedName: "properties.id",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SiteExtensionInfo: msRest.CompositeMapper = {
  serializedName: "SiteExtensionInfo",
  type: {
    name: "Composite",
    className: "SiteExtensionInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      siteExtensionInfoId: {
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "properties.title",
        type: {
          name: "String"
        }
      },
      siteExtensionInfoType: {
        serializedName: "properties.type",
        type: {
          name: "Enum",
          allowedValues: [
            "Gallery",
            "WebRoot"
          ]
        }
      },
      summary: {
        serializedName: "properties.summary",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      extensionUrl: {
        serializedName: "properties.extensionUrl",
        type: {
          name: "String"
        }
      },
      projectUrl: {
        serializedName: "properties.projectUrl",
        type: {
          name: "String"
        }
      },
      iconUrl: {
        serializedName: "properties.iconUrl",
        type: {
          name: "String"
        }
      },
      licenseUrl: {
        serializedName: "properties.licenseUrl",
        type: {
          name: "String"
        }
      },
      feedUrl: {
        serializedName: "properties.feedUrl",
        type: {
          name: "String"
        }
      },
      authors: {
        serializedName: "properties.authors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      installationArgs: {
        serializedName: "properties.installationArgs",
        type: {
          name: "String"
        }
      },
      publishedDateTime: {
        serializedName: "properties.publishedDateTime",
        type: {
          name: "DateTime"
        }
      },
      downloadCount: {
        serializedName: "properties.downloadCount",
        type: {
          name: "Number"
        }
      },
      localIsLatestVersion: {
        serializedName: "properties.localIsLatestVersion",
        type: {
          name: "Boolean"
        }
      },
      localPath: {
        serializedName: "properties.localPath",
        type: {
          name: "String"
        }
      },
      installedDateTime: {
        serializedName: "properties.installedDateTime",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      comment: {
        serializedName: "properties.comment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteInstance: msRest.CompositeMapper = {
  serializedName: "SiteInstance",
  type: {
    name: "Composite",
    className: "SiteInstance",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      siteInstanceName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteLogsConfig: msRest.CompositeMapper = {
  serializedName: "SiteLogsConfig",
  type: {
    name: "Composite",
    className: "SiteLogsConfig",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      applicationLogs: {
        serializedName: "properties.applicationLogs",
        type: {
          name: "Composite",
          className: "ApplicationLogsConfig"
        }
      },
      httpLogs: {
        serializedName: "properties.httpLogs",
        type: {
          name: "Composite",
          className: "HttpLogsConfig"
        }
      },
      failedRequestsTracing: {
        serializedName: "properties.failedRequestsTracing",
        type: {
          name: "Composite",
          className: "EnabledConfig"
        }
      },
      detailedErrorMessages: {
        serializedName: "properties.detailedErrorMessages",
        type: {
          name: "Composite",
          className: "EnabledConfig"
        }
      }
    }
  }
};

export const HostNameSslState: msRest.CompositeMapper = {
  serializedName: "HostNameSslState",
  type: {
    name: "Composite",
    className: "HostNameSslState",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      sslState: {
        serializedName: "sslState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "SniEnabled",
            "IpBasedEnabled"
          ]
        }
      },
      virtualIP: {
        serializedName: "virtualIP",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      toUpdate: {
        serializedName: "toUpdate",
        type: {
          name: "Boolean"
        }
      },
      hostType: {
        serializedName: "hostType",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard",
            "Repository"
          ]
        }
      }
    }
  }
};

export const HostingEnvironmentProfile: msRest.CompositeMapper = {
  serializedName: "HostingEnvironmentProfile",
  type: {
    name: "Composite",
    className: "HostingEnvironmentProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloningInfo: msRest.CompositeMapper = {
  serializedName: "CloningInfo",
  type: {
    name: "Composite",
    className: "CloningInfo",
    modelProperties: {
      correlationId: {
        serializedName: "correlationId",
        type: {
          name: "Uuid"
        }
      },
      overwrite: {
        serializedName: "overwrite",
        type: {
          name: "Boolean"
        }
      },
      cloneCustomHostNames: {
        serializedName: "cloneCustomHostNames",
        type: {
          name: "Boolean"
        }
      },
      cloneSourceControl: {
        serializedName: "cloneSourceControl",
        type: {
          name: "Boolean"
        }
      },
      sourceWebAppId: {
        required: true,
        serializedName: "sourceWebAppId",
        type: {
          name: "String"
        }
      },
      hostingEnvironment: {
        serializedName: "hostingEnvironment",
        type: {
          name: "String"
        }
      },
      appSettingsOverrides: {
        serializedName: "appSettingsOverrides",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      configureLoadBalancing: {
        serializedName: "configureLoadBalancing",
        type: {
          name: "Boolean"
        }
      },
      trafficManagerProfileId: {
        serializedName: "trafficManagerProfileId",
        type: {
          name: "String"
        }
      },
      trafficManagerProfileName: {
        serializedName: "trafficManagerProfileName",
        type: {
          name: "String"
        }
      },
      ignoreQuotas: {
        serializedName: "ignoreQuotas",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SnapshotRecoveryTarget: msRest.CompositeMapper = {
  serializedName: "SnapshotRecoveryTarget",
  type: {
    name: "Composite",
    className: "SnapshotRecoveryTarget",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotRecoveryRequest: msRest.CompositeMapper = {
  serializedName: "SnapshotRecoveryRequest",
  type: {
    name: "Composite",
    className: "SnapshotRecoveryRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      snapshotTime: {
        serializedName: "properties.snapshotTime",
        type: {
          name: "String"
        }
      },
      recoveryTarget: {
        serializedName: "properties.recoveryTarget",
        type: {
          name: "Composite",
          className: "SnapshotRecoveryTarget"
        }
      },
      overwrite: {
        required: true,
        serializedName: "properties.overwrite",
        type: {
          name: "Boolean"
        }
      },
      recoverConfiguration: {
        serializedName: "properties.recoverConfiguration",
        type: {
          name: "Boolean"
        }
      },
      ignoreConflictingHostNames: {
        serializedName: "properties.ignoreConflictingHostNames",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SlotSwapStatus: msRest.CompositeMapper = {
  serializedName: "SlotSwapStatus",
  type: {
    name: "Composite",
    className: "SlotSwapStatus",
    modelProperties: {
      timestampUtc: {
        readOnly: true,
        serializedName: "timestampUtc",
        type: {
          name: "DateTime"
        }
      },
      sourceSlotName: {
        readOnly: true,
        serializedName: "sourceSlotName",
        type: {
          name: "String"
        }
      },
      destinationSlotName: {
        readOnly: true,
        serializedName: "destinationSlotName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SitePatchResource: msRest.CompositeMapper = {
  serializedName: "SitePatchResource",
  type: {
    name: "Composite",
    className: "SitePatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      hostNames: {
        readOnly: true,
        serializedName: "properties.hostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      repositorySiteName: {
        readOnly: true,
        serializedName: "properties.repositorySiteName",
        type: {
          name: "String"
        }
      },
      usageState: {
        readOnly: true,
        serializedName: "properties.usageState",
        type: {
          name: "Enum",
          allowedValues: [
            "Normal",
            "Exceeded"
          ]
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      enabledHostNames: {
        readOnly: true,
        serializedName: "properties.enabledHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      availabilityState: {
        readOnly: true,
        serializedName: "properties.availabilityState",
        type: {
          name: "Enum",
          allowedValues: [
            "Normal",
            "Limited",
            "DisasterRecoveryMode"
          ]
        }
      },
      hostNameSslStates: {
        serializedName: "properties.hostNameSslStates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostNameSslState"
            }
          }
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      reserved: {
        serializedName: "properties.reserved",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      lastModifiedTimeUtc: {
        readOnly: true,
        serializedName: "properties.lastModifiedTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      siteConfig: {
        serializedName: "properties.siteConfig",
        type: {
          name: "Composite",
          className: "SiteConfig"
        }
      },
      trafficManagerHostNames: {
        readOnly: true,
        serializedName: "properties.trafficManagerHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      scmSiteAlsoStopped: {
        serializedName: "properties.scmSiteAlsoStopped",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      targetSwapSlot: {
        readOnly: true,
        serializedName: "properties.targetSwapSlot",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      clientAffinityEnabled: {
        serializedName: "properties.clientAffinityEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertEnabled: {
        serializedName: "properties.clientCertEnabled",
        type: {
          name: "Boolean"
        }
      },
      hostNamesDisabled: {
        serializedName: "properties.hostNamesDisabled",
        type: {
          name: "Boolean"
        }
      },
      outboundIpAddresses: {
        readOnly: true,
        serializedName: "properties.outboundIpAddresses",
        type: {
          name: "String"
        }
      },
      possibleOutboundIpAddresses: {
        readOnly: true,
        serializedName: "properties.possibleOutboundIpAddresses",
        type: {
          name: "String"
        }
      },
      containerSize: {
        serializedName: "properties.containerSize",
        type: {
          name: "Number"
        }
      },
      dailyMemoryTimeQuota: {
        serializedName: "properties.dailyMemoryTimeQuota",
        type: {
          name: "Number"
        }
      },
      suspendedTill: {
        readOnly: true,
        serializedName: "properties.suspendedTill",
        type: {
          name: "DateTime"
        }
      },
      maxNumberOfWorkers: {
        readOnly: true,
        serializedName: "properties.maxNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      cloningInfo: {
        serializedName: "properties.cloningInfo",
        type: {
          name: "Composite",
          className: "CloningInfo"
        }
      },
      snapshotInfo: {
        serializedName: "properties.snapshotInfo",
        type: {
          name: "Composite",
          className: "SnapshotRecoveryRequest"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      isDefaultContainer: {
        readOnly: true,
        serializedName: "properties.isDefaultContainer",
        type: {
          name: "Boolean"
        }
      },
      defaultHostName: {
        readOnly: true,
        serializedName: "properties.defaultHostName",
        type: {
          name: "String"
        }
      },
      slotSwapStatus: {
        readOnly: true,
        serializedName: "properties.slotSwapStatus",
        type: {
          name: "Composite",
          className: "SlotSwapStatus"
        }
      },
      httpsOnly: {
        serializedName: "properties.httpsOnly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SitePhpErrorLogFlag: msRest.CompositeMapper = {
  serializedName: "SitePhpErrorLogFlag",
  type: {
    name: "Composite",
    className: "SitePhpErrorLogFlag",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      localLogErrors: {
        serializedName: "properties.localLogErrors",
        type: {
          name: "String"
        }
      },
      masterLogErrors: {
        serializedName: "properties.masterLogErrors",
        type: {
          name: "String"
        }
      },
      localLogErrorsMaxLength: {
        serializedName: "properties.localLogErrorsMaxLength",
        type: {
          name: "String"
        }
      },
      masterLogErrorsMaxLength: {
        serializedName: "properties.masterLogErrorsMaxLength",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteSourceControl: msRest.CompositeMapper = {
  serializedName: "SiteSourceControl",
  type: {
    name: "Composite",
    className: "SiteSourceControl",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      repoUrl: {
        serializedName: "properties.repoUrl",
        type: {
          name: "String"
        }
      },
      branch: {
        serializedName: "properties.branch",
        type: {
          name: "String"
        }
      },
      isManualIntegration: {
        serializedName: "properties.isManualIntegration",
        type: {
          name: "Boolean"
        }
      },
      deploymentRollbackEnabled: {
        serializedName: "properties.deploymentRollbackEnabled",
        type: {
          name: "Boolean"
        }
      },
      isMercurial: {
        serializedName: "properties.isMercurial",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SlotConfigNamesResource: msRest.CompositeMapper = {
  serializedName: "SlotConfigNamesResource",
  type: {
    name: "Composite",
    className: "SlotConfigNamesResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      connectionStringNames: {
        serializedName: "properties.connectionStringNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      appSettingNames: {
        serializedName: "properties.appSettingNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SlotDifference: msRest.CompositeMapper = {
  serializedName: "SlotDifference",
  type: {
    name: "Composite",
    className: "SlotDifference",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      slotDifferenceType: {
        readOnly: true,
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      settingType: {
        readOnly: true,
        serializedName: "properties.settingType",
        type: {
          name: "String"
        }
      },
      diffRule: {
        readOnly: true,
        serializedName: "properties.diffRule",
        type: {
          name: "String"
        }
      },
      settingName: {
        readOnly: true,
        serializedName: "properties.settingName",
        type: {
          name: "String"
        }
      },
      valueInCurrentSlot: {
        readOnly: true,
        serializedName: "properties.valueInCurrentSlot",
        type: {
          name: "String"
        }
      },
      valueInTargetSlot: {
        readOnly: true,
        serializedName: "properties.valueInTargetSlot",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Snapshot: msRest.CompositeMapper = {
  serializedName: "Snapshot",
  type: {
    name: "Composite",
    className: "Snapshot",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      time: {
        readOnly: true,
        serializedName: "properties.time",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageMigrationOptions: msRest.CompositeMapper = {
  serializedName: "StorageMigrationOptions",
  type: {
    name: "Composite",
    className: "StorageMigrationOptions",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      azurefilesConnectionString: {
        required: true,
        serializedName: "properties.azurefilesConnectionString",
        type: {
          name: "String"
        }
      },
      azurefilesShare: {
        required: true,
        serializedName: "properties.azurefilesShare",
        type: {
          name: "String"
        }
      },
      switchSiteAfterMigration: {
        serializedName: "properties.switchSiteAfterMigration",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      blockWriteAccessToSite: {
        serializedName: "properties.blockWriteAccessToSite",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StorageMigrationResponse: msRest.CompositeMapper = {
  serializedName: "StorageMigrationResponse",
  type: {
    name: "Composite",
    className: "StorageMigrationResponse",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      operationId: {
        readOnly: true,
        serializedName: "properties.operationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StringDictionary: msRest.CompositeMapper = {
  serializedName: "StringDictionary",
  type: {
    name: "Composite",
    className: "StringDictionary",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TriggeredJobRun: msRest.CompositeMapper = {
  serializedName: "TriggeredJobRun",
  type: {
    name: "Composite",
    className: "TriggeredJobRun",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      triggeredJobRunId: {
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      triggeredJobRunName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Success",
            "Failed",
            "Error"
          ]
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      duration: {
        serializedName: "properties.duration",
        type: {
          name: "String"
        }
      },
      outputUrl: {
        serializedName: "properties.outputUrl",
        type: {
          name: "String"
        }
      },
      errorUrl: {
        serializedName: "properties.errorUrl",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      },
      jobName: {
        serializedName: "properties.jobName",
        type: {
          name: "String"
        }
      },
      trigger: {
        serializedName: "properties.trigger",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggeredJobHistory: msRest.CompositeMapper = {
  serializedName: "TriggeredJobHistory",
  type: {
    name: "Composite",
    className: "TriggeredJobHistory",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      triggeredJobRuns: {
        serializedName: "properties.triggeredJobRuns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TriggeredJobRun"
            }
          }
        }
      }
    }
  }
};

export const TriggeredWebJob: msRest.CompositeMapper = {
  serializedName: "TriggeredWebJob",
  type: {
    name: "Composite",
    className: "TriggeredWebJob",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      latestRun: {
        serializedName: "properties.latestRun",
        type: {
          name: "Composite",
          className: "TriggeredJobRun"
        }
      },
      historyUrl: {
        serializedName: "properties.historyUrl",
        type: {
          name: "String"
        }
      },
      schedulerLogsUrl: {
        serializedName: "properties.schedulerLogsUrl",
        type: {
          name: "String"
        }
      },
      triggeredWebJobName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      runCommand: {
        serializedName: "properties.runCommand",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      },
      extraInfoUrl: {
        serializedName: "properties.extraInfoUrl",
        type: {
          name: "String"
        }
      },
      jobType: {
        serializedName: "properties.jobType",
        type: {
          name: "Enum",
          allowedValues: [
            "Continuous",
            "Triggered"
          ]
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "String"
        }
      },
      usingSdk: {
        serializedName: "properties.usingSdk",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const WebJob: msRest.CompositeMapper = {
  serializedName: "WebJob",
  type: {
    name: "Composite",
    className: "WebJob",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      webJobName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      runCommand: {
        serializedName: "properties.runCommand",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      },
      extraInfoUrl: {
        serializedName: "properties.extraInfoUrl",
        type: {
          name: "String"
        }
      },
      jobType: {
        serializedName: "properties.jobType",
        type: {
          name: "Enum",
          allowedValues: [
            "Continuous",
            "Triggered"
          ]
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "String"
        }
      },
      usingSdk: {
        serializedName: "properties.usingSdk",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const VnetGateway: msRest.CompositeMapper = {
  serializedName: "VnetGateway",
  type: {
    name: "Composite",
    className: "VnetGateway",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetName: {
        serializedName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      vpnPackageUri: {
        required: true,
        serializedName: "properties.vpnPackageUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const User: msRest.CompositeMapper = {
  serializedName: "User",
  type: {
    name: "Composite",
    className: "User",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      userName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      publishingUserName: {
        required: true,
        serializedName: "properties.publishingUserName",
        type: {
          name: "String"
        }
      },
      publishingPassword: {
        serializedName: "properties.publishingPassword",
        type: {
          name: "String"
        }
      },
      publishingPasswordHash: {
        serializedName: "properties.publishingPasswordHash",
        type: {
          name: "String"
        }
      },
      publishingPasswordHashSalt: {
        serializedName: "properties.publishingPasswordHashSalt",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricAvailability: msRest.CompositeMapper = {
  serializedName: "ResourceMetricAvailability",
  type: {
    name: "Composite",
    className: "ResourceMetricAvailability",
    modelProperties: {
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      retention: {
        readOnly: true,
        serializedName: "retention",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricName: msRest.CompositeMapper = {
  serializedName: "ResourceMetricName",
  type: {
    name: "Composite",
    className: "ResourceMetricName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricDefinition: msRest.CompositeMapper = {
  serializedName: "ResourceMetricDefinition",
  type: {
    name: "Composite",
    className: "ResourceMetricDefinition",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      resourceMetricDefinitionName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "Composite",
          className: "ResourceMetricName"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      },
      primaryAggregationType: {
        readOnly: true,
        serializedName: "properties.primaryAggregationType",
        type: {
          name: "String"
        }
      },
      metricAvailabilities: {
        readOnly: true,
        serializedName: "properties.metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricAvailability"
            }
          }
        }
      },
      resourceUri: {
        readOnly: true,
        serializedName: "properties.resourceUri",
        type: {
          name: "String"
        }
      },
      resourceMetricDefinitionId: {
        readOnly: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties.properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Identifier: msRest.CompositeMapper = {
  serializedName: "Identifier",
  type: {
    name: "Composite",
    className: "Identifier",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      identifierId: {
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnectionKey: msRest.CompositeMapper = {
  serializedName: "HybridConnectionKey",
  type: {
    name: "Composite",
    className: "HybridConnectionKey",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      sendKeyName: {
        readOnly: true,
        serializedName: "properties.sendKeyName",
        type: {
          name: "String"
        }
      },
      sendKeyValue: {
        readOnly: true,
        serializedName: "properties.sendKeyValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedServiceIdentity",
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Site: msRest.CompositeMapper = {
  serializedName: "Site",
  type: {
    name: "Composite",
    className: "Site",
    modelProperties: {
      ...Resource.type.modelProperties,
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      hostNames: {
        readOnly: true,
        serializedName: "properties.hostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      repositorySiteName: {
        readOnly: true,
        serializedName: "properties.repositorySiteName",
        type: {
          name: "String"
        }
      },
      usageState: {
        readOnly: true,
        serializedName: "properties.usageState",
        type: {
          name: "Enum",
          allowedValues: [
            "Normal",
            "Exceeded"
          ]
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      enabledHostNames: {
        readOnly: true,
        serializedName: "properties.enabledHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      availabilityState: {
        readOnly: true,
        serializedName: "properties.availabilityState",
        type: {
          name: "Enum",
          allowedValues: [
            "Normal",
            "Limited",
            "DisasterRecoveryMode"
          ]
        }
      },
      hostNameSslStates: {
        serializedName: "properties.hostNameSslStates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostNameSslState"
            }
          }
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      reserved: {
        serializedName: "properties.reserved",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      lastModifiedTimeUtc: {
        readOnly: true,
        serializedName: "properties.lastModifiedTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      siteConfig: {
        serializedName: "properties.siteConfig",
        type: {
          name: "Composite",
          className: "SiteConfig"
        }
      },
      trafficManagerHostNames: {
        readOnly: true,
        serializedName: "properties.trafficManagerHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      scmSiteAlsoStopped: {
        serializedName: "properties.scmSiteAlsoStopped",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      targetSwapSlot: {
        readOnly: true,
        serializedName: "properties.targetSwapSlot",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      clientAffinityEnabled: {
        serializedName: "properties.clientAffinityEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertEnabled: {
        serializedName: "properties.clientCertEnabled",
        type: {
          name: "Boolean"
        }
      },
      hostNamesDisabled: {
        serializedName: "properties.hostNamesDisabled",
        type: {
          name: "Boolean"
        }
      },
      outboundIpAddresses: {
        readOnly: true,
        serializedName: "properties.outboundIpAddresses",
        type: {
          name: "String"
        }
      },
      possibleOutboundIpAddresses: {
        readOnly: true,
        serializedName: "properties.possibleOutboundIpAddresses",
        type: {
          name: "String"
        }
      },
      containerSize: {
        serializedName: "properties.containerSize",
        type: {
          name: "Number"
        }
      },
      dailyMemoryTimeQuota: {
        serializedName: "properties.dailyMemoryTimeQuota",
        type: {
          name: "Number"
        }
      },
      suspendedTill: {
        readOnly: true,
        serializedName: "properties.suspendedTill",
        type: {
          name: "DateTime"
        }
      },
      maxNumberOfWorkers: {
        readOnly: true,
        serializedName: "properties.maxNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      cloningInfo: {
        serializedName: "properties.cloningInfo",
        type: {
          name: "Composite",
          className: "CloningInfo"
        }
      },
      snapshotInfo: {
        serializedName: "properties.snapshotInfo",
        type: {
          name: "Composite",
          className: "SnapshotRecoveryRequest"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      isDefaultContainer: {
        readOnly: true,
        serializedName: "properties.isDefaultContainer",
        type: {
          name: "Boolean"
        }
      },
      defaultHostName: {
        readOnly: true,
        serializedName: "properties.defaultHostName",
        type: {
          name: "String"
        }
      },
      slotSwapStatus: {
        readOnly: true,
        serializedName: "properties.slotSwapStatus",
        type: {
          name: "Composite",
          className: "SlotSwapStatus"
        }
      },
      httpsOnly: {
        serializedName: "properties.httpsOnly",
        type: {
          name: "Boolean"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const Capability: msRest.CompositeMapper = {
  serializedName: "Capability",
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCapacity: msRest.CompositeMapper = {
  serializedName: "SkuCapacity",
  type: {
    name: "Composite",
    className: "SkuCapacity",
    modelProperties: {
      minimum: {
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "Number"
        }
      },
      scaleType: {
        serializedName: "scaleType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuDescription: msRest.CompositeMapper = {
  serializedName: "SkuDescription",
  type: {
    name: "Composite",
    className: "SkuDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      },
      skuCapacity: {
        serializedName: "skuCapacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      }
    }
  }
};

export const AppServicePlan: msRest.CompositeMapper = {
  serializedName: "AppServicePlan",
  type: {
    name: "Composite",
    className: "AppServicePlan",
    modelProperties: {
      ...Resource.type.modelProperties,
      appServicePlanName: {
        required: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      workerTierName: {
        serializedName: "properties.workerTierName",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Ready",
            "Pending",
            "Creating"
          ]
        }
      },
      subscription: {
        readOnly: true,
        serializedName: "properties.subscription",
        type: {
          name: "String"
        }
      },
      adminSiteName: {
        serializedName: "properties.adminSiteName",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      maximumNumberOfWorkers: {
        readOnly: true,
        serializedName: "properties.maximumNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      geoRegion: {
        readOnly: true,
        serializedName: "properties.geoRegion",
        type: {
          name: "String"
        }
      },
      perSiteScaling: {
        serializedName: "properties.perSiteScaling",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      numberOfSites: {
        readOnly: true,
        serializedName: "properties.numberOfSites",
        type: {
          name: "Number"
        }
      },
      isSpot: {
        serializedName: "properties.isSpot",
        type: {
          name: "Boolean"
        }
      },
      spotExpirationTime: {
        serializedName: "properties.spotExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      reserved: {
        serializedName: "properties.reserved",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      targetWorkerCount: {
        serializedName: "properties.targetWorkerCount",
        type: {
          name: "Number"
        }
      },
      targetWorkerSizeId: {
        serializedName: "properties.targetWorkerSizeId",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SkuDescription"
        }
      }
    }
  }
};

export const LocalizableString: msRest.CompositeMapper = {
  serializedName: "LocalizableString",
  type: {
    name: "Composite",
    className: "LocalizableString",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmUsageQuota: msRest.CompositeMapper = {
  serializedName: "CsmUsageQuota",
  type: {
    name: "Composite",
    className: "CsmUsageQuota",
    modelProperties: {
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      }
    }
  }
};

export const ResourceMetricProperty: msRest.CompositeMapper = {
  serializedName: "ResourceMetricProperty",
  type: {
    name: "Composite",
    className: "ResourceMetricProperty",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricValue: msRest.CompositeMapper = {
  serializedName: "ResourceMetricValue",
  type: {
    name: "Composite",
    className: "ResourceMetricValue",
    modelProperties: {
      timestamp: {
        readOnly: true,
        serializedName: "timestamp",
        type: {
          name: "String"
        }
      },
      average: {
        readOnly: true,
        serializedName: "average",
        type: {
          name: "Number"
        }
      },
      minimum: {
        readOnly: true,
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      total: {
        readOnly: true,
        serializedName: "total",
        type: {
          name: "Number"
        }
      },
      count: {
        readOnly: true,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricProperty"
            }
          }
        }
      }
    }
  }
};

export const ResourceMetric: msRest.CompositeMapper = {
  serializedName: "ResourceMetric",
  type: {
    name: "Composite",
    className: "ResourceMetric",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "ResourceMetricName"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      resourceId: {
        readOnly: true,
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      metricValues: {
        readOnly: true,
        serializedName: "metricValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricValue"
            }
          }
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricProperty"
            }
          }
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "InProgress",
            "Failed",
            "Succeeded",
            "TimedOut",
            "Created"
          ]
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorEntity"
            }
          }
        }
      },
      createdTime: {
        serializedName: "createdTime",
        type: {
          name: "DateTime"
        }
      },
      modifiedTime: {
        serializedName: "modifiedTime",
        type: {
          name: "DateTime"
        }
      },
      expirationTime: {
        serializedName: "expirationTime",
        type: {
          name: "DateTime"
        }
      },
      geoMasterOperationId: {
        serializedName: "geoMasterOperationId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const WebAppCollection: msRest.CompositeMapper = {
  serializedName: "WebAppCollection",
  type: {
    name: "Composite",
    className: "WebAppCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Site"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupItemCollection: msRest.CompositeMapper = {
  serializedName: "BackupItemCollection",
  type: {
    name: "Composite",
    className: "BackupItemCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupItem"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfigResourceCollection: msRest.CompositeMapper = {
  serializedName: "SiteConfigResourceCollection",
  type: {
    name: "Composite",
    className: "SiteConfigResourceCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteConfigResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfigurationSnapshotInfoCollection: msRest.CompositeMapper = {
  serializedName: "SiteConfigurationSnapshotInfoCollection",
  type: {
    name: "Composite",
    className: "SiteConfigurationSnapshotInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteConfigurationSnapshotInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContinuousWebJobCollection: msRest.CompositeMapper = {
  serializedName: "ContinuousWebJobCollection",
  type: {
    name: "Composite",
    className: "ContinuousWebJobCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContinuousWebJob"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentCollection: msRest.CompositeMapper = {
  serializedName: "DeploymentCollection",
  type: {
    name: "Composite",
    className: "DeploymentCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Deployment"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentifierCollection: msRest.CompositeMapper = {
  serializedName: "IdentifierCollection",
  type: {
    name: "Composite",
    className: "IdentifierCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Identifier"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionEnvelopeCollection: msRest.CompositeMapper = {
  serializedName: "FunctionEnvelopeCollection",
  type: {
    name: "Composite",
    className: "FunctionEnvelopeCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FunctionEnvelope"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostNameBindingCollection: msRest.CompositeMapper = {
  serializedName: "HostNameBindingCollection",
  type: {
    name: "Composite",
    className: "HostNameBindingCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostNameBinding"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebAppInstanceCollection: msRest.CompositeMapper = {
  serializedName: "WebAppInstanceCollection",
  type: {
    name: "Composite",
    className: "WebAppInstanceCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteInstance"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessInfoCollection: msRest.CompositeMapper = {
  serializedName: "ProcessInfoCollection",
  type: {
    name: "Composite",
    className: "ProcessInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessModuleInfoCollection: msRest.CompositeMapper = {
  serializedName: "ProcessModuleInfoCollection",
  type: {
    name: "Composite",
    className: "ProcessModuleInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessModuleInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessThreadInfoCollection: msRest.CompositeMapper = {
  serializedName: "ProcessThreadInfoCollection",
  type: {
    name: "Composite",
    className: "ProcessThreadInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessThreadInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricDefinitionCollection: msRest.CompositeMapper = {
  serializedName: "ResourceMetricDefinitionCollection",
  type: {
    name: "Composite",
    className: "ResourceMetricDefinitionCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricDefinition"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricCollection: msRest.CompositeMapper = {
  serializedName: "ResourceMetricCollection",
  type: {
    name: "Composite",
    className: "ResourceMetricCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetric"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PerfMonCounterCollection: msRest.CompositeMapper = {
  serializedName: "PerfMonCounterCollection",
  type: {
    name: "Composite",
    className: "PerfMonCounterCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerfMonResponse"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicCertificateCollection: msRest.CompositeMapper = {
  serializedName: "PublicCertificateCollection",
  type: {
    name: "Composite",
    className: "PublicCertificateCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PublicCertificate"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteExtensionInfoCollection: msRest.CompositeMapper = {
  serializedName: "SiteExtensionInfoCollection",
  type: {
    name: "Composite",
    className: "SiteExtensionInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteExtensionInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlotDifferenceCollection: msRest.CompositeMapper = {
  serializedName: "SlotDifferenceCollection",
  type: {
    name: "Composite",
    className: "SlotDifferenceCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SlotDifference"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotCollection: msRest.CompositeMapper = {
  serializedName: "SnapshotCollection",
  type: {
    name: "Composite",
    className: "SnapshotCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Snapshot"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggeredWebJobCollection: msRest.CompositeMapper = {
  serializedName: "TriggeredWebJobCollection",
  type: {
    name: "Composite",
    className: "TriggeredWebJobCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TriggeredWebJob"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggeredJobHistoryCollection: msRest.CompositeMapper = {
  serializedName: "TriggeredJobHistoryCollection",
  type: {
    name: "Composite",
    className: "TriggeredJobHistoryCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TriggeredJobHistory"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmUsageQuotaCollection: msRest.CompositeMapper = {
  serializedName: "CsmUsageQuotaCollection",
  type: {
    name: "Composite",
    className: "CsmUsageQuotaCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CsmUsageQuota"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebJobCollection: msRest.CompositeMapper = {
  serializedName: "WebJobCollection",
  type: {
    name: "Composite",
    className: "WebJobCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebJob"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
