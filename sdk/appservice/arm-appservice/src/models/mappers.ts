/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const VirtualIPMapping: msRest.CompositeMapper = {
  serializedName: "VirtualIPMapping",
  type: {
    name: "Composite",
    className: "VirtualIPMapping",
    modelProperties: {
      virtualIP: {
        serializedName: "virtualIP",
        type: {
          name: "String"
        }
      },
      internalHttpPort: {
        serializedName: "internalHttpPort",
        type: {
          name: "Number"
        }
      },
      internalHttpsPort: {
        serializedName: "internalHttpsPort",
        type: {
          name: "Number"
        }
      },
      inUse: {
        serializedName: "inUse",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AddressResponse: msRest.CompositeMapper = {
  serializedName: "AddressResponse",
  type: {
    name: "Composite",
    className: "AddressResponse",
    modelProperties: {
      serviceIpAddress: {
        serializedName: "serviceIpAddress",
        type: {
          name: "String"
        }
      },
      internalIpAddress: {
        serializedName: "internalIpAddress",
        type: {
          name: "String"
        }
      },
      outboundIpAddresses: {
        serializedName: "outboundIpAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vipMappings: {
        serializedName: "vipMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualIPMapping"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetworkProfile: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkProfile",
  type: {
    name: "Composite",
    className: "VirtualNetworkProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkerPool: msRest.CompositeMapper = {
  serializedName: "WorkerPool",
  type: {
    name: "Composite",
    className: "WorkerPool",
    modelProperties: {
      workerSizeId: {
        serializedName: "workerSizeId",
        type: {
          name: "Number"
        }
      },
      computeMode: {
        serializedName: "computeMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Shared",
            "Dedicated",
            "Dynamic"
          ]
        }
      },
      workerSize: {
        serializedName: "workerSize",
        type: {
          name: "String"
        }
      },
      workerCount: {
        serializedName: "workerCount",
        type: {
          name: "Number"
        }
      },
      instanceNames: {
        readOnly: true,
        serializedName: "instanceNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StampCapacity: msRest.CompositeMapper = {
  serializedName: "StampCapacity",
  type: {
    name: "Composite",
    className: "StampCapacity",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      availableCapacity: {
        serializedName: "availableCapacity",
        type: {
          name: "Number"
        }
      },
      totalCapacity: {
        serializedName: "totalCapacity",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      computeMode: {
        serializedName: "computeMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Shared",
            "Dedicated",
            "Dynamic"
          ]
        }
      },
      workerSize: {
        serializedName: "workerSize",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Small",
            "Medium",
            "Large",
            "D1",
            "D2",
            "D3"
          ]
        }
      },
      workerSizeId: {
        serializedName: "workerSizeId",
        type: {
          name: "Number"
        }
      },
      excludeFromCapacityAllocation: {
        serializedName: "excludeFromCapacityAllocation",
        type: {
          name: "Boolean"
        }
      },
      isApplicableForAllComputeModes: {
        serializedName: "isApplicableForAllComputeModes",
        type: {
          name: "Boolean"
        }
      },
      siteMode: {
        serializedName: "siteMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkAccessControlEntry: msRest.CompositeMapper = {
  serializedName: "NetworkAccessControlEntry",
  type: {
    name: "Composite",
    className: "NetworkAccessControlEntry",
    modelProperties: {
      action: {
        serializedName: "action",
        type: {
          name: "Enum",
          allowedValues: [
            "Permit",
            "Deny"
          ]
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "Number"
        }
      },
      remoteSubnet: {
        serializedName: "remoteSubnet",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameValuePair: msRest.CompositeMapper = {
  serializedName: "NameValuePair",
  type: {
    name: "Composite",
    className: "NameValuePair",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AppServiceEnvironmentResource: msRest.CompositeMapper = {
  serializedName: "AppServiceEnvironmentResource",
  type: {
    name: "Composite",
    className: "AppServiceEnvironmentResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      appServiceEnvironmentResourceName: {
        required: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      appServiceEnvironmentResourceLocation: {
        required: true,
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Preparing",
            "Ready",
            "Scaling",
            "Deleting"
          ]
        }
      },
      vnetName: {
        serializedName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      vnetResourceGroupName: {
        serializedName: "properties.vnetResourceGroupName",
        type: {
          name: "String"
        }
      },
      vnetSubnetName: {
        serializedName: "properties.vnetSubnetName",
        type: {
          name: "String"
        }
      },
      virtualNetwork: {
        required: true,
        serializedName: "properties.virtualNetwork",
        type: {
          name: "Composite",
          className: "VirtualNetworkProfile"
        }
      },
      internalLoadBalancingMode: {
        serializedName: "properties.internalLoadBalancingMode",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Web",
            "Publishing"
          ]
        }
      },
      multiSize: {
        serializedName: "properties.multiSize",
        type: {
          name: "String"
        }
      },
      multiRoleCount: {
        serializedName: "properties.multiRoleCount",
        type: {
          name: "Number"
        }
      },
      workerPools: {
        required: true,
        serializedName: "properties.workerPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerPool"
            }
          }
        }
      },
      ipsslAddressCount: {
        serializedName: "properties.ipsslAddressCount",
        type: {
          name: "Number"
        }
      },
      databaseEdition: {
        readOnly: true,
        serializedName: "properties.databaseEdition",
        type: {
          name: "String"
        }
      },
      databaseServiceObjective: {
        readOnly: true,
        serializedName: "properties.databaseServiceObjective",
        type: {
          name: "String"
        }
      },
      upgradeDomains: {
        readOnly: true,
        serializedName: "properties.upgradeDomains",
        type: {
          name: "Number"
        }
      },
      subscriptionId: {
        readOnly: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      },
      dnsSuffix: {
        serializedName: "properties.dnsSuffix",
        type: {
          name: "String"
        }
      },
      lastAction: {
        readOnly: true,
        serializedName: "properties.lastAction",
        type: {
          name: "String"
        }
      },
      lastActionResult: {
        readOnly: true,
        serializedName: "properties.lastActionResult",
        type: {
          name: "String"
        }
      },
      allowedMultiSizes: {
        readOnly: true,
        serializedName: "properties.allowedMultiSizes",
        type: {
          name: "String"
        }
      },
      allowedWorkerSizes: {
        readOnly: true,
        serializedName: "properties.allowedWorkerSizes",
        type: {
          name: "String"
        }
      },
      maximumNumberOfMachines: {
        readOnly: true,
        serializedName: "properties.maximumNumberOfMachines",
        type: {
          name: "Number"
        }
      },
      vipMappings: {
        readOnly: true,
        serializedName: "properties.vipMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualIPMapping"
            }
          }
        }
      },
      environmentCapacities: {
        readOnly: true,
        serializedName: "properties.environmentCapacities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StampCapacity"
            }
          }
        }
      },
      networkAccessControlList: {
        serializedName: "properties.networkAccessControlList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkAccessControlEntry"
            }
          }
        }
      },
      environmentIsHealthy: {
        readOnly: true,
        serializedName: "properties.environmentIsHealthy",
        type: {
          name: "Boolean"
        }
      },
      environmentStatus: {
        readOnly: true,
        serializedName: "properties.environmentStatus",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      frontEndScaleFactor: {
        serializedName: "properties.frontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      defaultFrontEndScaleFactor: {
        readOnly: true,
        serializedName: "properties.defaultFrontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      apiManagementAccountId: {
        serializedName: "properties.apiManagementAccountId",
        type: {
          name: "String"
        }
      },
      suspended: {
        serializedName: "properties.suspended",
        type: {
          name: "Boolean"
        }
      },
      dynamicCacheEnabled: {
        serializedName: "properties.dynamicCacheEnabled",
        type: {
          name: "Boolean"
        }
      },
      clusterSettings: {
        serializedName: "properties.clusterSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      userWhitelistedIpRanges: {
        serializedName: "properties.userWhitelistedIpRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ProxyOnlyResource: msRest.CompositeMapper = {
  serializedName: "ProxyOnlyResource",
  type: {
    name: "Composite",
    className: "ProxyOnlyResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServiceEnvironmentPatchResource: msRest.CompositeMapper = {
  serializedName: "AppServiceEnvironmentPatchResource",
  type: {
    name: "Composite",
    className: "AppServiceEnvironmentPatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      appServiceEnvironmentPatchResourceName: {
        required: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Preparing",
            "Ready",
            "Scaling",
            "Deleting"
          ]
        }
      },
      vnetName: {
        serializedName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      vnetResourceGroupName: {
        serializedName: "properties.vnetResourceGroupName",
        type: {
          name: "String"
        }
      },
      vnetSubnetName: {
        serializedName: "properties.vnetSubnetName",
        type: {
          name: "String"
        }
      },
      virtualNetwork: {
        required: true,
        serializedName: "properties.virtualNetwork",
        type: {
          name: "Composite",
          className: "VirtualNetworkProfile"
        }
      },
      internalLoadBalancingMode: {
        serializedName: "properties.internalLoadBalancingMode",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Web",
            "Publishing"
          ]
        }
      },
      multiSize: {
        serializedName: "properties.multiSize",
        type: {
          name: "String"
        }
      },
      multiRoleCount: {
        serializedName: "properties.multiRoleCount",
        type: {
          name: "Number"
        }
      },
      workerPools: {
        required: true,
        serializedName: "properties.workerPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerPool"
            }
          }
        }
      },
      ipsslAddressCount: {
        serializedName: "properties.ipsslAddressCount",
        type: {
          name: "Number"
        }
      },
      databaseEdition: {
        readOnly: true,
        serializedName: "properties.databaseEdition",
        type: {
          name: "String"
        }
      },
      databaseServiceObjective: {
        readOnly: true,
        serializedName: "properties.databaseServiceObjective",
        type: {
          name: "String"
        }
      },
      upgradeDomains: {
        readOnly: true,
        serializedName: "properties.upgradeDomains",
        type: {
          name: "Number"
        }
      },
      subscriptionId: {
        readOnly: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      },
      dnsSuffix: {
        serializedName: "properties.dnsSuffix",
        type: {
          name: "String"
        }
      },
      lastAction: {
        readOnly: true,
        serializedName: "properties.lastAction",
        type: {
          name: "String"
        }
      },
      lastActionResult: {
        readOnly: true,
        serializedName: "properties.lastActionResult",
        type: {
          name: "String"
        }
      },
      allowedMultiSizes: {
        readOnly: true,
        serializedName: "properties.allowedMultiSizes",
        type: {
          name: "String"
        }
      },
      allowedWorkerSizes: {
        readOnly: true,
        serializedName: "properties.allowedWorkerSizes",
        type: {
          name: "String"
        }
      },
      maximumNumberOfMachines: {
        readOnly: true,
        serializedName: "properties.maximumNumberOfMachines",
        type: {
          name: "Number"
        }
      },
      vipMappings: {
        readOnly: true,
        serializedName: "properties.vipMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualIPMapping"
            }
          }
        }
      },
      environmentCapacities: {
        readOnly: true,
        serializedName: "properties.environmentCapacities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StampCapacity"
            }
          }
        }
      },
      networkAccessControlList: {
        serializedName: "properties.networkAccessControlList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkAccessControlEntry"
            }
          }
        }
      },
      environmentIsHealthy: {
        readOnly: true,
        serializedName: "properties.environmentIsHealthy",
        type: {
          name: "Boolean"
        }
      },
      environmentStatus: {
        readOnly: true,
        serializedName: "properties.environmentStatus",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      frontEndScaleFactor: {
        serializedName: "properties.frontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      defaultFrontEndScaleFactor: {
        readOnly: true,
        serializedName: "properties.defaultFrontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      apiManagementAccountId: {
        serializedName: "properties.apiManagementAccountId",
        type: {
          name: "String"
        }
      },
      suspended: {
        serializedName: "properties.suspended",
        type: {
          name: "Boolean"
        }
      },
      dynamicCacheEnabled: {
        serializedName: "properties.dynamicCacheEnabled",
        type: {
          name: "Boolean"
        }
      },
      clusterSettings: {
        serializedName: "properties.clusterSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      userWhitelistedIpRanges: {
        serializedName: "properties.userWhitelistedIpRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const HostingEnvironmentDiagnostics: msRest.CompositeMapper = {
  serializedName: "HostingEnvironmentDiagnostics",
  type: {
    name: "Composite",
    className: "HostingEnvironmentDiagnostics",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      diagnosicsOutput: {
        serializedName: "diagnosicsOutput",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricAvailabilily: msRest.CompositeMapper = {
  serializedName: "MetricAvailabilily",
  type: {
    name: "Composite",
    className: "MetricAvailabilily",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      retention: {
        serializedName: "retention",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDefinition: msRest.CompositeMapper = {
  serializedName: "MetricDefinition",
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      metricDefinitionName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      },
      primaryAggregationType: {
        readOnly: true,
        serializedName: "properties.primaryAggregationType",
        type: {
          name: "String"
        }
      },
      metricAvailabilities: {
        readOnly: true,
        serializedName: "properties.metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailabilily"
            }
          }
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCapacity: msRest.CompositeMapper = {
  serializedName: "SkuCapacity",
  type: {
    name: "Composite",
    className: "SkuCapacity",
    modelProperties: {
      minimum: {
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "Number"
        }
      },
      scaleType: {
        serializedName: "scaleType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Capability: msRest.CompositeMapper = {
  serializedName: "Capability",
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuDescription: msRest.CompositeMapper = {
  serializedName: "SkuDescription",
  type: {
    name: "Composite",
    className: "SkuDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      },
      skuCapacity: {
        serializedName: "skuCapacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      }
    }
  }
};

export const SkuInfo: msRest.CompositeMapper = {
  serializedName: "SkuInfo",
  type: {
    name: "Composite",
    className: "SkuInfo",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SkuDescription"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      usageName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      resourceName: {
        readOnly: true,
        serializedName: "properties.resourceName",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "properties.currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "properties.limit",
        type: {
          name: "Number"
        }
      },
      nextResetTime: {
        readOnly: true,
        serializedName: "properties.nextResetTime",
        type: {
          name: "DateTime"
        }
      },
      computeMode: {
        readOnly: true,
        serializedName: "properties.computeMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Shared",
            "Dedicated",
            "Dynamic"
          ]
        }
      },
      siteMode: {
        readOnly: true,
        serializedName: "properties.siteMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkerPoolResource: msRest.CompositeMapper = {
  serializedName: "WorkerPoolResource",
  type: {
    name: "Composite",
    className: "WorkerPoolResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      workerSizeId: {
        serializedName: "properties.workerSizeId",
        type: {
          name: "Number"
        }
      },
      computeMode: {
        serializedName: "properties.computeMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Shared",
            "Dedicated",
            "Dynamic"
          ]
        }
      },
      workerSize: {
        serializedName: "properties.workerSize",
        type: {
          name: "String"
        }
      },
      workerCount: {
        serializedName: "properties.workerCount",
        type: {
          name: "Number"
        }
      },
      instanceNames: {
        readOnly: true,
        serializedName: "properties.instanceNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SkuDescription"
        }
      }
    }
  }
};

export const VnetRoute: msRest.CompositeMapper = {
  serializedName: "VnetRoute",
  type: {
    name: "Composite",
    className: "VnetRoute",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetRouteName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      startAddress: {
        serializedName: "properties.startAddress",
        type: {
          name: "String"
        }
      },
      endAddress: {
        serializedName: "properties.endAddress",
        type: {
          name: "String"
        }
      },
      routeType: {
        serializedName: "properties.routeType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetInfo: msRest.CompositeMapper = {
  serializedName: "VnetInfo",
  type: {
    name: "Composite",
    className: "VnetInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetResourceId: {
        serializedName: "properties.vnetResourceId",
        type: {
          name: "String"
        }
      },
      certThumbprint: {
        readOnly: true,
        serializedName: "properties.certThumbprint",
        type: {
          name: "String"
        }
      },
      certBlob: {
        serializedName: "properties.certBlob",
        type: {
          name: "ByteArray"
        }
      },
      routes: {
        readOnly: true,
        serializedName: "properties.routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetRoute"
            }
          }
        }
      },
      resyncRequired: {
        readOnly: true,
        serializedName: "properties.resyncRequired",
        type: {
          name: "Boolean"
        }
      },
      dnsServers: {
        serializedName: "properties.dnsServers",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetGateway: msRest.CompositeMapper = {
  serializedName: "VnetGateway",
  type: {
    name: "Composite",
    className: "VnetGateway",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetName: {
        serializedName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      vpnPackageUri: {
        required: true,
        serializedName: "properties.vpnPackageUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const User: msRest.CompositeMapper = {
  serializedName: "User",
  type: {
    name: "Composite",
    className: "User",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      userName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      publishingUserName: {
        required: true,
        serializedName: "properties.publishingUserName",
        type: {
          name: "String"
        }
      },
      publishingPassword: {
        serializedName: "properties.publishingPassword",
        type: {
          name: "String"
        }
      },
      publishingPasswordHash: {
        serializedName: "properties.publishingPasswordHash",
        type: {
          name: "String"
        }
      },
      publishingPasswordHashSalt: {
        serializedName: "properties.publishingPasswordHashSalt",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotRecoveryTarget: msRest.CompositeMapper = {
  serializedName: "SnapshotRecoveryTarget",
  type: {
    name: "Composite",
    className: "SnapshotRecoveryTarget",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotRecoveryRequest: msRest.CompositeMapper = {
  serializedName: "SnapshotRecoveryRequest",
  type: {
    name: "Composite",
    className: "SnapshotRecoveryRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      snapshotTime: {
        serializedName: "properties.snapshotTime",
        type: {
          name: "String"
        }
      },
      recoveryTarget: {
        serializedName: "properties.recoveryTarget",
        type: {
          name: "Composite",
          className: "SnapshotRecoveryTarget"
        }
      },
      overwrite: {
        required: true,
        serializedName: "properties.overwrite",
        type: {
          name: "Boolean"
        }
      },
      recoverConfiguration: {
        serializedName: "properties.recoverConfiguration",
        type: {
          name: "Boolean"
        }
      },
      ignoreConflictingHostNames: {
        serializedName: "properties.ignoreConflictingHostNames",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ResourceMetricAvailability: msRest.CompositeMapper = {
  serializedName: "ResourceMetricAvailability",
  type: {
    name: "Composite",
    className: "ResourceMetricAvailability",
    modelProperties: {
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      retention: {
        readOnly: true,
        serializedName: "retention",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricName: msRest.CompositeMapper = {
  serializedName: "ResourceMetricName",
  type: {
    name: "Composite",
    className: "ResourceMetricName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricDefinition: msRest.CompositeMapper = {
  serializedName: "ResourceMetricDefinition",
  type: {
    name: "Composite",
    className: "ResourceMetricDefinition",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      resourceMetricDefinitionName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "Composite",
          className: "ResourceMetricName"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      },
      primaryAggregationType: {
        readOnly: true,
        serializedName: "properties.primaryAggregationType",
        type: {
          name: "String"
        }
      },
      metricAvailabilities: {
        readOnly: true,
        serializedName: "properties.metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricAvailability"
            }
          }
        }
      },
      resourceUri: {
        readOnly: true,
        serializedName: "properties.resourceUri",
        type: {
          name: "String"
        }
      },
      resourceMetricDefinitionId: {
        readOnly: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties.properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PushSettings: msRest.CompositeMapper = {
  serializedName: "PushSettings",
  type: {
    name: "Composite",
    className: "PushSettings",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      isPushEnabled: {
        required: true,
        serializedName: "properties.isPushEnabled",
        type: {
          name: "Boolean"
        }
      },
      tagWhitelistJson: {
        serializedName: "properties.tagWhitelistJson",
        type: {
          name: "String"
        }
      },
      tagsRequiringAuth: {
        serializedName: "properties.tagsRequiringAuth",
        type: {
          name: "String"
        }
      },
      dynamicTagsJson: {
        serializedName: "properties.dynamicTagsJson",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identifier: msRest.CompositeMapper = {
  serializedName: "Identifier",
  type: {
    name: "Composite",
    className: "Identifier",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      identifierId: {
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnectionKey: msRest.CompositeMapper = {
  serializedName: "HybridConnectionKey",
  type: {
    name: "Composite",
    className: "HybridConnectionKey",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      sendKeyName: {
        readOnly: true,
        serializedName: "properties.sendKeyName",
        type: {
          name: "String"
        }
      },
      sendKeyValue: {
        readOnly: true,
        serializedName: "properties.sendKeyValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnection: msRest.CompositeMapper = {
  serializedName: "HybridConnection",
  type: {
    name: "Composite",
    className: "HybridConnection",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      relayName: {
        serializedName: "properties.relayName",
        type: {
          name: "String"
        }
      },
      relayArmUri: {
        serializedName: "properties.relayArmUri",
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "properties.hostname",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      sendKeyName: {
        serializedName: "properties.sendKeyName",
        type: {
          name: "String"
        }
      },
      sendKeyValue: {
        serializedName: "properties.sendKeyValue",
        type: {
          name: "String"
        }
      },
      serviceBusSuffix: {
        serializedName: "properties.serviceBusSuffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedServiceIdentity",
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlotSwapStatus: msRest.CompositeMapper = {
  serializedName: "SlotSwapStatus",
  type: {
    name: "Composite",
    className: "SlotSwapStatus",
    modelProperties: {
      timestampUtc: {
        readOnly: true,
        serializedName: "timestampUtc",
        type: {
          name: "DateTime"
        }
      },
      sourceSlotName: {
        readOnly: true,
        serializedName: "sourceSlotName",
        type: {
          name: "String"
        }
      },
      destinationSlotName: {
        readOnly: true,
        serializedName: "destinationSlotName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloningInfo: msRest.CompositeMapper = {
  serializedName: "CloningInfo",
  type: {
    name: "Composite",
    className: "CloningInfo",
    modelProperties: {
      correlationId: {
        serializedName: "correlationId",
        type: {
          name: "Uuid"
        }
      },
      overwrite: {
        serializedName: "overwrite",
        type: {
          name: "Boolean"
        }
      },
      cloneCustomHostNames: {
        serializedName: "cloneCustomHostNames",
        type: {
          name: "Boolean"
        }
      },
      cloneSourceControl: {
        serializedName: "cloneSourceControl",
        type: {
          name: "Boolean"
        }
      },
      sourceWebAppId: {
        required: true,
        serializedName: "sourceWebAppId",
        type: {
          name: "String"
        }
      },
      hostingEnvironment: {
        serializedName: "hostingEnvironment",
        type: {
          name: "String"
        }
      },
      appSettingsOverrides: {
        serializedName: "appSettingsOverrides",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      configureLoadBalancing: {
        serializedName: "configureLoadBalancing",
        type: {
          name: "Boolean"
        }
      },
      trafficManagerProfileId: {
        serializedName: "trafficManagerProfileId",
        type: {
          name: "String"
        }
      },
      trafficManagerProfileName: {
        serializedName: "trafficManagerProfileName",
        type: {
          name: "String"
        }
      },
      ignoreQuotas: {
        serializedName: "ignoreQuotas",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const HostingEnvironmentProfile: msRest.CompositeMapper = {
  serializedName: "HostingEnvironmentProfile",
  type: {
    name: "Composite",
    className: "HostingEnvironmentProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpSecurityRestriction: msRest.CompositeMapper = {
  serializedName: "IpSecurityRestriction",
  type: {
    name: "Composite",
    className: "IpSecurityRestriction",
    modelProperties: {
      ipAddress: {
        required: true,
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      subnetMask: {
        serializedName: "subnetMask",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiDefinitionInfo: msRest.CompositeMapper = {
  serializedName: "ApiDefinitionInfo",
  type: {
    name: "Composite",
    className: "ApiDefinitionInfo",
    modelProperties: {
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CorsSettings: msRest.CompositeMapper = {
  serializedName: "CorsSettings",
  type: {
    name: "Composite",
    className: "CorsSettings",
    modelProperties: {
      allowedOrigins: {
        serializedName: "allowedOrigins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AutoHealCustomAction: msRest.CompositeMapper = {
  serializedName: "AutoHealCustomAction",
  type: {
    name: "Composite",
    className: "AutoHealCustomAction",
    modelProperties: {
      exe: {
        serializedName: "exe",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoHealActions: msRest.CompositeMapper = {
  serializedName: "AutoHealActions",
  type: {
    name: "Composite",
    className: "AutoHealActions",
    modelProperties: {
      actionType: {
        serializedName: "actionType",
        type: {
          name: "Enum",
          allowedValues: [
            "Recycle",
            "LogEvent",
            "CustomAction"
          ]
        }
      },
      customAction: {
        serializedName: "customAction",
        type: {
          name: "Composite",
          className: "AutoHealCustomAction"
        }
      },
      minProcessExecutionTime: {
        serializedName: "minProcessExecutionTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlowRequestsBasedTrigger: msRest.CompositeMapper = {
  serializedName: "SlowRequestsBasedTrigger",
  type: {
    name: "Composite",
    className: "SlowRequestsBasedTrigger",
    modelProperties: {
      timeTaken: {
        serializedName: "timeTaken",
        type: {
          name: "String"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatusCodesBasedTrigger: msRest.CompositeMapper = {
  serializedName: "StatusCodesBasedTrigger",
  type: {
    name: "Composite",
    className: "StatusCodesBasedTrigger",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Number"
        }
      },
      subStatus: {
        serializedName: "subStatus",
        type: {
          name: "Number"
        }
      },
      win32Status: {
        serializedName: "win32Status",
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RequestsBasedTrigger: msRest.CompositeMapper = {
  serializedName: "RequestsBasedTrigger",
  type: {
    name: "Composite",
    className: "RequestsBasedTrigger",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoHealTriggers: msRest.CompositeMapper = {
  serializedName: "AutoHealTriggers",
  type: {
    name: "Composite",
    className: "AutoHealTriggers",
    modelProperties: {
      requests: {
        serializedName: "requests",
        type: {
          name: "Composite",
          className: "RequestsBasedTrigger"
        }
      },
      privateBytesInKB: {
        serializedName: "privateBytesInKB",
        type: {
          name: "Number"
        }
      },
      statusCodes: {
        serializedName: "statusCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StatusCodesBasedTrigger"
            }
          }
        }
      },
      slowRequests: {
        serializedName: "slowRequests",
        type: {
          name: "Composite",
          className: "SlowRequestsBasedTrigger"
        }
      }
    }
  }
};

export const AutoHealRules: msRest.CompositeMapper = {
  serializedName: "AutoHealRules",
  type: {
    name: "Composite",
    className: "AutoHealRules",
    modelProperties: {
      triggers: {
        serializedName: "triggers",
        type: {
          name: "Composite",
          className: "AutoHealTriggers"
        }
      },
      actions: {
        serializedName: "actions",
        type: {
          name: "Composite",
          className: "AutoHealActions"
        }
      }
    }
  }
};

export const SiteLimits: msRest.CompositeMapper = {
  serializedName: "SiteLimits",
  type: {
    name: "Composite",
    className: "SiteLimits",
    modelProperties: {
      maxPercentageCpu: {
        serializedName: "maxPercentageCpu",
        type: {
          name: "Number"
        }
      },
      maxMemoryInMb: {
        serializedName: "maxMemoryInMb",
        type: {
          name: "Number"
        }
      },
      maxDiskSizeInMb: {
        serializedName: "maxDiskSizeInMb",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RampUpRule: msRest.CompositeMapper = {
  serializedName: "RampUpRule",
  type: {
    name: "Composite",
    className: "RampUpRule",
    modelProperties: {
      actionHostName: {
        serializedName: "actionHostName",
        type: {
          name: "String"
        }
      },
      reroutePercentage: {
        serializedName: "reroutePercentage",
        type: {
          name: "Number"
        }
      },
      changeStep: {
        serializedName: "changeStep",
        type: {
          name: "Number"
        }
      },
      changeIntervalInMinutes: {
        serializedName: "changeIntervalInMinutes",
        type: {
          name: "Number"
        }
      },
      minReroutePercentage: {
        serializedName: "minReroutePercentage",
        type: {
          name: "Number"
        }
      },
      maxReroutePercentage: {
        serializedName: "maxReroutePercentage",
        type: {
          name: "Number"
        }
      },
      changeDecisionCallbackUrl: {
        serializedName: "changeDecisionCallbackUrl",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Experiments: msRest.CompositeMapper = {
  serializedName: "Experiments",
  type: {
    name: "Composite",
    className: "Experiments",
    modelProperties: {
      rampUpRules: {
        serializedName: "rampUpRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RampUpRule"
            }
          }
        }
      }
    }
  }
};

export const VirtualDirectory: msRest.CompositeMapper = {
  serializedName: "VirtualDirectory",
  type: {
    name: "Composite",
    className: "VirtualDirectory",
    modelProperties: {
      virtualPath: {
        serializedName: "virtualPath",
        type: {
          name: "String"
        }
      },
      physicalPath: {
        serializedName: "physicalPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualApplication: msRest.CompositeMapper = {
  serializedName: "VirtualApplication",
  type: {
    name: "Composite",
    className: "VirtualApplication",
    modelProperties: {
      virtualPath: {
        serializedName: "virtualPath",
        type: {
          name: "String"
        }
      },
      physicalPath: {
        serializedName: "physicalPath",
        type: {
          name: "String"
        }
      },
      preloadEnabled: {
        serializedName: "preloadEnabled",
        type: {
          name: "Boolean"
        }
      },
      virtualDirectories: {
        serializedName: "virtualDirectories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDirectory"
            }
          }
        }
      }
    }
  }
};

export const HandlerMapping: msRest.CompositeMapper = {
  serializedName: "HandlerMapping",
  type: {
    name: "Composite",
    className: "HandlerMapping",
    modelProperties: {
      extension: {
        serializedName: "extension",
        type: {
          name: "String"
        }
      },
      scriptProcessor: {
        serializedName: "scriptProcessor",
        type: {
          name: "String"
        }
      },
      argumentsProperty: {
        serializedName: "arguments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteMachineKey: msRest.CompositeMapper = {
  serializedName: "SiteMachineKey",
  type: {
    name: "Composite",
    className: "SiteMachineKey",
    modelProperties: {
      validation: {
        serializedName: "validation",
        type: {
          name: "String"
        }
      },
      validationKey: {
        serializedName: "validationKey",
        type: {
          name: "String"
        }
      },
      decryption: {
        serializedName: "decryption",
        type: {
          name: "String"
        }
      },
      decryptionKey: {
        serializedName: "decryptionKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnStringInfo: msRest.CompositeMapper = {
  serializedName: "ConnStringInfo",
  type: {
    name: "Composite",
    className: "ConnStringInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "MySql",
            "SQLServer",
            "SQLAzure",
            "Custom",
            "NotificationHub",
            "ServiceBus",
            "EventHub",
            "ApiHub",
            "DocDb",
            "RedisCache",
            "PostgreSQL"
          ]
        }
      }
    }
  }
};

export const SiteConfig: msRest.CompositeMapper = {
  serializedName: "SiteConfig",
  type: {
    name: "Composite",
    className: "SiteConfig",
    modelProperties: {
      numberOfWorkers: {
        serializedName: "numberOfWorkers",
        type: {
          name: "Number"
        }
      },
      defaultDocuments: {
        serializedName: "defaultDocuments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      netFrameworkVersion: {
        serializedName: "netFrameworkVersion",
        defaultValue: 'v4.6',
        type: {
          name: "String"
        }
      },
      phpVersion: {
        serializedName: "phpVersion",
        type: {
          name: "String"
        }
      },
      pythonVersion: {
        serializedName: "pythonVersion",
        type: {
          name: "String"
        }
      },
      nodeVersion: {
        serializedName: "nodeVersion",
        type: {
          name: "String"
        }
      },
      linuxFxVersion: {
        serializedName: "linuxFxVersion",
        type: {
          name: "String"
        }
      },
      requestTracingEnabled: {
        serializedName: "requestTracingEnabled",
        type: {
          name: "Boolean"
        }
      },
      requestTracingExpirationTime: {
        serializedName: "requestTracingExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      remoteDebuggingEnabled: {
        serializedName: "remoteDebuggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      remoteDebuggingVersion: {
        serializedName: "remoteDebuggingVersion",
        type: {
          name: "String"
        }
      },
      httpLoggingEnabled: {
        serializedName: "httpLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      logsDirectorySizeLimit: {
        serializedName: "logsDirectorySizeLimit",
        type: {
          name: "Number"
        }
      },
      detailedErrorLoggingEnabled: {
        serializedName: "detailedErrorLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      publishingUsername: {
        serializedName: "publishingUsername",
        type: {
          name: "String"
        }
      },
      appSettings: {
        serializedName: "appSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      connectionStrings: {
        serializedName: "connectionStrings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnStringInfo"
            }
          }
        }
      },
      machineKey: {
        readOnly: true,
        serializedName: "machineKey",
        type: {
          name: "Composite",
          className: "SiteMachineKey"
        }
      },
      handlerMappings: {
        serializedName: "handlerMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HandlerMapping"
            }
          }
        }
      },
      documentRoot: {
        serializedName: "documentRoot",
        type: {
          name: "String"
        }
      },
      scmType: {
        serializedName: "scmType",
        type: {
          name: "String"
        }
      },
      use32BitWorkerProcess: {
        serializedName: "use32BitWorkerProcess",
        type: {
          name: "Boolean"
        }
      },
      webSocketsEnabled: {
        serializedName: "webSocketsEnabled",
        type: {
          name: "Boolean"
        }
      },
      alwaysOn: {
        serializedName: "alwaysOn",
        type: {
          name: "Boolean"
        }
      },
      javaVersion: {
        serializedName: "javaVersion",
        type: {
          name: "String"
        }
      },
      javaContainer: {
        serializedName: "javaContainer",
        type: {
          name: "String"
        }
      },
      javaContainerVersion: {
        serializedName: "javaContainerVersion",
        type: {
          name: "String"
        }
      },
      appCommandLine: {
        serializedName: "appCommandLine",
        type: {
          name: "String"
        }
      },
      managedPipelineMode: {
        serializedName: "managedPipelineMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Integrated",
            "Classic"
          ]
        }
      },
      virtualApplications: {
        serializedName: "virtualApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualApplication"
            }
          }
        }
      },
      loadBalancing: {
        serializedName: "loadBalancing",
        type: {
          name: "Enum",
          allowedValues: [
            "WeightedRoundRobin",
            "LeastRequests",
            "LeastResponseTime",
            "WeightedTotalTraffic",
            "RequestHash"
          ]
        }
      },
      experiments: {
        serializedName: "experiments",
        type: {
          name: "Composite",
          className: "Experiments"
        }
      },
      limits: {
        serializedName: "limits",
        type: {
          name: "Composite",
          className: "SiteLimits"
        }
      },
      autoHealEnabled: {
        serializedName: "autoHealEnabled",
        type: {
          name: "Boolean"
        }
      },
      autoHealRules: {
        serializedName: "autoHealRules",
        type: {
          name: "Composite",
          className: "AutoHealRules"
        }
      },
      tracingOptions: {
        serializedName: "tracingOptions",
        type: {
          name: "String"
        }
      },
      vnetName: {
        serializedName: "vnetName",
        type: {
          name: "String"
        }
      },
      cors: {
        serializedName: "cors",
        type: {
          name: "Composite",
          className: "CorsSettings"
        }
      },
      push: {
        serializedName: "push",
        type: {
          name: "Composite",
          className: "PushSettings"
        }
      },
      apiDefinition: {
        serializedName: "apiDefinition",
        type: {
          name: "Composite",
          className: "ApiDefinitionInfo"
        }
      },
      autoSwapSlotName: {
        serializedName: "autoSwapSlotName",
        type: {
          name: "String"
        }
      },
      localMySqlEnabled: {
        serializedName: "localMySqlEnabled",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ipSecurityRestrictions: {
        serializedName: "ipSecurityRestrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      http20Enabled: {
        serializedName: "http20Enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      minTlsVersion: {
        serializedName: "minTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostNameSslState: msRest.CompositeMapper = {
  serializedName: "HostNameSslState",
  type: {
    name: "Composite",
    className: "HostNameSslState",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      sslState: {
        serializedName: "sslState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "SniEnabled",
            "IpBasedEnabled"
          ]
        }
      },
      virtualIP: {
        serializedName: "virtualIP",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      toUpdate: {
        serializedName: "toUpdate",
        type: {
          name: "Boolean"
        }
      },
      hostType: {
        serializedName: "hostType",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard",
            "Repository"
          ]
        }
      }
    }
  }
};

export const Site: msRest.CompositeMapper = {
  serializedName: "Site",
  type: {
    name: "Composite",
    className: "Site",
    modelProperties: {
      ...Resource.type.modelProperties,
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      hostNames: {
        readOnly: true,
        serializedName: "properties.hostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      repositorySiteName: {
        readOnly: true,
        serializedName: "properties.repositorySiteName",
        type: {
          name: "String"
        }
      },
      usageState: {
        readOnly: true,
        serializedName: "properties.usageState",
        type: {
          name: "Enum",
          allowedValues: [
            "Normal",
            "Exceeded"
          ]
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      enabledHostNames: {
        readOnly: true,
        serializedName: "properties.enabledHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      availabilityState: {
        readOnly: true,
        serializedName: "properties.availabilityState",
        type: {
          name: "Enum",
          allowedValues: [
            "Normal",
            "Limited",
            "DisasterRecoveryMode"
          ]
        }
      },
      hostNameSslStates: {
        serializedName: "properties.hostNameSslStates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostNameSslState"
            }
          }
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      reserved: {
        serializedName: "properties.reserved",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      lastModifiedTimeUtc: {
        readOnly: true,
        serializedName: "properties.lastModifiedTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      siteConfig: {
        serializedName: "properties.siteConfig",
        type: {
          name: "Composite",
          className: "SiteConfig"
        }
      },
      trafficManagerHostNames: {
        readOnly: true,
        serializedName: "properties.trafficManagerHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      scmSiteAlsoStopped: {
        serializedName: "properties.scmSiteAlsoStopped",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      targetSwapSlot: {
        readOnly: true,
        serializedName: "properties.targetSwapSlot",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      clientAffinityEnabled: {
        serializedName: "properties.clientAffinityEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertEnabled: {
        serializedName: "properties.clientCertEnabled",
        type: {
          name: "Boolean"
        }
      },
      hostNamesDisabled: {
        serializedName: "properties.hostNamesDisabled",
        type: {
          name: "Boolean"
        }
      },
      outboundIpAddresses: {
        readOnly: true,
        serializedName: "properties.outboundIpAddresses",
        type: {
          name: "String"
        }
      },
      possibleOutboundIpAddresses: {
        readOnly: true,
        serializedName: "properties.possibleOutboundIpAddresses",
        type: {
          name: "String"
        }
      },
      containerSize: {
        serializedName: "properties.containerSize",
        type: {
          name: "Number"
        }
      },
      dailyMemoryTimeQuota: {
        serializedName: "properties.dailyMemoryTimeQuota",
        type: {
          name: "Number"
        }
      },
      suspendedTill: {
        readOnly: true,
        serializedName: "properties.suspendedTill",
        type: {
          name: "DateTime"
        }
      },
      maxNumberOfWorkers: {
        readOnly: true,
        serializedName: "properties.maxNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      cloningInfo: {
        serializedName: "properties.cloningInfo",
        type: {
          name: "Composite",
          className: "CloningInfo"
        }
      },
      snapshotInfo: {
        serializedName: "properties.snapshotInfo",
        type: {
          name: "Composite",
          className: "SnapshotRecoveryRequest"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      isDefaultContainer: {
        readOnly: true,
        serializedName: "properties.isDefaultContainer",
        type: {
          name: "Boolean"
        }
      },
      defaultHostName: {
        readOnly: true,
        serializedName: "properties.defaultHostName",
        type: {
          name: "String"
        }
      },
      slotSwapStatus: {
        readOnly: true,
        serializedName: "properties.slotSwapStatus",
        type: {
          name: "Composite",
          className: "SlotSwapStatus"
        }
      },
      httpsOnly: {
        serializedName: "properties.httpsOnly",
        type: {
          name: "Boolean"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const AppServicePlan: msRest.CompositeMapper = {
  serializedName: "AppServicePlan",
  type: {
    name: "Composite",
    className: "AppServicePlan",
    modelProperties: {
      ...Resource.type.modelProperties,
      appServicePlanName: {
        required: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      workerTierName: {
        serializedName: "properties.workerTierName",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Ready",
            "Pending",
            "Creating"
          ]
        }
      },
      subscription: {
        readOnly: true,
        serializedName: "properties.subscription",
        type: {
          name: "String"
        }
      },
      adminSiteName: {
        serializedName: "properties.adminSiteName",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      maximumNumberOfWorkers: {
        readOnly: true,
        serializedName: "properties.maximumNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      geoRegion: {
        readOnly: true,
        serializedName: "properties.geoRegion",
        type: {
          name: "String"
        }
      },
      perSiteScaling: {
        serializedName: "properties.perSiteScaling",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      numberOfSites: {
        readOnly: true,
        serializedName: "properties.numberOfSites",
        type: {
          name: "Number"
        }
      },
      isSpot: {
        serializedName: "properties.isSpot",
        type: {
          name: "Boolean"
        }
      },
      spotExpirationTime: {
        serializedName: "properties.spotExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      reserved: {
        serializedName: "properties.reserved",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      targetWorkerCount: {
        serializedName: "properties.targetWorkerCount",
        type: {
          name: "Number"
        }
      },
      targetWorkerSizeId: {
        serializedName: "properties.targetWorkerSizeId",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SkuDescription"
        }
      }
    }
  }
};

export const ResourceMetricProperty: msRest.CompositeMapper = {
  serializedName: "ResourceMetricProperty",
  type: {
    name: "Composite",
    className: "ResourceMetricProperty",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricValue: msRest.CompositeMapper = {
  serializedName: "ResourceMetricValue",
  type: {
    name: "Composite",
    className: "ResourceMetricValue",
    modelProperties: {
      timestamp: {
        readOnly: true,
        serializedName: "timestamp",
        type: {
          name: "String"
        }
      },
      average: {
        readOnly: true,
        serializedName: "average",
        type: {
          name: "Number"
        }
      },
      minimum: {
        readOnly: true,
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      total: {
        readOnly: true,
        serializedName: "total",
        type: {
          name: "Number"
        }
      },
      count: {
        readOnly: true,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricProperty"
            }
          }
        }
      }
    }
  }
};

export const ResourceMetric: msRest.CompositeMapper = {
  serializedName: "ResourceMetric",
  type: {
    name: "Composite",
    className: "ResourceMetric",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "ResourceMetricName"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      resourceId: {
        readOnly: true,
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      metricValues: {
        readOnly: true,
        serializedName: "metricValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricValue"
            }
          }
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricProperty"
            }
          }
        }
      }
    }
  }
};

export const LocalizableString: msRest.CompositeMapper = {
  serializedName: "LocalizableString",
  type: {
    name: "Composite",
    className: "LocalizableString",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmUsageQuota: msRest.CompositeMapper = {
  serializedName: "CsmUsageQuota",
  type: {
    name: "Composite",
    className: "CsmUsageQuota",
    modelProperties: {
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      }
    }
  }
};

export const ErrorEntity: msRest.CompositeMapper = {
  serializedName: "ErrorEntity",
  type: {
    name: "Composite",
    className: "ErrorEntity",
    modelProperties: {
      extendedCode: {
        serializedName: "extendedCode",
        type: {
          name: "String"
        }
      },
      messageTemplate: {
        serializedName: "messageTemplate",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      innerErrors: {
        serializedName: "innerErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorEntity"
            }
          }
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "InProgress",
            "Failed",
            "Succeeded",
            "TimedOut",
            "Created"
          ]
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorEntity"
            }
          }
        }
      },
      createdTime: {
        serializedName: "createdTime",
        type: {
          name: "DateTime"
        }
      },
      modifiedTime: {
        serializedName: "modifiedTime",
        type: {
          name: "DateTime"
        }
      },
      expirationTime: {
        serializedName: "expirationTime",
        type: {
          name: "DateTime"
        }
      },
      geoMasterOperationId: {
        serializedName: "geoMasterOperationId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const AppServicePlanPatchResource: msRest.CompositeMapper = {
  serializedName: "AppServicePlanPatchResource",
  type: {
    name: "Composite",
    className: "AppServicePlanPatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      appServicePlanPatchResourceName: {
        required: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      workerTierName: {
        serializedName: "properties.workerTierName",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Ready",
            "Pending",
            "Creating"
          ]
        }
      },
      subscription: {
        readOnly: true,
        serializedName: "properties.subscription",
        type: {
          name: "String"
        }
      },
      adminSiteName: {
        serializedName: "properties.adminSiteName",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      maximumNumberOfWorkers: {
        readOnly: true,
        serializedName: "properties.maximumNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      geoRegion: {
        readOnly: true,
        serializedName: "properties.geoRegion",
        type: {
          name: "String"
        }
      },
      perSiteScaling: {
        serializedName: "properties.perSiteScaling",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      numberOfSites: {
        readOnly: true,
        serializedName: "properties.numberOfSites",
        type: {
          name: "Number"
        }
      },
      isSpot: {
        serializedName: "properties.isSpot",
        type: {
          name: "Boolean"
        }
      },
      spotExpirationTime: {
        serializedName: "properties.spotExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      reserved: {
        serializedName: "properties.reserved",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      targetWorkerCount: {
        serializedName: "properties.targetWorkerCount",
        type: {
          name: "Number"
        }
      },
      targetWorkerSizeId: {
        serializedName: "properties.targetWorkerSizeId",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      }
    }
  }
};

export const HybridConnectionLimits: msRest.CompositeMapper = {
  serializedName: "HybridConnectionLimits",
  type: {
    name: "Composite",
    className: "HybridConnectionLimits",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      current: {
        readOnly: true,
        serializedName: "properties.current",
        type: {
          name: "Number"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "properties.maximum",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AppServiceEnvironmentCollection: msRest.CompositeMapper = {
  serializedName: "AppServiceEnvironmentCollection",
  type: {
    name: "Composite",
    className: "AppServiceEnvironmentCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppServiceEnvironmentResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StampCapacityCollection: msRest.CompositeMapper = {
  serializedName: "StampCapacityCollection",
  type: {
    name: "Composite",
    className: "StampCapacityCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StampCapacity"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricCollection: msRest.CompositeMapper = {
  serializedName: "ResourceMetricCollection",
  type: {
    name: "Composite",
    className: "ResourceMetricCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetric"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkerPoolCollection: msRest.CompositeMapper = {
  serializedName: "WorkerPoolCollection",
  type: {
    name: "Composite",
    className: "WorkerPoolCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerPoolResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricDefinitionCollection: msRest.CompositeMapper = {
  serializedName: "ResourceMetricDefinitionCollection",
  type: {
    name: "Composite",
    className: "ResourceMetricDefinitionCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricDefinition"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuInfoCollection: msRest.CompositeMapper = {
  serializedName: "SkuInfoCollection",
  type: {
    name: "Composite",
    className: "SkuInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageCollection: msRest.CompositeMapper = {
  serializedName: "UsageCollection",
  type: {
    name: "Composite",
    className: "UsageCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebAppCollection: msRest.CompositeMapper = {
  serializedName: "WebAppCollection",
  type: {
    name: "Composite",
    className: "WebAppCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Site"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServicePlanCollection: msRest.CompositeMapper = {
  serializedName: "AppServicePlanCollection",
  type: {
    name: "Composite",
    className: "AppServicePlanCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppServicePlan"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmUsageQuotaCollection: msRest.CompositeMapper = {
  serializedName: "CsmUsageQuotaCollection",
  type: {
    name: "Composite",
    className: "CsmUsageQuotaCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CsmUsageQuota"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceCollection: msRest.CompositeMapper = {
  serializedName: "ResourceCollection",
  type: {
    name: "Composite",
    className: "ResourceCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnectionCollection: msRest.CompositeMapper = {
  serializedName: "HybridConnectionCollection",
  type: {
    name: "Composite",
    className: "HybridConnectionCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridConnection"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
