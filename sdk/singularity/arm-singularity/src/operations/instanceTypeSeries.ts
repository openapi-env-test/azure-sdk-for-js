/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { InstanceTypeSeries } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SingularityManagementClient } from "../singularityManagementClient";
import {
  AvailableInstanceTypeSeriesDescription,
  InstanceTypeSeriesListNextOptionalParams,
  InstanceTypeSeriesListOptionalParams,
  AvailableInstanceTypeDescription,
  InstanceTypeSeriesListInstanceTypeNextOptionalParams,
  InstanceTypeSeriesListInstanceTypeOptionalParams,
  InstanceTypeSeriesListResponse,
  InstanceTypeSeriesListInstanceTypeResponse,
  InstanceTypeSeriesListNextResponse,
  InstanceTypeSeriesListInstanceTypeNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing InstanceTypeSeries operations. */
export class InstanceTypeSeriesImpl implements InstanceTypeSeries {
  private readonly client: SingularityManagementClient;

  /**
   * Initialize a new instance of the class InstanceTypeSeries class.
   * @param client Reference to the service client
   */
  constructor(client: SingularityManagementClient) {
    this.client = client;
  }

  /**
   * List all the available instance type series for the location.
   * @param location The name of the Azure location.
   * @param options The options parameters.
   */
  public list(
    location: string,
    options?: InstanceTypeSeriesListOptionalParams
  ): PagedAsyncIterableIterator<AvailableInstanceTypeSeriesDescription> {
    const iter = this.listPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(location, options);
      }
    };
  }

  private async *listPagingPage(
    location: string,
    options?: InstanceTypeSeriesListOptionalParams
  ): AsyncIterableIterator<AvailableInstanceTypeSeriesDescription[]> {
    let result = await this._list(location, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(location, continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    location: string,
    options?: InstanceTypeSeriesListOptionalParams
  ): AsyncIterableIterator<AvailableInstanceTypeSeriesDescription> {
    for await (const page of this.listPagingPage(location, options)) {
      yield* page;
    }
  }

  /**
   * List all the available instance types for the instance type series.
   * @param location The name of the Azure location.
   * @param instanceTypeSeriesId The id of the Singularity instance type series.
   * @param options The options parameters.
   */
  public listInstanceType(
    location: string,
    instanceTypeSeriesId: string,
    options?: InstanceTypeSeriesListInstanceTypeOptionalParams
  ): PagedAsyncIterableIterator<AvailableInstanceTypeDescription> {
    const iter = this.listInstanceTypePagingAll(
      location,
      instanceTypeSeriesId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listInstanceTypePagingPage(
          location,
          instanceTypeSeriesId,
          options
        );
      }
    };
  }

  private async *listInstanceTypePagingPage(
    location: string,
    instanceTypeSeriesId: string,
    options?: InstanceTypeSeriesListInstanceTypeOptionalParams
  ): AsyncIterableIterator<AvailableInstanceTypeDescription[]> {
    let result = await this._listInstanceType(
      location,
      instanceTypeSeriesId,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listInstanceTypeNext(
        location,
        instanceTypeSeriesId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listInstanceTypePagingAll(
    location: string,
    instanceTypeSeriesId: string,
    options?: InstanceTypeSeriesListInstanceTypeOptionalParams
  ): AsyncIterableIterator<AvailableInstanceTypeDescription> {
    for await (const page of this.listInstanceTypePagingPage(
      location,
      instanceTypeSeriesId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all the available instance type series for the location.
   * @param location The name of the Azure location.
   * @param options The options parameters.
   */
  private _list(
    location: string,
    options?: InstanceTypeSeriesListOptionalParams
  ): Promise<InstanceTypeSeriesListResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listOperationSpec
    );
  }

  /**
   * List all the available instance types for the instance type series.
   * @param location The name of the Azure location.
   * @param instanceTypeSeriesId The id of the Singularity instance type series.
   * @param options The options parameters.
   */
  private _listInstanceType(
    location: string,
    instanceTypeSeriesId: string,
    options?: InstanceTypeSeriesListInstanceTypeOptionalParams
  ): Promise<InstanceTypeSeriesListInstanceTypeResponse> {
    return this.client.sendOperationRequest(
      { location, instanceTypeSeriesId, options },
      listInstanceTypeOperationSpec
    );
  }

  /**
   * ListNext
   * @param location The name of the Azure location.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    location: string,
    nextLink: string,
    options?: InstanceTypeSeriesListNextOptionalParams
  ): Promise<InstanceTypeSeriesListNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListInstanceTypeNext
   * @param location The name of the Azure location.
   * @param instanceTypeSeriesId The id of the Singularity instance type series.
   * @param nextLink The nextLink from the previous successful call to the ListInstanceType method.
   * @param options The options parameters.
   */
  private _listInstanceTypeNext(
    location: string,
    instanceTypeSeriesId: string,
    nextLink: string,
    options?: InstanceTypeSeriesListInstanceTypeNextOptionalParams
  ): Promise<InstanceTypeSeriesListInstanceTypeNextResponse> {
    return this.client.sendOperationRequest(
      { location, instanceTypeSeriesId, nextLink, options },
      listInstanceTypeNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Singularity/locations/{location}/instanceTypeSeries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableInstanceTypeSeriesDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listInstanceTypeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Singularity/locations/{location}/instanceTypeSeries/{instanceTypeSeriesId}/instanceTypes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableInstanceTypeDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.instanceTypeSeriesId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableInstanceTypeSeriesDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listInstanceTypeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableInstanceTypeDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.location,
    Parameters.instanceTypeSeriesId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
