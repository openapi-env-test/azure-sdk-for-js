/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { StorageCache } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SingularityManagementClient } from "../singularityManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  StorageCacheResourceDescription,
  StorageCacheListByAccountNextOptionalParams,
  StorageCacheListByAccountOptionalParams,
  StorageCacheCreateOrUpdateOptionalParams,
  StorageCacheCreateOrUpdateResponse,
  StorageCacheUpdateOptionalParams,
  StorageCacheUpdateResponse,
  StorageCacheGetOptionalParams,
  StorageCacheGetResponse,
  StorageCacheDeleteOptionalParams,
  StorageCacheGetDiagnosticsOptionalParams,
  StorageCacheGetDiagnosticsResponse,
  StorageCacheListByAccountResponse,
  StorageCacheResumeOptionalParams,
  StorageCacheResumeResponse,
  StorageCacheSuspendOptionalParams,
  StorageCacheSuspendResponse,
  StorageCacheListByAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing StorageCache operations. */
export class StorageCacheImpl implements StorageCache {
  private readonly client: SingularityManagementClient;

  /**
   * Initialize a new instance of the class StorageCache class.
   * @param client Reference to the service client
   */
  constructor(client: SingularityManagementClient) {
    this.client = client;
  }

  /**
   * Gets information about all storage cache resources in a given account.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param options The options parameters.
   */
  public listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: StorageCacheListByAccountOptionalParams
  ): PagedAsyncIterableIterator<StorageCacheResourceDescription> {
    const iter = this.listByAccountPagingAll(
      resourceGroupName,
      accountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByAccountPagingPage(
          resourceGroupName,
          accountName,
          options
        );
      }
    };
  }

  private async *listByAccountPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: StorageCacheListByAccountOptionalParams
  ): AsyncIterableIterator<StorageCacheResourceDescription[]> {
    let result = await this._listByAccount(
      resourceGroupName,
      accountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByAccountNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByAccountPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: StorageCacheListByAccountOptionalParams
  ): AsyncIterableIterator<StorageCacheResourceDescription> {
    for await (const page of this.listByAccountPagingPage(
      resourceGroupName,
      accountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates a storage cache resource with the specified name and properties. If a storage cache resource
   * with the same name exists, then it is updated with the specified properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param body Singularity storage cache information.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    body: StorageCacheResourceDescription,
    options?: StorageCacheCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageCacheCreateOrUpdateResponse>,
      StorageCacheCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<StorageCacheCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        accountName,
        storageCacheResourceName,
        body,
        options
      },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a storage cache resource with the specified name and properties. If a storage cache resource
   * with the same name exists, then it is updated with the specified properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param body Singularity storage cache information.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    body: StorageCacheResourceDescription,
    options?: StorageCacheCreateOrUpdateOptionalParams
  ): Promise<StorageCacheCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      accountName,
      storageCacheResourceName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * If a storage cache resource with the same name exists, then it is updated with the specified
   * properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param body Singularity storage cache information.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    body: StorageCacheResourceDescription,
    options?: StorageCacheUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageCacheUpdateResponse>,
      StorageCacheUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<StorageCacheUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        accountName,
        storageCacheResourceName,
        body,
        options
      },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * If a storage cache resource with the same name exists, then it is updated with the specified
   * properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param body Singularity storage cache information.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    body: StorageCacheResourceDescription,
    options?: StorageCacheUpdateOptionalParams
  ): Promise<StorageCacheUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      accountName,
      storageCacheResourceName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets information about the storage cache resource with the given name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheGetOptionalParams
  ): Promise<StorageCacheGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, storageCacheResourceName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, storageCacheResourceName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      accountName,
      storageCacheResourceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets diagnostic information about the storage cache resource with the given name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  getDiagnostics(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheGetDiagnosticsOptionalParams
  ): Promise<StorageCacheGetDiagnosticsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, storageCacheResourceName, options },
      getDiagnosticsOperationSpec
    );
  }

  /**
   * Gets information about all storage cache resources in a given account.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param options The options parameters.
   */
  private _listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: StorageCacheListByAccountOptionalParams
  ): Promise<StorageCacheListByAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listByAccountOperationSpec
    );
  }

  /**
   * Resumes the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  async beginResume(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheResumeOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageCacheResumeResponse>,
      StorageCacheResumeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<StorageCacheResumeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, storageCacheResourceName, options },
      resumeOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Resumes the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  async beginResumeAndWait(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheResumeOptionalParams
  ): Promise<StorageCacheResumeResponse> {
    const poller = await this.beginResume(
      resourceGroupName,
      accountName,
      storageCacheResourceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Suspends the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  async beginSuspend(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheSuspendOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageCacheSuspendResponse>,
      StorageCacheSuspendResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<StorageCacheSuspendResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, accountName, storageCacheResourceName, options },
      suspendOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Suspends the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  async beginSuspendAndWait(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheSuspendOptionalParams
  ): Promise<StorageCacheSuspendResponse> {
    const poller = await this.beginSuspend(
      resourceGroupName,
      accountName,
      storageCacheResourceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByAccountNext
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
   * @param options The options parameters.
   */
  private _listByAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: StorageCacheListByAccountNextOptionalParams
  ): Promise<StorageCacheListByAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listByAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    201: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    202: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    204: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageCacheResourceName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    201: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    202: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    204: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.body13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageCacheResourceName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageCacheResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageCacheResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDiagnosticsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}/diagnostics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageCacheResourceDiagnosticsInfo
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageCacheResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageCacheResourceDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resumeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}/resume",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    201: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    202: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    204: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageCacheResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const suspendOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Singularity/accounts/{accountName}/storagecontainers/{storageCacheResourceName}/suspend",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    201: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    202: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    204: {
      bodyMapper: Mappers.StorageCacheResourceDescription
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageCacheResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageCacheResourceDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.continuationToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
