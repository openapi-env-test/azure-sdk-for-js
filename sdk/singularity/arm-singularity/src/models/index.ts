/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type StorageSourceBaseUnion =
  | StorageSourceBase
  | StorageSourceAzureAISupercomputerStorage
  | StorageSourceAzureBlob;
export type ContainerImageBaseUnion =
  | ContainerImageBase
  | CustomContainerImage
  | PlatformContainerImage;
export type ProbeSettingUnion =
  | ProbeSetting
  | ExecProbeSetting
  | HttpProbeSetting;
export type NetworkPropertiesBaseUnion =
  | NetworkPropertiesBase
  | DelegatedSubnetProperties;
export type StorageCachePropertiesBaseUnion =
  | StorageCachePropertiesBase
  | BlobStorageCacheProperties
  | NfsStorageCacheProperties
  | AdlsStorageCacheProperties;
export type BlobMountOptionsBaseUnion =
  | BlobMountOptionsBase
  | BlobFuseMountOptions
  | BlobInterceptionMountOptions;
export type AdlsMountOptionsBaseUnion =
  | AdlsMountOptionsBase
  | AdlsFuseMountOptions
  | AdlsInterceptionMountOptions;

/** Describes properties of AccountQuotaPolicy resource. */
export interface AccountQuotaPolicyProperties {
  provisioningState?: ProvisioningState;
  status?: PolicyStatus;
  /** User-friendly description of an AccountQuotaPolicy. */
  description?: string;
  /** A list of quota policy per instance type series. */
  quotas?: InstanceTypeSeriesQuota[];
}

/** Describes the quota for the InstanceType series. */
export interface InstanceTypeSeriesQuota {
  /** The identifier for instance type series quota. */
  id: string;
  /**
   * User friendly description for the instance type series.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  slaTier?: SlaTier;
  /** Maximum allowed units for the instance type series. */
  limit: number;
  /**
   * Number of units currently in use.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly used?: number;
}

/** The resource model definition for Azure Resource Manager resource. */
export interface Resource {
  /**
   * Fully qualified identifier for the resource. For example, `/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}`
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. For example, `Microsoft.Compute/virtualMachines` or `Microsoft.Storage/storageAccounts`.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  systemData?: ResourceSystemData;
}

export interface ResourceSystemData {
  /**
   * A string identifier for the identity that created the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdBy?: string;
  /**
   * The type of identity that created the resource: user, application, managedIdentity, key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdByType?: string;
  /**
   * The timestamp of resource creation (UTC).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdAt?: string;
  /**
   * A string identifier for the identity that last modified the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedBy?: string;
  /**
   * The type of identity that last modified the resource: user, application, managedIdentity, key.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedByType?: string;
  /**
   * The timestamp of resource last modification (UTC).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedAt?: string;
}

export interface ErrorModel {
  error?: ErrorModelProperties;
}

export interface ErrorModelProperties {
  code?: string;
  message?: string;
  innerError?: string;
  details?: ErrorDetailsModel[];
}

export interface ErrorDetailsModel {
  code?: string;
  message?: string;
}

/** Describes all properties which can be updated for a Singularity account quota policy resource. */
export interface AccountQuotaPolicyPatchProperties {
  /** User-friendly description of an AccountQuotaPolicy. */
  description?: string;
  /** A list of quota policy per instance type series. */
  quotas?: InstanceTypeSeriesQuota[];
}

/** A pageable list of AccountQuotaPolicy resources. */
export interface AccountQuotaPolicyResourceDescriptionList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: AccountQuotaPolicyResourceDescription[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes the properties of an Account resource. */
export interface AccountProperties {
  provisioningState?: ProvisioningState;
  /** User-friendly description of an account. */
  description?: string;
  status?: AccountStatus;
  /** Describes the properties of idle resources handling policy. */
  idleResourcesHandlingPolicy?: IdleResourcesHandlingPolicy;
  /**
   * Gives additional information about the current status of an account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /** The collection of account locations. */
  locations?: AccountLocation[];
  /** Describes the network settings for the account. */
  networkSettings?: NetworkSettings;
}

/** Describes the properties of idle resources handling policy. */
export interface IdleResourcesHandlingPolicy {
  idleResourcesHandlingMode?: IdleResourcesHandlingMode;
}

/** Describes the properties of an Account location resource. */
export interface AccountLocation {
  /** Name of the account location. */
  name: string;
  /** The failover priority of the location. Failover priority values must be unique for each of the locations associated with the account. */
  failoverPriority: number;
  /**
   * Indicates whether or not this location has AvailabilityZone enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isZoneRedundant?: boolean;
}

/** Describes the network settings for the account. */
export interface NetworkSettings {
  /** The resource id of the delegated subnet. */
  subnetId?: string;
}

/** Describes all properties which can be updated for a Singularity account resource. */
export interface AccountPatchProperties {
  /** User-friendly description of an account. */
  description?: string;
  /** Describes the properties of idle resources handling policy. */
  idleResourcesHandlingPolicy?: IdleResourcesHandlingPolicy;
  /** The collection of account locations. */
  locations?: AccountLocation[];
  /** Describes the network settings for the account. */
  networkSettings?: NetworkSettings;
}

/** A pageable list of Account resources. */
export interface AccountResourceDescriptionList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: AccountResourceDescription[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes the properties of a GroupPolicy resource. */
export interface GroupPolicyProperties {
  provisioningState?: ProvisioningState;
  status?: PolicyStatus;
  /** User-friendly description of the resource. */
  description?: string;
  /** A list of quota policy per instance type series. */
  quotas?: InstanceTypeSeriesQuota[];
  /** Maximum allowed IOPS from shared storageContainer. */
  maxSharedStorageIOPs?: number;
  /** Maximum allowed bandwidth from shared storageContainer expressed in MB/s. */
  maxSharedStorageBandwidth?: number;
}

/** Describes all properties which can be updated for a Singularity group policy resource. */
export interface GroupPolicyPatchProperties {
  /** User-friendly description of the resource. */
  description?: string;
  /** A list of quota policy per instance type series. */
  quotas?: InstanceTypeSeriesQuota[];
  /** Maximum allowed IOPS from shared storageContainer. */
  maxSharedStorageIOPs?: number;
  /** Maximum allowed bandwidth from shared storageContainer expressed in MB/s. */
  maxSharedStorageBandwidth?: number;
}

/** A pageable list of GroupPolicy resources. */
export interface GroupPolicyResourceDescriptionList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: GroupPolicyResourceDescription[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A pageable list of available images. */
export interface AvailablePlatformImageDescriptionList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: AvailablePlatformImageDescription[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Platform supported container image types available. */
export interface AvailablePlatformImageDescription {
  /**
   * Fully qualifed Id for the container image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Image names
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly names?: string[];
  /**
   * Description of the container image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** A pageable list of available instance type series. */
export interface AvailableInstanceTypeSeriesDescriptionList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: AvailableInstanceTypeSeriesDescription[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Instance type series available in the location. */
export interface AvailableInstanceTypeSeriesDescription {
  /**
   * Unique identifier for the instance type series.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Descriptive name for the instance type series.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

/** A pageable list of available instance types. */
export interface AvailableInstanceTypeDescriptionList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: AvailableInstanceTypeDescription[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Instance type available in the location. */
export interface AvailableInstanceTypeDescription {
  /**
   * Name for the instance type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Quota count for the instance type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly quotaCount?: number;
  /**
   * Description for the instance type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Describes the properties of a job resource. */
export interface JobResourceProperties {
  provisioningState?: ProvisioningState;
  /**
   * System generated globally unique id for the job. This property is read only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobId?: string;
  /** Collection of placement policies to use for the training job. */
  placementPolicies: PlacementPolicy[];
  slaTier?: SlaTier;
  schedulingPriority?: SchedulingPriority;
  /** Job input data location. */
  dataLocation?: StorageLocation[];
  /** Describes the location of a storage source and how it will be accessed. */
  codeLocation?: StorageLocation;
  /** Describes the location of a storage source and how it will be accessed. */
  outputLocation?: StorageLocation;
  /** Describes a network resource reference. */
  networkResourceRef?: NetworkReference;
  /** Describes the container image for the job resource. */
  containerImage: ContainerImageBaseUnion;
  /** Group policy name associated with the training job. */
  groupPolicyName?: string;
  /** Describes the checkpointing policy for job */
  checkpointPolicy?: CheckpointPolicy;
  /** Maximum execution time for a training job in the account (in hours). */
  maxJobExecutionTime?: number;
  /** Minimum idle time before job gets automatically suspended (in hours). */
  suspendOnIdleTime?: number;
  /** The entry script for your Job in the codeLocation. For interactive jobs, specify null. */
  program?: string;
  /** Command line arguments to be passed to the program. */
  programArgs?: string;
  /** The directory which TensorBoard will be configured to use as the log directory. */
  tensorBoardLogDirectory?: string;
  status?: JobStatus;
  /** User-friendly description of the job. */
  description?: string;
  /**
   * Gives additional information about the current status of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /**
   * Url to access Jupyter notebook endpoint of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly notebookEndpoint?: string;
  /**
   * Url to access TensorBoard endpoint of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tensorBoardEndpoint?: string;
  /**
   * Url to access Grafana endpoint of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly grafanaEndpoint?: string;
  /**
   * Url to access logs of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobLogsEndpoint?: string;
  /** User specified job environment variables. */
  environmentVariables?: { [propertyName: string]: string };
}

/** Describes the placement policy for a Job or a Model. */
export interface PlacementPolicy {
  /** The list of settings for instance types. */
  instanceTypes: InstanceTypeSettings[];
  /** An optional location for instance type placement. If specified, this must be one of the account resource locations. */
  location?: string;
}

/** Describes the instance type settings. */
export interface InstanceTypeSettings {
  /** The instance type belonging to the same series. */
  instanceType: string;
  /** Describes the scale policy for a Job or a Model. */
  scalePolicy: ScalePolicy;
}

/** Describes the scale policy for a Job or a Model. */
export interface ScalePolicy {
  /** The minimum instance type count to provision. */
  minInstanceTypeCount?: number;
  /** Maximum instance type count (the limit) up to which to provision. */
  maxInstanceTypeCount?: number;
  /**
   * The current instance type count.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentInstanceTypeCount?: number;
  /** Set of valid instance type counts that the job can be autoscaled to e.g., [2,4,8,16]. */
  instanceTypeCountSet?: number[];
  /** A hint on the interval to use for auto scaling. */
  autoScaleIntervalInSecondsHint?: number;
}

/** Describes the location of a storage source and how it will be accessed. */
export interface StorageLocation {
  /** This type describes Singularity storage for a job or service. */
  source?: StorageSourceBaseUnion;
  /** Name of the managed storage resource to mount. */
  storageCacheContainerName?: string;
  /** Describes the target mountpoint of a storage source. */
  mount?: StorageMount;
}

/** This type describes Singularity storage for a job or service. */
export interface StorageSourceBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AzureAISupercomputerStorage" | "AzureBlobStorage";
}

/** Describes the target mountpoint of a storage source. */
export interface StorageMount {
  /** The target mountpoint path. */
  path?: string;
}

/** Describes a network resource reference. */
export interface NetworkReference {
  /** Name of the network resource to reference. */
  name?: string;
}

/** Describes the container image for the job resource. */
export interface ContainerImageBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Custom" | "Platform";
}

/** Describes the checkpointing policy for job */
export interface CheckpointPolicy {
  /** Enables automatic checkpointing of training job. */
  enableCheckpoint?: boolean;
  /** The relative path in the platform storage. */
  checkpointRelativePath?: string;
  /** Maximum elapsed duration between subsequent checkpoints. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). */
  checkpointInterval?: string;
  /** Maximum elapsed iteration count between the subsequent checkpoints. */
  checkpointIterationCount?: number;
  /** Describes the checkpointing retention policy for job */
  checkpointRetentionPolicy?: CheckpointRetentionPolicy;
}

/** Describes the checkpointing retention policy for job */
export interface CheckpointRetentionPolicy {
  mode: CheckpointRetentionMode;
  /** Minimum elapsed duration before deleting checkpoint. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). */
  ttl?: string;
  /** Maximum storage size for checkpoint files to retain. Checkpoint files will be purged in FIFO manner. */
  maxStorage?: number;
}

export interface ResourceIdentity {
  /** The type of identity used for the resource. The type 'None' will remove any identities from the resource. */
  type: string;
  /**
   * The tenant id associated with the resource. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * The principal id of the resource identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /** The user assigned managed identities assigned to this resource (if any). */
  userAssignedIdentities?: {
    [propertyName: string]: ResourceUserAssignedIdentity;
  };
}

export interface ResourceUserAssignedIdentity {
  /**
   * The principal id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Describes all properties which can be updated for a Singularity job resource. */
export interface JobPatchProperties {
  /** User-friendly description of the job. */
  description?: string;
  schedulingPriority?: SchedulingPriority;
}

/** Describes properties for the user action of Singularity jobs. */
export interface JobUserActionDescription {
  /** The name of the group policy. */
  groupPolicyName?: string;
}

/** Describes a Shared Access Signature (SAS) Token for Singularity Jobs. */
export interface JobSasTokenDescription {
  /** The SAS token is valid only after the start time (UTC). */
  startTime?: Date;
  /** The time (UTC) after which the SAS token becomes invalid. */
  expirationTime?: Date;
  protocol?: ProtocolType;
  /**
   * The algorithm and API version the SAS token was generated with
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * The SAS token generated by the service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly token?: string;
  /** The name of the group policy. */
  groupPolicyName?: string;
}

/** A pageable list of Job resources. */
export interface JobResourceDescriptionList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: JobResourceDescription[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes the properties of a model resource. */
export interface ModelResourceProperties {
  provisioningState?: ProvisioningState;
  /** Group policy name associated with the model. */
  groupPolicyName?: string;
  inferenceMode?: InferenceMode;
  slaTier?: SlaTier;
  /** Describes the location of a storage source and how it will be accessed. */
  packageLocation: StorageLocation;
  /** Describes a network resource reference. */
  networkResourceRef?: NetworkReference;
  /** Describes the scale policy of resource. This serves as the data parallel dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s) specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to any instance count specified by the range ("min", "max"). */
  scalePolicy: ScalePolicyV2;
  /** Describes the partitioning settings of the model. Models can be partitioned for scalability (when a model is too large to fit on a single device) and/or throughput. */
  partitioningSetting?: ModelPartitioningSetting;
  /** The specification for the instance type for instantiating the model. For AOT compiled model this property specifies the settings for the instance types where the model partitions needs to be instantiated as specified by the ModelPlacementSetting. For JIT compiled model this property specifies the list of instance types on which the model partitions can be instantiated. */
  instanceTypeSettings: InstanceTypeSetting[];
  /** Collection of geographic locations where the model is deployed. */
  locations?: ModelLocation[];
  /**
   * Global endpoints of the model that allow accessing the model across geographic locations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpoints?: Endpoint[];
  /** This type describes the Compilation Policy of the model for training / inferencing. */
  compilationPolicy?: CompilationPolicyBase;
  /** Describes the model probe setting. */
  modelProbeSetting?: ModelProbeSetting;
}

/** Describes the scale policy of resource. This serves as the data parallel dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s) specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to any instance count specified by the range ("min", "max"). */
export interface ScalePolicyV2 {
  /** The minimum instance count of the resource. */
  min?: number;
  /** Maximum instance count of the resource. */
  max?: number;
  /** Set of valid instance counts that the resource can be scaled to e.g., [2,4,8,16]. This is required for discrete scaling. */
  scaleSet?: number[];
}

/** Describes the partitioning settings of the model. Models can be partitioned for scalability (when a model is too large to fit on a single device) and/or throughput. */
export interface ModelPartitioningSetting {
  /** Specifies the pipeline-parallelism dimension of the model. */
  pipelinePartitionCount?: number;
  /** Specifies the model-parallelism dimension of the model. */
  tensorPartitionCount?: number;
  /** The list of information about model partitions. */
  partitions?: ModelPartition[];
}

/** Describes a partition of a model. A model consists of one or more partitions (in the tensor and pipeline parallel dimensions). A partition is scoped and mapped onto a device. */
export interface ModelPartition {
  /** Index of pipeline partition. */
  pipelinePartitionIndex: number;
  /** Index of tensor partition. */
  tensorPartitionIndex: number;
  /** Path in modelPackageLocation where package for this model partition is located. */
  packagePath?: string;
  /** Describes placement of a model partition on a device. */
  partitionPlacement: ModelPartitionPlacement;
}

/** Describes placement of a model partition on a device. */
export interface ModelPartitionPlacement {
  /** Model partitions can target placement on the same or different instances of the InstanceType by referencing the same or different InstanceTypeSetting name */
  instanceTypeSettingNameRef: string;
  /** Id of the device for placement of this model partition on the InstanceType referenced above. */
  deviceId?: number;
}

/** Describes setting for a Singularity Instance Type */
export interface InstanceTypeSetting {
  /** Specifies the name of this instance type setting. This name can be used to identify the instance of an instanceType. Resources referencing the same name are collocated on the same instance of the instance type. */
  name?: string;
  /** The instance type name. */
  instanceType?: string;
  /** Describes the settings of container. */
  containerSetting?: ContainerSetting;
}

/** Describes the settings of container. */
export interface ContainerSetting {
  /** Describes the container image for the job resource. */
  image?: ContainerImageBaseUnion;
  /** Environment variables. */
  environmentVariables?: { [propertyName: string]: string };
  /** Describes container's entry-point. */
  setupEntryPoint?: ContainerEntryPoint;
  /** Describes container's entry-point. */
  mainEntryPoint?: ContainerEntryPoint;
  /** Describes container's entry-point. */
  cleanupEntryPoint?: ContainerEntryPoint;
  /** Describes the settings of the probe. */
  livenessProbeSetting?: ProbeSettingUnion;
}

/** Describes container's entry-point. */
export interface ContainerEntryPoint {
  /** The entry point program. */
  program?: string;
  /** Command line arguments to be passed to the program. */
  programArgs?: string;
}

/** Describes the settings of the probe. */
export interface ProbeSetting {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Exec" | "Http";
  /** The initial delay in seconds to start executing the probe after the container has started. */
  initialDelayInSeconds?: number;
  /** Minimum consecutive successes for the probe to be considered successful after having failed. */
  successThreshold?: number;
  /** Number of consecutive failures for the probe after which the container is restarted. */
  failureThreshold?: number;
  /** The period in seconds to specify the frequency of the probe. */
  frequencyInSeconds?: number;
  /** The period in seconds after which we consider the probe as failed, if it hasn't finished successfully. */
  timeoutInSeconds?: number;
}

/** Describes properties of a model resource for a given geographic location. */
export interface ModelLocation {
  /** Name of the geographic location. */
  location: string;
  status?: ModelStatus;
  /**
   * Gives additional information about the current status of the model in this location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /**
   * Error code of the model in this location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorCode?: string;
  /** Describes the scale policy of resource. This serves as the data parallel dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s) specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to any instance count specified by the range ("min", "max"). */
  scalePolicy?: ScalePolicyV2;
  /**
   * Endpoints of the model in this location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpoints?: Endpoint[];
  /**
   * Current instance count of the model in this location
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentInstanceCount?: number;
}

/** Describes the named endpoint of a job or model. */
export interface Endpoint {
  /**
   * The name of the endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The address of the endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly address?: string;
}

/** This type describes the Compilation Policy of the model for training / inferencing. */
export interface CompilationPolicyBase {
  kind: CompilationPolicyKind;
}

/** Describes the model probe setting. */
export interface ModelProbeSetting {
  /** Describes the settings of the probe. */
  livenessProbeSetting?: ProbeSettingUnion;
  /** Describes the settings of the probe. */
  readinessProbeSetting?: ProbeSettingUnion;
}

/** Describes all properties which can be updated for a Singularity Model resource. */
export interface ModelPatchProperties {
  /** Collection of placement policies to use for placement of this model version. */
  placementPolicies?: PlacementPolicy[];
  /** User-friendly description of the model. */
  description?: string;
}

/** A pageable list of model resources. */
export interface ModelResourceDescriptionList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ModelResourceDescription[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes the properties of a network resource. */
export interface NetworkPropertiesBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "DelegatedSubnet";
  provisioningState?: ProvisioningState;
  status?: NetworkResourceStatus;
}

/** A pageable list of network resources. */
export interface NetworkResourceDescriptionList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: NetworkResourceDescription[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes the result of the request to list Singularity operations. */
export interface OperationListResult {
  /**
   * List of operations supported by the Singularity resource provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: OperationResult[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** List of operations available at the listed Azure resource provider. */
export interface OperationResult {
  /**
   * The name of the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** An operation available at the listed Azure resource provider. */
  display?: AvailableOperationDisplay;
  /**
   * Origin result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: string;
  /**
   * Indicates whether the operation is a data action.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** An operation available at the listed Azure resource provider. */
export interface AvailableOperationDisplay {
  /**
   * Name of the operation provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * Name of the resource on which the operation is available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * Name of the available operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * Description of the available operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Describes the properties of a storage cache resource. */
export interface StorageCachePropertiesBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Blob" | "NFS" | "ADLS";
  /** Description of the storage cache resource. */
  description?: string;
  /** Optional region for managed storage resources (if any). */
  region?: string;
  provisioningState?: ProvisioningState;
  status?: StorageCacheStatus;
  /**
   * Default mount path that will be used within a job or model if none is specified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultMountPath?: string;
}

/** A pageable list of storage cache resources. */
export interface StorageCacheResourceDescriptionList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: StorageCacheResourceDescription[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A pageable list of quotas. */
export interface InstanceTypeSeriesQuotaList {
  /**
   * One page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: InstanceTypeSeriesQuota[];
  /**
   * URI to fetch the next page of the list.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

export interface BlobStorageTarget {
  /** Storage container endpoint (e.g. https://<account>.blob.core.windows.net/<container> */
  containerEndpoint: string;
  /** Optional model blob name within container for FPGA inferencing deployments. */
  blobName?: string;
  /** SAS token to use for authentication. */
  sasToken?: string;
  /** User assigned managed identity resource ID to use for authentication. */
  userAssignedIdentity?: string;
}

/** Describes options to use when mounting a storage cache container backed by Azure blob storage. */
export interface BlobMountOptionsBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Fuse" | "Interception";
}

/** Describes options to use when mounting a storage cache container backed by ADLS Gen1. */
export interface AdlsMountOptionsBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Fuse" | "Interception";
}

export type AccountQuotaPolicyResourceDescriptionProperties = AccountQuotaPolicyProperties;

/** Describes an account quota policy resource in Singularity. */
export type AccountQuotaPolicyResourceDescription = Resource & {
  provisioningState?: ProvisioningState;
  status?: PolicyStatus;
  /** User-friendly description of an AccountQuotaPolicy. */
  description?: string;
  /** A list of quota policy per instance type series. */
  quotas?: InstanceTypeSeriesQuota[];
};

/** Describes all properties which can be updated for a Singularity account quota policy resource. */
export type AccountQuotaPolicyResourcePatchDescription = Resource & {
  /** User-friendly description of an AccountQuotaPolicy. */
  description?: string;
  /** A list of quota policy per instance type series. */
  quotas?: InstanceTypeSeriesQuota[];
};

/** The resource model definition for Azure Resource Manager tracked top-level resource. */
export type TrackedResource = Resource & {
  /** The geo-location where the resource lives. */
  location: string;
};

/** Describes all properties which can be updated for a Singularity account resource. */
export type AccountResourcePatchDescription = Resource & {
  /** User-friendly description of an account. */
  description?: string;
  /** Describes the properties of idle resources handling policy. */
  idleResourcesHandlingPolicy?: IdleResourcesHandlingPolicy;
  /** The collection of account locations. */
  locations?: AccountLocation[];
  /** Describes the network settings for the account. */
  networkSettings?: NetworkSettings;
};

/** Describes a GroupPolicy resource in Singularity. */
export type GroupPolicyResourceDescription = Resource & {
  provisioningState?: ProvisioningState;
  status?: PolicyStatus;
  /** User-friendly description of the resource. */
  description?: string;
  /** A list of quota policy per instance type series. */
  quotas?: InstanceTypeSeriesQuota[];
  /** Maximum allowed IOPS from shared storageContainer. */
  maxSharedStorageIOPs?: number;
  /** Maximum allowed bandwidth from shared storageContainer expressed in MB/s. */
  maxSharedStorageBandwidth?: number;
};

/** Describes all properties which can be updated for a Singularity group policy resource. */
export type GroupPolicyResourcePatchDescription = Resource & {
  /** User-friendly description of the resource. */
  description?: string;
  /** A list of quota policy per instance type series. */
  quotas?: InstanceTypeSeriesQuota[];
  /** Maximum allowed IOPS from shared storageContainer. */
  maxSharedStorageIOPs?: number;
  /** Maximum allowed bandwidth from shared storageContainer expressed in MB/s. */
  maxSharedStorageBandwidth?: number;
};

/** Describes a job resource in Singularity. */
export type JobResourceDescription = Resource & {
  identity?: ResourceIdentity;
  provisioningState?: ProvisioningState;
  /**
   * System generated globally unique id for the job. This property is read only.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobId?: string;
  /** Collection of placement policies to use for the training job. */
  placementPolicies: PlacementPolicy[];
  slaTier?: SlaTier;
  schedulingPriority?: SchedulingPriority;
  /** Job input data location. */
  dataLocation?: StorageLocation[];
  /** Describes the location of a storage source and how it will be accessed. */
  codeLocation?: StorageLocation;
  /** Describes the location of a storage source and how it will be accessed. */
  outputLocation?: StorageLocation;
  /** Describes a network resource reference. */
  networkResourceRef?: NetworkReference;
  /** Describes the container image for the job resource. */
  containerImage: ContainerImageBaseUnion;
  /** Group policy name associated with the training job. */
  groupPolicyName?: string;
  /** Describes the checkpointing policy for job */
  checkpointPolicy?: CheckpointPolicy;
  /** Maximum execution time for a training job in the account (in hours). */
  maxJobExecutionTime?: number;
  /** Minimum idle time before job gets automatically suspended (in hours). */
  suspendOnIdleTime?: number;
  /** The entry script for your Job in the codeLocation. For interactive jobs, specify null. */
  program?: string;
  /** Command line arguments to be passed to the program. */
  programArgs?: string;
  /** The directory which TensorBoard will be configured to use as the log directory. */
  tensorBoardLogDirectory?: string;
  status?: JobStatus;
  /** User-friendly description of the job. */
  description?: string;
  /**
   * Gives additional information about the current status of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /**
   * Url to access Jupyter notebook endpoint of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly notebookEndpoint?: string;
  /**
   * Url to access TensorBoard endpoint of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tensorBoardEndpoint?: string;
  /**
   * Url to access Grafana endpoint of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly grafanaEndpoint?: string;
  /**
   * Url to access logs of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobLogsEndpoint?: string;
  /** User specified job environment variables. */
  environmentVariables?: { [propertyName: string]: string };
};

/** Describes all properties which can be updated for a Singularity job resource. */
export type JobResourcePatchDescription = Resource & {
  /** User-friendly description of the job. */
  description?: string;
  schedulingPriority?: SchedulingPriority;
};

/** Describes a model resource in Singularity. */
export type ModelResourceDescription = Resource & {
  identity?: ResourceIdentity;
  provisioningState?: ProvisioningState;
  /** Group policy name associated with the model. */
  groupPolicyName?: string;
  inferenceMode?: InferenceMode;
  slaTier?: SlaTier;
  /** Describes the location of a storage source and how it will be accessed. */
  packageLocation: StorageLocation;
  /** Describes a network resource reference. */
  networkResourceRef?: NetworkReference;
  /** Describes the scale policy of resource. This serves as the data parallel dimension for 3D parallelism (viz., data, pipeline and model parallelism).There are two modes of scaling:1. Discrete: Resource can be only be scaled to a specific instance count(s) specified by the "scaleSet" (for e.g., [2, 4, 8, 16]).2. Continuous: Resource can be scaled to any instance count specified by the range ("min", "max"). */
  scalePolicy: ScalePolicyV2;
  /** Describes the partitioning settings of the model. Models can be partitioned for scalability (when a model is too large to fit on a single device) and/or throughput. */
  partitioningSetting?: ModelPartitioningSetting;
  /** The specification for the instance type for instantiating the model. For AOT compiled model this property specifies the settings for the instance types where the model partitions needs to be instantiated as specified by the ModelPlacementSetting. For JIT compiled model this property specifies the list of instance types on which the model partitions can be instantiated. */
  instanceTypeSettings: InstanceTypeSetting[];
  /** Collection of geographic locations where the model is deployed. */
  locations?: ModelLocation[];
  /**
   * Global endpoints of the model that allow accessing the model across geographic locations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpoints?: Endpoint[];
  /** This type describes the Compilation Policy of the model for training / inferencing. */
  compilationPolicy?: CompilationPolicyBase;
  /** Describes the model probe setting. */
  modelProbeSetting?: ModelProbeSetting;
};

/** Describes all properties which can be updated for a Singularity Model resource. */
export type ModelResourcePatchDescription = Resource & {
  /** Collection of placement policies to use for placement of this model version. */
  placementPolicies?: PlacementPolicy[];
  /** User-friendly description of the model. */
  description?: string;
};

/** Describes a network resource. */
export type NetworkResourceDescription = Resource & {
  /** Describes the properties of a network resource. */
  properties: NetworkPropertiesBaseUnion;
};

/** Describes a storage cache resource. */
export type StorageCacheResourceDescription = Resource & {
  /** Describes the properties of a storage cache resource. */
  properties: StorageCachePropertiesBaseUnion;
};

/** Storage cache resource diagnostics information. */
export type StorageCacheResourceDiagnosticsInfo = Resource & {
  /**
   * The used storage capacity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly usageInMiB?: number;
};

export type AccountQuotaPolicyResourcePatchDescriptionProperties = AccountQuotaPolicyPatchProperties;

export type AccountResourceDescriptionProperties = AccountProperties;

export type AccountResourcePatchDescriptionProperties = AccountPatchProperties;

export type GroupPolicyResourceDescriptionProperties = GroupPolicyProperties;

export type GroupPolicyResourcePatchDescriptionProperties = GroupPolicyPatchProperties;

export type JobResourceDescriptionProperties = JobResourceProperties;

/** This type describes Singularity storage for a job or service. */
export type StorageSourceAzureAISupercomputerStorage = StorageSourceBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AzureAISupercomputerStorage";
  /** Path to the Singularity storage. */
  storageContainerName: string;
};

/** This type describes Singularity storage for a job or service. */
export type StorageSourceAzureBlob = StorageSourceBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AzureBlobStorage";
  /** For SasToken AuthenticationType: Container Endpoint with the associated SAS token. For SystemAssignedIdentity and UserAssignedIdentity AuthenticationType: Container Endpoint only. */
  blobEndpoint: string;
  /** Storage account ResourceId for the Azure blob. Required when AuthenticationType is SystemAssignedIdentity. */
  accountResourceId?: string;
  /** User assigned managed identity. Required when AuthenticationType is UserAssignedIdentity. */
  userAssignedIdentity?: string;
  authenticationType?: StorageAuthenticationType;
};

/** Describes a custom image. */
export type CustomContainerImage = ContainerImageBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Custom";
  /** Location of image to use for training. */
  image: string;
  /** Username of the container registry account. Required if UserAssignedIdentity is omitted. */
  containerRegistryUsername?: string;
  /** Password of the container registry account. Required if UserAssignedIdentity is omitted. */
  containerRegistryPassword?: string;
  /** User assigned identity with access to the container registry. Required if ContainerRegistryUsername and ContainerRegistryPassword are omitted. */
  userAssignedIdentity?: string;
};

/** Describes a platform image. */
export type PlatformContainerImage = ContainerImageBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Platform";
  /** Name of the platform image. This supports fully qualified image names and image friendly names */
  name: string;
};

export type JobResourcePatchDescriptionProperties = JobPatchProperties;

export type ModelResourceDescriptionProperties = ModelResourceProperties;

/** Describes probe settings based on executing a program. */
export type ExecProbeSetting = ProbeSetting & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Exec";
  /** Program to be executed for the probe. */
  program: string;
  /** Arguments passed into the Program. */
  programArgs?: string;
};

/** Describes probe settings based on HTTP request. */
export type HttpProbeSetting = ProbeSetting & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Http";
  /** The path relative to the endpoint domain name used to probe. */
  path?: string;
};

export type ModelResourcePatchDescriptionProperties = ModelPatchProperties;

/** Describes the properties of a delegated subnet resource. */
export type DelegatedSubnetProperties = NetworkPropertiesBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "DelegatedSubnet";
  /** Subnet resource ID (e.g. /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName} */
  delegatedSubnetResourceId?: string;
};

/** Describes the properties of a storage cache resource backed by Azure blob. */
export type BlobStorageCacheProperties = StorageCachePropertiesBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Blob";
  storageTarget?: BlobStorageTarget;
  /** Describes options to use when mounting a storage cache container backed by Azure blob storage. */
  mountOptions?: BlobMountOptionsBaseUnion;
};

/** Describes the properties of a storage cache resource backed by NFS. */
export type NfsStorageCacheProperties = StorageCachePropertiesBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "NFS";
  /** Optional storage capacity to allocate. */
  capacityInGiB?: number;
};

/** Describes the properties of a storage cache resource backed by ADLS Gen 1. */
export type AdlsStorageCacheProperties = StorageCachePropertiesBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ADLS";
  /** ADLS path (e.g. adl://<adls name>.azuredatalakestore.net/<folder>) */
  path: string;
  /** Service principal tenant ID */
  tenantId: string;
  /** Service principal client (application) ID */
  clientId: string;
  /** Service principal client secret */
  clientSecret: string;
  /** Describes options to use when mounting a storage cache container backed by ADLS Gen1. */
  mountOptions?: AdlsMountOptionsBaseUnion;
};

/** Describes options to use when mounting a storage cache container backed by Azure blob storage through FUSE. */
export type BlobFuseMountOptions = BlobMountOptionsBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Fuse";
  /** --streaming option as described at https://github.com/Azure/azure-storage-fuse */
  streaming?: boolean;
  /** --stream-cache-mb option as described at https://github.com/Azure/azure-storage-fuse */
  streamingCacheLimitMiB?: number;
  /** --max-blocks-per-file option as described at https://github.com/Azure/azure-storage-fuse */
  streamingMaxBlocksPerFile?: number;
  /** --block-size-mb option as described at https://github.com/Azure/azure-storage-fuse */
  streamingBlockSizeMiB?: number;
  /** --max-concurrency option as described at https://github.com/Azure/azure-storage-fuse */
  maxConcurrency?: number;
  /** --file-cache-timeout-in-seconds option as described at https://github.com/Azure/azure-storage-fuse */
  fileCacheTimeoutSeconds?: number;
  /** --invalidate-on-sync option as described at https://github.com/Azure/azure-storage-fuse */
  invalidateOnSync?: boolean;
};

/** Describes options to use when accessing a storage cache container backed by Azure blob storage through file system interception. */
export type BlobInterceptionMountOptions = BlobMountOptionsBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Interception";
};

/** Describes options to use when mounting a storage cache container backed by ADLS Gen1 through FUSE. */
export type AdlsFuseMountOptions = AdlsMountOptionsBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Fuse";
};

/** Describes options to use when accessing a storage cache container backed by ADLS Gen1 through file system interception. */
export type AdlsInterceptionMountOptions = AdlsMountOptionsBase & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Interception";
};

/** Describes an account resource in Singularity. */
export type AccountResourceDescription = TrackedResource & {
  provisioningState?: ProvisioningState;
  /** User-friendly description of an account. */
  description?: string;
  status?: AccountStatus;
  /** Describes the properties of idle resources handling policy. */
  idleResourcesHandlingPolicy?: IdleResourcesHandlingPolicy;
  /**
   * Gives additional information about the current status of an account.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /** The collection of account locations. */
  locations?: AccountLocation[];
  /** Describes the network settings for the account. */
  networkSettings?: NetworkSettings;
};

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  Succeeded = "Succeeded",
  Failed = "Failed",
  Creating = "Creating",
  Updating = "Updating",
  Suspending = "Suspending",
  Resuming = "Resuming",
  Canceling = "Canceling",
  Deleting = "Deleting"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Creating** \
 * **Updating** \
 * **Suspending** \
 * **Resuming** \
 * **Canceling** \
 * **Deleting**
 */
export type ProvisioningState = string;

/** Known values of {@link PolicyStatus} that the service accepts. */
export enum KnownPolicyStatus {
  Creating = "Creating",
  Created = "Created",
  Updating = "Updating",
  Deleting = "Deleting",
  Failed = "Failed"
}

/**
 * Defines values for PolicyStatus. \
 * {@link KnownPolicyStatus} can be used interchangeably with PolicyStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Deleting** \
 * **Failed**
 */
export type PolicyStatus = string;

/** Known values of {@link SlaTier} that the service accepts. */
export enum KnownSlaTier {
  Premium = "Premium",
  Standard = "Standard",
  Basic = "Basic"
}

/**
 * Defines values for SlaTier. \
 * {@link KnownSlaTier} can be used interchangeably with SlaTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Premium** \
 * **Standard** \
 * **Basic**
 */
export type SlaTier = string;

/** Known values of {@link AccountStatus} that the service accepts. */
export enum KnownAccountStatus {
  Creating = "Creating",
  Created = "Created",
  Updating = "Updating",
  Deleting = "Deleting",
  Failed = "Failed"
}

/**
 * Defines values for AccountStatus. \
 * {@link KnownAccountStatus} can be used interchangeably with AccountStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Created** \
 * **Updating** \
 * **Deleting** \
 * **Failed**
 */
export type AccountStatus = string;

/** Known values of {@link IdleResourcesHandlingMode} that the service accepts. */
export enum KnownIdleResourcesHandlingMode {
  AutoSuspend = "AutoSuspend",
  AutoDelete = "AutoDelete"
}

/**
 * Defines values for IdleResourcesHandlingMode. \
 * {@link KnownIdleResourcesHandlingMode} can be used interchangeably with IdleResourcesHandlingMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AutoSuspend** \
 * **AutoDelete**
 */
export type IdleResourcesHandlingMode = string;

/** Known values of {@link SchedulingPriority} that the service accepts. */
export enum KnownSchedulingPriority {
  Low = "Low",
  Medium = "Medium",
  High = "High"
}

/**
 * Defines values for SchedulingPriority. \
 * {@link KnownSchedulingPriority} can be used interchangeably with SchedulingPriority,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Low** \
 * **Medium** \
 * **High**
 */
export type SchedulingPriority = string;

/** Known values of {@link StorageSourceKind} that the service accepts. */
export enum KnownStorageSourceKind {
  AzureAISupercomputerStorage = "AzureAISupercomputerStorage",
  AzureBlobStorage = "AzureBlobStorage"
}

/**
 * Defines values for StorageSourceKind. \
 * {@link KnownStorageSourceKind} can be used interchangeably with StorageSourceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureAISupercomputerStorage** \
 * **AzureBlobStorage**
 */
export type StorageSourceKind = string;

/** Known values of {@link ContainerImageKind} that the service accepts. */
export enum KnownContainerImageKind {
  Platform = "Platform",
  Custom = "Custom"
}

/**
 * Defines values for ContainerImageKind. \
 * {@link KnownContainerImageKind} can be used interchangeably with ContainerImageKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Platform** \
 * **Custom**
 */
export type ContainerImageKind = string;

/** Known values of {@link CheckpointRetentionMode} that the service accepts. */
export enum KnownCheckpointRetentionMode {
  Ttl = "Ttl",
  MaxStorage = "MaxStorage"
}

/**
 * Defines values for CheckpointRetentionMode. \
 * {@link KnownCheckpointRetentionMode} can be used interchangeably with CheckpointRetentionMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ttl** \
 * **MaxStorage**
 */
export type CheckpointRetentionMode = string;

/** Known values of {@link JobStatus} that the service accepts. */
export enum KnownJobStatus {
  Initialized = "Initialized",
  Running = "Running",
  Suspended = "Suspended",
  Completed = "Completed",
  Failed = "Failed",
  Canceled = "Canceled"
}

/**
 * Defines values for JobStatus. \
 * {@link KnownJobStatus} can be used interchangeably with JobStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initialized** \
 * **Running** \
 * **Suspended** \
 * **Completed** \
 * **Failed** \
 * **Canceled**
 */
export type JobStatus = string;

/** Known values of {@link ProtocolType} that the service accepts. */
export enum KnownProtocolType {
  Https = "Https",
  Tcp = "Tcp",
  WebSocket = "WebSocket",
  Ssh = "Ssh"
}

/**
 * Defines values for ProtocolType. \
 * {@link KnownProtocolType} can be used interchangeably with ProtocolType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Https** \
 * **Tcp** \
 * **WebSocket** \
 * **Ssh**
 */
export type ProtocolType = string;

/** Known values of {@link InferenceMode} that the service accepts. */
export enum KnownInferenceMode {
  Online = "Online",
  Batch = "Batch"
}

/**
 * Defines values for InferenceMode. \
 * {@link KnownInferenceMode} can be used interchangeably with InferenceMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Online** \
 * **Batch**
 */
export type InferenceMode = string;

/** Known values of {@link ProbeSettingKind} that the service accepts. */
export enum KnownProbeSettingKind {
  Exec = "Exec",
  Http = "Http"
}

/**
 * Defines values for ProbeSettingKind. \
 * {@link KnownProbeSettingKind} can be used interchangeably with ProbeSettingKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Exec** \
 * **Http**
 */
export type ProbeSettingKind = string;

/** Known values of {@link ModelStatus} that the service accepts. */
export enum KnownModelStatus {
  Creating = "Creating",
  Ready = "Ready",
  Deleting = "Deleting",
  DeploymentCompletedWithError = "DeploymentCompletedWithError",
  Failed = "Failed",
  Updating = "Updating"
}

/**
 * Defines values for ModelStatus. \
 * {@link KnownModelStatus} can be used interchangeably with ModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Ready** \
 * **Deleting** \
 * **DeploymentCompletedWithError** \
 * **Failed** \
 * **Updating**
 */
export type ModelStatus = string;

/** Known values of {@link CompilationPolicyKind} that the service accepts. */
export enum KnownCompilationPolicyKind {
  JIT = "JIT",
  AOT = "AOT"
}

/**
 * Defines values for CompilationPolicyKind. \
 * {@link KnownCompilationPolicyKind} can be used interchangeably with CompilationPolicyKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **JIT** \
 * **AOT**
 */
export type CompilationPolicyKind = string;

/** Known values of {@link NetworkKind} that the service accepts. */
export enum KnownNetworkKind {
  DelegatedSubnet = "DelegatedSubnet"
}

/**
 * Defines values for NetworkKind. \
 * {@link KnownNetworkKind} can be used interchangeably with NetworkKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DelegatedSubnet**
 */
export type NetworkKind = string;

/** Known values of {@link NetworkResourceStatus} that the service accepts. */
export enum KnownNetworkResourceStatus {
  Unknown = "Unknown",
  Creating = "Creating",
  Created = "Created",
  Deleting = "Deleting"
}

/**
 * Defines values for NetworkResourceStatus. \
 * {@link KnownNetworkResourceStatus} can be used interchangeably with NetworkResourceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Creating** \
 * **Created** \
 * **Deleting**
 */
export type NetworkResourceStatus = string;

/** Known values of {@link StorageCacheKind} that the service accepts. */
export enum KnownStorageCacheKind {
  Blob = "Blob",
  NFS = "NFS",
  Adls = "ADLS"
}

/**
 * Defines values for StorageCacheKind. \
 * {@link KnownStorageCacheKind} can be used interchangeably with StorageCacheKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Blob** \
 * **NFS** \
 * **ADLS**
 */
export type StorageCacheKind = string;

/** Known values of {@link StorageCacheStatus} that the service accepts. */
export enum KnownStorageCacheStatus {
  Unknown = "Unknown",
  Creating = "Creating",
  Created = "Created",
  Deleting = "Deleting",
  Suspended = "Suspended"
}

/**
 * Defines values for StorageCacheStatus. \
 * {@link KnownStorageCacheStatus} can be used interchangeably with StorageCacheStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Creating** \
 * **Created** \
 * **Deleting** \
 * **Suspended**
 */
export type StorageCacheStatus = string;

/** Known values of {@link StorageAuthenticationType} that the service accepts. */
export enum KnownStorageAuthenticationType {
  None = "None",
  SasToken = "SasToken",
  StorageAccountKey = "StorageAccountKey",
  SystemAssignedIdentity = "SystemAssignedIdentity",
  UserAssignedIdentity = "UserAssignedIdentity"
}

/**
 * Defines values for StorageAuthenticationType. \
 * {@link KnownStorageAuthenticationType} can be used interchangeably with StorageAuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SasToken** \
 * **StorageAccountKey** \
 * **SystemAssignedIdentity** \
 * **UserAssignedIdentity**
 */
export type StorageAuthenticationType = string;

/** Known values of {@link MountOptionsKind} that the service accepts. */
export enum KnownMountOptionsKind {
  Fuse = "Fuse",
  Interception = "Interception"
}

/**
 * Defines values for MountOptionsKind. \
 * {@link KnownMountOptionsKind} can be used interchangeably with MountOptionsKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Fuse** \
 * **Interception**
 */
export type MountOptionsKind = string;

/** Optional parameters. */
export interface AccountQuotaPolicyCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AccountQuotaPolicyCreateOrUpdateResponse = AccountQuotaPolicyResourceDescription;

/** Optional parameters. */
export interface AccountQuotaPolicyUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AccountQuotaPolicyUpdateResponse = AccountQuotaPolicyResourceDescription;

/** Optional parameters. */
export interface AccountQuotaPolicyGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AccountQuotaPolicyGetResponse = AccountQuotaPolicyResourceDescription;

/** Optional parameters. */
export interface AccountQuotaPolicyListByAccountOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccount operation. */
export type AccountQuotaPolicyListByAccountResponse = AccountQuotaPolicyResourceDescriptionList;

/** Optional parameters. */
export interface AccountQuotaPolicyListByAccountNextOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccountNext operation. */
export type AccountQuotaPolicyListByAccountNextResponse = AccountQuotaPolicyResourceDescriptionList;

/** Optional parameters. */
export interface AccountCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AccountCreateOrUpdateResponse = AccountResourceDescription;

/** Optional parameters. */
export interface AccountUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AccountUpdateResponse = AccountResourceDescription;

/** Optional parameters. */
export interface AccountGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AccountGetResponse = AccountResourceDescription;

/** Optional parameters. */
export interface AccountDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface AccountListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type AccountListByResourceGroupResponse = AccountResourceDescriptionList;

/** Optional parameters. */
export interface AccountListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type AccountListBySubscriptionResponse = AccountResourceDescriptionList;

/** Optional parameters. */
export interface AccountListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type AccountListByResourceGroupNextResponse = AccountResourceDescriptionList;

/** Optional parameters. */
export interface AccountListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type AccountListBySubscriptionNextResponse = AccountResourceDescriptionList;

/** Optional parameters. */
export interface GroupPolicyCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GroupPolicyCreateOrUpdateResponse = GroupPolicyResourceDescription;

/** Optional parameters. */
export interface GroupPolicyUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type GroupPolicyUpdateResponse = GroupPolicyResourceDescription;

/** Optional parameters. */
export interface GroupPolicyGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GroupPolicyGetResponse = GroupPolicyResourceDescription;

/** Optional parameters. */
export interface GroupPolicyDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GroupPolicyListByAccountOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccount operation. */
export type GroupPolicyListByAccountResponse = GroupPolicyResourceDescriptionList;

/** Optional parameters. */
export interface GroupPolicyListByAccountNextOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccountNext operation. */
export type GroupPolicyListByAccountNextResponse = GroupPolicyResourceDescriptionList;

/** Optional parameters. */
export interface ImagesListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ImagesListResponse = AvailablePlatformImageDescriptionList;

/** Optional parameters. */
export interface ImagesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ImagesListNextResponse = AvailablePlatformImageDescriptionList;

/** Optional parameters. */
export interface InstanceTypeSeriesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type InstanceTypeSeriesListResponse = AvailableInstanceTypeSeriesDescriptionList;

/** Optional parameters. */
export interface InstanceTypeSeriesListInstanceTypeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listInstanceType operation. */
export type InstanceTypeSeriesListInstanceTypeResponse = AvailableInstanceTypeDescriptionList;

/** Optional parameters. */
export interface InstanceTypeSeriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type InstanceTypeSeriesListNextResponse = AvailableInstanceTypeSeriesDescriptionList;

/** Optional parameters. */
export interface InstanceTypeSeriesListInstanceTypeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listInstanceTypeNext operation. */
export type InstanceTypeSeriesListInstanceTypeNextResponse = AvailableInstanceTypeDescriptionList;

/** Optional parameters. */
export interface JobCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type JobCreateOrUpdateResponse = JobResourceDescription;

/** Optional parameters. */
export interface JobUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type JobUpdateResponse = JobResourceDescription;

/** Optional parameters. */
export interface JobGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type JobGetResponse = JobResourceDescription;

/** Optional parameters. */
export interface JobDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface JobApproveOptionalParams extends coreClient.OperationOptions {
  /** Describes properties for the user action of Singularity jobs. */
  body?: JobUserActionDescription;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface JobCreateSasTokenOptionalParams
  extends coreClient.OperationOptions {
  /** Singularity job Shared Access Signature (SAS) token information. */
  body?: JobSasTokenDescription;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createSasToken operation. */
export type JobCreateSasTokenResponse = JobSasTokenDescription;

/** Optional parameters. */
export interface JobRenewKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the renewKey operation. */
export type JobRenewKeyResponse = JobSasTokenDescription;

/** Optional parameters. */
export interface JobSuspendOptionalParams extends coreClient.OperationOptions {
  /** Describes properties for the user action of Singularity jobs. */
  body?: JobUserActionDescription;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface JobResumeOptionalParams extends coreClient.OperationOptions {
  /** Describes properties for the user action of Singularity jobs. */
  body?: JobUserActionDescription;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface JobCancelOptionalParams extends coreClient.OperationOptions {
  /** Describes properties for the user action of Singularity jobs. */
  body?: JobUserActionDescription;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface JobListByAccountOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccount operation. */
export type JobListByAccountResponse = JobResourceDescriptionList;

/** Optional parameters. */
export interface JobRemoveOptionalParams extends coreClient.OperationOptions {
  /** Describes properties for the user action of Singularity jobs. */
  body?: JobUserActionDescription;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface JobListByAccountNextOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccountNext operation. */
export type JobListByAccountNextResponse = JobResourceDescriptionList;

/** Optional parameters. */
export interface ModelCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ModelCreateOrUpdateResponse = ModelResourceDescription;

/** Optional parameters. */
export interface ModelUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ModelUpdateResponse = ModelResourceDescription;

/** Optional parameters. */
export interface ModelGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ModelGetResponse = ModelResourceDescription;

/** Optional parameters. */
export interface ModelDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ModelListByAccountOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccount operation. */
export type ModelListByAccountResponse = ModelResourceDescriptionList;

/** Optional parameters. */
export interface ModelValidateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ModelListByAccountNextOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccountNext operation. */
export type ModelListByAccountNextResponse = ModelResourceDescriptionList;

/** Optional parameters. */
export interface NetworkCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type NetworkCreateOrUpdateResponse = NetworkResourceDescription;

/** Optional parameters. */
export interface NetworkUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkUpdateResponse = NetworkResourceDescription;

/** Optional parameters. */
export interface NetworkGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkGetResponse = NetworkResourceDescription;

/** Optional parameters. */
export interface NetworkDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkListByAccountOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccount operation. */
export type NetworkListByAccountResponse = NetworkResourceDescriptionList;

/** Optional parameters. */
export interface NetworkListByAccountNextOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccountNext operation. */
export type NetworkListByAccountNextResponse = NetworkResourceDescriptionList;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface StorageCacheCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type StorageCacheCreateOrUpdateResponse = StorageCacheResourceDescription;

/** Optional parameters. */
export interface StorageCacheUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type StorageCacheUpdateResponse = StorageCacheResourceDescription;

/** Optional parameters. */
export interface StorageCacheGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type StorageCacheGetResponse = StorageCacheResourceDescription;

/** Optional parameters. */
export interface StorageCacheDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StorageCacheGetDiagnosticsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDiagnostics operation. */
export type StorageCacheGetDiagnosticsResponse = StorageCacheResourceDiagnosticsInfo;

/** Optional parameters. */
export interface StorageCacheListByAccountOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccount operation. */
export type StorageCacheListByAccountResponse = StorageCacheResourceDescriptionList;

/** Optional parameters. */
export interface StorageCacheResumeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the resume operation. */
export type StorageCacheResumeResponse = StorageCacheResourceDescription;

/** Optional parameters. */
export interface StorageCacheSuspendOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the suspend operation. */
export type StorageCacheSuspendResponse = StorageCacheResourceDescription;

/** Optional parameters. */
export interface StorageCacheListByAccountNextOptionalParams
  extends coreClient.OperationOptions {
  continuationToken?: string;
}

/** Contains response data for the listByAccountNext operation. */
export type StorageCacheListByAccountNextResponse = StorageCacheResourceDescriptionList;

/** Optional parameters. */
export interface SubscriptionQuotaGetOptionalParams
  extends coreClient.OperationOptions {
  /** Subscription id that uniquely identify a Microsoft Azure subscription. The owner subscription id is sent as a query parameter when subscription for the request is different from the subscription ID of the URI */
  ownerSubscriptionId?: string;
}

/** Contains response data for the get operation. */
export type SubscriptionQuotaGetResponse = InstanceTypeSeriesQuotaList;

/** Optional parameters. */
export interface SingularityManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
