/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AccountQuotaPolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountQuotaPolicyProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      quotas: {
        serializedName: "quotas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSeriesQuota"
            }
          }
        }
      }
    }
  }
};

export const InstanceTypeSeriesQuota: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceTypeSeriesQuota",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      slaTier: {
        serializedName: "slaTier",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        required: true,
        type: {
          name: "Number"
        }
      },
      used: {
        serializedName: "used",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "ResourceSystemData"
        }
      }
    }
  }
};

export const ResourceSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModelProperties"
        }
      }
    }
  }
};

export const ErrorModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModelProperties",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetailsModel"
            }
          }
        }
      }
    }
  }
};

export const ErrorDetailsModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetailsModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountQuotaPolicyPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountQuotaPolicyPatchProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      quotas: {
        serializedName: "quotas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSeriesQuota"
            }
          }
        }
      }
    }
  }
};

export const AccountQuotaPolicyResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountQuotaPolicyResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountQuotaPolicyResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      idleResourcesHandlingPolicy: {
        serializedName: "idleResourcesHandlingPolicy",
        type: {
          name: "Composite",
          className: "IdleResourcesHandlingPolicy"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountLocation"
            }
          }
        }
      },
      networkSettings: {
        serializedName: "networkSettings",
        type: {
          name: "Composite",
          className: "NetworkSettings"
        }
      }
    }
  }
};

export const IdleResourcesHandlingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdleResourcesHandlingPolicy",
    modelProperties: {
      idleResourcesHandlingMode: {
        serializedName: "idleResourcesHandlingMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      failoverPriority: {
        constraints: {
          InclusiveMaximum: 2147483647,
          InclusiveMinimum: 1
        },
        serializedName: "failoverPriority",
        required: true,
        type: {
          name: "Number"
        }
      },
      isZoneRedundant: {
        serializedName: "isZoneRedundant",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NetworkSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSettings",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountPatchProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      idleResourcesHandlingPolicy: {
        serializedName: "idleResourcesHandlingPolicy",
        type: {
          name: "Composite",
          className: "IdleResourcesHandlingPolicy"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountLocation"
            }
          }
        }
      },
      networkSettings: {
        serializedName: "networkSettings",
        type: {
          name: "Composite",
          className: "NetworkSettings"
        }
      }
    }
  }
};

export const AccountResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupPolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupPolicyProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      quotas: {
        serializedName: "quotas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSeriesQuota"
            }
          }
        }
      },
      maxSharedStorageIOPs: {
        serializedName: "maxSharedStorageIOPs",
        type: {
          name: "Number"
        }
      },
      maxSharedStorageBandwidth: {
        serializedName: "maxSharedStorageBandwidth",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GroupPolicyPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupPolicyPatchProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      quotas: {
        serializedName: "quotas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSeriesQuota"
            }
          }
        }
      },
      maxSharedStorageIOPs: {
        serializedName: "maxSharedStorageIOPs",
        type: {
          name: "Number"
        }
      },
      maxSharedStorageBandwidth: {
        serializedName: "maxSharedStorageBandwidth",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GroupPolicyResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupPolicyResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GroupPolicyResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailablePlatformImageDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailablePlatformImageDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailablePlatformImageDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailablePlatformImageDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailablePlatformImageDescription",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      names: {
        serializedName: "names",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableInstanceTypeSeriesDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableInstanceTypeSeriesDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableInstanceTypeSeriesDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableInstanceTypeSeriesDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableInstanceTypeSeriesDescription",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableInstanceTypeDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableInstanceTypeDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableInstanceTypeDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableInstanceTypeDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableInstanceTypeDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      quotaCount: {
        serializedName: "quotaCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      placementPolicies: {
        serializedName: "placementPolicies",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PlacementPolicy"
            }
          }
        }
      },
      slaTier: {
        serializedName: "slaTier",
        type: {
          name: "String"
        }
      },
      schedulingPriority: {
        serializedName: "schedulingPriority",
        type: {
          name: "String"
        }
      },
      dataLocation: {
        serializedName: "dataLocation",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageLocation"
            }
          }
        }
      },
      codeLocation: {
        serializedName: "codeLocation",
        type: {
          name: "Composite",
          className: "StorageLocation"
        }
      },
      outputLocation: {
        serializedName: "outputLocation",
        type: {
          name: "Composite",
          className: "StorageLocation"
        }
      },
      networkResourceRef: {
        serializedName: "networkResourceRef",
        type: {
          name: "Composite",
          className: "NetworkReference"
        }
      },
      containerImage: {
        serializedName: "containerImage",
        type: {
          name: "Composite",
          className: "ContainerImageBase"
        }
      },
      groupPolicyName: {
        serializedName: "groupPolicyName",
        type: {
          name: "String"
        }
      },
      checkpointPolicy: {
        serializedName: "checkpointPolicy",
        type: {
          name: "Composite",
          className: "CheckpointPolicy"
        }
      },
      maxJobExecutionTime: {
        serializedName: "maxJobExecutionTime",
        type: {
          name: "Number"
        }
      },
      suspendOnIdleTime: {
        serializedName: "suspendOnIdleTime",
        type: {
          name: "Number"
        }
      },
      program: {
        serializedName: "program",
        type: {
          name: "String"
        }
      },
      programArgs: {
        serializedName: "programArgs",
        type: {
          name: "String"
        }
      },
      tensorBoardLogDirectory: {
        serializedName: "tensorBoardLogDirectory",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      notebookEndpoint: {
        serializedName: "notebookEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tensorBoardEndpoint: {
        serializedName: "tensorBoardEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      grafanaEndpoint: {
        serializedName: "grafanaEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobLogsEndpoint: {
        serializedName: "jobLogsEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PlacementPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlacementPolicy",
    modelProperties: {
      instanceTypes: {
        serializedName: "instanceTypes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSettings"
            }
          }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstanceTypeSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceTypeSettings",
    modelProperties: {
      instanceType: {
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      },
      scalePolicy: {
        serializedName: "scalePolicy",
        type: {
          name: "Composite",
          className: "ScalePolicy"
        }
      }
    }
  }
};

export const ScalePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalePolicy",
    modelProperties: {
      minInstanceTypeCount: {
        serializedName: "minInstanceTypeCount",
        type: {
          name: "Number"
        }
      },
      maxInstanceTypeCount: {
        serializedName: "maxInstanceTypeCount",
        type: {
          name: "Number"
        }
      },
      currentInstanceTypeCount: {
        serializedName: "currentInstanceTypeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      instanceTypeCountSet: {
        serializedName: "instanceTypeCountSet",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      autoScaleIntervalInSecondsHint: {
        serializedName: "autoScaleIntervalInSecondsHint",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StorageLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageLocation",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "StorageSourceBase"
        }
      },
      storageCacheContainerName: {
        serializedName: "storageCacheContainerName",
        type: {
          name: "String"
        }
      },
      mount: {
        serializedName: "mount",
        type: {
          name: "Composite",
          className: "StorageMount"
        }
      }
    }
  }
};

export const StorageSourceBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSourceBase",
    uberParent: "StorageSourceBase",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageMount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageMount",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkReference",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerImageBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerImageBase",
    uberParent: "ContainerImageBase",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckpointPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckpointPolicy",
    modelProperties: {
      enableCheckpoint: {
        serializedName: "enableCheckpoint",
        type: {
          name: "Boolean"
        }
      },
      checkpointRelativePath: {
        serializedName: "checkpointRelativePath",
        type: {
          name: "String"
        }
      },
      checkpointInterval: {
        serializedName: "checkpointInterval",
        type: {
          name: "TimeSpan"
        }
      },
      checkpointIterationCount: {
        serializedName: "checkpointIterationCount",
        type: {
          name: "Number"
        }
      },
      checkpointRetentionPolicy: {
        serializedName: "checkpointRetentionPolicy",
        type: {
          name: "Composite",
          className: "CheckpointRetentionPolicy"
        }
      }
    }
  }
};

export const CheckpointRetentionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckpointRetentionPolicy",
    modelProperties: {
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String"
        }
      },
      ttl: {
        serializedName: "ttl",
        type: {
          name: "TimeSpan"
        }
      },
      maxStorage: {
        serializedName: "maxStorage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResourceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ResourceUserAssignedIdentity"
            }
          }
        }
      }
    }
  }
};

export const ResourceUserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceUserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobPatchProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      schedulingPriority: {
        serializedName: "schedulingPriority",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobUserActionDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobUserActionDescription",
    modelProperties: {
      groupPolicyName: {
        serializedName: "groupPolicyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobSasTokenDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobSasTokenDescription",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      expirationTime: {
        serializedName: "expirationTime",
        type: {
          name: "DateTime"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      token: {
        serializedName: "token",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      groupPolicyName: {
        serializedName: "groupPolicyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      groupPolicyName: {
        serializedName: "groupPolicyName",
        type: {
          name: "String"
        }
      },
      inferenceMode: {
        serializedName: "inferenceMode",
        type: {
          name: "String"
        }
      },
      slaTier: {
        serializedName: "slaTier",
        type: {
          name: "String"
        }
      },
      packageLocation: {
        serializedName: "packageLocation",
        type: {
          name: "Composite",
          className: "StorageLocation"
        }
      },
      networkResourceRef: {
        serializedName: "networkResourceRef",
        type: {
          name: "Composite",
          className: "NetworkReference"
        }
      },
      scalePolicy: {
        serializedName: "scalePolicy",
        type: {
          name: "Composite",
          className: "ScalePolicyV2"
        }
      },
      partitioningSetting: {
        serializedName: "partitioningSetting",
        type: {
          name: "Composite",
          className: "ModelPartitioningSetting"
        }
      },
      instanceTypeSettings: {
        serializedName: "instanceTypeSettings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSetting"
            }
          }
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelLocation"
            }
          }
        }
      },
      endpoints: {
        serializedName: "endpoints",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      compilationPolicy: {
        serializedName: "compilationPolicy",
        type: {
          name: "Composite",
          className: "CompilationPolicyBase"
        }
      },
      modelProbeSetting: {
        serializedName: "modelProbeSetting",
        type: {
          name: "Composite",
          className: "ModelProbeSetting"
        }
      }
    }
  }
};

export const ScalePolicyV2: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScalePolicyV2",
    modelProperties: {
      min: {
        serializedName: "min",
        type: {
          name: "Number"
        }
      },
      max: {
        serializedName: "max",
        type: {
          name: "Number"
        }
      },
      scaleSet: {
        serializedName: "scaleSet",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const ModelPartitioningSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelPartitioningSetting",
    modelProperties: {
      pipelinePartitionCount: {
        serializedName: "pipelinePartitionCount",
        type: {
          name: "Number"
        }
      },
      tensorPartitionCount: {
        serializedName: "tensorPartitionCount",
        type: {
          name: "Number"
        }
      },
      partitions: {
        serializedName: "partitions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelPartition"
            }
          }
        }
      }
    }
  }
};

export const ModelPartition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelPartition",
    modelProperties: {
      pipelinePartitionIndex: {
        serializedName: "pipelinePartitionIndex",
        required: true,
        type: {
          name: "Number"
        }
      },
      tensorPartitionIndex: {
        serializedName: "tensorPartitionIndex",
        required: true,
        type: {
          name: "Number"
        }
      },
      packagePath: {
        serializedName: "packagePath",
        type: {
          name: "String"
        }
      },
      partitionPlacement: {
        serializedName: "partitionPlacement",
        type: {
          name: "Composite",
          className: "ModelPartitionPlacement"
        }
      }
    }
  }
};

export const ModelPartitionPlacement: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelPartitionPlacement",
    modelProperties: {
      instanceTypeSettingNameRef: {
        serializedName: "instanceTypeSettingNameRef",
        required: true,
        type: {
          name: "String"
        }
      },
      deviceId: {
        serializedName: "deviceId",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InstanceTypeSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceTypeSetting",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      instanceType: {
        serializedName: "instanceType",
        type: {
          name: "String"
        }
      },
      containerSetting: {
        serializedName: "containerSetting",
        type: {
          name: "Composite",
          className: "ContainerSetting"
        }
      }
    }
  }
};

export const ContainerSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerSetting",
    modelProperties: {
      image: {
        serializedName: "image",
        type: {
          name: "Composite",
          className: "ContainerImageBase"
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      setupEntryPoint: {
        serializedName: "setupEntryPoint",
        type: {
          name: "Composite",
          className: "ContainerEntryPoint"
        }
      },
      mainEntryPoint: {
        serializedName: "mainEntryPoint",
        type: {
          name: "Composite",
          className: "ContainerEntryPoint"
        }
      },
      cleanupEntryPoint: {
        serializedName: "cleanupEntryPoint",
        type: {
          name: "Composite",
          className: "ContainerEntryPoint"
        }
      },
      livenessProbeSetting: {
        serializedName: "livenessProbeSetting",
        type: {
          name: "Composite",
          className: "ProbeSetting"
        }
      }
    }
  }
};

export const ContainerEntryPoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerEntryPoint",
    modelProperties: {
      program: {
        serializedName: "program",
        type: {
          name: "String"
        }
      },
      programArgs: {
        serializedName: "programArgs",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProbeSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProbeSetting",
    uberParent: "ProbeSetting",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      initialDelayInSeconds: {
        serializedName: "initialDelayInSeconds",
        type: {
          name: "Number"
        }
      },
      successThreshold: {
        serializedName: "successThreshold",
        type: {
          name: "Number"
        }
      },
      failureThreshold: {
        serializedName: "failureThreshold",
        type: {
          name: "Number"
        }
      },
      frequencyInSeconds: {
        serializedName: "frequencyInSeconds",
        type: {
          name: "Number"
        }
      },
      timeoutInSeconds: {
        serializedName: "timeoutInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ModelLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelLocation",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scalePolicy: {
        serializedName: "scalePolicy",
        type: {
          name: "Composite",
          className: "ScalePolicyV2"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      currentInstanceCount: {
        serializedName: "currentInstanceCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Endpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Endpoint",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CompilationPolicyBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CompilationPolicyBase",
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelProbeSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelProbeSetting",
    modelProperties: {
      livenessProbeSetting: {
        serializedName: "livenessProbeSetting",
        type: {
          name: "Composite",
          className: "ProbeSetting"
        }
      },
      readinessProbeSetting: {
        serializedName: "readinessProbeSetting",
        type: {
          name: "Composite",
          className: "ProbeSetting"
        }
      }
    }
  }
};

export const ModelPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelPatchProperties",
    modelProperties: {
      placementPolicies: {
        serializedName: "placementPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PlacementPolicy"
            }
          }
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkPropertiesBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkPropertiesBase",
    uberParent: "NetworkPropertiesBase",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationResult"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "AvailableOperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableOperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageCachePropertiesBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageCachePropertiesBase",
    uberParent: "StorageCachePropertiesBase",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      region: {
        serializedName: "region",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      defaultMountPath: {
        serializedName: "defaultMountPath",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageCacheResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageCacheResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageCacheResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstanceTypeSeriesQuotaList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceTypeSeriesQuotaList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSeriesQuota"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobStorageTarget: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobStorageTarget",
    modelProperties: {
      containerEndpoint: {
        serializedName: "containerEndpoint",
        required: true,
        type: {
          name: "String"
        }
      },
      blobName: {
        serializedName: "blobName",
        type: {
          name: "String"
        }
      },
      sasToken: {
        serializedName: "sasToken",
        type: {
          name: "String"
        }
      },
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobMountOptionsBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobMountOptionsBase",
    uberParent: "BlobMountOptionsBase",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdlsMountOptionsBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdlsMountOptionsBase",
    uberParent: "AdlsMountOptionsBase",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountQuotaPolicyResourceDescriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountQuotaPolicyResourceDescriptionProperties",
    modelProperties: {
      ...AccountQuotaPolicyProperties.type.modelProperties
    }
  }
};

export const AccountQuotaPolicyResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountQuotaPolicyResourceDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      quotas: {
        serializedName: "properties.quotas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSeriesQuota"
            }
          }
        }
      }
    }
  }
};

export const AccountQuotaPolicyResourcePatchDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountQuotaPolicyResourcePatchDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      quotas: {
        serializedName: "properties.quotas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSeriesQuota"
            }
          }
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountResourcePatchDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountResourcePatchDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      idleResourcesHandlingPolicy: {
        serializedName: "properties.idleResourcesHandlingPolicy",
        type: {
          name: "Composite",
          className: "IdleResourcesHandlingPolicy"
        }
      },
      locations: {
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountLocation"
            }
          }
        }
      },
      networkSettings: {
        serializedName: "properties.networkSettings",
        type: {
          name: "Composite",
          className: "NetworkSettings"
        }
      }
    }
  }
};

export const GroupPolicyResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupPolicyResourceDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      quotas: {
        serializedName: "properties.quotas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSeriesQuota"
            }
          }
        }
      },
      maxSharedStorageIOPs: {
        serializedName: "properties.maxSharedStorageIOPs",
        type: {
          name: "Number"
        }
      },
      maxSharedStorageBandwidth: {
        serializedName: "properties.maxSharedStorageBandwidth",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GroupPolicyResourcePatchDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupPolicyResourcePatchDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      quotas: {
        serializedName: "properties.quotas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSeriesQuota"
            }
          }
        }
      },
      maxSharedStorageIOPs: {
        serializedName: "properties.maxSharedStorageIOPs",
        type: {
          name: "Number"
        }
      },
      maxSharedStorageBandwidth: {
        serializedName: "properties.maxSharedStorageBandwidth",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResourceDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "properties.jobId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      placementPolicies: {
        serializedName: "properties.placementPolicies",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PlacementPolicy"
            }
          }
        }
      },
      slaTier: {
        serializedName: "properties.slaTier",
        type: {
          name: "String"
        }
      },
      schedulingPriority: {
        serializedName: "properties.schedulingPriority",
        type: {
          name: "String"
        }
      },
      dataLocation: {
        serializedName: "properties.dataLocation",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageLocation"
            }
          }
        }
      },
      codeLocation: {
        serializedName: "properties.codeLocation",
        type: {
          name: "Composite",
          className: "StorageLocation"
        }
      },
      outputLocation: {
        serializedName: "properties.outputLocation",
        type: {
          name: "Composite",
          className: "StorageLocation"
        }
      },
      networkResourceRef: {
        serializedName: "properties.networkResourceRef",
        type: {
          name: "Composite",
          className: "NetworkReference"
        }
      },
      containerImage: {
        serializedName: "properties.containerImage",
        type: {
          name: "Composite",
          className: "ContainerImageBase"
        }
      },
      groupPolicyName: {
        serializedName: "properties.groupPolicyName",
        type: {
          name: "String"
        }
      },
      checkpointPolicy: {
        serializedName: "properties.checkpointPolicy",
        type: {
          name: "Composite",
          className: "CheckpointPolicy"
        }
      },
      maxJobExecutionTime: {
        serializedName: "properties.maxJobExecutionTime",
        type: {
          name: "Number"
        }
      },
      suspendOnIdleTime: {
        serializedName: "properties.suspendOnIdleTime",
        type: {
          name: "Number"
        }
      },
      program: {
        serializedName: "properties.program",
        type: {
          name: "String"
        }
      },
      programArgs: {
        serializedName: "properties.programArgs",
        type: {
          name: "String"
        }
      },
      tensorBoardLogDirectory: {
        serializedName: "properties.tensorBoardLogDirectory",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "properties.statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      notebookEndpoint: {
        serializedName: "properties.notebookEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tensorBoardEndpoint: {
        serializedName: "properties.tensorBoardEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      grafanaEndpoint: {
        serializedName: "properties.grafanaEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobLogsEndpoint: {
        serializedName: "properties.jobLogsEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      environmentVariables: {
        serializedName: "properties.environmentVariables",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const JobResourcePatchDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResourcePatchDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      schedulingPriority: {
        serializedName: "properties.schedulingPriority",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelResourceDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      groupPolicyName: {
        serializedName: "properties.groupPolicyName",
        type: {
          name: "String"
        }
      },
      inferenceMode: {
        serializedName: "properties.inferenceMode",
        type: {
          name: "String"
        }
      },
      slaTier: {
        serializedName: "properties.slaTier",
        type: {
          name: "String"
        }
      },
      packageLocation: {
        serializedName: "properties.packageLocation",
        type: {
          name: "Composite",
          className: "StorageLocation"
        }
      },
      networkResourceRef: {
        serializedName: "properties.networkResourceRef",
        type: {
          name: "Composite",
          className: "NetworkReference"
        }
      },
      scalePolicy: {
        serializedName: "properties.scalePolicy",
        type: {
          name: "Composite",
          className: "ScalePolicyV2"
        }
      },
      partitioningSetting: {
        serializedName: "properties.partitioningSetting",
        type: {
          name: "Composite",
          className: "ModelPartitioningSetting"
        }
      },
      instanceTypeSettings: {
        serializedName: "properties.instanceTypeSettings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceTypeSetting"
            }
          }
        }
      },
      locations: {
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelLocation"
            }
          }
        }
      },
      endpoints: {
        serializedName: "properties.endpoints",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      compilationPolicy: {
        serializedName: "properties.compilationPolicy",
        type: {
          name: "Composite",
          className: "CompilationPolicyBase"
        }
      },
      modelProbeSetting: {
        serializedName: "properties.modelProbeSetting",
        type: {
          name: "Composite",
          className: "ModelProbeSetting"
        }
      }
    }
  }
};

export const ModelResourcePatchDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelResourcePatchDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      placementPolicies: {
        serializedName: "properties.placementPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PlacementPolicy"
            }
          }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkResourceDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkPropertiesBase"
        }
      }
    }
  }
};

export const StorageCacheResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageCacheResourceDescription",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageCachePropertiesBase"
        }
      }
    }
  }
};

export const StorageCacheResourceDiagnosticsInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageCacheResourceDiagnosticsInfo",
    modelProperties: {
      ...Resource.type.modelProperties,
      usageInMiB: {
        serializedName: "usageInMiB",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AccountQuotaPolicyResourcePatchDescriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountQuotaPolicyResourcePatchDescriptionProperties",
    modelProperties: {
      ...AccountQuotaPolicyPatchProperties.type.modelProperties
    }
  }
};

export const AccountResourceDescriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountResourceDescriptionProperties",
    modelProperties: {
      ...AccountProperties.type.modelProperties
    }
  }
};

export const AccountResourcePatchDescriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountResourcePatchDescriptionProperties",
    modelProperties: {
      ...AccountPatchProperties.type.modelProperties
    }
  }
};

export const GroupPolicyResourceDescriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupPolicyResourceDescriptionProperties",
    modelProperties: {
      ...GroupPolicyProperties.type.modelProperties
    }
  }
};

export const GroupPolicyResourcePatchDescriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupPolicyResourcePatchDescriptionProperties",
    modelProperties: {
      ...GroupPolicyPatchProperties.type.modelProperties
    }
  }
};

export const JobResourceDescriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResourceDescriptionProperties",
    modelProperties: {
      ...JobResourceProperties.type.modelProperties
    }
  }
};

export const StorageSourceAzureAISupercomputerStorage: coreClient.CompositeMapper = {
  serializedName: "AzureAISupercomputerStorage",
  type: {
    name: "Composite",
    className: "StorageSourceAzureAISupercomputerStorage",
    uberParent: "StorageSourceBase",
    polymorphicDiscriminator: StorageSourceBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageSourceBase.type.modelProperties,
      storageContainerName: {
        serializedName: "storageContainerName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSourceAzureBlob: coreClient.CompositeMapper = {
  serializedName: "AzureBlobStorage",
  type: {
    name: "Composite",
    className: "StorageSourceAzureBlob",
    uberParent: "StorageSourceBase",
    polymorphicDiscriminator: StorageSourceBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageSourceBase.type.modelProperties,
      blobEndpoint: {
        serializedName: "blobEndpoint",
        required: true,
        type: {
          name: "String"
        }
      },
      accountResourceId: {
        serializedName: "accountResourceId",
        type: {
          name: "String"
        }
      },
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      },
      authenticationType: {
        serializedName: "authenticationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomContainerImage: coreClient.CompositeMapper = {
  serializedName: "Custom",
  type: {
    name: "Composite",
    className: "CustomContainerImage",
    uberParent: "ContainerImageBase",
    polymorphicDiscriminator: ContainerImageBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ContainerImageBase.type.modelProperties,
      image: {
        serializedName: "image",
        required: true,
        type: {
          name: "String"
        }
      },
      containerRegistryUsername: {
        serializedName: "containerRegistryUsername",
        type: {
          name: "String"
        }
      },
      containerRegistryPassword: {
        serializedName: "containerRegistryPassword",
        type: {
          name: "String"
        }
      },
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlatformContainerImage: coreClient.CompositeMapper = {
  serializedName: "Platform",
  type: {
    name: "Composite",
    className: "PlatformContainerImage",
    uberParent: "ContainerImageBase",
    polymorphicDiscriminator: ContainerImageBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...ContainerImageBase.type.modelProperties,
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobResourcePatchDescriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResourcePatchDescriptionProperties",
    modelProperties: {
      ...JobPatchProperties.type.modelProperties
    }
  }
};

export const ModelResourceDescriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelResourceDescriptionProperties",
    modelProperties: {
      ...ModelResourceProperties.type.modelProperties
    }
  }
};

export const ExecProbeSetting: coreClient.CompositeMapper = {
  serializedName: "Exec",
  type: {
    name: "Composite",
    className: "ExecProbeSetting",
    uberParent: "ProbeSetting",
    polymorphicDiscriminator: ProbeSetting.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProbeSetting.type.modelProperties,
      program: {
        serializedName: "program",
        required: true,
        type: {
          name: "String"
        }
      },
      programArgs: {
        serializedName: "programArgs",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpProbeSetting: coreClient.CompositeMapper = {
  serializedName: "Http",
  type: {
    name: "Composite",
    className: "HttpProbeSetting",
    uberParent: "ProbeSetting",
    polymorphicDiscriminator: ProbeSetting.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProbeSetting.type.modelProperties,
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelResourcePatchDescriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModelResourcePatchDescriptionProperties",
    modelProperties: {
      ...ModelPatchProperties.type.modelProperties
    }
  }
};

export const DelegatedSubnetProperties: coreClient.CompositeMapper = {
  serializedName: "DelegatedSubnet",
  type: {
    name: "Composite",
    className: "DelegatedSubnetProperties",
    uberParent: "NetworkPropertiesBase",
    polymorphicDiscriminator:
      NetworkPropertiesBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...NetworkPropertiesBase.type.modelProperties,
      delegatedSubnetResourceId: {
        serializedName: "delegatedSubnetResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobStorageCacheProperties: coreClient.CompositeMapper = {
  serializedName: "Blob",
  type: {
    name: "Composite",
    className: "BlobStorageCacheProperties",
    uberParent: "StorageCachePropertiesBase",
    polymorphicDiscriminator:
      StorageCachePropertiesBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageCachePropertiesBase.type.modelProperties,
      storageTarget: {
        serializedName: "storageTarget",
        type: {
          name: "Composite",
          className: "BlobStorageTarget"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "Composite",
          className: "BlobMountOptionsBase"
        }
      }
    }
  }
};

export const NfsStorageCacheProperties: coreClient.CompositeMapper = {
  serializedName: "NFS",
  type: {
    name: "Composite",
    className: "NfsStorageCacheProperties",
    uberParent: "StorageCachePropertiesBase",
    polymorphicDiscriminator:
      StorageCachePropertiesBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageCachePropertiesBase.type.modelProperties,
      capacityInGiB: {
        serializedName: "capacityInGiB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AdlsStorageCacheProperties: coreClient.CompositeMapper = {
  serializedName: "ADLS",
  type: {
    name: "Composite",
    className: "AdlsStorageCacheProperties",
    uberParent: "StorageCachePropertiesBase",
    polymorphicDiscriminator:
      StorageCachePropertiesBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...StorageCachePropertiesBase.type.modelProperties,
      path: {
        serializedName: "path",
        required: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        required: true,
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        required: true,
        type: {
          name: "String"
        }
      },
      mountOptions: {
        serializedName: "mountOptions",
        type: {
          name: "Composite",
          className: "AdlsMountOptionsBase"
        }
      }
    }
  }
};

export const BlobFuseMountOptions: coreClient.CompositeMapper = {
  serializedName: "Fuse",
  type: {
    name: "Composite",
    className: "BlobFuseMountOptions",
    uberParent: "BlobMountOptionsBase",
    polymorphicDiscriminator:
      BlobMountOptionsBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...BlobMountOptionsBase.type.modelProperties,
      streaming: {
        serializedName: "streaming",
        type: {
          name: "Boolean"
        }
      },
      streamingCacheLimitMiB: {
        serializedName: "streamingCacheLimitMiB",
        type: {
          name: "Number"
        }
      },
      streamingMaxBlocksPerFile: {
        serializedName: "streamingMaxBlocksPerFile",
        type: {
          name: "Number"
        }
      },
      streamingBlockSizeMiB: {
        serializedName: "streamingBlockSizeMiB",
        type: {
          name: "Number"
        }
      },
      maxConcurrency: {
        serializedName: "maxConcurrency",
        type: {
          name: "Number"
        }
      },
      fileCacheTimeoutSeconds: {
        serializedName: "fileCacheTimeoutSeconds",
        type: {
          name: "Number"
        }
      },
      invalidateOnSync: {
        serializedName: "invalidateOnSync",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BlobInterceptionMountOptions: coreClient.CompositeMapper = {
  serializedName: "Interception",
  type: {
    name: "Composite",
    className: "BlobInterceptionMountOptions",
    uberParent: "BlobMountOptionsBase",
    polymorphicDiscriminator:
      BlobMountOptionsBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...BlobMountOptionsBase.type.modelProperties
    }
  }
};

export const AdlsFuseMountOptions: coreClient.CompositeMapper = {
  serializedName: "Fuse",
  type: {
    name: "Composite",
    className: "AdlsFuseMountOptions",
    uberParent: "AdlsMountOptionsBase",
    polymorphicDiscriminator:
      AdlsMountOptionsBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdlsMountOptionsBase.type.modelProperties
    }
  }
};

export const AdlsInterceptionMountOptions: coreClient.CompositeMapper = {
  serializedName: "Interception",
  type: {
    name: "Composite",
    className: "AdlsInterceptionMountOptions",
    uberParent: "AdlsMountOptionsBase",
    polymorphicDiscriminator:
      AdlsMountOptionsBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...AdlsMountOptionsBase.type.modelProperties
    }
  }
};

export const AccountResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountResourceDescription",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      idleResourcesHandlingPolicy: {
        serializedName: "properties.idleResourcesHandlingPolicy",
        type: {
          name: "Composite",
          className: "IdleResourcesHandlingPolicy"
        }
      },
      statusDetails: {
        serializedName: "properties.statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "properties.locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountLocation"
            }
          }
        }
      },
      networkSettings: {
        serializedName: "properties.networkSettings",
        type: {
          name: "Composite",
          className: "NetworkSettings"
        }
      }
    }
  }
};

export let discriminators = {
  StorageSourceBase: StorageSourceBase,
  ContainerImageBase: ContainerImageBase,
  ProbeSetting: ProbeSetting,
  NetworkPropertiesBase: NetworkPropertiesBase,
  StorageCachePropertiesBase: StorageCachePropertiesBase,
  BlobMountOptionsBase: BlobMountOptionsBase,
  AdlsMountOptionsBase: AdlsMountOptionsBase,
  "StorageSourceBase.AzureAISupercomputerStorage": StorageSourceAzureAISupercomputerStorage,
  "StorageSourceBase.AzureBlobStorage": StorageSourceAzureBlob,
  "ContainerImageBase.Custom": CustomContainerImage,
  "ContainerImageBase.Platform": PlatformContainerImage,
  "ProbeSetting.Exec": ExecProbeSetting,
  "ProbeSetting.Http": HttpProbeSetting,
  "NetworkPropertiesBase.DelegatedSubnet": DelegatedSubnetProperties,
  "StorageCachePropertiesBase.Blob": BlobStorageCacheProperties,
  "StorageCachePropertiesBase.NFS": NfsStorageCacheProperties,
  "StorageCachePropertiesBase.ADLS": AdlsStorageCacheProperties,
  "BlobMountOptionsBase.Fuse": BlobFuseMountOptions,
  "BlobMountOptionsBase.Interception": BlobInterceptionMountOptions,
  "AdlsMountOptionsBase.Fuse": AdlsFuseMountOptions,
  "AdlsMountOptionsBase.Interception": AdlsInterceptionMountOptions
};
