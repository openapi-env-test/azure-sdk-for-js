/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  AccountQuotaPolicyResourceDescription as AccountQuotaPolicyResourceDescriptionMapper,
  AccountQuotaPolicyResourcePatchDescription as AccountQuotaPolicyResourcePatchDescriptionMapper,
  AccountResourceDescription as AccountResourceDescriptionMapper,
  AccountResourcePatchDescription as AccountResourcePatchDescriptionMapper,
  GroupPolicyResourceDescription as GroupPolicyResourceDescriptionMapper,
  GroupPolicyResourcePatchDescription as GroupPolicyResourcePatchDescriptionMapper,
  JobResourceDescription as JobResourceDescriptionMapper,
  JobResourcePatchDescription as JobResourcePatchDescriptionMapper,
  JobUserActionDescription as JobUserActionDescriptionMapper,
  JobSasTokenDescription as JobSasTokenDescriptionMapper,
  ModelResourceDescription as ModelResourceDescriptionMapper,
  ModelResourcePatchDescription as ModelResourcePatchDescriptionMapper,
  NetworkResourceDescription as NetworkResourceDescriptionMapper,
  StorageCacheResourceDescription as StorageCacheResourceDescriptionMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: AccountQuotaPolicyResourceDescriptionMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const accountName: OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    serializedName: "accountName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const policyName: OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    serializedName: "policyName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2020-12-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: AccountQuotaPolicyResourcePatchDescriptionMapper
};

export const continuationToken: OperationQueryParameter = {
  parameterPath: ["options", "continuationToken"],
  mapper: {
    serializedName: "continuationToken",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: AccountResourceDescriptionMapper
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: AccountResourcePatchDescriptionMapper
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: GroupPolicyResourceDescriptionMapper
};

export const body5: OperationParameter = {
  parameterPath: "body",
  mapper: GroupPolicyResourcePatchDescriptionMapper
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const instanceTypeSeriesId: OperationURLParameter = {
  parameterPath: "instanceTypeSeriesId",
  mapper: {
    serializedName: "instanceTypeSeriesId",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const body6: OperationParameter = {
  parameterPath: "body",
  mapper: JobResourceDescriptionMapper
};

export const jobName: OperationURLParameter = {
  parameterPath: "jobName",
  mapper: {
    serializedName: "jobName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const body7: OperationParameter = {
  parameterPath: "body",
  mapper: JobResourcePatchDescriptionMapper
};

export const body8: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: JobUserActionDescriptionMapper
};

export const body9: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: JobSasTokenDescriptionMapper
};

export const body10: OperationParameter = {
  parameterPath: "body",
  mapper: ModelResourceDescriptionMapper
};

export const modelName: OperationURLParameter = {
  parameterPath: "modelName",
  mapper: {
    serializedName: "modelName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const body11: OperationParameter = {
  parameterPath: "body",
  mapper: ModelResourcePatchDescriptionMapper
};

export const body12: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkResourceDescriptionMapper
};

export const networkResourceName: OperationURLParameter = {
  parameterPath: "networkResourceName",
  mapper: {
    serializedName: "networkResourceName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const body13: OperationParameter = {
  parameterPath: "body",
  mapper: StorageCacheResourceDescriptionMapper
};

export const storageCacheResourceName: OperationURLParameter = {
  parameterPath: "storageCacheResourceName",
  mapper: {
    serializedName: "storageCacheResourceName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const ownerSubscriptionId: OperationQueryParameter = {
  parameterPath: ["options", "ownerSubscriptionId"],
  mapper: {
    serializedName: "ownerSubscriptionId",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
