/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  ModelResourceDescription,
  ModelListByAccountOptionalParams,
  ModelCreateOrUpdateOptionalParams,
  ModelCreateOrUpdateResponse,
  ModelResourcePatchDescription,
  ModelUpdateOptionalParams,
  ModelUpdateResponse,
  ModelGetOptionalParams,
  ModelGetResponse,
  ModelDeleteOptionalParams,
  ModelValidateOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Model. */
export interface Model {
  /**
   * Gets the information about all the model resources in a given account. The information include the
   * description and other properties of the model.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param options The options parameters.
   */
  listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: ModelListByAccountOptionalParams
  ): PagedAsyncIterableIterator<ModelResourceDescription>;
  /**
   * Creates a model resource with the specified name, description and properties. If a model with the
   * same name exists, then it is updated with the specified description and properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param modelName The name of the Singularity model.
   * @param body Singularity model information.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    accountName: string,
    modelName: string,
    body: ModelResourceDescription,
    options?: ModelCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ModelCreateOrUpdateResponse>,
      ModelCreateOrUpdateResponse
    >
  >;
  /**
   * Creates a model resource with the specified name, description and properties. If a model with the
   * same name exists, then it is updated with the specified description and properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param modelName The name of the Singularity model.
   * @param body Singularity model information.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    modelName: string,
    body: ModelResourceDescription,
    options?: ModelCreateOrUpdateOptionalParams
  ): Promise<ModelCreateOrUpdateResponse>;
  /**
   * Updates a model resource with the specified name, description and properties. If a model with the
   * same name exists, then it is updated with the specified description and properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param modelName The name of the Singularity model.
   * @param body Singularity model information.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    accountName: string,
    modelName: string,
    body: ModelResourcePatchDescription,
    options?: ModelUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<ModelUpdateResponse>, ModelUpdateResponse>
  >;
  /**
   * Updates a model resource with the specified name, description and properties. If a model with the
   * same name exists, then it is updated with the specified description and properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param modelName The name of the Singularity model.
   * @param body Singularity model information.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    modelName: string,
    body: ModelResourcePatchDescription,
    options?: ModelUpdateOptionalParams
  ): Promise<ModelUpdateResponse>;
  /**
   * Gets the information about the model resource with the given name. The information include the
   * description and other properties of the model.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param modelName The name of the Singularity model.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    modelName: string,
    options?: ModelGetOptionalParams
  ): Promise<ModelGetResponse>;
  /**
   * Deletes the model resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param modelName The name of the Singularity model.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    accountName: string,
    modelName: string,
    options?: ModelDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the model resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param modelName The name of the Singularity model.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    modelName: string,
    options?: ModelDeleteOptionalParams
  ): Promise<void>;
  /**
   * Checks if the model resource properties are valid
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param modelName The name of the Singularity model.
   * @param body Singularity model information.
   * @param options The options parameters.
   */
  beginValidate(
    resourceGroupName: string,
    accountName: string,
    modelName: string,
    body: ModelResourceDescription,
    options?: ModelValidateOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Checks if the model resource properties are valid
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param modelName The name of the Singularity model.
   * @param body Singularity model information.
   * @param options The options parameters.
   */
  beginValidateAndWait(
    resourceGroupName: string,
    accountName: string,
    modelName: string,
    body: ModelResourceDescription,
    options?: ModelValidateOptionalParams
  ): Promise<void>;
}
