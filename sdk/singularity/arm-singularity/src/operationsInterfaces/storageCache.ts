/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  StorageCacheResourceDescription,
  StorageCacheListByAccountOptionalParams,
  StorageCacheCreateOrUpdateOptionalParams,
  StorageCacheCreateOrUpdateResponse,
  StorageCacheUpdateOptionalParams,
  StorageCacheUpdateResponse,
  StorageCacheGetOptionalParams,
  StorageCacheGetResponse,
  StorageCacheDeleteOptionalParams,
  StorageCacheGetDiagnosticsOptionalParams,
  StorageCacheGetDiagnosticsResponse,
  StorageCacheResumeOptionalParams,
  StorageCacheResumeResponse,
  StorageCacheSuspendOptionalParams,
  StorageCacheSuspendResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a StorageCache. */
export interface StorageCache {
  /**
   * Gets information about all storage cache resources in a given account.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param options The options parameters.
   */
  listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: StorageCacheListByAccountOptionalParams
  ): PagedAsyncIterableIterator<StorageCacheResourceDescription>;
  /**
   * Creates a storage cache resource with the specified name and properties. If a storage cache resource
   * with the same name exists, then it is updated with the specified properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param body Singularity storage cache information.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    body: StorageCacheResourceDescription,
    options?: StorageCacheCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageCacheCreateOrUpdateResponse>,
      StorageCacheCreateOrUpdateResponse
    >
  >;
  /**
   * Creates a storage cache resource with the specified name and properties. If a storage cache resource
   * with the same name exists, then it is updated with the specified properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param body Singularity storage cache information.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    body: StorageCacheResourceDescription,
    options?: StorageCacheCreateOrUpdateOptionalParams
  ): Promise<StorageCacheCreateOrUpdateResponse>;
  /**
   * If a storage cache resource with the same name exists, then it is updated with the specified
   * properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param body Singularity storage cache information.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    body: StorageCacheResourceDescription,
    options?: StorageCacheUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageCacheUpdateResponse>,
      StorageCacheUpdateResponse
    >
  >;
  /**
   * If a storage cache resource with the same name exists, then it is updated with the specified
   * properties.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param body Singularity storage cache information.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    body: StorageCacheResourceDescription,
    options?: StorageCacheUpdateOptionalParams
  ): Promise<StorageCacheUpdateResponse>;
  /**
   * Gets information about the storage cache resource with the given name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheGetOptionalParams
  ): Promise<StorageCacheGetResponse>;
  /**
   * Deletes the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets diagnostic information about the storage cache resource with the given name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  getDiagnostics(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheGetDiagnosticsOptionalParams
  ): Promise<StorageCacheGetDiagnosticsResponse>;
  /**
   * Resumes the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  beginResume(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheResumeOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageCacheResumeResponse>,
      StorageCacheResumeResponse
    >
  >;
  /**
   * Resumes the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  beginResumeAndWait(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheResumeOptionalParams
  ): Promise<StorageCacheResumeResponse>;
  /**
   * Suspends the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  beginSuspend(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheSuspendOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageCacheSuspendResponse>,
      StorageCacheSuspendResponse
    >
  >;
  /**
   * Suspends the storage cache resource identified by the name.
   * @param resourceGroupName The name of the resource group within the user's subscription.
   * @param accountName The name of the Singularity account.
   * @param storageCacheResourceName The name of the Singularity storage cache.
   * @param options The options parameters.
   */
  beginSuspendAndWait(
    resourceGroupName: string,
    accountName: string,
    storageCacheResourceName: string,
    options?: StorageCacheSuspendOptionalParams
  ): Promise<StorageCacheSuspendResponse>;
}
