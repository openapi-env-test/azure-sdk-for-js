/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CheckNameAvailability } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AgriFoodMgmtClient } from "../agriFoodMgmtClient";
import {
  CheckNameAvailabilityRequest,
  CheckNameAvailabilityCheckNameAvailabilityOptionalParams,
  CheckNameAvailabilityCheckNameAvailabilityResponse
} from "../models";

/** Class containing CheckNameAvailability operations. */
export class CheckNameAvailabilityImpl implements CheckNameAvailability {
  private readonly client: AgriFoodMgmtClient;

  /**
   * Initialize a new instance of the class CheckNameAvailability class.
   * @param client Reference to the service client
   */
  constructor(client: AgriFoodMgmtClient) {
    this.client = client;
  }

  /**
   * Checks the name availability of the resource with requested resource name.
   * @param nameAvailabilityRequest NameAvailabilityRequest object.
   * @param options The options parameters.
   */
  checkNameAvailability(
    nameAvailabilityRequest: CheckNameAvailabilityRequest,
    options?: CheckNameAvailabilityCheckNameAvailabilityOptionalParams
  ): Promise<CheckNameAvailabilityCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { nameAvailabilityRequest, options },
      checkNameAvailabilityOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AgFoodPlatform/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.nameAvailabilityRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
