/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/networkGroupsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a NetworkGroups. */
export class NetworkGroups {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a NetworkGroups.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the specified network group.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkGroupsGetResponse>
   */
  get(resourceGroupName: string, networkManagerName: string, networkGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkGroupsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, networkGroupName: string, callback: msRest.ServiceCallback<Models.NetworkGroup>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, networkGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkGroup>): void;
  get(resourceGroupName: string, networkManagerName: string, networkGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkGroup>, callback?: msRest.ServiceCallback<Models.NetworkGroup>): Promise<Models.NetworkGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        networkGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.NetworkGroupsGetResponse>;
  }

  /**
   * Creates a network group.
   * @param parameters Parameters supplied to the specify which network group need to create
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkGroupsCreateOrUpdateResponse>
   */
  createOrUpdate(parameters: Models.NetworkGroup, resourceGroupName: string, networkManagerName: string, networkGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkGroupsCreateOrUpdateResponse>;
  /**
   * @param parameters Parameters supplied to the specify which network group need to create
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param callback The callback
   */
  createOrUpdate(parameters: Models.NetworkGroup, resourceGroupName: string, networkManagerName: string, networkGroupName: string, callback: msRest.ServiceCallback<Models.NetworkGroup>): void;
  /**
   * @param parameters Parameters supplied to the specify which network group need to create
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(parameters: Models.NetworkGroup, resourceGroupName: string, networkManagerName: string, networkGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkGroup>): void;
  createOrUpdate(parameters: Models.NetworkGroup, resourceGroupName: string, networkManagerName: string, networkGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkGroup>, callback?: msRest.ServiceCallback<Models.NetworkGroup>): Promise<Models.NetworkGroupsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        resourceGroupName,
        networkManagerName,
        networkGroupName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.NetworkGroupsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a network group.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, networkGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, networkGroupName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, networkGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, networkManagerName: string, networkGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        networkGroupName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Update a Network Group.
   * @param parameters Parameters supplied to update network manager group tags.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkGroupsPatchResponse>
   */
  patch(parameters: Models.TagsObject, resourceGroupName: string, networkManagerName: string, networkGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkGroupsPatchResponse>;
  /**
   * @param parameters Parameters supplied to update network manager group tags.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param callback The callback
   */
  patch(parameters: Models.TagsObject, resourceGroupName: string, networkManagerName: string, networkGroupName: string, callback: msRest.ServiceCallback<Models.NetworkGroup>): void;
  /**
   * @param parameters Parameters supplied to update network manager group tags.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param networkGroupName The name of the network group to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(parameters: Models.TagsObject, resourceGroupName: string, networkManagerName: string, networkGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkGroup>): void;
  patch(parameters: Models.TagsObject, resourceGroupName: string, networkManagerName: string, networkGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkGroup>, callback?: msRest.ServiceCallback<Models.NetworkGroup>): Promise<Models.NetworkGroupsPatchResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        resourceGroupName,
        networkManagerName,
        networkGroupName,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.NetworkGroupsPatchResponse>;
  }

  /**
   * Get the specified network group list.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkGroupsListResponse>
   */
  list(resourceGroupName: string, networkManagerName: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkGroupsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param callback The callback
   */
  list(resourceGroupName: string, networkManagerName: string, callback: msRest.ServiceCallback<Models.NetworkGroupListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, networkManagerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkGroupListResult>): void;
  list(resourceGroupName: string, networkManagerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkGroupListResult>, callback?: msRest.ServiceCallback<Models.NetworkGroupListResult>): Promise<Models.NetworkGroupsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.NetworkGroupsListResponse>;
  }

  /**
   * Get the specified network group list.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkGroupsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkGroupsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NetworkGroupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkGroupListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkGroupListResult>, callback?: msRest.ServiceCallback<Models.NetworkGroupListResult>): Promise<Models.NetworkGroupsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.NetworkGroupsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/networkGroups/{networkGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.networkGroupName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/networkGroups/{networkGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.networkGroupName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NetworkGroup,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NetworkGroup
    },
    201: {
      bodyMapper: Mappers.NetworkGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/networkGroups/{networkGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.networkGroupName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/networkGroups/{networkGroupName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.networkGroupName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NetworkGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/networkGroups/",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkGroupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
