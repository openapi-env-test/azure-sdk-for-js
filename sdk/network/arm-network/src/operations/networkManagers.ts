/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/networkManagersMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a NetworkManagers. */
export class NetworkManagers {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a NetworkManagers.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the specified Network Manager.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkManagersGetResponse>
   */
  get(resourceGroupName: string, networkManagerName: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkManagersGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, callback: msRest.ServiceCallback<Models.NetworkManager>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkManager>): void;
  get(resourceGroupName: string, networkManagerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkManager>, callback?: msRest.ServiceCallback<Models.NetworkManager>): Promise<Models.NetworkManagersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.NetworkManagersGetResponse>;
  }

  /**
   * Creates a Network Manager.
   * @param parameters Parameters supplied to the specify which Managed Network is.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkManagersCreateOrUpdateResponse>
   */
  createOrUpdate(parameters: Models.NetworkManager, resourceGroupName: string, networkManagerName: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkManagersCreateOrUpdateResponse>;
  /**
   * @param parameters Parameters supplied to the specify which Managed Network is.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param callback The callback
   */
  createOrUpdate(parameters: Models.NetworkManager, resourceGroupName: string, networkManagerName: string, callback: msRest.ServiceCallback<Models.NetworkManager>): void;
  /**
   * @param parameters Parameters supplied to the specify which Managed Network is.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(parameters: Models.NetworkManager, resourceGroupName: string, networkManagerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkManager>): void;
  createOrUpdate(parameters: Models.NetworkManager, resourceGroupName: string, networkManagerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkManager>, callback?: msRest.ServiceCallback<Models.NetworkManager>): Promise<Models.NetworkManagersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        resourceGroupName,
        networkManagerName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.NetworkManagersCreateOrUpdateResponse>;
  }

  /**
   * Deletes a network manager.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, networkManagerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Update a NetworkManager.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param parameters Parameters supplied to update network manager tags.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkManagersPatchResponse>
   */
  patch(resourceGroupName: string, networkManagerName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase): Promise<Models.NetworkManagersPatchResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param parameters Parameters supplied to update network manager tags.
   * @param callback The callback
   */
  patch(resourceGroupName: string, networkManagerName: string, parameters: Models.TagsObject, callback: msRest.ServiceCallback<Models.NetworkManager>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param parameters Parameters supplied to update network manager tags.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(resourceGroupName: string, networkManagerName: string, parameters: Models.TagsObject, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkManager>): void;
  patch(resourceGroupName: string, networkManagerName: string, parameters: Models.TagsObject, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkManager>, callback?: msRest.ServiceCallback<Models.NetworkManager>): Promise<Models.NetworkManagersPatchResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        parameters,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.NetworkManagersPatchResponse>;
  }

  /**
   * List all network managers in subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkManagersListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.NetworkManagersListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.NetworkManagerListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkManagerListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkManagerListResult>, callback?: msRest.ServiceCallback<Models.NetworkManagerListResult>): Promise<Models.NetworkManagersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.NetworkManagersListBySubscriptionResponse>;
  }

  /**
   * List network manager in resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkManagersListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkManagersListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.NetworkManagerListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkManagerListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkManagerListResult>, callback?: msRest.ServiceCallback<Models.NetworkManagerListResult>): Promise<Models.NetworkManagersListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.NetworkManagersListResponse>;
  }

  /**
   * List all network managers in subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkManagersListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkManagersListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NetworkManagerListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkManagerListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkManagerListResult>, callback?: msRest.ServiceCallback<Models.NetworkManagerListResult>): Promise<Models.NetworkManagersListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.NetworkManagersListBySubscriptionNextResponse>;
  }

  /**
   * List network manager in resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.NetworkManagersListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.NetworkManagersListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NetworkManagerListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NetworkManagerListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NetworkManagerListResult>, callback?: msRest.ServiceCallback<Models.NetworkManagerListResult>): Promise<Models.NetworkManagersListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.NetworkManagersListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkManager
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NetworkManager,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NetworkManager
    },
    201: {
      bodyMapper: Mappers.NetworkManager
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NetworkManager
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/networkManagers",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkManagerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkManagerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkManagerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NetworkManagerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
