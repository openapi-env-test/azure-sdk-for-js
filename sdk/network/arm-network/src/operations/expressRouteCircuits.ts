/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/expressRouteCircuitsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a ExpressRouteCircuits. */
export class ExpressRouteCircuits {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a ExpressRouteCircuits.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * The delete ExpressRouteCircuit operation deletes the specified ExpressRouteCircuit.
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the express route Circuit.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, circuitName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,circuitName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The Get ExpressRouteCircuit operation retrieves information about the specified
   * ExpressRouteCircuit.
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsGetResponse>
   */
  get(resourceGroupName: string, circuitName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param callback The callback
   */
  get(resourceGroupName: string, circuitName: string, callback: msRest.ServiceCallback<Models.ExpressRouteCircuit>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, circuitName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuit>): void;
  get(resourceGroupName: string, circuitName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuit>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuit>): Promise<Models.ExpressRouteCircuitsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        circuitName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsGetResponse>;
  }

  /**
   * The Put ExpressRouteCircuit operation creates/updates a ExpressRouteCircuit
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param parameters Parameters supplied to the create/delete ExpressRouteCircuit operation
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, circuitName: string, parameters: Models.ExpressRouteCircuit, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,circuitName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ExpressRouteCircuitsCreateOrUpdateResponse>;
  }

  /**
   * The ListArpTable from ExpressRouteCircuit operation retrieves the currently advertised arp table
   * associated with the ExpressRouteCircuits in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsListArpTableResponse>
   */
  listArpTable(resourceGroupName: string, circuitName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsListArpTableResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param callback The callback
   */
  listArpTable(resourceGroupName: string, circuitName: string, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsArpTableListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param options The optional parameters
   * @param callback The callback
   */
  listArpTable(resourceGroupName: string, circuitName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsArpTableListResult>): void;
  listArpTable(resourceGroupName: string, circuitName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuitsArpTableListResult>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuitsArpTableListResult>): Promise<Models.ExpressRouteCircuitsListArpTableResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        circuitName,
        options
      },
      listArpTableOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsListArpTableResponse>;
  }

  /**
   * The ListRoutesTable from ExpressRouteCircuit operation retrieves the currently advertised routes
   * table associated with the ExpressRouteCircuits in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsListRoutesTableResponse>
   */
  listRoutesTable(resourceGroupName: string, circuitName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsListRoutesTableResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param callback The callback
   */
  listRoutesTable(resourceGroupName: string, circuitName: string, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsRoutesTableListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRoutesTable(resourceGroupName: string, circuitName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsRoutesTableListResult>): void;
  listRoutesTable(resourceGroupName: string, circuitName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuitsRoutesTableListResult>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuitsRoutesTableListResult>): Promise<Models.ExpressRouteCircuitsListRoutesTableResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        circuitName,
        options
      },
      listRoutesTableOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsListRoutesTableResponse>;
  }

  /**
   * The ListStats ExpressRouteCircuit operation retrieves all the stats from a ExpressRouteCircuits
   * in a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the loadBalancer.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsListStatsResponse>
   */
  listStats(resourceGroupName: string, circuitName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsListStatsResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the loadBalancer.
   * @param callback The callback
   */
  listStats(resourceGroupName: string, circuitName: string, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsStatsListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the loadBalancer.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStats(resourceGroupName: string, circuitName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsStatsListResult>): void;
  listStats(resourceGroupName: string, circuitName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuitsStatsListResult>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuitsStatsListResult>): Promise<Models.ExpressRouteCircuitsListStatsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        circuitName,
        options
      },
      listStatsOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsListStatsResponse>;
  }

  /**
   * The List ExpressRouteCircuit operation retrieves all the ExpressRouteCircuits in a resource
   * group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): Promise<Models.ExpressRouteCircuitsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsListResponse>;
  }

  /**
   * The List ExpressRouteCircuit operation retrieves all the ExpressRouteCircuits in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsListAllResponse>
   */
  listAll(options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsListAllResponse>;
  /**
   * @param callback The callback
   */
  listAll(callback: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAll(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): void;
  listAll(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): Promise<Models.ExpressRouteCircuitsListAllResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAllOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsListAllResponse>;
  }

  /**
   * The delete ExpressRouteCircuit operation deletes the specified ExpressRouteCircuit.
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the express route Circuit.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, circuitName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        circuitName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * The Put ExpressRouteCircuit operation creates/updates a ExpressRouteCircuit
   * @param resourceGroupName The name of the resource group.
   * @param circuitName The name of the circuit.
   * @param parameters Parameters supplied to the create/delete ExpressRouteCircuit operation
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, circuitName: string, parameters: Models.ExpressRouteCircuit, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        circuitName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * The ListArpTable from ExpressRouteCircuit operation retrieves the currently advertised arp table
   * associated with the ExpressRouteCircuits in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsListArpTableNextResponse>
   */
  listArpTableNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsListArpTableNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listArpTableNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsArpTableListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listArpTableNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsArpTableListResult>): void;
  listArpTableNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuitsArpTableListResult>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuitsArpTableListResult>): Promise<Models.ExpressRouteCircuitsListArpTableNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listArpTableNextOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsListArpTableNextResponse>;
  }

  /**
   * The ListRoutesTable from ExpressRouteCircuit operation retrieves the currently advertised routes
   * table associated with the ExpressRouteCircuits in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsListRoutesTableNextResponse>
   */
  listRoutesTableNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsListRoutesTableNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listRoutesTableNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsRoutesTableListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRoutesTableNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsRoutesTableListResult>): void;
  listRoutesTableNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuitsRoutesTableListResult>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuitsRoutesTableListResult>): Promise<Models.ExpressRouteCircuitsListRoutesTableNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listRoutesTableNextOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsListRoutesTableNextResponse>;
  }

  /**
   * The ListStats ExpressRouteCircuit operation retrieves all the stats from a ExpressRouteCircuits
   * in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsListStatsNextResponse>
   */
  listStatsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsListStatsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listStatsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsStatsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStatsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitsStatsListResult>): void;
  listStatsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuitsStatsListResult>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuitsStatsListResult>): Promise<Models.ExpressRouteCircuitsListStatsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listStatsNextOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsListStatsNextResponse>;
  }

  /**
   * The List ExpressRouteCircuit operation retrieves all the ExpressRouteCircuits in a resource
   * group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): Promise<Models.ExpressRouteCircuitsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsListNextResponse>;
  }

  /**
   * The List ExpressRouteCircuit operation retrieves all the ExpressRouteCircuits in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExpressRouteCircuitsListAllNextResponse>
   */
  listAllNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExpressRouteCircuitsListAllNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAllNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAllNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): void;
  listAllNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>, callback?: msRest.ServiceCallback<Models.ExpressRouteCircuitListResult>): Promise<Models.ExpressRouteCircuitsListAllNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAllNextOperationSpec,
      callback) as Promise<Models.ExpressRouteCircuitsListAllNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.circuitName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuit
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listArpTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}arpTable",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.circuitName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuitsArpTableListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRoutesTableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}routesTable",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.circuitName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuitsRoutesTableListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listStatsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}stats",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.circuitName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuitsStatsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuitListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCircuits",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuitListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.circuitName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.circuitName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ExpressRouteCircuit,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuit
    },
    201: {
      bodyMapper: Mappers.ExpressRouteCircuit
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listArpTableNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuitsArpTableListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listRoutesTableNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuitsRoutesTableListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listStatsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuitsStatsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuitListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listAllNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExpressRouteCircuitListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
