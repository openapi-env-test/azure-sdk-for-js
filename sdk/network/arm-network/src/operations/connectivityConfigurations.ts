/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/connectivityConfigurationsMappers";
import * as Parameters from "../models/parameters";
import { NetworkManagementClientContext } from "../networkManagementClientContext";

/** Class representing a ConnectivityConfigurations. */
export class ConnectivityConfigurations {
  private readonly client: NetworkManagementClientContext;

  /**
   * Create a ConnectivityConfigurations.
   * @param {NetworkManagementClientContext} client Reference to the service client.
   */
  constructor(client: NetworkManagementClientContext) {
    this.client = client;
  }

  /**
   * The Get ConnectivityConfigurations operation gets a Managed Network Connectivity Configuration
   * resource, specified by the  resource group, Managed Network name, and connectivity Configuration
   * name
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the Managed Network Peering Configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectivityConfigurationsGetResponse>
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectivityConfigurationsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the Managed Network Peering Configuration.
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, callback: msRest.ServiceCallback<Models.ConnectivityConfiguration>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the Managed Network Peering Configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectivityConfiguration>): void;
  get(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectivityConfiguration>, callback?: msRest.ServiceCallback<Models.ConnectivityConfiguration>): Promise<Models.ConnectivityConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ConnectivityConfigurationsGetResponse>;
  }

  /**
   * The Put ConnectivityConfigurations operation creates/updates a new Managed Network Peering
   * Configuration
   * @param connectivityConfiguration Parameters supplied to create/update a Managed Network Peering
   * Configuration
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the Managed Network Peering Configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectivityConfigurationsCreateOrUpdateResponse>
   */
  createOrUpdate(connectivityConfiguration: Models.ConnectivityConfiguration, resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectivityConfigurationsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(connectivityConfiguration,resourceGroupName,networkManagerName,configurationName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ConnectivityConfigurationsCreateOrUpdateResponse>;
  }

  /**
   * The Delete ConnectivityConfigurations operation deletes a Managed Network Connectivity
   * Configuration, specified by the  resource group, Managed Network name, and connectivity
   * Configuration name
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the Managed Network Peering Configuration.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,networkManagerName,configurationName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Update a ConnectivityConfiguration.
   * @param parameters Parameters supplied to update network manager ConnectivityConfigurations tags.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the Managed Network Peering Configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectivityConfigurationsPatchResponse>
   */
  patch(parameters: Models.TagsObject, resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectivityConfigurationsPatchResponse>;
  /**
   * @param parameters Parameters supplied to update network manager ConnectivityConfigurations tags.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the Managed Network Peering Configuration.
   * @param callback The callback
   */
  patch(parameters: Models.TagsObject, resourceGroupName: string, networkManagerName: string, configurationName: string, callback: msRest.ServiceCallback<Models.ConnectivityConfiguration>): void;
  /**
   * @param parameters Parameters supplied to update network manager ConnectivityConfigurations tags.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the Managed Network Peering Configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(parameters: Models.TagsObject, resourceGroupName: string, networkManagerName: string, configurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectivityConfiguration>): void;
  patch(parameters: Models.TagsObject, resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectivityConfiguration>, callback?: msRest.ServiceCallback<Models.ConnectivityConfiguration>): Promise<Models.ConnectivityConfigurationsPatchResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.ConnectivityConfigurationsPatchResponse>;
  }

  /**
   * The List By network Manager PeeringConfigurations operation retrieves all the Managed Network
   * Peering Configurations in a specified Managed Network, in a paginated format.
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectivityConfigurationsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, networkManagerName: string, options?: Models.ConnectivityConfigurationsListByResourceGroupOptionalParams): Promise<Models.ConnectivityConfigurationsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, networkManagerName: string, callback: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, networkManagerName: string, options: Models.ConnectivityConfigurationsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): void;
  listByResourceGroup(resourceGroupName: string, networkManagerName: string, options?: Models.ConnectivityConfigurationsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>, callback?: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): Promise<Models.ConnectivityConfigurationsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        networkManagerName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ConnectivityConfigurationsListByResourceGroupResponse>;
  }

  /**
   * The Put ConnectivityConfigurations operation creates/updates a new Managed Network Peering
   * Configuration
   * @param connectivityConfiguration Parameters supplied to create/update a Managed Network Peering
   * Configuration
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the Managed Network Peering Configuration.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(connectivityConfiguration: Models.ConnectivityConfiguration, resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        connectivityConfiguration,
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * The Delete ConnectivityConfigurations operation deletes a Managed Network Connectivity
   * Configuration, specified by the  resource group, Managed Network name, and connectivity
   * Configuration name
   * @param resourceGroupName The name of the resource group.
   * @param networkManagerName The name of the network manager.
   * @param configurationName The name of the Managed Network Peering Configuration.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, networkManagerName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        networkManagerName,
        configurationName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * The List By network Manager PeeringConfigurations operation retrieves all the Managed Network
   * Peering Configurations in a specified Managed Network, in a paginated format.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectivityConfigurationsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectivityConfigurationsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>, callback?: msRest.ServiceCallback<Models.ConnectivityConfigurationListResult>): Promise<Models.ConnectivityConfigurationsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.ConnectivityConfigurationsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/connectivityConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/connectivityConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/connectivityConfigurations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.top,
    Parameters.skiptoken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/connectivityConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectivityConfiguration",
    mapper: {
      ...Mappers.ConnectivityConfiguration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityConfiguration
    },
    201: {
      bodyMapper: Mappers.ConnectivityConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/connectivityConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.networkManagerName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectivityConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
