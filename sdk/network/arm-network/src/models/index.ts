/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * SKU of application gateway
 */
export interface ApplicationGatewaySku {
  /**
   * Gets or sets name of application gateway SKU. Possible values include: 'Standard_Small',
   * 'Standard_Medium', 'Standard_Large'
   */
  name?: ApplicationGatewaySkuName;
  /**
   * Gets or sets tier of application gateway. Possible values include: 'Standard'
   */
  tier?: ApplicationGatewayTier;
  /**
   * Gets or sets capacity (instance count) of application gateway
   */
  capacity?: number;
}

/**
 * An interface representing SubResource.
 */
export interface SubResource extends BaseResource {
  /**
   * Resource Id
   */
  id?: string;
}

/**
 * IP configuration of application gateway
 */
export interface ApplicationGatewayIPConfiguration extends SubResource {
  /**
   * Gets or sets the reference of the subnet resource.A subnet from where application gateway gets
   * its private address
   */
  subnet?: SubResource;
  /**
   * Gets or sets Provisioning state of the application gateway subnet resource
   * Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * SSL certificates of application gateway
 */
export interface ApplicationGatewaySslCertificate extends SubResource {
  /**
   * Gets or sets the certificate data
   */
  data?: string;
  /**
   * Gets or sets the certificate password
   */
  password?: string;
  /**
   * Gets or sets the certificate public data
   */
  publicCertData?: string;
  /**
   * Gets or sets Provisioning state of the ssl certificate resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Frontend IP configuration of application gateway
 */
export interface ApplicationGatewayFrontendIPConfiguration extends SubResource {
  /**
   * Gets or sets the privateIPAddress of the Network Interface IP Configuration
   */
  privateIPAddress?: string;
  /**
   * Gets or sets PrivateIP allocation method (Static/Dynamic). Possible values include: 'Static',
   * 'Dynamic'
   */
  privateIPAllocationMethod?: IpAllocationMethod;
  /**
   * Gets or sets the reference of the subnet resource
   */
  subnet?: SubResource;
  /**
   * Gets or sets the reference of the PublicIP resource
   */
  publicIPAddress?: SubResource;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Frontend Port of application gateway
 */
export interface ApplicationGatewayFrontendPort extends SubResource {
  /**
   * Gets or sets the frontend port
   */
  port?: number;
  /**
   * Gets or sets Provisioning state of the frontend port resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Backend Address of application gateway
 */
export interface ApplicationGatewayBackendAddress {
  /**
   * Gets or sets the dns name
   */
  fqdn?: string;
  /**
   * Gets or sets the ip address
   */
  ipAddress?: string;
}

/**
 * Backend Address Pool of application gateway
 */
export interface ApplicationGatewayBackendAddressPool extends SubResource {
  /**
   * Gets or sets backendIPConfiguration of application gateway
   */
  backendIPConfigurations?: SubResource[];
  /**
   * Gets or sets the backend addresses
   */
  backendAddresses?: ApplicationGatewayBackendAddress[];
  /**
   * Gets or sets Provisioning state of the backend address pool resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Backend address pool settings of application gateway
 */
export interface ApplicationGatewayBackendHttpSettings extends SubResource {
  /**
   * Gets or sets the port
   */
  port?: number;
  /**
   * Gets or sets the protocol. Possible values include: 'Http', 'Https'
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * Gets or sets the cookie affinity. Possible values include: 'Enabled', 'Disabled'
   */
  cookieBasedAffinity?: ApplicationGatewayCookieBasedAffinity;
  /**
   * Gets or sets Provisioning state of the backend http settings resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Http listener of application gateway
 */
export interface ApplicationGatewayHttpListener extends SubResource {
  /**
   * Gets or sets frontend IP configuration resource of application gateway
   */
  frontendIPConfiguration?: SubResource;
  /**
   * Gets or sets frontend port resource of application gateway
   */
  frontendPort?: SubResource;
  /**
   * Gets or sets the protocol. Possible values include: 'Http', 'Https'
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * Gets or sets ssl certificate resource of application gateway
   */
  sslCertificate?: SubResource;
  /**
   * Gets or sets Provisioning state of the http listener resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Request routing rule of application gateway
 */
export interface ApplicationGatewayRequestRoutingRule extends SubResource {
  /**
   * Gets or sets the rule type. Possible values include: 'Basic'
   */
  ruleType?: ApplicationGatewayRequestRoutingRuleType;
  /**
   * Gets or sets backend address pool resource of application gateway
   */
  backendAddressPool?: SubResource;
  /**
   * Gets or sets frontend port resource of application gateway
   */
  backendHttpSettings?: SubResource;
  /**
   * Gets or sets http listener resource of application gateway
   */
  httpListener?: SubResource;
  /**
   * Gets or sets Provisioning state of the request routing rule resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * An interface representing Resource.
 */
export interface Resource extends BaseResource {
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * ApplicationGateways resource
 */
export interface ApplicationGateway extends Resource {
  /**
   * Gets or sets sku of application gateway resource
   */
  sku?: ApplicationGatewaySku;
  /**
   * Gets operational state of application gateway resource. Possible values include: 'Stopped',
   * 'Starting', 'Running', 'Stopping'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operationalState?: ApplicationGatewayOperationalState;
  /**
   * Gets or sets subnets of application gateway resource
   */
  gatewayIPConfigurations?: ApplicationGatewayIPConfiguration[];
  /**
   * Gets or sets ssl certificates of application gateway resource
   */
  sslCertificates?: ApplicationGatewaySslCertificate[];
  /**
   * Gets or sets frontend IP addresses of application gateway resource
   */
  frontendIPConfigurations?: ApplicationGatewayFrontendIPConfiguration[];
  /**
   * Gets or sets frontend ports of application gateway resource
   */
  frontendPorts?: ApplicationGatewayFrontendPort[];
  /**
   * Gets or sets backend address pool of application gateway resource
   */
  backendAddressPools?: ApplicationGatewayBackendAddressPool[];
  /**
   * Gets or sets backend http settings of application gateway resource
   */
  backendHttpSettingsCollection?: ApplicationGatewayBackendHttpSettings[];
  /**
   * Gets or sets HTTP listeners of application gateway resource
   */
  httpListeners?: ApplicationGatewayHttpListener[];
  /**
   * Gets or sets request routing rules of application gateway resource
   */
  requestRoutingRules?: ApplicationGatewayRequestRoutingRule[];
  /**
   * Gets or sets resource guid property of the ApplicationGateway resource
   */
  resourceGuid?: string;
  /**
   * Gets or sets Provisioning state of the ApplicationGateway resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Contains sku in an ExpressRouteCircuit
 */
export interface ExpressRouteCircuitSku {
  /**
   * Gets or sets name of the sku.
   */
  name?: string;
  /**
   * Gets or sets tier of the sku. Possible values include: 'Standard', 'Premium'
   */
  tier?: ExpressRouteCircuitSkuTier;
  /**
   * Gets or sets family of the sku. Possible values include: 'UnlimitedData', 'MeteredData'
   */
  family?: ExpressRouteCircuitSkuFamily;
}

/**
 * Authorization in a ExpressRouteCircuit resource
 */
export interface ExpressRouteCircuitAuthorization extends SubResource {
  /**
   * Gets or sets the authorization key
   */
  authorizationKey?: string;
  /**
   * Gets or sets AuthorizationUseStatus. Possible values include: 'Available', 'InUse'
   */
  authorizationUseStatus?: AuthorizationUseStatus;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Specifies the peering config
 */
export interface ExpressRouteCircuitPeeringConfig {
  /**
   * Gets or sets the reference of AdvertisedPublicPrefixes
   */
  advertisedPublicPrefixes?: string[];
  /**
   * Gets or sets AdvertisedPublicPrefixState of the Peering resource. Possible values include:
   * 'NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded'
   */
  advertisedPublicPrefixesState?: ExpressRouteCircuitPeeringAdvertisedPublicPrefixState;
  /**
   * Gets or Sets CustomerAsn of the peering.
   */
  customerASN?: number;
  /**
   * Gets or Sets RoutingRegistryName of the config.
   */
  routingRegistryName?: string;
}

/**
 * Contains Stats associated with the peering
 */
export interface ExpressRouteCircuitStats {
  /**
   * Gets BytesIn of the peering.
   */
  bytesIn?: number;
  /**
   * Gets BytesOut of the peering.
   */
  bytesOut?: number;
}

/**
 * Peering in a ExpressRouteCircuit resource
 */
export interface ExpressRouteCircuitPeering extends SubResource {
  /**
   * Gets or sets PeeringType. Possible values include: 'AzurePublicPeering',
   * 'AzurePrivatePeering', 'MicrosoftPeering'
   */
  peeringType?: ExpressRouteCircuitPeeringType;
  /**
   * Gets or sets state of Peering. Possible values include: 'Disabled', 'Enabled'
   */
  state?: ExpressRouteCircuitPeeringState;
  /**
   * Gets or sets the azure ASN
   */
  azureASN?: number;
  /**
   * Gets or sets the peer ASN
   */
  peerASN?: number;
  /**
   * Gets or sets the primary address prefix
   */
  primaryPeerAddressPrefix?: string;
  /**
   * Gets or sets the secondary address prefix
   */
  secondaryPeerAddressPrefix?: string;
  /**
   * Gets or sets the primary port
   */
  primaryAzurePort?: string;
  /**
   * Gets or sets the secondary port
   */
  secondaryAzurePort?: string;
  /**
   * Gets or sets the shared key
   */
  sharedKey?: string;
  /**
   * Gets or sets the vlan id
   */
  vlanId?: number;
  /**
   * Gets or sets the Microsoft peering config
   */
  microsoftPeeringConfig?: ExpressRouteCircuitPeeringConfig;
  /**
   * Gets or peering stats
   */
  stats?: ExpressRouteCircuitStats;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Contains ServiceProviderProperties in an ExpressRouteCircuit
 */
export interface ExpressRouteCircuitServiceProviderProperties {
  /**
   * Gets or sets serviceProviderName.
   */
  serviceProviderName?: string;
  /**
   * Gets or sets peering location.
   */
  peeringLocation?: string;
  /**
   * Gets or sets BandwidthInMbps.
   */
  bandwidthInMbps?: number;
}

/**
 * ExpressRouteCircuit resource
 */
export interface ExpressRouteCircuit extends Resource {
  /**
   * Gets or sets sku
   */
  sku?: ExpressRouteCircuitSku;
  /**
   * Gets or sets CircuitProvisioningState state of the resource
   */
  circuitProvisioningState?: string;
  /**
   * Gets or sets ServiceProviderProvisioningState state of the resource. Possible values include:
   * 'NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning'
   */
  serviceProviderProvisioningState?: ServiceProviderProvisioningState;
  /**
   * Gets or sets list of authorizations
   */
  authorizations?: ExpressRouteCircuitAuthorization[];
  /**
   * Gets or sets list of peerings
   */
  peerings?: ExpressRouteCircuitPeering[];
  /**
   * Gets or sets ServiceKey
   */
  serviceKey?: string;
  /**
   * Gets or sets ServiceProviderNotes
   */
  serviceProviderNotes?: string;
  /**
   * Gets or sets ServiceProviderProperties
   */
  serviceProviderProperties?: ExpressRouteCircuitServiceProviderProperties;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * The arp table associated with the ExpressRouteCircuit
 */
export interface ExpressRouteCircuitArpTable {
  /**
   * Gets ipAddress.
   */
  ipAddress?: string;
  /**
   * Gets macAddress.
   */
  macAddress?: string;
}

/**
 * The routes table associated with the ExpressRouteCircuit
 */
export interface ExpressRouteCircuitRoutesTable {
  /**
   * Gets AddressPrefix.
   */
  addressPrefix?: string;
  /**
   * Gets NextHopType. Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',
   * 'VirtualAppliance', 'None'
   */
  nextHopType: RouteNextHopType;
  /**
   * Gets NextHopIP.
   */
  nextHopIP?: string;
  /**
   * Gets AsPath.
   */
  asPath?: string;
}

/**
 * Contains Bandwidths offered in ExpressRouteServiceProviders
 */
export interface ExpressRouteServiceProviderBandwidthsOffered {
  /**
   * Gets the OfferName
   */
  offerName?: string;
  /**
   * Gets the ValueInMbps.
   */
  valueInMbps?: number;
}

/**
 * Properties of ExpressRouteServiceProvider
 */
export interface ExpressRouteServiceProviderPropertiesFormat {
  /**
   * Gets or list of peering locations
   */
  peeringLocations?: string[];
  /**
   * Gets or bandwidths offered
   */
  bandwidthsOffered?: ExpressRouteServiceProviderBandwidthsOffered[];
  /**
   * Gets or sets Provisioning state of the resource
   */
  provisioningState?: string;
}

/**
 * ExpressRouteResourceProvider object
 */
export interface ExpressRouteServiceProvider {
  /**
   * Gets or sets the ID of the resource.
   */
  id?: string;
  /**
   * Gets or sets the name of the resource.
   */
  name?: string;
  /**
   * Gets or sets the type of the resource.
   */
  type?: string;
  properties?: ExpressRouteServiceProviderPropertiesFormat;
}

/**
 * Frontend IP address of the load balancer
 */
export interface FrontendIpConfiguration extends SubResource {
  /**
   * Gets or sets the IP address of the Load Balancer.This is only specified if a specific private
   * IP address shall be allocated from the subnet specified in subnetRef
   */
  privateIPAddress?: string;
  /**
   * Gets or sets PrivateIP allocation method (Static/Dynamic). Possible values include: 'Static',
   * 'Dynamic'
   */
  privateIPAllocationMethod?: IpAllocationMethod;
  /**
   * Gets or sets the reference of the subnet resource.A subnet from where the load balancer gets
   * its private frontend address
   */
  subnet?: SubResource;
  /**
   * Gets or sets the reference of the PublicIP resource
   */
  publicIPAddress?: SubResource;
  /**
   * Read only.Inbound rules URIs that use this frontend IP
   */
  inboundNatRules?: SubResource[];
  /**
   * Read only.Inbound pools URIs that use this frontend IP
   */
  inboundNatPools?: SubResource[];
  /**
   * Read only.Outbound rules URIs that use this frontend IP
   */
  outboundNatRules?: SubResource[];
  /**
   * Gets Load Balancing rules URIs that use this frontend IP
   */
  loadBalancingRules?: SubResource[];
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Pool of backend IP addresses
 */
export interface BackendAddressPool extends SubResource {
  /**
   * Gets collection of references to IPs defined in NICs
   */
  backendIPConfigurations?: SubResource[];
  /**
   * Gets Load Balancing rules that use this Backend Address Pool
   */
  loadBalancingRules?: SubResource[];
  /**
   * Gets outbound rules that use this Backend Address Pool
   */
  outboundNatRule?: SubResource;
  /**
   * Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Rules of the load balancer
 */
export interface LoadBalancingRule extends SubResource {
  /**
   * Gets or sets a reference to frontend IP Addresses
   */
  frontendIPConfiguration?: SubResource;
  /**
   * Gets or sets  a reference to a pool of DIPs. Inbound traffic is randomly load balanced across
   * IPs in the backend IPs
   */
  backendAddressPool: SubResource;
  /**
   * Gets or sets the reference of the load balancer probe used by the Load Balancing rule.
   */
  probe?: SubResource;
  /**
   * Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp.
   * Possible values include: 'Udp', 'Tcp'
   */
  protocol: TransportProtocol;
  /**
   * Gets or sets the load distribution policy for this rule. Possible values include: 'Default',
   * 'SourceIP', 'SourceIPProtocol'
   */
  loadDistribution?: LoadDistribution;
  /**
   * Gets or sets the port for the external endpoint. You can specify any port number you choose,
   * but the port numbers specified for each role in the service must be unique. Possible values
   * range between 1 and 65535, inclusive
   */
  frontendPort: number;
  /**
   * Gets or sets a port used for internal connections on the endpoint. The localPort attribute
   * maps the eternal port of the endpoint to an internal port on a role. This is useful in
   * scenarios where a role must communicate to an internal component on a port that is different
   * from the one that is exposed externally. If not specified, the value of localPort is the same
   * as the port attribute. Set the value of localPort to '*' to automatically assign an
   * unallocated port that is discoverable using the runtime API
   */
  backendPort?: number;
  /**
   * Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30
   * minutes. The default value is 4 minutes. This element is only used when the protocol is set to
   * Tcp
   */
  idleTimeoutInMinutes?: number;
  /**
   * Configures a virtual machine's endpoint for the floating IP capability required to configure a
   * SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON
   * availability Groups in SQL server. This setting can't be changed after you create the endpoint
   */
  enableFloatingIP: boolean;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Load balancer Probe
 */
export interface Probe extends SubResource {
  /**
   * Gets Load balancer rules that use this probe
   */
  loadBalancingRules?: SubResource[];
  /**
   * Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is
   * specified, a received ACK is required for the probe to be successful. If http is specified,a
   * 200 OK response from the specifies URI is required for the probe to be successful. Possible
   * values include: 'Http', 'Tcp'
   */
  protocol: ProbeProtocol;
  /**
   * Gets or sets Port for communicating the probe. Possible values range from 1 to 65535,
   * inclusive.
   */
  port: number;
  /**
   * Gets or sets the interval, in seconds, for how frequently to probe the endpoint for health
   * status. Typically, the interval is slightly less than half the allocated timeout period (in
   * seconds) which allows two full probes before taking the instance out of rotation. The default
   * value is 15, the minimum value is 5
   */
  intervalInSeconds?: number;
  /**
   * Gets or sets the number of probes where if no response, will result in stopping further
   * traffic from being delivered to the endpoint. This values allows endpoints to be taken out of
   * rotation faster or slower than the typical times used in Azure.
   */
  numberOfProbes?: number;
  /**
   * Gets or sets the URI used for requesting health status from the VM. Path is required if a
   * protocol is set to http. Otherwise, it is not allowed. There is no default value
   */
  requestPath?: string;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Inbound NAT rule of the loadbalancer
 */
export interface InboundNatRule extends SubResource {
  /**
   * Gets or sets a reference to frontend IP Addresses
   */
  frontendIPConfiguration?: SubResource;
  /**
   * Gets or sets a reference to a private ip address defined on a NetworkInterface of a VM.
   * Traffic sent to frontendPort of each of the frontendIPConfigurations is forwarded to the
   * backed IP
   */
  backendIPConfiguration?: SubResource;
  /**
   * Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp.
   * Possible values include: 'Udp', 'Tcp'
   */
  protocol: TransportProtocol;
  /**
   * Gets or sets the port for the external endpoint. You can specify any port number you choose,
   * but the port numbers specified for each role in the service must be unique. Possible values
   * range between 1 and 65535, inclusive
   */
  frontendPort: number;
  /**
   * Gets or sets a port used for internal connections on the endpoint. The localPort attribute
   * maps the eternal port of the endpoint to an internal port on a role. This is useful in
   * scenarios where a role must communicate to an internal component on a port that is different
   * from the one that is exposed externally. If not specified, the value of localPort is the same
   * as the port attribute. Set the value of localPort to '*' to automatically assign an
   * unallocated port that is discoverable using the runtime API
   */
  backendPort?: number;
  /**
   * Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30
   * minutes. The default value is 4 minutes. This element is only used when the protocol is set to
   * Tcp
   */
  idleTimeoutInMinutes?: number;
  /**
   * Configures a virtual machine's endpoint for the floating IP capability required to configure a
   * SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON
   * availability Groups in SQL server. This setting can't be changed after you create the endpoint
   */
  enableFloatingIP: boolean;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Inbound NAT pool of the loadbalancer
 */
export interface InboundNatPool extends SubResource {
  /**
   * Gets or sets a reference to frontend IP Addresses
   */
  frontendIPConfiguration?: SubResource;
  /**
   * Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp.
   * Possible values include: 'Udp', 'Tcp'
   */
  protocol: TransportProtocol;
  /**
   * Gets or sets the starting port range for the NAT pool. You can specify any port number you
   * choose, but the port numbers specified for each role in the service must be unique. Possible
   * values range between 1 and 65535, inclusive
   */
  frontendPortRangeStart: number;
  /**
   * Gets or sets the ending port range for the NAT pool. You can specify any port number you
   * choose, but the port numbers specified for each role in the service must be unique. Possible
   * values range between 1 and 65535, inclusive
   */
  frontendPortRangeEnd: number;
  /**
   * Gets or sets a port used for internal connections on the endpoint. The localPort attribute
   * maps the eternal port of the endpoint to an internal port on a role. This is useful in
   * scenarios where a role must communicate to an internal component on a port that is different
   * from the one that is exposed externally. If not specified, the value of localPort is the same
   * as the port attribute. Set the value of localPort to '*' to automatically assign an
   * unallocated port that is discoverable using the runtime API
   */
  backendPort: number;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Outbound NAT pool of the loadbalancer
 */
export interface OutboundNatRule extends SubResource {
  /**
   * Gets or sets the number of outbound ports to be used for SNAT
   */
  allocatedOutboundPorts: number;
  /**
   * Gets or sets Frontend IP addresses of the load balancer
   */
  frontendIPConfigurations?: SubResource[];
  /**
   * Gets or sets a reference to a pool of DIPs. Outbound traffic is randomly load balanced across
   * IPs in the backend IPs
   */
  backendAddressPool: SubResource;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * LoadBalancer resource
 */
export interface LoadBalancer extends Resource {
  /**
   * Gets or sets frontend IP addresses of the load balancer
   */
  frontendIPConfigurations?: FrontendIpConfiguration[];
  /**
   * Gets or sets Pools of backend IP addresses
   */
  backendAddressPools?: BackendAddressPool[];
  /**
   * Gets or sets load balancing rules
   */
  loadBalancingRules?: LoadBalancingRule[];
  /**
   * Gets or sets list of Load balancer probes
   */
  probes?: Probe[];
  /**
   * Gets or sets list of inbound rules
   */
  inboundNatRules?: InboundNatRule[];
  /**
   * Gets or sets inbound NAT pools
   */
  inboundNatPools?: InboundNatPool[];
  /**
   * Gets or sets outbound NAT rules
   */
  outboundNatRules?: OutboundNatRule[];
  /**
   * Gets or sets resource guid property of the Load balancer resource
   */
  resourceGuid?: string;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * AddressSpace contains an array of IP address ranges that can be used by subnets
 */
export interface AddressSpace {
  /**
   * Gets or sets List of address blocks reserved for this virtual network in CIDR notation
   */
  addressPrefixes?: string[];
}

/**
 * A common class for general resource information
 */
export interface LocalNetworkGateway extends Resource {
  /**
   * Local network site Address space
   */
  localNetworkAddressSpace?: AddressSpace;
  /**
   * IP address of local network gateway.
   */
  gatewayIpAddress?: string;
  /**
   * Gets or sets resource guid property of the LocalNetworkGateway resource
   */
  resourceGuid?: string;
  /**
   * Gets or sets Provisioning state of the LocalNetworkGateway resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * IPConfiguration in a NetworkInterface
 */
export interface NetworkInterfaceIpConfiguration extends SubResource {
  /**
   * Gets or sets the privateIPAddress of the Network Interface IP Configuration
   */
  privateIPAddress?: string;
  /**
   * Gets or sets PrivateIP allocation method (Static/Dynamic). Possible values include: 'Static',
   * 'Dynamic'
   */
  privateIPAllocationMethod?: IpAllocationMethod;
  /**
   * Gets or sets the reference of the subnet resource
   */
  subnet?: SubResource;
  /**
   * Gets or sets the reference of the PublicIP resource
   */
  publicIPAddress?: SubResource;
  /**
   * Gets or sets the reference of LoadBalancerBackendAddressPool resource
   */
  loadBalancerBackendAddressPools?: SubResource[];
  /**
   * Gets or sets list of references of LoadBalancerInboundNatRules
   */
  loadBalancerInboundNatRules?: SubResource[];
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Dns Settings of a network interface
 */
export interface NetworkInterfaceDnsSettings {
  /**
   * Gets or sets list of DNS servers IP addresses
   */
  dnsServers?: string[];
  /**
   * Gets or sets list of Applied DNS servers IP addresses
   */
  appliedDnsServers?: string[];
  /**
   * Gets or sets the Internal DNS name
   */
  internalDnsNameLabel?: string;
  /**
   * Gets or sets full IDNS name in the form, DnsName.VnetId.ZoneId.TopLevelSuffix. This is set
   * when the NIC is associated to a VM
   */
  internalFqdn?: string;
}

/**
 * A NetworkInterface in a resource group
 */
export interface NetworkInterface extends Resource {
  /**
   * Gets or sets the reference of a VirtualMachine
   */
  virtualMachine?: SubResource;
  /**
   * Gets or sets the reference of the NetworkSecurityGroup resource
   */
  networkSecurityGroup?: SubResource;
  /**
   * Gets or sets list of IPConfigurations of the NetworkInterface
   */
  ipConfigurations?: NetworkInterfaceIpConfiguration[];
  /**
   * Gets or sets DNS Settings in  NetworkInterface
   */
  dnsSettings?: NetworkInterfaceDnsSettings;
  /**
   * Gets the MAC Address of the network interface
   */
  macAddress?: string;
  /**
   * Gets whether this is a primary NIC on a virtual machine
   */
  primary?: boolean;
  /**
   * Gets or sets whether IPForwarding is enabled on the NIC
   */
  enableIPForwarding?: boolean;
  /**
   * Gets or sets resource guid property of the network interface resource
   */
  resourceGuid?: string;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Route resource
 */
export interface Route extends SubResource {
  /**
   * Gets or sets the destination CIDR to which the route applies.
   */
  addressPrefix?: string;
  /**
   * Gets or sets the type of Azure hop the packet should be sent to. Possible values include:
   * 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', 'None'
   */
  nextHopType: RouteNextHopType;
  /**
   * Gets or sets the IP address packets should be forwarded to. Next hop values are only allowed
   * in routes where the next hop type is VirtualAppliance.
   */
  nextHopIpAddress?: string;
  /**
   * Gets or sets Provisioning state of the resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * RouteTable resource
 */
export interface RouteTable extends Resource {
  /**
   * Gets or sets Routes in a Route Table
   */
  routes?: Route[];
  /**
   * Gets collection of references to subnets
   */
  subnets?: SubResource[];
  /**
   * Gets or sets Provisioning state of the resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Network security rule
 */
export interface SecurityRule extends SubResource {
  /**
   * Gets or sets a description for this rule. Restricted to 140 chars.
   */
  description?: string;
  /**
   * Gets or sets Network protocol this rule applies to. Can be Tcp, Udp or All(*). Possible values
   * include: 'Tcp', 'Udp', '*'
   */
  protocol: SecurityRuleProtocol;
  /**
   * Gets or sets Source Port or Range. Integer or range between 0 and 65535. Asterisk '*' can also
   * be used to match all ports.
   */
  sourcePortRange?: string;
  /**
   * Gets or sets Destination Port or Range. Integer or range between 0 and 65535. Asterisk '*' can
   * also be used to match all ports.
   */
  destinationPortRange?: string;
  /**
   * Gets or sets source address prefix. CIDR or source IP range. Asterisk '*' can also be used to
   * match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and
   * 'Internet' can also be used. If this is an ingress rule, specifies where network traffic
   * originates from.
   */
  sourceAddressPrefix: string;
  /**
   * Gets or sets destination address prefix. CIDR or source IP range. Asterisk '*' can also be
   * used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and
   * 'Internet' can also be used.
   */
  destinationAddressPrefix: string;
  /**
   * Gets or sets network traffic is allowed or denied. Possible values are 'Allow' and 'Deny'.
   * Possible values include: 'Allow', 'Deny'
   */
  access: SecurityRuleAccess;
  /**
   * Gets or sets the priority of the rule. The value can be between 100 and 4096. The priority
   * number must be unique for each rule in the collection. The lower the priority number, the
   * higher the priority of the rule.
   */
  priority?: number;
  /**
   * Gets or sets the direction of the rule.InBound or Outbound. The direction specifies if rule
   * will be evaluated on incoming or outgoing traffic. Possible values include: 'Inbound',
   * 'Outbound'
   */
  direction: SecurityRuleDirection;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * NetworkSecurityGroup resource
 */
export interface NetworkSecurityGroup extends Resource {
  /**
   * Gets or sets Security rules of network security group
   */
  securityRules?: SecurityRule[];
  /**
   * Gets or sets Default security rules of network security group
   */
  defaultSecurityRules?: SecurityRule[];
  /**
   * Gets collection of references to Network Interfaces
   */
  networkInterfaces?: SubResource[];
  /**
   * Gets collection of references to subnets
   */
  subnets?: SubResource[];
  /**
   * Gets or sets resource guid property of the network security group resource
   */
  resourceGuid?: string;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Contains FQDN of the DNS record associated with the public IP address
 */
export interface PublicIpAddressDnsSettings {
  /**
   * Gets or sets the Domain name label.The concatenation of the domain name label and the
   * regionalized DNS zone make up the fully qualified domain name associated with the public IP
   * address. If a domain name label is specified, an A DNS record is created for the public IP in
   * the Microsoft Azure DNS system.
   */
  domainNameLabel?: string;
  /**
   * Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP.
   * This is the concatenation of the domainNameLabel and the regionalized DNS zone.
   */
  fqdn?: string;
  /**
   * Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to
   * this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created
   * pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
   */
  reverseFqdn?: string;
}

/**
 * PublicIPAddress resource
 */
export interface PublicIpAddress extends Resource {
  /**
   * Gets or sets PublicIP allocation method (Static/Dynamic). Possible values include: 'Static',
   * 'Dynamic'
   */
  publicIPAllocationMethod: IpAllocationMethod;
  /**
   * Gets a reference to the network interface IP configurations using this public IP address
   */
  ipConfiguration?: SubResource;
  /**
   * Gets or sets FQDN of the DNS record associated with the public IP address
   */
  dnsSettings?: PublicIpAddressDnsSettings;
  /**
   * Gets the assigned public IP address
   */
  ipAddress?: string;
  /**
   * Gets or sets the idle timeout of the public IP address
   */
  idleTimeoutInMinutes?: number;
  /**
   * Gets or sets resource guid property of the PublicIP resource
   */
  resourceGuid?: string;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Subnet in a VirtualNetwork resource
 */
export interface Subnet extends SubResource {
  /**
   * Gets or sets Address prefix for the subnet.
   */
  addressPrefix: string;
  /**
   * Gets or sets the reference of the NetworkSecurityGroup resource
   */
  networkSecurityGroup?: SubResource;
  /**
   * Gets or sets the reference of the RouteTable resource
   */
  routeTable?: SubResource;
  /**
   * Gets array of references to the network interface IP configurations using subnet
   */
  ipConfigurations?: SubResource[];
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * The Usage Names.
 */
export interface UsageName {
  /**
   * Gets or sets a string describing the resource name.
   */
  value?: string;
  /**
   * Gets or sets a localized string describing the resource name.
   */
  localizedValue?: string;
}

/**
 * Describes Network Resource Usage.
 */
export interface Usage {
  /**
   * Gets or sets the current value of the usage.
   */
  currentValue: number;
  /**
   * Gets or sets the limit of usage.
   */
  limit: number;
  /**
   * Gets or sets the name of the type of usage.
   */
  name: UsageName;
}

/**
 * IpConfiguration for Virtual network gateway
 */
export interface VirtualNetworkGatewayIpConfiguration extends SubResource {
  /**
   * Gets or sets the privateIPAddress of the Network Interface IP Configuration
   */
  privateIPAddress?: string;
  /**
   * Gets or sets PrivateIP allocation method (Static/Dynamic). Possible values include: 'Static',
   * 'Dynamic'
   */
  privateIPAllocationMethod?: IpAllocationMethod;
  /**
   * Gets or sets the reference of the subnet resource
   */
  subnet?: SubResource;
  /**
   * Gets or sets the reference of the PublicIP resource
   */
  publicIPAddress?: SubResource;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * A common class for general resource information
 */
export interface VirtualNetworkGateway extends Resource {
  /**
   * IpConfigurations for Virtual network gateway.
   */
  ipConfigurations?: VirtualNetworkGatewayIpConfiguration[];
  /**
   * The type of this virtual network gateway. Possible values include: 'Vpn', 'ExpressRoute'
   */
  gatewayType?: VirtualNetworkGatewayType;
  /**
   * The type of this virtual network gateway. Possible values include: 'PolicyBased', 'RouteBased'
   */
  vpnType?: VpnType;
  /**
   * EnableBgp Flag
   */
  enableBgp?: boolean;
  /**
   * Gets or sets the reference of the LocalNetworkGateway resource which represents Local network
   * site having default routes. Assign Null value in case of removing existing default site
   * setting.
   */
  gatewayDefaultSite?: SubResource;
  /**
   * Gets or sets resource guid property of the VirtualNetworkGateway resource
   */
  resourceGuid?: string;
  /**
   * Gets or sets Provisioning state of the VirtualNetworkGateway resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * A common class for general resource information
 */
export interface VirtualNetworkGatewayConnection extends Resource {
  virtualNetworkGateway1?: VirtualNetworkGateway;
  virtualNetworkGateway2?: VirtualNetworkGateway;
  localNetworkGateway2?: LocalNetworkGateway;
  /**
   * Gateway connection type IPsec/Dedicated/VpnClient/Vnet2Vnet. Possible values include: 'IPsec',
   * 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
   */
  connectionType?: VirtualNetworkGatewayConnectionType;
  /**
   * The Routing weight.
   */
  routingWeight?: number;
  /**
   * The IPsec share key.
   */
  sharedKey?: string;
  /**
   * Virtual network Gateway connection status. Possible values include: 'Unknown', 'Connecting',
   * 'Connected', 'NotConnected'
   */
  connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * The Egress Bytes Transferred in this connection
   */
  egressBytesTransferred?: number;
  /**
   * The Ingress Bytes Transferred in this connection
   */
  ingressBytesTransferred?: number;
  /**
   * The reference to peerings resource.
   */
  peer?: SubResource;
  /**
   * Gets or sets resource guid property of the VirtualNetworkGatewayConnection resource
   */
  resourceGuid?: string;
  /**
   * Gets or sets Provisioning state of the VirtualNetworkGatewayConnection resource
   * Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Response for GetConnectionSharedKey Api service call
 */
export interface ConnectionSharedKey {
  /**
   * The virtual network connection shared key value
   */
  value?: string;
}

/**
 * An interface representing ConnectionResetSharedKey.
 */
export interface ConnectionResetSharedKey {
  /**
   * The virtual network connection reset shared key length
   */
  keyLength?: number;
}

/**
 * DHCPOptions contains an array of DNS servers available to VMs deployed in the virtual
 * networkStandard DHCP option for a subnet overrides VNET DHCP options.
 */
export interface DhcpOptions {
  /**
   * Gets or sets list of DNS servers IP addresses
   */
  dnsServers?: string[];
}

/**
 * Virtual Network resource
 */
export interface VirtualNetwork extends Resource {
  /**
   * Gets or sets AddressSpace that contains an array of IP address ranges that can be used by
   * subnets
   */
  addressSpace?: AddressSpace;
  /**
   * Gets or sets DHCPOptions that contains an array of DNS servers available to VMs deployed in
   * the virtual network
   */
  dhcpOptions?: DhcpOptions;
  /**
   * Gets or sets List of subnets in a VirtualNetwork
   */
  subnets?: Subnet[];
  /**
   * Gets or sets resource guid property of the VirtualNetwork resource
   */
  resourceGuid?: string;
  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated
   */
  etag?: string;
}

/**
 * Response for CheckDnsNameAvailability Api service call
 */
export interface DnsNameAvailabilityResult {
  /**
   * Domain availability (True/False)
   */
  available?: boolean;
}

/**
 * An interface representing ErrorDetails.
 */
export interface ErrorDetails {
  code?: string;
  target?: string;
  message?: string;
}

/**
 * An interface representing ErrorModel.
 */
export interface ErrorModel {
  code?: string;
  message?: string;
  target?: string;
  details?: ErrorDetails[];
  innerError?: string;
}

/**
 * The response body contains the status of the specified asynchronous operation, indicating
 * whether it has succeeded, is in progress, or has failed. Note that this status is distinct from
 * the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous
 * operation succeeded, the response body includes the HTTP status code for the successful request.
 * If the asynchronous operation failed, the response body includes the HTTP status code for the
 * failed request and error information regarding the failure.
 */
export interface AzureAsyncOperationResult {
  /**
   * Status of the AzureAsyncOperation. Possible values include: 'InProgress', 'Succeeded',
   * 'Failed'
   */
  status?: NetworkOperationStatus;
  error?: ErrorModel;
}

/**
 * Optional Parameters.
 */
export interface NetworkManagementClientCheckDnsNameAvailabilityOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The domain name to be verified. It must conform to the following regular expression:
   * ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
   */
  domainNameLabel?: string;
}

/**
 * An interface representing NetworkManagementClientOptions.
 */
export interface NetworkManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Response for ListLoadBalancers Api service call
 * @extends Array<ApplicationGateway>
 */
export interface ApplicationGatewayListResult extends Array<ApplicationGateway> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListArpTable associated with the Express Route Circuits Api
 * @extends Array<ExpressRouteCircuitArpTable>
 */
export interface ExpressRouteCircuitsArpTableListResult extends Array<ExpressRouteCircuitArpTable> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListRoutesTable associated with the Express Route Circuits Api
 * @extends Array<ExpressRouteCircuitRoutesTable>
 */
export interface ExpressRouteCircuitsRoutesTableListResult extends Array<ExpressRouteCircuitRoutesTable> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListStats from Express Route Circuits Api service call
 * @extends Array<ExpressRouteCircuitStats>
 */
export interface ExpressRouteCircuitsStatsListResult extends Array<ExpressRouteCircuitStats> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListExpressRouteCircuit Api service call
 * @extends Array<ExpressRouteCircuit>
 */
export interface ExpressRouteCircuitListResult extends Array<ExpressRouteCircuit> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListExpressRouteServiceProvider Api service call
 * @extends Array<ExpressRouteServiceProvider>
 */
export interface ExpressRouteServiceProviderListResult extends Array<ExpressRouteServiceProvider> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListPeering Api service callRetrieves all Peerings that belongs to an
 * ExpressRouteCircuit
 * @extends Array<ExpressRouteCircuitPeering>
 */
export interface ExpressRouteCircuitPeeringListResult extends Array<ExpressRouteCircuitPeering> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListLoadBalancers Api service call
 * @extends Array<LoadBalancer>
 */
export interface LoadBalancerListResult extends Array<LoadBalancer> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListLocalNetworkGateways Api service call
 * @extends Array<LocalNetworkGateway>
 */
export interface LocalNetworkGatewayListResult extends Array<LocalNetworkGateway> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListNetworkInterface Api service call
 * @extends Array<NetworkInterface>
 */
export interface NetworkInterfaceListResult extends Array<NetworkInterface> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListRouteTable Api service call
 * @extends Array<RouteTable>
 */
export interface RouteTableListResult extends Array<RouteTable> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListNetworkSecurityGroups Api service call
 * @extends Array<NetworkSecurityGroup>
 */
export interface NetworkSecurityGroupListResult extends Array<NetworkSecurityGroup> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListPublicIpAddresses Api service call
 * @extends Array<PublicIpAddress>
 */
export interface PublicIpAddressListResult extends Array<PublicIpAddress> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListRoute Api service call
 * @extends Array<Route>
 */
export interface RouteListResult extends Array<Route> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListSecurityRule Api service callRetrieves all security rules that belongs to a
 * network security group
 * @extends Array<SecurityRule>
 */
export interface SecurityRuleListResult extends Array<SecurityRule> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListAuthorizations Api service callRetrieves all authorizations that belongs to an
 * ExpressRouteCircuit
 * @extends Array<ExpressRouteCircuitAuthorization>
 */
export interface AuthorizationListResult extends Array<ExpressRouteCircuitAuthorization> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListSubnets Api service callRetrieves all subnet that belongs to a virtual network
 * @extends Array<Subnet>
 */
export interface SubnetListResult extends Array<Subnet> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The List Usages operation response.
 * @extends Array<Usage>
 */
export interface UsagesListResult extends Array<Usage> {
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListVirtualNetworkGatewayConnections Api service call
 * @extends Array<VirtualNetworkGatewayConnection>
 */
export interface VirtualNetworkGatewayConnectionListResult extends Array<VirtualNetworkGatewayConnection> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListVirtualNetworkGateways Api service call
 * @extends Array<VirtualNetworkGateway>
 */
export interface VirtualNetworkGatewayListResult extends Array<VirtualNetworkGateway> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListVirtualNetworks Api service call
 * @extends Array<VirtualNetwork>
 */
export interface VirtualNetworkListResult extends Array<VirtualNetwork> {
  /**
   * Gets the URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Defines values for ApplicationGatewaySkuName.
 * Possible values include: 'Standard_Small', 'Standard_Medium', 'Standard_Large'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySkuName = 'Standard_Small' | 'Standard_Medium' | 'Standard_Large';

/**
 * Defines values for ApplicationGatewayTier.
 * Possible values include: 'Standard'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayTier = 'Standard';

/**
 * Defines values for IpAllocationMethod.
 * Possible values include: 'Static', 'Dynamic'
 * @readonly
 * @enum {string}
 */
export type IpAllocationMethod = 'Static' | 'Dynamic';

/**
 * Defines values for ApplicationGatewayProtocol.
 * Possible values include: 'Http', 'Https'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayProtocol = 'Http' | 'Https';

/**
 * Defines values for ApplicationGatewayCookieBasedAffinity.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayCookieBasedAffinity = 'Enabled' | 'Disabled';

/**
 * Defines values for ApplicationGatewayRequestRoutingRuleType.
 * Possible values include: 'Basic'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayRequestRoutingRuleType = 'Basic';

/**
 * Defines values for ApplicationGatewayOperationalState.
 * Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayOperationalState = 'Stopped' | 'Starting' | 'Running' | 'Stopping';

/**
 * Defines values for ExpressRouteCircuitSkuTier.
 * Possible values include: 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitSkuTier = 'Standard' | 'Premium';

/**
 * Defines values for ExpressRouteCircuitSkuFamily.
 * Possible values include: 'UnlimitedData', 'MeteredData'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitSkuFamily = 'UnlimitedData' | 'MeteredData';

/**
 * Defines values for AuthorizationUseStatus.
 * Possible values include: 'Available', 'InUse'
 * @readonly
 * @enum {string}
 */
export type AuthorizationUseStatus = 'Available' | 'InUse';

/**
 * Defines values for ExpressRouteCircuitPeeringAdvertisedPublicPrefixState.
 * Possible values include: 'NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = 'NotConfigured' | 'Configuring' | 'Configured' | 'ValidationNeeded';

/**
 * Defines values for ExpressRouteCircuitPeeringType.
 * Possible values include: 'AzurePublicPeering', 'AzurePrivatePeering', 'MicrosoftPeering'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitPeeringType = 'AzurePublicPeering' | 'AzurePrivatePeering' | 'MicrosoftPeering';

/**
 * Defines values for ExpressRouteCircuitPeeringState.
 * Possible values include: 'Disabled', 'Enabled'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitPeeringState = 'Disabled' | 'Enabled';

/**
 * Defines values for ServiceProviderProvisioningState.
 * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning'
 * @readonly
 * @enum {string}
 */
export type ServiceProviderProvisioningState = 'NotProvisioned' | 'Provisioning' | 'Provisioned' | 'Deprovisioning';

/**
 * Defines values for RouteNextHopType.
 * Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance',
 * 'None'
 * @readonly
 * @enum {string}
 */
export type RouteNextHopType = 'VirtualNetworkGateway' | 'VnetLocal' | 'Internet' | 'VirtualAppliance' | 'None';

/**
 * Defines values for TransportProtocol.
 * Possible values include: 'Udp', 'Tcp'
 * @readonly
 * @enum {string}
 */
export type TransportProtocol = 'Udp' | 'Tcp';

/**
 * Defines values for LoadDistribution.
 * Possible values include: 'Default', 'SourceIP', 'SourceIPProtocol'
 * @readonly
 * @enum {string}
 */
export type LoadDistribution = 'Default' | 'SourceIP' | 'SourceIPProtocol';

/**
 * Defines values for ProbeProtocol.
 * Possible values include: 'Http', 'Tcp'
 * @readonly
 * @enum {string}
 */
export type ProbeProtocol = 'Http' | 'Tcp';

/**
 * Defines values for SecurityRuleProtocol.
 * Possible values include: 'Tcp', 'Udp', '*'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleProtocol = 'Tcp' | 'Udp' | '*';

/**
 * Defines values for SecurityRuleAccess.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleAccess = 'Allow' | 'Deny';

/**
 * Defines values for SecurityRuleDirection.
 * Possible values include: 'Inbound', 'Outbound'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleDirection = 'Inbound' | 'Outbound';

/**
 * Defines values for VirtualNetworkGatewayType.
 * Possible values include: 'Vpn', 'ExpressRoute'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayType = 'Vpn' | 'ExpressRoute';

/**
 * Defines values for VpnType.
 * Possible values include: 'PolicyBased', 'RouteBased'
 * @readonly
 * @enum {string}
 */
export type VpnType = 'PolicyBased' | 'RouteBased';

/**
 * Defines values for VirtualNetworkGatewayConnectionType.
 * Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayConnectionType = 'IPsec' | 'Vnet2Vnet' | 'ExpressRoute' | 'VPNClient';

/**
 * Defines values for VirtualNetworkGatewayConnectionStatus.
 * Possible values include: 'Unknown', 'Connecting', 'Connected', 'NotConnected'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayConnectionStatus = 'Unknown' | 'Connecting' | 'Connected' | 'NotConnected';

/**
 * Defines values for NetworkOperationStatus.
 * Possible values include: 'InProgress', 'Succeeded', 'Failed'
 * @readonly
 * @enum {string}
 */
export type NetworkOperationStatus = 'InProgress' | 'Succeeded' | 'Failed';

/**
 * Contains response data for the get operation.
 */
export type ApplicationGatewaysGetResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApplicationGatewaysCreateOrUpdateResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ApplicationGatewaysListResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type ApplicationGatewaysListAllResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ApplicationGatewaysBeginCreateOrUpdateResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationGatewaysListNextResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type ApplicationGatewaysListAllNextResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitsGetResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitsCreateOrUpdateResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the listArpTable operation.
 */
export type ExpressRouteCircuitsListArpTableResponse = ExpressRouteCircuitsArpTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsArpTableListResult;
    };
};

/**
 * Contains response data for the listRoutesTable operation.
 */
export type ExpressRouteCircuitsListRoutesTableResponse = ExpressRouteCircuitsRoutesTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableListResult;
    };
};

/**
 * Contains response data for the listStats operation.
 */
export type ExpressRouteCircuitsListStatsResponse = ExpressRouteCircuitsStatsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsStatsListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitsListResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type ExpressRouteCircuitsListAllResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCircuitsBeginCreateOrUpdateResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the listArpTableNext operation.
 */
export type ExpressRouteCircuitsListArpTableNextResponse = ExpressRouteCircuitsArpTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsArpTableListResult;
    };
};

/**
 * Contains response data for the listRoutesTableNext operation.
 */
export type ExpressRouteCircuitsListRoutesTableNextResponse = ExpressRouteCircuitsRoutesTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableListResult;
    };
};

/**
 * Contains response data for the listStatsNext operation.
 */
export type ExpressRouteCircuitsListStatsNextResponse = ExpressRouteCircuitsStatsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsStatsListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitsListNextResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type ExpressRouteCircuitsListAllNextResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteServiceProvidersListResponse = ExpressRouteServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteServiceProviderListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteServiceProvidersListNextResponse = ExpressRouteServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteServiceProviderListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitPeeringsGetResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeering;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitPeeringsCreateOrUpdateResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeering;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitPeeringsListResponse = ExpressRouteCircuitPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeeringListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCircuitPeeringsBeginCreateOrUpdateResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeering;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitPeeringsListNextResponse = ExpressRouteCircuitPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeeringListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancersGetResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LoadBalancersCreateOrUpdateResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type LoadBalancersListAllResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancersListResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LoadBalancersBeginCreateOrUpdateResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type LoadBalancersListAllNextResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancersListNextResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LocalNetworkGatewaysCreateOrUpdateResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LocalNetworkGatewaysGetResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LocalNetworkGatewaysListResponse = LocalNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LocalNetworkGatewaysBeginCreateOrUpdateResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LocalNetworkGatewaysListNextResponse = LocalNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfacesGetResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkInterfacesCreateOrUpdateResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMNetworkInterfaces operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetNetworkInterfaces operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the getVirtualMachineScaleSetNetworkInterface operation.
 */
export type NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkInterfacesListAllResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfacesListResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type NetworkInterfacesBeginCreateOrUpdateResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMNetworkInterfacesNext operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetNetworkInterfacesNext operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkInterfacesListAllNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfacesListNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RouteTablesGetResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteTablesCreateOrUpdateResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RouteTablesListResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type RouteTablesListAllResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RouteTablesBeginCreateOrUpdateResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RouteTablesListNextResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type RouteTablesListAllNextResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkSecurityGroupsGetResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkSecurityGroupsCreateOrUpdateResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkSecurityGroupsListAllResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkSecurityGroupsListResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type NetworkSecurityGroupsBeginCreateOrUpdateResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkSecurityGroupsListAllNextResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkSecurityGroupsListNextResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PublicIpAddressesGetResponse = PublicIpAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIpAddress;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PublicIpAddressesCreateOrUpdateResponse = PublicIpAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIpAddress;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type PublicIpAddressesListAllResponse = PublicIpAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIpAddressListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PublicIpAddressesListResponse = PublicIpAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIpAddressListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PublicIpAddressesBeginCreateOrUpdateResponse = PublicIpAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIpAddress;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type PublicIpAddressesListAllNextResponse = PublicIpAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIpAddressListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PublicIpAddressesListNextResponse = PublicIpAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIpAddressListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RoutesGetResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RoutesCreateOrUpdateResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RoutesListResponse = RouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RoutesBeginCreateOrUpdateResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RoutesListNextResponse = RouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SecurityRulesGetResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SecurityRulesCreateOrUpdateResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SecurityRulesListResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SecurityRulesBeginCreateOrUpdateResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SecurityRulesListNextResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitAuthorizationsGetResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitAuthorization;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitAuthorizationsCreateOrUpdateResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitAuthorization;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitAuthorizationsListResponse = AuthorizationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCircuitAuthorizationsBeginCreateOrUpdateResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitAuthorization;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitAuthorizationsListNextResponse = AuthorizationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SubnetsGetResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SubnetsCreateOrUpdateResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SubnetsListResponse = SubnetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubnetListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SubnetsBeginCreateOrUpdateResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SubnetsListNextResponse = SubnetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubnetListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type UsagesListResponse = UsagesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsagesListNextResponse = UsagesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkGatewayConnectionsCreateOrUpdateResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkGatewayConnectionsGetResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the getSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsGetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the setSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsSetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkGatewayConnectionsListResponse = VirtualNetworkGatewayConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnectionListResult;
    };
};

/**
 * Contains response data for the resetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsResetSharedKeyResponse = ConnectionResetSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionResetSharedKey;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkGatewayConnectionsBeginCreateOrUpdateResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the beginSetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsBeginSetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the beginResetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsBeginResetSharedKeyResponse = ConnectionResetSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionResetSharedKey;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkGatewayConnectionsListNextResponse = VirtualNetworkGatewayConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnectionListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkGatewaysCreateOrUpdateResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkGatewaysGetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkGatewaysListResponse = VirtualNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the reset operation.
 */
export type VirtualNetworkGatewaysResetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkGatewaysBeginCreateOrUpdateResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the beginReset operation.
 */
export type VirtualNetworkGatewaysBeginResetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkGatewaysListNextResponse = VirtualNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworksGetResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type VirtualNetworksListAllResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworksListResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworksBeginCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type VirtualNetworksListAllNextResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworksListNextResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the checkDnsNameAvailability operation.
 */
export type CheckDnsNameAvailabilityResponse = DnsNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DnsNameAvailabilityResult;
    };
};
