/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Reference to another subresource.
 */
export interface SubResource extends BaseResource {
  /**
   * Resource ID.
   */
  id?: string;
}

/**
 * Pool of backend IP addresses.
 */
export interface BackendAddressPool extends SubResource {
  /**
   * Gets collection of references to IP addresses defined in network interfaces.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backendIPConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * Gets load balancing rules that use this backend address pool.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * Gets outbound rules that use this backend address pool.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outboundNatRule?: SubResource;
  /**
   * Get provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Inbound NAT rule of the load balancer.
 */
export interface InboundNatRule extends SubResource {
  /**
   * A reference to frontend IP addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * A reference to a private IP address defined on a network interface of a VM. Traffic sent to
   * the frontend port of each of the frontend IP configurations is forwarded to the backend IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backendIPConfiguration?: NetworkInterfaceIPConfiguration;
  /**
   * The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'. Possible values
   * include: 'Udp', 'Tcp'
   */
  protocol?: TransportProtocol;
  /**
   * The port for the external endpoint. Port numbers for each rule must be unique within the Load
   * Balancer. Acceptable values range from 1 to 65534.
   */
  frontendPort?: number;
  /**
   * The port used for the internal endpoint. Acceptable values range from 1 to 65535.
   */
  backendPort?: number;
  /**
   * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The
   * default value is 4 minutes. This element is only used when the protocol is set to TCP.
   */
  idleTimeoutInMinutes?: number;
  /**
   * Configures a virtual machine's endpoint for the floating IP capability required to configure a
   * SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn
   * Availability Groups in SQL server. This setting can't be changed after you create the
   * endpoint.
   */
  enableFloatingIP?: boolean;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Network security rule.
 */
export interface SecurityRule extends SubResource {
  /**
   * A description for this rule. Restricted to 140 chars.
   */
  description?: string;
  /**
   * Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'. Possible
   * values include: 'Tcp', 'Udp', '*'
   */
  protocol: SecurityRuleProtocol;
  /**
   * The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used
   * to match all ports.
   */
  sourcePortRange?: string;
  /**
   * The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be
   * used to match all ports.
   */
  destinationPortRange?: string;
  /**
   * The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default
   * tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is
   * an ingress rule, specifies where network traffic originates from.
   */
  sourceAddressPrefix?: string;
  /**
   * The CIDR or source IP ranges.
   */
  sourceAddressPrefixes?: string[];
  /**
   * The destination address prefix. CIDR or destination IP range. Asterisk '*' can also be used to
   * match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and
   * 'Internet' can also be used.
   */
  destinationAddressPrefix?: string;
  /**
   * The destination address prefixes. CIDR or destination IP ranges.
   */
  destinationAddressPrefixes?: string[];
  /**
   * The source port ranges.
   */
  sourcePortRanges?: string[];
  /**
   * The destination port ranges.
   */
  destinationPortRanges?: string[];
  /**
   * The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'. Possible
   * values include: 'Allow', 'Deny'
   */
  access: SecurityRuleAccess;
  /**
   * The priority of the rule. The value can be between 100 and 4096. The priority number must be
   * unique for each rule in the collection. The lower the priority number, the higher the priority
   * of the rule.
   */
  priority?: number;
  /**
   * The direction of the rule. The direction specifies if rule will be evaluated on incoming or
   * outgoing traffic. Possible values are: 'Inbound' and 'Outbound'. Possible values include:
   * 'Inbound', 'Outbound'
   */
  direction: SecurityRuleDirection;
  /**
   * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * DNS settings of a network interface.
 */
export interface NetworkInterfaceDnsSettings {
  /**
   * List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS
   * resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only
   * value in dnsServers collection.
   */
  dnsServers?: string[];
  /**
   * If the VM that uses this NIC is part of an Availability Set, then this list will have the
   * union of all DNS servers from all NICs that are part of the Availability Set. This property is
   * what is configured on each of those VMs.
   */
  appliedDnsServers?: string[];
  /**
   * Relative DNS name for this NIC used for internal communications between VMs in the same
   * virtual network.
   */
  internalDnsNameLabel?: string;
  /**
   * Fully qualified DNS name supporting internal communications between VMs in the same virtual
   * network.
   */
  internalFqdn?: string;
  /**
   * Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of
   * the VM. This DNS name can be constructed by concatenating the VM name with the value of
   * internalDomainNameSuffix.
   */
  internalDomainNameSuffix?: string;
}

/**
 * Common resource representation.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   */
  id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A network interface in a resource group.
 */
export interface NetworkInterface extends Resource {
  /**
   * The reference of a virtual machine.
   */
  virtualMachine?: SubResource;
  /**
   * The reference of the NetworkSecurityGroup resource.
   */
  networkSecurityGroup?: NetworkSecurityGroup;
  /**
   * A list of IPConfigurations of the network interface.
   */
  ipConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * The DNS settings in network interface.
   */
  dnsSettings?: NetworkInterfaceDnsSettings;
  /**
   * The MAC address of the network interface.
   */
  macAddress?: string;
  /**
   * Gets whether this is a primary network interface on a virtual machine.
   */
  primary?: boolean;
  /**
   * If the network interface is accelerated networking enabled.
   */
  enableAcceleratedNetworking?: boolean;
  /**
   * Indicates whether IP forwarding is enabled on this network interface.
   */
  enableIPForwarding?: boolean;
  /**
   * The resource GUID property of the network interface resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * NetworkSecurityGroup resource.
 */
export interface NetworkSecurityGroup extends Resource {
  /**
   * A collection of security rules of the network security group.
   */
  securityRules?: SecurityRule[];
  /**
   * The default security rules of network security group.
   */
  defaultSecurityRules?: SecurityRule[];
  /**
   * A collection of references to network interfaces.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * A collection of references to subnets.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subnets?: Subnet[];
  /**
   * The resource GUID property of the network security group resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Route resource
 */
export interface Route extends SubResource {
  /**
   * The destination CIDR to which the route applies.
   */
  addressPrefix?: string;
  /**
   * The type of Azure hop the packet should be sent to. Possible values are:
   * 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible
   * values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', 'None'
   */
  nextHopType: RouteNextHopType;
  /**
   * The IP address packets should be forwarded to. Next hop values are only allowed in routes
   * where the next hop type is VirtualAppliance.
   */
  nextHopIpAddress?: string;
  /**
   * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Route table resource.
 */
export interface RouteTable extends Resource {
  /**
   * Collection of routes contained within a route table.
   */
  routes?: Route[];
  /**
   * A collection of references to subnets.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subnets?: Subnet[];
  /**
   * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * The service endpoint properties.
 */
export interface ServiceEndpointPropertiesFormat {
  /**
   * The type of the endpoint service.
   */
  service?: string;
  /**
   * A list of locations.
   */
  locations?: string[];
  /**
   * The provisioning state of the resource.
   */
  provisioningState?: string;
}

/**
 * SKU of a public IP address
 */
export interface PublicIPAddressSku {
  /**
   * Name of a public IP address SKU. Possible values include: 'Basic', 'Standard'
   */
  name?: PublicIPAddressSkuName;
}

/**
 * Contains FQDN of the DNS record associated with the public IP address
 */
export interface PublicIPAddressDnsSettings {
  /**
   * Gets or sets the Domain name label.The concatenation of the domain name label and the
   * regionalized DNS zone make up the fully qualified domain name associated with the public IP
   * address. If a domain name label is specified, an A DNS record is created for the public IP in
   * the Microsoft Azure DNS system.
   */
  domainNameLabel?: string;
  /**
   * Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP.
   * This is the concatenation of the domainNameLabel and the regionalized DNS zone.
   */
  fqdn?: string;
  /**
   * Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to
   * this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created
   * pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
   */
  reverseFqdn?: string;
}

/**
 * Public IP address resource.
 */
export interface PublicIPAddress extends Resource {
  /**
   * The public IP address SKU.
   */
  sku?: PublicIPAddressSku;
  /**
   * The public IP allocation method. Possible values are: 'Static' and 'Dynamic'. Possible values
   * include: 'Static', 'Dynamic'
   */
  publicIPAllocationMethod?: IPAllocationMethod;
  /**
   * The public IP address version. Possible values are: 'IPv4' and 'IPv6'. Possible values
   * include: 'IPv4', 'IPv6'
   */
  publicIPAddressVersion?: IPVersion;
  /**
   * The IP configuration associated with the public IP address.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipConfiguration?: IPConfiguration;
  /**
   * The FQDN of the DNS record associated with the public IP address.
   */
  dnsSettings?: PublicIPAddressDnsSettings;
  /**
   * The IP address associated with the public IP address resource.
   */
  ipAddress?: string;
  /**
   * The idle timeout of the public IP address.
   */
  idleTimeoutInMinutes?: number;
  /**
   * The resource GUID property of the public IP resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * A list of availability zones denoting the IP allocated for the resource needs to come from.
   */
  zones?: string[];
}

/**
 * IP configuration
 */
export interface IPConfiguration extends SubResource {
  /**
   * The private IP address of the IP configuration.
   */
  privateIPAddress?: string;
  /**
   * The private IP allocation method. Possible values are 'Static' and 'Dynamic'. Possible values
   * include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * The reference of the subnet resource.
   */
  subnet?: Subnet;
  /**
   * The reference of the public IP resource.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * ResourceNavigationLink resource.
 */
export interface ResourceNavigationLink extends SubResource {
  /**
   * Resource type of the linked resource.
   */
  linkedResourceType?: string;
  /**
   * Link to the external resource
   */
  link?: string;
  /**
   * Provisioning state of the ResourceNavigationLink resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * Subnet in a virtual network resource.
 */
export interface Subnet extends SubResource {
  /**
   * The address prefix for the subnet.
   */
  addressPrefix?: string;
  /**
   * The reference of the NetworkSecurityGroup resource.
   */
  networkSecurityGroup?: NetworkSecurityGroup;
  /**
   * The reference of the RouteTable resource.
   */
  routeTable?: RouteTable;
  /**
   * An array of service endpoints.
   */
  serviceEndpoints?: ServiceEndpointPropertiesFormat[];
  /**
   * Gets an array of references to the network interface IP configurations using subnet.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipConfigurations?: IPConfiguration[];
  /**
   * Gets an array of references to the external resources using subnet.
   */
  resourceNavigationLinks?: ResourceNavigationLink[];
  /**
   * The provisioning state of the resource.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * IPConfiguration in a network interface.
 */
export interface NetworkInterfaceIPConfiguration extends SubResource {
  /**
   * The reference of ApplicationGatewayBackendAddressPool resource.
   */
  applicationGatewayBackendAddressPools?: ApplicationGatewayBackendAddressPool[];
  /**
   * The reference of LoadBalancerBackendAddressPool resource.
   */
  loadBalancerBackendAddressPools?: BackendAddressPool[];
  /**
   * A list of references of LoadBalancerInboundNatRules.
   */
  loadBalancerInboundNatRules?: InboundNatRule[];
  /**
   * Private IP address of the IP configuration.
   */
  privateIPAddress?: string;
  /**
   * Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.
   * Possible values include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * Available from Api-Version 2016-03-30 onwards, it represents whether the specific
   * ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and
   * 'IPv6'. Possible values include: 'IPv4', 'IPv6'
   */
  privateIPAddressVersion?: IPVersion;
  /**
   * Subnet bound to the IP configuration.
   */
  subnet?: Subnet;
  /**
   * Gets whether this is a primary customer address on the network interface.
   */
  primary?: boolean;
  /**
   * Public IP address bound to the IP configuration.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * The provisioning state of the network interface IP configuration. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Backend address of an application gateway.
 */
export interface ApplicationGatewayBackendAddress {
  /**
   * Fully qualified domain name (FQDN).
   */
  fqdn?: string;
  /**
   * IP address
   */
  ipAddress?: string;
}

/**
 * Backend Address Pool of an application gateway.
 */
export interface ApplicationGatewayBackendAddressPool extends SubResource {
  /**
   * Collection of references to IPs defined in network interfaces.
   */
  backendIPConfigurations?: NetworkInterfaceIPConfiguration[];
  /**
   * Backend addresses
   */
  backendAddresses?: ApplicationGatewayBackendAddress[];
  /**
   * Provisioning state of the backend address pool resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Resource that is unique within a resource group. This name can be used to access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Connection draining allows open connections to a backend server to be active for a specified
 * time after the backend server got removed from the configuration.
 */
export interface ApplicationGatewayConnectionDraining {
  /**
   * Whether connection draining is enabled or not.
   */
  enabled: boolean;
  /**
   * The number of seconds connection draining is active. Acceptable values are from 1 second to
   * 3600 seconds.
   */
  drainTimeoutInSec: number;
}

/**
 * Backend address pool settings of an application gateway.
 */
export interface ApplicationGatewayBackendHttpSettings extends SubResource {
  /**
   * Port
   */
  port?: number;
  /**
   * Protocol. Possible values include: 'Http', 'Https'
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * Cookie based affinity. Possible values include: 'Enabled', 'Disabled'
   */
  cookieBasedAffinity?: ApplicationGatewayCookieBasedAffinity;
  /**
   * Request timeout in seconds. Application Gateway will fail the request if response is not
   * received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
   */
  requestTimeout?: number;
  /**
   * Probe resource of an application gateway.
   */
  probe?: SubResource;
  /**
   * Array of references to application gateway authentication certificates.
   */
  authenticationCertificates?: SubResource[];
  /**
   * Connection draining of the backend http settings resource.
   */
  connectionDraining?: ApplicationGatewayConnectionDraining;
  /**
   * Host header to be sent to the backend servers.
   */
  hostName?: string;
  /**
   * Whether to pick host header should be picked from the host name of the backend server. Default
   * value is false.
   */
  pickHostNameFromBackendAddress?: boolean;
  /**
   * Cookie name to use for the affinity cookie.
   */
  affinityCookieName?: string;
  /**
   * Whether the probe is enabled. Default value is false.
   */
  probeEnabled?: boolean;
  /**
   * Path which should be used as a prefix for all HTTP requests. Null means no path will be
   * prefixed. Default value is null.
   */
  path?: string;
  /**
   * Provisioning state of the backend http settings resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Application gateway backendhealth http settings.
 */
export interface ApplicationGatewayBackendHealthServer {
  /**
   * IP address or FQDN of backend server.
   */
  address?: string;
  /**
   * Reference of IP configuration of backend server.
   */
  ipConfiguration?: NetworkInterfaceIPConfiguration;
  /**
   * Health of backend server. Possible values include: 'Unknown', 'Up', 'Down', 'Partial',
   * 'Draining'
   */
  health?: ApplicationGatewayBackendHealthServerHealth;
}

/**
 * Application gateway BackendHealthHttp settings.
 */
export interface ApplicationGatewayBackendHealthHttpSettings {
  /**
   * Reference of an ApplicationGatewayBackendHttpSettings resource.
   */
  backendHttpSettings?: ApplicationGatewayBackendHttpSettings;
  /**
   * List of ApplicationGatewayBackendHealthServer resources.
   */
  servers?: ApplicationGatewayBackendHealthServer[];
}

/**
 * Application gateway BackendHealth pool.
 */
export interface ApplicationGatewayBackendHealthPool {
  /**
   * Reference of an ApplicationGatewayBackendAddressPool resource.
   */
  backendAddressPool?: ApplicationGatewayBackendAddressPool;
  /**
   * List of ApplicationGatewayBackendHealthHttpSettings resources.
   */
  backendHttpSettingsCollection?: ApplicationGatewayBackendHealthHttpSettings[];
}

/**
 * List of ApplicationGatewayBackendHealthPool resources.
 */
export interface ApplicationGatewayBackendHealth {
  backendAddressPools?: ApplicationGatewayBackendHealthPool[];
}

/**
 * SKU of an application gateway
 */
export interface ApplicationGatewaySku {
  /**
   * Name of an application gateway SKU. Possible values include: 'Standard_Small',
   * 'Standard_Medium', 'Standard_Large', 'WAF_Medium', 'WAF_Large'
   */
  name?: ApplicationGatewaySkuName;
  /**
   * Tier of an application gateway. Possible values include: 'Standard', 'WAF'
   */
  tier?: ApplicationGatewayTier;
  /**
   * Capacity (instance count) of an application gateway.
   */
  capacity?: number;
}

/**
 * Application Gateway Ssl policy.
 */
export interface ApplicationGatewaySslPolicy {
  /**
   * Ssl protocols to be disabled on application gateway.
   */
  disabledSslProtocols?: ApplicationGatewaySslProtocol[];
  /**
   * Type of Ssl Policy. Possible values include: 'Predefined', 'Custom'
   */
  policyType?: ApplicationGatewaySslPolicyType;
  /**
   * Name of Ssl predefined policy. Possible values include: 'AppGwSslPolicy20150501',
   * 'AppGwSslPolicy20170401', 'AppGwSslPolicy20170401S'
   */
  policyName?: ApplicationGatewaySslPolicyName;
  /**
   * Ssl cipher suites to be enabled in the specified order to application gateway.
   */
  cipherSuites?: ApplicationGatewaySslCipherSuite[];
  /**
   * Minimum version of Ssl protocol to be supported on application gateway. Possible values
   * include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
   */
  minProtocolVersion?: ApplicationGatewaySslProtocol;
}

/**
 * IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is
 * allowed.
 */
export interface ApplicationGatewayIPConfiguration extends SubResource {
  /**
   * Reference of the subnet resource. A subnet from where application gateway gets its private
   * address.
   */
  subnet?: SubResource;
  /**
   * Provisioning state of the application gateway subnet resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Authentication certificates of an application gateway.
 */
export interface ApplicationGatewayAuthenticationCertificate extends SubResource {
  /**
   * Certificate public data.
   */
  data?: string;
  /**
   * Provisioning state of the authentication certificate resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * SSL certificates of an application gateway.
 */
export interface ApplicationGatewaySslCertificate extends SubResource {
  /**
   * Base-64 encoded pfx certificate. Only applicable in PUT Request.
   */
  data?: string;
  /**
   * Password for the pfx file specified in data. Only applicable in PUT request.
   */
  password?: string;
  /**
   * Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in
   * GET request.
   */
  publicCertData?: string;
  /**
   * Provisioning state of the SSL certificate resource Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Frontend IP configuration of an application gateway.
 */
export interface ApplicationGatewayFrontendIPConfiguration extends SubResource {
  /**
   * PrivateIPAddress of the network interface IP Configuration.
   */
  privateIPAddress?: string;
  /**
   * PrivateIP allocation method. Possible values include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * Reference of the subnet resource.
   */
  subnet?: SubResource;
  /**
   * Reference of the PublicIP resource.
   */
  publicIPAddress?: SubResource;
  /**
   * Provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and
   * 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Frontend port of an application gateway.
 */
export interface ApplicationGatewayFrontendPort extends SubResource {
  /**
   * Frontend port
   */
  port?: number;
  /**
   * Provisioning state of the frontend port resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Http listener of an application gateway.
 */
export interface ApplicationGatewayHttpListener extends SubResource {
  /**
   * Frontend IP configuration resource of an application gateway.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * Frontend port resource of an application gateway.
   */
  frontendPort?: SubResource;
  /**
   * Protocol. Possible values include: 'Http', 'Https'
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * Host name of HTTP listener.
   */
  hostName?: string;
  /**
   * SSL certificate resource of an application gateway.
   */
  sslCertificate?: SubResource;
  /**
   * Applicable only if protocol is https. Enables SNI for multi-hosting.
   */
  requireServerNameIndication?: boolean;
  /**
   * Provisioning state of the HTTP listener resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Path rule of URL path map of an application gateway.
 */
export interface ApplicationGatewayPathRule extends SubResource {
  /**
   * Path rules of URL path map.
   */
  paths?: string[];
  /**
   * Backend address pool resource of URL path map path rule.
   */
  backendAddressPool?: SubResource;
  /**
   * Backend http settings resource of URL path map path rule.
   */
  backendHttpSettings?: SubResource;
  /**
   * Redirect configuration resource of URL path map path rule.
   */
  redirectConfiguration?: SubResource;
  /**
   * Path rule of URL path map resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Application gateway probe health response match
 */
export interface ApplicationGatewayProbeHealthResponseMatch {
  /**
   * Body that must be contained in the health response. Default value is empty.
   */
  body?: string;
  /**
   * Allowed ranges of healthy status codes. Default range of healthy status codes is 200-399.
   */
  statusCodes?: string[];
}

/**
 * Probe of the application gateway.
 */
export interface ApplicationGatewayProbe extends SubResource {
  /**
   * Protocol. Possible values include: 'Http', 'Https'
   */
  protocol?: ApplicationGatewayProtocol;
  /**
   * Host name to send the probe to.
   */
  host?: string;
  /**
   * Relative path of probe. Valid path starts from '/'. Probe is sent to
   * <Protocol>://<host>:<port><path>
   */
  path?: string;
  /**
   * The probing interval in seconds. This is the time interval between two consecutive probes.
   * Acceptable values are from 1 second to 86400 seconds.
   */
  interval?: number;
  /**
   * the probe timeout in seconds. Probe marked as failed if valid response is not received with
   * this timeout period. Acceptable values are from 1 second to 86400 seconds.
   */
  timeout?: number;
  /**
   * The probe retry count. Backend server is marked down after consecutive probe failure count
   * reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.
   */
  unhealthyThreshold?: number;
  /**
   * Whether the host header should be picked from the backend http settings. Default value is
   * false.
   */
  pickHostNameFromBackendHttpSettings?: boolean;
  /**
   * Minimum number of servers that are always marked healthy. Default value is 0.
   */
  minServers?: number;
  /**
   * Criterion for classifying a healthy probe response.
   */
  match?: ApplicationGatewayProbeHealthResponseMatch;
  /**
   * Provisioning state of the backend http settings resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Request routing rule of an application gateway.
 */
export interface ApplicationGatewayRequestRoutingRule extends SubResource {
  /**
   * Rule type. Possible values include: 'Basic', 'PathBasedRouting'
   */
  ruleType?: ApplicationGatewayRequestRoutingRuleType;
  /**
   * Backend address pool resource of the application gateway.
   */
  backendAddressPool?: SubResource;
  /**
   * Frontend port resource of the application gateway.
   */
  backendHttpSettings?: SubResource;
  /**
   * Http listener resource of the application gateway.
   */
  httpListener?: SubResource;
  /**
   * URL path map resource of the application gateway.
   */
  urlPathMap?: SubResource;
  /**
   * Redirect configuration resource of the application gateway.
   */
  redirectConfiguration?: SubResource;
  /**
   * Provisioning state of the request routing rule resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Redirect configuration of an application gateway.
 */
export interface ApplicationGatewayRedirectConfiguration extends SubResource {
  /**
   * Supported http redirection types - Permanent, Temporary, Found, SeeOther. Possible values
   * include: 'Permanent', 'Found', 'SeeOther', 'Temporary'
   */
  redirectType?: ApplicationGatewayRedirectType;
  /**
   * Reference to a listener to redirect the request to.
   */
  targetListener?: SubResource;
  /**
   * Url to redirect the request to.
   */
  targetUrl?: string;
  /**
   * Include path in the redirected url.
   */
  includePath?: boolean;
  /**
   * Include query string in the redirected url.
   */
  includeQueryString?: boolean;
  /**
   * Request routing specifying redirect configuration.
   */
  requestRoutingRules?: SubResource[];
  /**
   * Url path maps specifying default redirect configuration.
   */
  urlPathMaps?: SubResource[];
  /**
   * Path rules specifying redirect configuration.
   */
  pathRules?: SubResource[];
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
 */
export interface ApplicationGatewayUrlPathMap extends SubResource {
  /**
   * Default backend address pool resource of URL path map.
   */
  defaultBackendAddressPool?: SubResource;
  /**
   * Default backend http settings resource of URL path map.
   */
  defaultBackendHttpSettings?: SubResource;
  /**
   * Default redirect configuration resource of URL path map.
   */
  defaultRedirectConfiguration?: SubResource;
  /**
   * Path rule of URL path map resource.
   */
  pathRules?: ApplicationGatewayPathRule[];
  /**
   * Provisioning state of the backend http settings resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Name of the resource that is unique within a resource group. This name can be used to access
   * the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * Type of the resource.
   */
  type?: string;
}

/**
 * Allows to disable rules within a rule group or an entire rule group.
 */
export interface ApplicationGatewayFirewallDisabledRuleGroup {
  /**
   * The name of the rule group that will be disabled.
   */
  ruleGroupName: string;
  /**
   * The list of rules that will be disabled. If null, all rules of the rule group will be
   * disabled.
   */
  rules?: number[];
}

/**
 * Application gateway web application firewall configuration.
 */
export interface ApplicationGatewayWebApplicationFirewallConfiguration {
  /**
   * Whether the web application firewall is enabled or not.
   */
  enabled: boolean;
  /**
   * Web application firewall mode. Possible values include: 'Detection', 'Prevention'
   */
  firewallMode: ApplicationGatewayFirewallMode;
  /**
   * The type of the web application firewall rule set. Possible values are: 'OWASP'.
   */
  ruleSetType: string;
  /**
   * The version of the rule set type.
   */
  ruleSetVersion: string;
  /**
   * The disabled rule groups.
   */
  disabledRuleGroups?: ApplicationGatewayFirewallDisabledRuleGroup[];
}

/**
 * Application gateway resource
 */
export interface ApplicationGateway extends Resource {
  /**
   * SKU of the application gateway resource.
   */
  sku?: ApplicationGatewaySku;
  /**
   * SSL policy of the application gateway resource.
   */
  sslPolicy?: ApplicationGatewaySslPolicy;
  /**
   * Operational state of the application gateway resource. Possible values include: 'Stopped',
   * 'Starting', 'Running', 'Stopping'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operationalState?: ApplicationGatewayOperationalState;
  /**
   * Subnets of application the gateway resource.
   */
  gatewayIPConfigurations?: ApplicationGatewayIPConfiguration[];
  /**
   * Authentication certificates of the application gateway resource.
   */
  authenticationCertificates?: ApplicationGatewayAuthenticationCertificate[];
  /**
   * SSL certificates of the application gateway resource.
   */
  sslCertificates?: ApplicationGatewaySslCertificate[];
  /**
   * Frontend IP addresses of the application gateway resource.
   */
  frontendIPConfigurations?: ApplicationGatewayFrontendIPConfiguration[];
  /**
   * Frontend ports of the application gateway resource.
   */
  frontendPorts?: ApplicationGatewayFrontendPort[];
  /**
   * Probes of the application gateway resource.
   */
  probes?: ApplicationGatewayProbe[];
  /**
   * Backend address pool of the application gateway resource.
   */
  backendAddressPools?: ApplicationGatewayBackendAddressPool[];
  /**
   * Backend http settings of the application gateway resource.
   */
  backendHttpSettingsCollection?: ApplicationGatewayBackendHttpSettings[];
  /**
   * Http listeners of the application gateway resource.
   */
  httpListeners?: ApplicationGatewayHttpListener[];
  /**
   * URL path map of the application gateway resource.
   */
  urlPathMaps?: ApplicationGatewayUrlPathMap[];
  /**
   * Request routing rules of the application gateway resource.
   */
  requestRoutingRules?: ApplicationGatewayRequestRoutingRule[];
  /**
   * Redirect configurations of the application gateway resource.
   */
  redirectConfigurations?: ApplicationGatewayRedirectConfiguration[];
  /**
   * Web application firewall configuration.
   */
  webApplicationFirewallConfiguration?: ApplicationGatewayWebApplicationFirewallConfiguration;
  /**
   * Resource GUID property of the application gateway resource.
   */
  resourceGuid?: string;
  /**
   * Provisioning state of the application gateway resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * A web application firewall rule.
 */
export interface ApplicationGatewayFirewallRule {
  /**
   * The identifier of the web application firewall rule.
   */
  ruleId: number;
  /**
   * The description of the web application firewall rule.
   */
  description?: string;
}

/**
 * A web application firewall rule group.
 */
export interface ApplicationGatewayFirewallRuleGroup {
  /**
   * The name of the web application firewall rule group.
   */
  ruleGroupName: string;
  /**
   * The description of the web application firewall rule group.
   */
  description?: string;
  /**
   * The rules of the web application firewall rule group.
   */
  rules: ApplicationGatewayFirewallRule[];
}

/**
 * A web application firewall rule set.
 */
export interface ApplicationGatewayFirewallRuleSet extends Resource {
  /**
   * The provisioning state of the web application firewall rule set.
   */
  provisioningState?: string;
  /**
   * The type of the web application firewall rule set.
   */
  ruleSetType: string;
  /**
   * The version of the web application firewall rule set type.
   */
  ruleSetVersion: string;
  /**
   * The rule groups of the web application firewall rule set.
   */
  ruleGroups: ApplicationGatewayFirewallRuleGroup[];
}

/**
 * Response for ApplicationGatewayAvailableWafRuleSets API service call.
 */
export interface ApplicationGatewayAvailableWafRuleSetsResult {
  /**
   * The list of application gateway rule sets.
   */
  value?: ApplicationGatewayFirewallRuleSet[];
}

/**
 * Response for ApplicationGatewayAvailableSslOptions API service call.
 */
export interface ApplicationGatewayAvailableSslOptions extends Resource {
  /**
   * List of available Ssl predefined policy.
   */
  predefinedPolicies?: SubResource[];
  /**
   * Name of the Ssl predefined policy applied by default to application gateway. Possible values
   * include: 'AppGwSslPolicy20150501', 'AppGwSslPolicy20170401', 'AppGwSslPolicy20170401S'
   */
  defaultPolicy?: ApplicationGatewaySslPolicyName;
  /**
   * List of available Ssl cipher suites.
   */
  availableCipherSuites?: ApplicationGatewaySslCipherSuite[];
  /**
   * List of available Ssl protocols.
   */
  availableProtocols?: ApplicationGatewaySslProtocol[];
}

/**
 * An Ssl predefined policy
 */
export interface ApplicationGatewaySslPredefinedPolicy extends SubResource {
  /**
   * Name of Ssl predefined policy.
   */
  name?: string;
  /**
   * Ssl cipher suites to be enabled in the specified order for application gateway.
   */
  cipherSuites?: ApplicationGatewaySslCipherSuite[];
  /**
   * Minimum version of Ssl protocol to be supported on application gateway. Possible values
   * include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
   */
  minProtocolVersion?: ApplicationGatewaySslProtocol;
}

/**
 * Response for the CheckDnsNameAvailability API service call.
 */
export interface DnsNameAvailabilityResult {
  /**
   * Domain availability (True/False).
   */
  available?: boolean;
}

/**
 * Endpoint service.
 */
export interface EndpointServiceResult extends SubResource {
  /**
   * Name of the endpoint service.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Type of the endpoint service.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Authorization in an ExpressRouteCircuit resource.
 */
export interface ExpressRouteCircuitAuthorization extends SubResource {
  /**
   * The authorization key.
   */
  authorizationKey?: string;
  /**
   * AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'. Possible values include:
   * 'Available', 'InUse'
   */
  authorizationUseStatus?: AuthorizationUseStatus;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * Specifies the peering configuration.
 */
export interface ExpressRouteCircuitPeeringConfig {
  /**
   * The reference of AdvertisedPublicPrefixes.
   */
  advertisedPublicPrefixes?: string[];
  /**
   * The communities of bgp peering. Specified for microsoft peering
   */
  advertisedCommunities?: string[];
  /**
   * AdvertisedPublicPrefixState of the Peering resource. Possible values are 'NotConfigured',
   * 'Configuring', 'Configured', and 'ValidationNeeded'. Possible values include: 'NotConfigured',
   * 'Configuring', 'Configured', 'ValidationNeeded'
   */
  advertisedPublicPrefixesState?: ExpressRouteCircuitPeeringAdvertisedPublicPrefixState;
  /**
   * The legacy mode of the peering.
   */
  legacyMode?: number;
  /**
   * The CustomerASN of the peering.
   */
  customerASN?: number;
  /**
   * The RoutingRegistryName of the configuration.
   */
  routingRegistryName?: string;
}

/**
 * Route Filter Rule Resource
 */
export interface RouteFilterRule extends SubResource {
  /**
   * The access type of the rule. Valid values are: 'Allow', 'Deny'. Possible values include:
   * 'Allow', 'Deny'
   */
  access: Access;
  /**
   * The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020']
   */
  communities: string[];
  /**
   * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting',
   * 'Succeeded' and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Contains stats associated with the peering.
 */
export interface ExpressRouteCircuitStats {
  /**
   * Gets BytesIn of the peering.
   */
  primarybytesIn?: number;
  /**
   * Gets BytesOut of the peering.
   */
  primarybytesOut?: number;
  /**
   * Gets BytesIn of the peering.
   */
  secondarybytesIn?: number;
  /**
   * Gets BytesOut of the peering.
   */
  secondarybytesOut?: number;
}

/**
 * Peering in an ExpressRouteCircuit resource.
 */
export interface ExpressRouteCircuitPeering extends SubResource {
  /**
   * The PeeringType. Possible values are: 'AzurePublicPeering', 'AzurePrivatePeering', and
   * 'MicrosoftPeering'. Possible values include: 'AzurePublicPeering', 'AzurePrivatePeering',
   * 'MicrosoftPeering'
   */
  peeringType?: ExpressRouteCircuitPeeringType;
  /**
   * The state of peering. Possible values are: 'Disabled' and 'Enabled'. Possible values include:
   * 'Disabled', 'Enabled'
   */
  state?: ExpressRouteCircuitPeeringState;
  /**
   * The Azure ASN.
   */
  azureASN?: number;
  /**
   * The peer ASN.
   */
  peerASN?: number;
  /**
   * The primary address prefix.
   */
  primaryPeerAddressPrefix?: string;
  /**
   * The secondary address prefix.
   */
  secondaryPeerAddressPrefix?: string;
  /**
   * The primary port.
   */
  primaryAzurePort?: string;
  /**
   * The secondary port.
   */
  secondaryAzurePort?: string;
  /**
   * The shared key.
   */
  sharedKey?: string;
  /**
   * The VLAN ID.
   */
  vlanId?: number;
  /**
   * The Microsoft peering configuration.
   */
  microsoftPeeringConfig?: ExpressRouteCircuitPeeringConfig;
  /**
   * Gets peering stats.
   */
  stats?: ExpressRouteCircuitStats;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The GatewayManager Etag.
   */
  gatewayManagerEtag?: string;
  /**
   * Gets whether the provider or the customer last modified the peering.
   */
  lastModifiedBy?: string;
  /**
   * The reference of the RouteFilter resource.
   */
  routeFilter?: RouteFilter;
  /**
   * The IPv6 peering configuration.
   */
  ipv6PeeringConfig?: Ipv6ExpressRouteCircuitPeeringConfig;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * Route Filter Resource.
 */
export interface RouteFilter extends Resource {
  /**
   * Collection of RouteFilterRules contained within a route filter.
   */
  rules?: RouteFilterRule[];
  /**
   * A collection of references to express route circuit peerings.
   */
  peerings?: ExpressRouteCircuitPeering[];
  /**
   * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting',
   * 'Succeeded' and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * Contains IPv6 peering config.
 */
export interface Ipv6ExpressRouteCircuitPeeringConfig {
  /**
   * The primary address prefix.
   */
  primaryPeerAddressPrefix?: string;
  /**
   * The secondary address prefix.
   */
  secondaryPeerAddressPrefix?: string;
  /**
   * The Microsoft peering configuration.
   */
  microsoftPeeringConfig?: ExpressRouteCircuitPeeringConfig;
  /**
   * The reference of the RouteFilter resource.
   */
  routeFilter?: RouteFilter;
  /**
   * The state of peering. Possible values are: 'Disabled' and 'Enabled'. Possible values include:
   * 'Disabled', 'Enabled'
   */
  state?: ExpressRouteCircuitPeeringState;
}

/**
 * Contains SKU in an ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitSku {
  /**
   * The name of the SKU.
   */
  name?: string;
  /**
   * The tier of the SKU. Possible values are 'Standard' and 'Premium'. Possible values include:
   * 'Standard', 'Premium'
   */
  tier?: ExpressRouteCircuitSkuTier;
  /**
   * The family of the SKU. Possible values are: 'UnlimitedData' and 'MeteredData'. Possible values
   * include: 'UnlimitedData', 'MeteredData'
   */
  family?: ExpressRouteCircuitSkuFamily;
}

/**
 * Contains ServiceProviderProperties in an ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitServiceProviderProperties {
  /**
   * The serviceProviderName.
   */
  serviceProviderName?: string;
  /**
   * The peering location.
   */
  peeringLocation?: string;
  /**
   * The BandwidthInMbps.
   */
  bandwidthInMbps?: number;
}

/**
 * ExpressRouteCircuit resource
 */
export interface ExpressRouteCircuit extends Resource {
  /**
   * The SKU.
   */
  sku?: ExpressRouteCircuitSku;
  /**
   * Allow classic operations
   */
  allowClassicOperations?: boolean;
  /**
   * The CircuitProvisioningState state of the resource.
   */
  circuitProvisioningState?: string;
  /**
   * The ServiceProviderProvisioningState state of the resource. Possible values are
   * 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'. Possible values
   * include: 'NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning'
   */
  serviceProviderProvisioningState?: ServiceProviderProvisioningState;
  /**
   * The list of authorizations.
   */
  authorizations?: ExpressRouteCircuitAuthorization[];
  /**
   * The list of peerings.
   */
  peerings?: ExpressRouteCircuitPeering[];
  /**
   * The ServiceKey.
   */
  serviceKey?: string;
  /**
   * The ServiceProviderNotes.
   */
  serviceProviderNotes?: string;
  /**
   * The ServiceProviderProperties.
   */
  serviceProviderProperties?: ExpressRouteCircuitServiceProviderProperties;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The GatewayManager Etag.
   */
  gatewayManagerEtag?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * The ARP table associated with the ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitArpTable {
  /**
   * Age
   */
  age?: number;
  /**
   * Interface
   */
  interfaceProperty?: string;
  /**
   * The IP address.
   */
  ipAddress?: string;
  /**
   * The MAC address.
   */
  macAddress?: string;
}

/**
 * Response for ListArpTable associated with the Express Route Circuits API.
 */
export interface ExpressRouteCircuitsArpTableListResult {
  /**
   * Gets list of the ARP table.
   */
  value?: ExpressRouteCircuitArpTable[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The routes table associated with the ExpressRouteCircuit
 */
export interface ExpressRouteCircuitRoutesTable {
  /**
   * network
   */
  network?: string;
  /**
   * nextHop
   */
  nextHop?: string;
  /**
   * locPrf
   */
  locPrf?: string;
  /**
   * weight.
   */
  weight?: number;
  /**
   * path
   */
  path?: string;
}

/**
 * Response for ListRoutesTable associated with the Express Route Circuits API.
 */
export interface ExpressRouteCircuitsRoutesTableListResult {
  /**
   * The list of routes table.
   */
  value?: ExpressRouteCircuitRoutesTable[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * The routes table associated with the ExpressRouteCircuit.
 */
export interface ExpressRouteCircuitRoutesTableSummary {
  /**
   * Neighbor
   */
  neighbor?: string;
  /**
   * BGP version number spoken to the neighbor.
   */
  v?: number;
  /**
   * Autonomous system number.
   */
  as?: number;
  /**
   * The length of time that the BGP session has been in the Established state, or the current
   * status if not in the Established state.
   */
  upDown?: string;
  /**
   * Current state of the BGP session, and the number of prefixes that have been received from a
   * neighbor or peer group.
   */
  statePfxRcd?: string;
}

/**
 * Response for ListRoutesTable associated with the Express Route Circuits API.
 */
export interface ExpressRouteCircuitsRoutesTableSummaryListResult {
  /**
   * A list of the routes table.
   */
  value?: ExpressRouteCircuitRoutesTableSummary[];
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * Contains bandwidths offered in ExpressRouteServiceProvider resources.
 */
export interface ExpressRouteServiceProviderBandwidthsOffered {
  /**
   * The OfferName.
   */
  offerName?: string;
  /**
   * The ValueInMbps.
   */
  valueInMbps?: number;
}

/**
 * A ExpressRouteResourceProvider object.
 */
export interface ExpressRouteServiceProvider extends Resource {
  /**
   * Get a list of peering locations.
   */
  peeringLocations?: string[];
  /**
   * Gets bandwidths offered.
   */
  bandwidthsOffered?: ExpressRouteServiceProviderBandwidthsOffered[];
  /**
   * Gets the provisioning state of the resource.
   */
  provisioningState?: string;
}

/**
 * SKU of a load balancer
 */
export interface LoadBalancerSku {
  /**
   * Name of a load balancer SKU. Possible values include: 'Basic', 'Standard'
   */
  name?: LoadBalancerSkuName;
}

/**
 * Frontend IP address of the load balancer.
 */
export interface FrontendIPConfiguration extends SubResource {
  /**
   * Read only. Inbound rules URIs that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inboundNatRules?: SubResource[];
  /**
   * Read only. Inbound pools URIs that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inboundNatPools?: SubResource[];
  /**
   * Read only. Outbound rules URIs that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outboundNatRules?: SubResource[];
  /**
   * Gets load balancing rules URIs that use this frontend IP.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * The private IP address of the IP configuration.
   */
  privateIPAddress?: string;
  /**
   * The Private IP allocation method. Possible values are: 'Static' and 'Dynamic'. Possible values
   * include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * The reference of the subnet resource.
   */
  subnet?: Subnet;
  /**
   * The reference of the Public IP resource.
   */
  publicIPAddress?: PublicIPAddress;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * A list of availability zones denoting the IP allocated for the resource needs to come from.
   */
  zones?: string[];
}

/**
 * A load balancing rule for a load balancer.
 */
export interface LoadBalancingRule extends SubResource {
  /**
   * A reference to frontend IP addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the
   * backend IPs.
   */
  backendAddressPool?: SubResource;
  /**
   * The reference of the load balancer probe used by the load balancing rule.
   */
  probe?: SubResource;
  /**
   * The transport protocol for the external endpoint. Possible values are 'Udp' or 'Tcp'. Possible
   * values include: 'Udp', 'Tcp'
   */
  protocol: TransportProtocol;
  /**
   * The load distribution policy for this rule. Possible values are 'Default', 'SourceIP', and
   * 'SourceIPProtocol'. Possible values include: 'Default', 'SourceIP', 'SourceIPProtocol'
   */
  loadDistribution?: LoadDistribution;
  /**
   * The port for the external endpoint. Port numbers for each rule must be unique within the Load
   * Balancer. Acceptable values are between 1 and 65534.
   */
  frontendPort: number;
  /**
   * The port used for internal connections on the endpoint. Acceptable values are between 1 and
   * 65535.
   */
  backendPort?: number;
  /**
   * The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The
   * default value is 4 minutes. This element is only used when the protocol is set to TCP.
   */
  idleTimeoutInMinutes?: number;
  /**
   * Configures a virtual machine's endpoint for the floating IP capability required to configure a
   * SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn
   * Availability Groups in SQL server. This setting can't be changed after you create the
   * endpoint.
   */
  enableFloatingIP?: boolean;
  /**
   * Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the
   * frontend of the load balancing rule.
   */
  disableOutboundSnat?: boolean;
  /**
   * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * A load balancer probe.
 */
export interface Probe extends SubResource {
  /**
   * The load balancer rules that use this probe.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly loadBalancingRules?: SubResource[];
  /**
   * The protocol of the end point. Possible values are: 'Http' or 'Tcp'. If 'Tcp' is specified, a
   * received ACK is required for the probe to be successful. If 'Http' is specified, a 200 OK
   * response from the specifies URI is required for the probe to be successful. Possible values
   * include: 'Http', 'Tcp'
   */
  protocol: ProbeProtocol;
  /**
   * The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
   */
  port: number;
  /**
   * The interval, in seconds, for how frequently to probe the endpoint for health status.
   * Typically, the interval is slightly less than half the allocated timeout period (in seconds)
   * which allows two full probes before taking the instance out of rotation. The default value is
   * 15, the minimum value is 5.
   */
  intervalInSeconds?: number;
  /**
   * The number of probes where if no response, will result in stopping further traffic from being
   * delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or
   * slower than the typical times used in Azure.
   */
  numberOfProbes?: number;
  /**
   * The URI used for requesting health status from the VM. Path is required if a protocol is set
   * to http. Otherwise, it is not allowed. There is no default value.
   */
  requestPath?: string;
  /**
   * Gets the provisioning state of the public IP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Gets name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Inbound NAT pool of the load balancer.
 */
export interface InboundNatPool extends SubResource {
  /**
   * A reference to frontend IP addresses.
   */
  frontendIPConfiguration?: SubResource;
  /**
   * The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'. Possible values
   * include: 'Udp', 'Tcp'
   */
  protocol: TransportProtocol;
  /**
   * The first port number in the range of external ports that will be used to provide Inbound Nat
   * to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
   */
  frontendPortRangeStart: number;
  /**
   * The last port number in the range of external ports that will be used to provide Inbound Nat
   * to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
   */
  frontendPortRangeEnd: number;
  /**
   * The port used for internal connections on the endpoint. Acceptable values are between 1 and
   * 65535.
   */
  backendPort: number;
  /**
   * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Outbound NAT pool of the load balancer.
 */
export interface OutboundNatRule extends SubResource {
  /**
   * The number of outbound ports to be used for NAT.
   */
  allocatedOutboundPorts?: number;
  /**
   * The Frontend IP addresses of the load balancer.
   */
  frontendIPConfigurations?: SubResource[];
  /**
   * A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the
   * backend IPs.
   */
  backendAddressPool: SubResource;
  /**
   * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * LoadBalancer resource
 */
export interface LoadBalancer extends Resource {
  /**
   * The load balancer SKU.
   */
  sku?: LoadBalancerSku;
  /**
   * Object representing the frontend IPs to be used for the load balancer
   */
  frontendIPConfigurations?: FrontendIPConfiguration[];
  /**
   * Collection of backend address pools used by a load balancer
   */
  backendAddressPools?: BackendAddressPool[];
  /**
   * Object collection representing the load balancing rules Gets the provisioning
   */
  loadBalancingRules?: LoadBalancingRule[];
  /**
   * Collection of probe objects used in the load balancer
   */
  probes?: Probe[];
  /**
   * Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your
   * load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are
   * referenced from virtual machine scale sets. NICs that are associated with individual virtual
   * machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT
   * rules.
   */
  inboundNatRules?: InboundNatRule[];
  /**
   * Defines an external port range for inbound NAT to a single backend port on NICs associated
   * with a load balancer. Inbound NAT rules are created automatically for each NIC associated with
   * the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your
   * Load Balancer is mutually exclusive with defining inbound Nat rules. Inbound NAT pools are
   * referenced from virtual machine scale sets. NICs that are associated with individual virtual
   * machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT
   * rules.
   */
  inboundNatPools?: InboundNatPool[];
  /**
   * The outbound NAT rules.
   */
  outboundNatRules?: OutboundNatRule[];
  /**
   * The resource GUID property of the load balancer resource.
   */
  resourceGuid?: string;
  /**
   * Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   */
  provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * An interface representing ErrorDetails.
 */
export interface ErrorDetails {
  code?: string;
  target?: string;
  message?: string;
}

/**
 * An interface representing ErrorModel.
 */
export interface ErrorModel {
  code?: string;
  message?: string;
  target?: string;
  details?: ErrorDetails[];
  innerError?: string;
}

/**
 * The response body contains the status of the specified asynchronous operation, indicating
 * whether it has succeeded, is in progress, or has failed. Note that this status is distinct from
 * the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous
 * operation succeeded, the response body includes the HTTP status code for the successful request.
 * If the asynchronous operation failed, the response body includes the HTTP status code for the
 * failed request and error information regarding the failure.
 */
export interface AzureAsyncOperationResult {
  /**
   * Status of the Azure async operation. Possible values are: 'InProgress', 'Succeeded', and
   * 'Failed'. Possible values include: 'InProgress', 'Succeeded', 'Failed'
   */
  status?: NetworkOperationStatus;
  error?: ErrorModel;
}

/**
 * The effective network security group association.
 */
export interface EffectiveNetworkSecurityGroupAssociation {
  /**
   * The ID of the subnet if assigned.
   */
  subnet?: SubResource;
  /**
   * The ID of the network interface if assigned.
   */
  networkInterface?: SubResource;
}

/**
 * Effective network security rules.
 */
export interface EffectiveNetworkSecurityRule {
  /**
   * The name of the security rule specified by the user (if created by the user).
   */
  name?: string;
  /**
   * The network protocol this rule applies to. Possible values are: 'Tcp', 'Udp', and 'All'.
   * Possible values include: 'Tcp', 'Udp', 'All'
   */
  protocol?: EffectiveSecurityRuleProtocol;
  /**
   * The source port or range.
   */
  sourcePortRange?: string;
  /**
   * The destination port or range.
   */
  destinationPortRange?: string;
  /**
   * The source port ranges. Expected values include a single integer between 0 and 65535, a range
   * using '-' as separator (e.g. 100-400), or an asterisk (*)
   */
  sourcePortRanges?: string[];
  /**
   * The destination port ranges. Expected values include a single integer between 0 and 65535, a
   * range using '-' as separator (e.g. 100-400), or an asterisk (*)
   */
  destinationPortRanges?: string[];
  /**
   * The source address prefix.
   */
  sourceAddressPrefix?: string;
  /**
   * The destination address prefix.
   */
  destinationAddressPrefix?: string;
  /**
   * The source address prefixes. Expected values include CIDR IP ranges, Default Tags
   * (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).
   */
  sourceAddressPrefixes?: string[];
  /**
   * The destination address prefixes. Expected values include CIDR IP ranges, Default Tags
   * (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).
   */
  destinationAddressPrefixes?: string[];
  /**
   * The expanded source address prefix.
   */
  expandedSourceAddressPrefix?: string[];
  /**
   * Expanded destination address prefix.
   */
  expandedDestinationAddressPrefix?: string[];
  /**
   * Whether network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.
   * Possible values include: 'Allow', 'Deny'
   */
  access?: SecurityRuleAccess;
  /**
   * The priority of the rule.
   */
  priority?: number;
  /**
   * The direction of the rule. Possible values are: 'Inbound and Outbound'. Possible values
   * include: 'Inbound', 'Outbound'
   */
  direction?: SecurityRuleDirection;
}

/**
 * Effective network security group.
 */
export interface EffectiveNetworkSecurityGroup {
  /**
   * The ID of network security group that is applied.
   */
  networkSecurityGroup?: SubResource;
  /**
   * Associated resources.
   */
  association?: EffectiveNetworkSecurityGroupAssociation;
  /**
   * A collection of effective security rules.
   */
  effectiveSecurityRules?: EffectiveNetworkSecurityRule[];
  /**
   * Mapping of tags to list of IP Addresses included within the tag.
   */
  tagMap?: { [propertyName: string]: string[] };
}

/**
 * Response for list effective network security groups API service call.
 */
export interface EffectiveNetworkSecurityGroupListResult {
  /**
   * A list of effective network security groups.
   */
  value?: EffectiveNetworkSecurityGroup[];
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Effective Route
 */
export interface EffectiveRoute {
  /**
   * The name of the user defined route. This is optional.
   */
  name?: string;
  /**
   * Who created the route. Possible values are: 'Unknown', 'User', 'VirtualNetworkGateway', and
   * 'Default'. Possible values include: 'Unknown', 'User', 'VirtualNetworkGateway', 'Default'
   */
  source?: EffectiveRouteSource;
  /**
   * The value of effective route. Possible values are: 'Active' and 'Invalid'. Possible values
   * include: 'Active', 'Invalid'
   */
  state?: EffectiveRouteState;
  /**
   * The address prefixes of the effective routes in CIDR notation.
   */
  addressPrefix?: string[];
  /**
   * The IP address of the next hop of the effective route.
   */
  nextHopIpAddress?: string[];
  /**
   * The type of Azure hop the packet should be sent to. Possible values are:
   * 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible
   * values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', 'None'
   */
  nextHopType?: RouteNextHopType;
}

/**
 * Response for list effective route API service call.
 */
export interface EffectiveRouteListResult {
  /**
   * A list of effective routes.
   */
  value?: EffectiveRoute[];
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Network watcher in a resource group.
 */
export interface NetworkWatcher extends Resource {
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
  /**
   * The provisioning state of the resource. Possible values include: 'Succeeded', 'Updating',
   * 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * Parameters that define the representation of topology.
 */
export interface TopologyParameters {
  /**
   * The name of the target resource group to perform topology on.
   */
  targetResourceGroupName: string;
}

/**
 * Resources that have an association with the parent resource.
 */
export interface TopologyAssociation {
  /**
   * The name of the resource that is associated with the parent resource.
   */
  name?: string;
  /**
   * The ID of the resource that is associated with the parent resource.
   */
  resourceId?: string;
  /**
   * The association type of the child resource to the parent resource. Possible values include:
   * 'Associated', 'Contains'
   */
  associationType?: AssociationType;
}

/**
 * The network resource topology information for the given resource group.
 */
export interface TopologyResource {
  /**
   * Name of the resource.
   */
  name?: string;
  /**
   * ID of the resource.
   */
  id?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * Holds the associations the resource has with other resources in the resource group.
   */
  associations?: TopologyAssociation[];
}

/**
 * Topology of the specified resource group.
 */
export interface Topology {
  /**
   * GUID representing the operation id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The datetime when the topology was initially created for the resource group.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdDateTime?: Date;
  /**
   * The datetime when the topology was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModified?: Date;
  resources?: TopologyResource[];
}

/**
 * Parameters that define the IP flow to be verified.
 */
export interface VerificationIPFlowParameters {
  /**
   * The ID of the target resource to perform next-hop on.
   */
  targetResourceId: string;
  /**
   * The direction of the packet represented as a 5-tuple. Possible values include: 'Inbound',
   * 'Outbound'
   */
  direction: Direction;
  /**
   * Protocol to be verified on. Possible values include: 'TCP', 'UDP'
   */
  protocol: Protocol;
  /**
   * The local port. Acceptable values are a single integer in the range (0-65535). Support for *
   * for the source port, which depends on the direction.
   */
  localPort: string;
  /**
   * The remote port. Acceptable values are a single integer in the range (0-65535). Support for *
   * for the source port, which depends on the direction.
   */
  remotePort: string;
  /**
   * The local IP address. Acceptable values are valid IPv4 addresses.
   */
  localIPAddress: string;
  /**
   * The remote IP address. Acceptable values are valid IPv4 addresses.
   */
  remoteIPAddress: string;
  /**
   * The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this
   * parameter must be specified. Otherwise optional).
   */
  targetNicResourceId?: string;
}

/**
 * Results of IP flow verification on the target resource.
 */
export interface VerificationIPFlowResult {
  /**
   * Indicates whether the traffic is allowed or denied. Possible values include: 'Allow', 'Deny'
   */
  access?: Access;
  /**
   * Name of the rule. If input is not matched against any security rule, it is not displayed.
   */
  ruleName?: string;
}

/**
 * Parameters that define the source and destination endpoint.
 */
export interface NextHopParameters {
  /**
   * The resource identifier of the target resource against which the action is to be performed.
   */
  targetResourceId: string;
  /**
   * The source IP address.
   */
  sourceIPAddress: string;
  /**
   * The destination IP address.
   */
  destinationIPAddress: string;
  /**
   * The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of the nics, then
   * this parameter must be specified. Otherwise optional).
   */
  targetNicResourceId?: string;
}

/**
 * The information about next hop from the specified VM.
 */
export interface NextHopResult {
  /**
   * Next hop type. Possible values include: 'Internet', 'VirtualAppliance',
   * 'VirtualNetworkGateway', 'VnetLocal', 'HyperNetGateway', 'None'
   */
  nextHopType?: NextHopType;
  /**
   * Next hop IP Address
   */
  nextHopIpAddress?: string;
  /**
   * The resource identifier for the route table associated with the route being returned. If the
   * route being returned does not correspond to any user created routes then this field will be
   * the string 'System Route'.
   */
  routeTableId?: string;
}

/**
 * Parameters that define the VM to check security groups for.
 */
export interface SecurityGroupViewParameters {
  /**
   * ID of the target VM.
   */
  targetResourceId: string;
}

/**
 * Network interface and its custom security rules.
 */
export interface NetworkInterfaceAssociation {
  /**
   * Network interface ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Collection of custom security rules.
   */
  securityRules?: SecurityRule[];
}

/**
 * Network interface and its custom security rules.
 */
export interface SubnetAssociation {
  /**
   * Subnet ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Collection of custom security rules.
   */
  securityRules?: SecurityRule[];
}

/**
 * All security rules associated with the network interface.
 */
export interface SecurityRuleAssociations {
  networkInterfaceAssociation?: NetworkInterfaceAssociation;
  subnetAssociation?: SubnetAssociation;
  /**
   * Collection of default security rules of the network security group.
   */
  defaultSecurityRules?: SecurityRule[];
  /**
   * Collection of effective security rules.
   */
  effectiveSecurityRules?: EffectiveNetworkSecurityRule[];
}

/**
 * Network interface and all its associated security rules.
 */
export interface SecurityGroupNetworkInterface {
  /**
   * ID of the network interface.
   */
  id?: string;
  securityRuleAssociations?: SecurityRuleAssociations;
}

/**
 * The information about security rules applied to the specified VM.
 */
export interface SecurityGroupViewResult {
  /**
   * List of network interfaces on the specified VM.
   */
  networkInterfaces?: SecurityGroupNetworkInterface[];
}

/**
 * Describes the storage location for a packet capture session.
 */
export interface PacketCaptureStorageLocation {
  /**
   * The ID of the storage account to save the packet capture session. Required if no local file
   * path is provided.
   */
  storageId?: string;
  /**
   * The URI of the storage path to save the packet capture. Must be a well-formed URI describing
   * the location to save the packet capture.
   */
  storagePath?: string;
  /**
   * A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For
   * linux virtual machine it must start with /var/captures. Required if no storage ID is provided,
   * otherwise optional.
   */
  filePath?: string;
}

/**
 * Filter that is applied to packet capture request. Multiple filters can be applied.
 */
export interface PacketCaptureFilter {
  /**
   * Protocol to be filtered on. Possible values include: 'TCP', 'UDP', 'Any'. Default value:
   * 'Any'.
   */
  protocol?: PcProtocol;
  /**
   * Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry.
   * "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5"? for multiple entries. Multiple
   * ranges not currently supported. Mixing ranges with multiple entries not currently supported.
   * Default = null.
   */
  localIPAddress?: string;
  /**
   * Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry.
   * "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple entries. Multiple
   * ranges not currently supported. Mixing ranges with multiple entries not currently supported.
   * Default = null.
   */
  remoteIPAddress?: string;
  /**
   * Local port to be filtered on. Notation: "80" for single port entry."80-85" for range.
   * "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with
   * multiple entries not currently supported. Default = null.
   */
  localPort?: string;
  /**
   * Remote port to be filtered on. Notation: "80" for single port entry."80-85" for range.
   * "80;443;" for multiple entries. Multiple ranges not currently supported. Mixing ranges with
   * multiple entries not currently supported. Default = null.
   */
  remotePort?: string;
}

/**
 * Parameters that define the create packet capture operation.
 */
export interface PacketCaptureParameters {
  /**
   * The ID of the targeted resource, only VM is currently supported.
   */
  target: string;
  /**
   * Number of bytes captured per packet, the remaining bytes are truncated. Default value: 0.
   */
  bytesToCapturePerPacket?: number;
  /**
   * Maximum size of the capture output. Default value: 1073741824.
   */
  totalBytesPerSession?: number;
  /**
   * Maximum duration of the capture session in seconds. Default value: 18000.
   */
  timeLimitInSeconds?: number;
  storageLocation: PacketCaptureStorageLocation;
  filters?: PacketCaptureFilter[];
}

/**
 * Parameters that define the create packet capture operation.
 */
export interface PacketCapture {
  /**
   * The ID of the targeted resource, only VM is currently supported.
   */
  target: string;
  /**
   * Number of bytes captured per packet, the remaining bytes are truncated. Default value: 0.
   */
  bytesToCapturePerPacket?: number;
  /**
   * Maximum size of the capture output. Default value: 1073741824.
   */
  totalBytesPerSession?: number;
  /**
   * Maximum duration of the capture session in seconds. Default value: 18000.
   */
  timeLimitInSeconds?: number;
  storageLocation: PacketCaptureStorageLocation;
  filters?: PacketCaptureFilter[];
}

/**
 * Information about packet capture session.
 */
export interface PacketCaptureResult {
  /**
   * Name of the packet capture session.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * ID of the packet capture operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Default value: 'A unique read-only string that changes whenever the resource is updated.'.
   */
  etag?: string;
  /**
   * The ID of the targeted resource, only VM is currently supported.
   */
  target: string;
  /**
   * Number of bytes captured per packet, the remaining bytes are truncated. Default value: 0.
   */
  bytesToCapturePerPacket?: number;
  /**
   * Maximum size of the capture output. Default value: 1073741824.
   */
  totalBytesPerSession?: number;
  /**
   * Maximum duration of the capture session in seconds. Default value: 18000.
   */
  timeLimitInSeconds?: number;
  storageLocation: PacketCaptureStorageLocation;
  filters?: PacketCaptureFilter[];
  /**
   * The provisioning state of the packet capture session. Possible values include: 'Succeeded',
   * 'Updating', 'Deleting', 'Failed'
   */
  provisioningState?: ProvisioningState;
}

/**
 * Status of packet capture session.
 */
export interface PacketCaptureQueryStatusResult {
  /**
   * The name of the packet capture resource.
   */
  name?: string;
  /**
   * The ID of the packet capture resource.
   */
  id?: string;
  /**
   * The start time of the packet capture session.
   */
  captureStartTime?: Date;
  /**
   * The status of the packet capture session. Possible values include: 'NotStarted', 'Running',
   * 'Stopped', 'Error', 'Unknown'
   */
  packetCaptureStatus?: PcStatus;
  /**
   * The reason the current packet capture session was stopped.
   */
  stopReason?: string;
  /**
   * List of errors of packet capture session.
   */
  packetCaptureError?: PcError[];
}

/**
 * Parameters that define the resource to troubleshoot.
 */
export interface TroubleshootingParameters {
  /**
   * The target resource to troubleshoot.
   */
  targetResourceId: string;
  /**
   * The ID for the storage account to save the troubleshoot result.
   */
  storageId: string;
  /**
   * The path to the blob to save the troubleshoot result in.
   */
  storagePath: string;
}

/**
 * Parameters that define the resource to query the troubleshooting result.
 */
export interface QueryTroubleshootingParameters {
  /**
   * The target resource ID to query the troubleshooting result.
   */
  targetResourceId: string;
}

/**
 * Recommended actions based on discovered issues.
 */
export interface TroubleshootingRecommendedActions {
  /**
   * ID of the recommended action.
   */
  actionId?: string;
  /**
   * Description of recommended actions.
   */
  actionText?: string;
  /**
   * The uri linking to a documentation for the recommended troubleshooting actions.
   */
  actionUri?: string;
  /**
   * The information from the URI for the recommended troubleshooting actions.
   */
  actionUriText?: string;
}

/**
 * Information gained from troubleshooting of specified resource.
 */
export interface TroubleshootingDetails {
  /**
   * The id of the get troubleshoot operation.
   */
  id?: string;
  /**
   * Reason type of failure.
   */
  reasonType?: string;
  /**
   * A summary of troubleshooting.
   */
  summary?: string;
  /**
   * Details on troubleshooting results.
   */
  detail?: string;
  /**
   * List of recommended actions.
   */
  recommendedActions?: TroubleshootingRecommendedActions[];
}

/**
 * Troubleshooting information gained from specified resource.
 */
export interface TroubleshootingResult {
  /**
   * The start time of the troubleshooting.
   */
  startTime?: Date;
  /**
   * The end time of the troubleshooting.
   */
  endTime?: Date;
  /**
   * The result code of the troubleshooting.
   */
  code?: string;
  /**
   * Information from troubleshooting.
   */
  results?: TroubleshootingDetails[];
}

/**
 * Parameters that define the retention policy for flow log.
 */
export interface RetentionPolicyParameters {
  /**
   * Number of days to retain flow log records. Default value: 0.
   */
  days?: number;
  /**
   * Flag to enable/disable retention. Default value: false.
   */
  enabled?: boolean;
}

/**
 * Parameters that define a resource to query flow log status.
 */
export interface FlowLogStatusParameters {
  /**
   * The target resource where getting the flow logging status.
   */
  targetResourceId: string;
}

/**
 * Information on the configuration of flow log.
 */
export interface FlowLogInformation {
  /**
   * The ID of the resource to configure for flow logging.
   */
  targetResourceId: string;
  /**
   * ID of the storage account which is used to store the flow log.
   */
  storageId: string;
  /**
   * Flag to enable/disable flow logging.
   */
  enabled: boolean;
  retentionPolicy?: RetentionPolicyParameters;
}

/**
 * Parameters that define the source of the connection.
 */
export interface ConnectivitySource {
  /**
   * The ID of the resource from which a connectivity check will be initiated.
   */
  resourceId: string;
  /**
   * The source port from which a connectivity check will be performed.
   */
  port?: number;
}

/**
 * Parameters that define destination of connection.
 */
export interface ConnectivityDestination {
  /**
   * The ID of the resource to which a connection attempt will be made.
   */
  resourceId?: string;
  /**
   * The IP address or URI the resource to which a connection attempt will be made.
   */
  address?: string;
  /**
   * Port on which check connectivity will be performed.
   */
  port?: number;
}

/**
 * Parameters that determine how the connectivity check will be performed.
 */
export interface ConnectivityParameters {
  source: ConnectivitySource;
  destination: ConnectivityDestination;
}

/**
 * Information about an issue encountered in the process of checking for connectivity.
 */
export interface ConnectivityIssue {
  /**
   * The origin of the issue. Possible values include: 'Local', 'Inbound', 'Outbound'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly origin?: Origin;
  /**
   * The severity of the issue. Possible values include: 'Error', 'Warning'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly severity?: Severity;
  /**
   * The type of issue. Possible values include: 'Unknown', 'AgentStopped', 'GuestFirewall',
   * 'DnsResolution', 'SocketBind', 'NetworkSecurityRule', 'UserDefinedRoute', 'PortThrottled',
   * 'Platform'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: IssueType;
  /**
   * Provides additional context on the issue.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly context?: { [propertyName: string]: string }[];
}

/**
 * Information about a hop between the source and the destination.
 */
export interface ConnectivityHop {
  /**
   * The type of the hop.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The ID of the hop.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The IP address of the hop.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly address?: string;
  /**
   * The ID of the resource corresponding to this hop.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceId?: string;
  /**
   * List of next hop identifiers.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextHopIds?: string[];
  /**
   * List of issues.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly issues?: ConnectivityIssue[];
}

/**
 * Information on the connectivity status.
 */
export interface ConnectivityInformation {
  /**
   * List of hops between the source and the destination.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hops?: ConnectivityHop[];
  /**
   * The connection status. Possible values include: 'Unknown', 'Connected', 'Disconnected',
   * 'Degraded'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionStatus?: ConnectionStatus;
  /**
   * Average latency in milliseconds.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly avgLatencyInMs?: number;
  /**
   * Minimum latency in milliseconds.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly minLatencyInMs?: number;
  /**
   * Maximum latency in milliseconds.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxLatencyInMs?: number;
  /**
   * Total number of probes sent.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly probesSent?: number;
  /**
   * Number of failed probes.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly probesFailed?: number;
}

/**
 * Route Filter Rule Resource
 */
export interface PatchRouteFilterRule extends SubResource {
  /**
   * The access type of the rule. Valid values are: 'Allow', 'Deny'. Possible values include:
   * 'Allow', 'Deny'
   */
  access: Access;
  /**
   * The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020']
   */
  communities: string[];
  /**
   * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting',
   * 'Succeeded' and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Route Filter Resource.
 */
export interface PatchRouteFilter extends SubResource {
  /**
   * Collection of RouteFilterRules contained within a route filter.
   */
  rules?: RouteFilterRule[];
  /**
   * A collection of references to express route circuit peerings.
   */
  peerings?: ExpressRouteCircuitPeering[];
  /**
   * The provisioning state of the resource. Possible values are: 'Updating', 'Deleting',
   * 'Succeeded' and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Contains bgp community information offered in Service Community resources.
 */
export interface BGPCommunity {
  /**
   * The region which the service support. e.g. For O365, region is Global.
   */
  serviceSupportedRegion?: string;
  /**
   * The name of the bgp community. e.g. Skype.
   */
  communityName?: string;
  /**
   * The value of the bgp community. For more information:
   * https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
   */
  communityValue?: string;
  /**
   * The prefixes that the bgp community contains.
   */
  communityPrefixes?: string[];
  /**
   * Customer is authorized to use bgp community or not.
   */
  isAuthorizedToUse?: boolean;
  /**
   * The service group of the bgp community contains.
   */
  serviceGroup?: string;
}

/**
 * Service Community Properties.
 */
export interface BgpServiceCommunity extends Resource {
  /**
   * The name of the bgp community. e.g. Skype.
   */
  serviceName?: string;
  /**
   * Get a list of bgp communities.
   */
  bgpCommunities?: BGPCommunity[];
}

/**
 * The usage names.
 */
export interface UsageName {
  /**
   * A string describing the resource name.
   */
  value?: string;
  /**
   * A localized string describing the resource name.
   */
  localizedValue?: string;
}

/**
 * Describes network resource usage.
 */
export interface Usage {
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The current value of the usage.
   */
  currentValue: number;
  /**
   * The limit of usage.
   */
  limit: number;
  /**
   * The name of the type of usage.
   */
  name: UsageName;
}

/**
 * Peerings in a virtual network resource.
 */
export interface VirtualNetworkPeering extends SubResource {
  /**
   * Whether the VMs in the linked virtual network space would be able to access all the VMs in
   * local Virtual network space.
   */
  allowVirtualNetworkAccess?: boolean;
  /**
   * Whether the forwarded traffic from the VMs in the remote virtual network will be
   * allowed/disallowed.
   */
  allowForwardedTraffic?: boolean;
  /**
   * If gateway links can be used in remote virtual networking to link to this virtual network.
   */
  allowGatewayTransit?: boolean;
  /**
   * If remote gateways can be used on this virtual network. If the flag is set to true, and
   * allowGatewayTransit on remote peering is also true, virtual network will use gateways of
   * remote virtual network for transit. Only one peering can have this flag set to true. This flag
   * cannot be set if virtual network already has a gateway.
   */
  useRemoteGateways?: boolean;
  /**
   * The reference of the remote virtual network.
   */
  remoteVirtualNetwork?: SubResource;
  /**
   * The status of the virtual network peering. Possible values are 'Initiated', 'Connected', and
   * 'Disconnected'. Possible values include: 'Initiated', 'Connected', 'Disconnected'
   */
  peeringState?: VirtualNetworkPeeringState;
  /**
   * The provisioning state of the resource.
   */
  provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual
 * network.
 */
export interface AddressSpace {
  /**
   * A list of address blocks reserved for this virtual network in CIDR notation.
   */
  addressPrefixes?: string[];
}

/**
 * DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network.
 * Standard DHCP option for a subnet overrides VNET DHCP options.
 */
export interface DhcpOptions {
  /**
   * The list of DNS servers IP addresses.
   */
  dnsServers?: string[];
}

/**
 * Virtual Network resource.
 */
export interface VirtualNetwork extends Resource {
  /**
   * The AddressSpace that contains an array of IP address ranges that can be used by subnets.
   */
  addressSpace?: AddressSpace;
  /**
   * The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual
   * network.
   */
  dhcpOptions?: DhcpOptions;
  /**
   * A list of subnets in a Virtual Network.
   */
  subnets?: Subnet[];
  /**
   * A list of peerings in a Virtual Network.
   */
  virtualNetworkPeerings?: VirtualNetworkPeering[];
  /**
   * The resourceGuid property of the Virtual Network resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   */
  provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Response for CheckIPAddressAvailability API service call
 */
export interface IPAddressAvailabilityResult {
  /**
   * Private IP address availability.
   */
  available?: boolean;
  /**
   * Contains other available private IP addresses if the asked for address is taken.
   */
  availableIPAddresses?: string[];
}

/**
 * Usage strings container.
 */
export interface VirtualNetworkUsageName {
  /**
   * Localized subnet size and usage string.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localizedValue?: string;
  /**
   * Subnet size and usage string.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
}

/**
 * Usage details for subnet.
 */
export interface VirtualNetworkUsage {
  /**
   * Indicates number of IPs used from the Subnet.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentValue?: number;
  /**
   * Subnet identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Indicates the size of the subnet.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly limit?: number;
  /**
   * The name containing common and localized value for usage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: VirtualNetworkUsageName;
  /**
   * Usage units. Returns 'Count'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: string;
}

/**
 * IP configuration for virtual network gateway
 */
export interface VirtualNetworkGatewayIPConfiguration extends SubResource {
  /**
   * The private IP allocation method. Possible values are: 'Static' and 'Dynamic'. Possible values
   * include: 'Static', 'Dynamic'
   */
  privateIPAllocationMethod?: IPAllocationMethod;
  /**
   * The reference of the subnet resource.
   */
  subnet?: SubResource;
  /**
   * The reference of the public IP resource.
   */
  publicIPAddress?: SubResource;
  /**
   * The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting',
   * and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * VirtualNetworkGatewaySku details
 */
export interface VirtualNetworkGatewaySku {
  /**
   * Gateway SKU name. Possible values include: 'Basic', 'HighPerformance', 'Standard',
   * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3'
   */
  name?: VirtualNetworkGatewaySkuName;
  /**
   * Gateway SKU tier. Possible values include: 'Basic', 'HighPerformance', 'Standard',
   * 'UltraPerformance', 'VpnGw1', 'VpnGw2', 'VpnGw3'
   */
  tier?: VirtualNetworkGatewaySkuTier;
  /**
   * The capacity.
   */
  capacity?: number;
}

/**
 * VPN client root certificate of virtual network gateway
 */
export interface VpnClientRootCertificate extends SubResource {
  /**
   * The certificate public data.
   */
  publicCertData: string;
  /**
   * The provisioning state of the VPN client root certificate resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * VPN client revoked certificate of virtual network gateway.
 */
export interface VpnClientRevokedCertificate extends SubResource {
  /**
   * The revoked VPN client certificate thumbprint.
   */
  thumbprint?: string;
  /**
   * The provisioning state of the VPN client revoked certificate resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   */
  name?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * VpnClientConfiguration for P2S client.
 */
export interface VpnClientConfiguration {
  /**
   * The reference of the address space resource which represents Address space for P2S VpnClient.
   */
  vpnClientAddressPool?: AddressSpace;
  /**
   * VpnClientRootCertificate for virtual network gateway.
   */
  vpnClientRootCertificates?: VpnClientRootCertificate[];
  /**
   * VpnClientRevokedCertificate for Virtual network gateway.
   */
  vpnClientRevokedCertificates?: VpnClientRevokedCertificate[];
  /**
   * VpnClientProtocols for Virtual network gateway.
   */
  vpnClientProtocols?: VpnClientProtocol[];
  /**
   * The radius server address property of the VirtualNetworkGateway resource for vpn client
   * connection.
   */
  radiusServerAddress?: string;
  /**
   * The radius secret property of the VirtualNetworkGateway resource for vpn client connection.
   */
  radiusServerSecret?: string;
}

/**
 * BGP settings details
 */
export interface BgpSettings {
  /**
   * The BGP speaker's ASN.
   */
  asn?: number;
  /**
   * The BGP peering address and BGP identifier of this BGP speaker.
   */
  bgpPeeringAddress?: string;
  /**
   * The weight added to routes learned from this BGP speaker.
   */
  peerWeight?: number;
}

/**
 * BGP peer status details
 */
export interface BgpPeerStatus {
  /**
   * The virtual network gateway's local address
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localAddress?: string;
  /**
   * The remote BGP peer
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly neighbor?: string;
  /**
   * The autonomous system number of the remote BGP peer
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly asn?: number;
  /**
   * The BGP peer state. Possible values include: 'Unknown', 'Stopped', 'Idle', 'Connecting',
   * 'Connected'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: BgpPeerState;
  /**
   * For how long the peering has been up
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectedDuration?: string;
  /**
   * The number of routes learned from this peer
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly routesReceived?: number;
  /**
   * The number of BGP messages sent
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly messagesSent?: number;
  /**
   * The number of BGP messages received
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly messagesReceived?: number;
}

/**
 * Gateway routing details
 */
export interface GatewayRoute {
  /**
   * The gateway's local address
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly localAddress?: string;
  /**
   * The route's network prefix
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly network?: string;
  /**
   * The route's next hop
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextHop?: string;
  /**
   * The peer this route was learned from
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourcePeer?: string;
  /**
   * The source this route was learned from
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly origin?: string;
  /**
   * The route's AS path sequence
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly asPath?: string;
  /**
   * The route's weight
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly weight?: number;
}

/**
 * A common class for general resource information
 */
export interface VirtualNetworkGateway extends Resource {
  /**
   * IP configurations for virtual network gateway.
   */
  ipConfigurations?: VirtualNetworkGatewayIPConfiguration[];
  /**
   * The type of this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.
   * Possible values include: 'Vpn', 'ExpressRoute'
   */
  gatewayType?: VirtualNetworkGatewayType;
  /**
   * The type of this virtual network gateway. Possible values are: 'PolicyBased' and 'RouteBased'.
   * Possible values include: 'PolicyBased', 'RouteBased'
   */
  vpnType?: VpnType;
  /**
   * Whether BGP is enabled for this virtual network gateway or not.
   */
  enableBgp?: boolean;
  /**
   * ActiveActive flag
   */
  activeActive?: boolean;
  /**
   * The reference of the LocalNetworkGateway resource which represents local network site having
   * default routes. Assign Null value in case of removing existing default site setting.
   */
  gatewayDefaultSite?: SubResource;
  /**
   * The reference of the VirtualNetworkGatewaySku resource which represents the SKU selected for
   * Virtual network gateway.
   */
  sku?: VirtualNetworkGatewaySku;
  /**
   * The reference of the VpnClientConfiguration resource which represents the P2S VpnClient
   * configurations.
   */
  vpnClientConfiguration?: VpnClientConfiguration;
  /**
   * Virtual network gateway's BGP speaker settings.
   */
  bgpSettings?: BgpSettings;
  /**
   * The resource GUID property of the VirtualNetworkGateway resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the VirtualNetworkGateway resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Vpn Client Parameters for package generation
 */
export interface VpnClientParameters {
  /**
   * VPN client Processor Architecture. Possible values are: 'AMD64' and 'X86'. Possible values
   * include: 'Amd64', 'X86'
   */
  processorArchitecture?: ProcessorArchitecture;
  /**
   * VPN client Authentication Method. Possible values are: 'EAPTLS' and 'EAPMSCHAPv2'. Possible
   * values include: 'EAPTLS', 'EAPMSCHAPv2'
   */
  authenticationMethod?: AuthenticationMethod;
  /**
   * The public certificate data for the radius server authentication certificate as a Base-64
   * encoded string. Required only if external radius authentication has been configured with
   * EAPTLS authentication.
   */
  radiusServerAuthCertificate?: string;
  /**
   * A list of client root certificates public certificate data encoded as Base-64 strings.
   * Optional parameter for external radius based authentication with EAPTLS.
   */
  clientRootCertificates?: string[];
}

/**
 * Response for list BGP peer status API service call
 */
export interface BgpPeerStatusListResult {
  /**
   * List of BGP peers
   */
  value?: BgpPeerStatus[];
}

/**
 * List of virtual network gateway routes
 */
export interface GatewayRouteListResult {
  /**
   * List of gateway routes
   */
  value?: GatewayRoute[];
}

/**
 * VirtualNetworkGatewayConnection properties
 */
export interface TunnelConnectionHealth {
  /**
   * Tunnel name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tunnel?: string;
  /**
   * Virtual network Gateway connection status. Possible values include: 'Unknown', 'Connecting',
   * 'Connected', 'NotConnected'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * The Ingress Bytes Transferred in this connection
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The Egress Bytes Transferred in this connection
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly egressBytesTransferred?: number;
  /**
   * The time at which connection was established in Utc format.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastConnectionEstablishedUtcTime?: string;
}

/**
 * A common class for general resource information
 */
export interface LocalNetworkGateway extends Resource {
  /**
   * Local network site address space.
   */
  localNetworkAddressSpace?: AddressSpace;
  /**
   * IP address of local network gateway.
   */
  gatewayIpAddress?: string;
  /**
   * Local network gateway's BGP speaker settings.
   */
  bgpSettings?: BgpSettings;
  /**
   * The resource GUID property of the LocalNetworkGateway resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the LocalNetworkGateway resource. Possible values are: 'Updating',
   * 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * A unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * An IPSec Policy configuration for a virtual network gateway connection
 */
export interface IpsecPolicy {
  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for
   * a site to site VPN tunnel.
   */
  saLifeTimeSeconds: number;
  /**
   * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a
   * site to site VPN tunnel.
   */
  saDataSizeKilobytes: number;
  /**
   * The IPSec encryption algorithm (IKE phase 1). Possible values include: 'None', 'DES', 'DES3',
   * 'AES128', 'AES192', 'AES256', 'GCMAES128', 'GCMAES192', 'GCMAES256'
   */
  ipsecEncryption: IpsecEncryption;
  /**
   * The IPSec integrity algorithm (IKE phase 1). Possible values include: 'MD5', 'SHA1', 'SHA256',
   * 'GCMAES128', 'GCMAES192', 'GCMAES256'
   */
  ipsecIntegrity: IpsecIntegrity;
  /**
   * The IKE encryption algorithm (IKE phase 2). Possible values include: 'DES', 'DES3', 'AES128',
   * 'AES192', 'AES256'
   */
  ikeEncryption: IkeEncryption;
  /**
   * The IKE integrity algorithm (IKE phase 2). Possible values include: 'MD5', 'SHA1', 'SHA256',
   * 'SHA384'
   */
  ikeIntegrity: IkeIntegrity;
  /**
   * The DH Groups used in IKE Phase 1 for initial SA. Possible values include: 'None', 'DHGroup1',
   * 'DHGroup2', 'DHGroup14', 'DHGroup2048', 'ECP256', 'ECP384', 'DHGroup24'
   */
  dhGroup: DhGroup;
  /**
   * The DH Groups used in IKE Phase 2 for new child SA. Possible values include: 'None', 'PFS1',
   * 'PFS2', 'PFS2048', 'ECP256', 'ECP384', 'PFS24'
   */
  pfsGroup: PfsGroup;
}

/**
 * A common class for general resource information
 */
export interface VirtualNetworkGatewayConnection extends Resource {
  /**
   * The authorizationKey.
   */
  authorizationKey?: string;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway1: VirtualNetworkGateway;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway2?: VirtualNetworkGateway;
  /**
   * The reference to local network gateway resource.
   */
  localNetworkGateway2?: LocalNetworkGateway;
  /**
   * Gateway connection type. Possible values are: 'IPsec','Vnet2Vnet','ExpressRoute', and
   * 'VPNClient. Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
   */
  connectionType: VirtualNetworkGatewayConnectionType;
  /**
   * The routing weight.
   */
  routingWeight?: number;
  /**
   * The IPSec shared key.
   */
  sharedKey?: string;
  /**
   * Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting',
   * 'Connected' and 'NotConnected'. Possible values include: 'Unknown', 'Connecting', 'Connected',
   * 'NotConnected'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * Collection of all tunnels' connection health status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tunnelConnectionStatus?: TunnelConnectionHealth[];
  /**
   * The egress bytes transferred in this connection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly egressBytesTransferred?: number;
  /**
   * The ingress bytes transferred in this connection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The reference to peerings resource.
   */
  peer?: SubResource;
  /**
   * EnableBgp flag
   */
  enableBgp?: boolean;
  /**
   * Enable policy-based traffic selectors.
   */
  usePolicyBasedTrafficSelectors?: boolean;
  /**
   * The IPSec Policies to be considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * The resource GUID property of the VirtualNetworkGatewayConnection resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * The virtual network connection reset shared key
 */
export interface ConnectionResetSharedKey {
  /**
   * The virtual network connection reset shared key length, should between 1 and 128.
   */
  keyLength: number;
}

/**
 * Response for GetConnectionSharedKey API service call
 */
export interface ConnectionSharedKey {
  /**
   * The virtual network connection shared key value.
   */
  value: string;
}

/**
 * A reference to VirtualNetworkGateway or LocalNetworkGateway resource.
 */
export interface VirtualNetworkConnectionGatewayReference {
  /**
   * The ID of VirtualNetworkGateway or LocalNetworkGateway resource.
   */
  id: string;
}

/**
 * A common class for general resource information
 */
export interface VirtualNetworkGatewayConnectionListEntity extends Resource {
  /**
   * The authorizationKey.
   */
  authorizationKey?: string;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway1: VirtualNetworkConnectionGatewayReference;
  /**
   * The reference to virtual network gateway resource.
   */
  virtualNetworkGateway2?: VirtualNetworkConnectionGatewayReference;
  /**
   * The reference to local network gateway resource.
   */
  localNetworkGateway2?: VirtualNetworkConnectionGatewayReference;
  /**
   * Gateway connection type. Possible values are: 'IPsec','Vnet2Vnet','ExpressRoute', and
   * 'VPNClient. Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
   */
  connectionType: VirtualNetworkGatewayConnectionType;
  /**
   * The routing weight.
   */
  routingWeight?: number;
  /**
   * The IPSec shared key.
   */
  sharedKey?: string;
  /**
   * Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting',
   * 'Connected' and 'NotConnected'. Possible values include: 'Unknown', 'Connecting', 'Connected',
   * 'NotConnected'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionStatus?: VirtualNetworkGatewayConnectionStatus;
  /**
   * Collection of all tunnels' connection health status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tunnelConnectionStatus?: TunnelConnectionHealth[];
  /**
   * The egress bytes transferred in this connection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly egressBytesTransferred?: number;
  /**
   * The ingress bytes transferred in this connection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ingressBytesTransferred?: number;
  /**
   * The reference to peerings resource.
   */
  peer?: SubResource;
  /**
   * EnableBgp flag
   */
  enableBgp?: boolean;
  /**
   * Enable policy-based traffic selectors.
   */
  usePolicyBasedTrafficSelectors?: boolean;
  /**
   * The IPSec Policies to be considered by this connection.
   */
  ipsecPolicies?: IpsecPolicy[];
  /**
   * The resource GUID property of the VirtualNetworkGatewayConnection resource.
   */
  resourceGuid?: string;
  /**
   * The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are:
   * 'Updating', 'Deleting', and 'Failed'.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Gets a unique read-only string that changes whenever the resource is updated.
   */
  etag?: string;
}

/**
 * Optional Parameters.
 */
export interface ApplicationGatewaysBackendHealthOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands BackendAddressPool and BackendHttpSettings referenced in backend health.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface ApplicationGatewaysBeginBackendHealthOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands BackendAddressPool and BackendHttpSettings referenced in backend health.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface LoadBalancersGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface InboundNatRulesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface NetworkInterfacesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface NetworkSecurityGroupsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface PublicIPAddressesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface RouteFiltersGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced express route bgp peering resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface RouteTablesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworksGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworksCheckIPAddressAvailabilityOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The private IP address to be verified.
   */
  ipAddress?: string;
}

/**
 * Optional Parameters.
 */
export interface SubnetsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expands referenced resources.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworkGatewaysResetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Virtual network gateway vip address supplied to the begin reset of the active-active feature
   * enabled gateway.
   */
  gatewayVip?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworkGatewaysGetBgpPeerStatusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The IP address of the peer to retrieve the status of.
   */
  peer?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworkGatewaysBeginResetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Virtual network gateway vip address supplied to the begin reset of the active-active feature
   * enabled gateway.
   */
  gatewayVip?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualNetworkGatewaysBeginGetBgpPeerStatusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The IP address of the peer to retrieve the status of.
   */
  peer?: string;
}

/**
 * An interface representing NetworkManagementClientOptions.
 */
export interface NetworkManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Response for ListApplicationGateways API service call.
 * @extends Array<ApplicationGateway>
 */
export interface ApplicationGatewayListResult extends Array<ApplicationGateway> {
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ApplicationGatewayAvailableSslOptions API service call.
 * @extends Array<ApplicationGatewaySslPredefinedPolicy>
 */
export interface ApplicationGatewayAvailableSslPredefinedPolicies extends Array<ApplicationGatewaySslPredefinedPolicy> {
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListAvailableEndpointServices API service call.
 * @extends Array<EndpointServiceResult>
 */
export interface EndpointServicesListResult extends Array<EndpointServiceResult> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListAuthorizations API service call retrieves all authorizations that belongs to an
 * ExpressRouteCircuit.
 * @extends Array<ExpressRouteCircuitAuthorization>
 */
export interface AuthorizationListResult extends Array<ExpressRouteCircuitAuthorization> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListPeering API service call retrieves all peerings that belong to an
 * ExpressRouteCircuit.
 * @extends Array<ExpressRouteCircuitPeering>
 */
export interface ExpressRouteCircuitPeeringListResult extends Array<ExpressRouteCircuitPeering> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListExpressRouteCircuit API service call.
 * @extends Array<ExpressRouteCircuit>
 */
export interface ExpressRouteCircuitListResult extends Array<ExpressRouteCircuit> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListExpressRouteServiceProvider API service call.
 * @extends Array<ExpressRouteServiceProvider>
 */
export interface ExpressRouteServiceProviderListResult extends Array<ExpressRouteServiceProvider> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListLoadBalancers API service call.
 * @extends Array<LoadBalancer>
 */
export interface LoadBalancerListResult extends Array<LoadBalancer> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListBackendAddressPool API service call.
 * @extends Array<BackendAddressPool>
 */
export interface LoadBalancerBackendAddressPoolListResult extends Array<BackendAddressPool> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListFrontendIPConfiguration API service call.
 * @extends Array<FrontendIPConfiguration>
 */
export interface LoadBalancerFrontendIPConfigurationListResult extends Array<FrontendIPConfiguration> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListInboundNatRule API service call.
 * @extends Array<InboundNatRule>
 */
export interface InboundNatRuleListResult extends Array<InboundNatRule> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListLoadBalancingRule API service call.
 * @extends Array<LoadBalancingRule>
 */
export interface LoadBalancerLoadBalancingRuleListResult extends Array<LoadBalancingRule> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for the ListNetworkInterface API service call.
 * @extends Array<NetworkInterface>
 */
export interface NetworkInterfaceListResult extends Array<NetworkInterface> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListProbe API service call.
 * @extends Array<Probe>
 */
export interface LoadBalancerProbeListResult extends Array<Probe> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for list ip configurations API service call.
 * @extends Array<NetworkInterfaceIPConfiguration>
 */
export interface NetworkInterfaceIPConfigurationListResult extends Array<NetworkInterfaceIPConfiguration> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for list ip configurations API service call.
 * @extends Array<LoadBalancer>
 */
export interface NetworkInterfaceLoadBalancerListResult extends Array<LoadBalancer> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListNetworkSecurityGroups API service call.
 * @extends Array<NetworkSecurityGroup>
 */
export interface NetworkSecurityGroupListResult extends Array<NetworkSecurityGroup> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a
 * network security group.
 * @extends Array<SecurityRule>
 */
export interface SecurityRuleListResult extends Array<SecurityRule> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of network watcher resources.
 * @extends Array<NetworkWatcher>
 */
export interface NetworkWatcherListResult extends Array<NetworkWatcher> {
}

/**
 * @interface
 * List of packet capture sessions.
 * @extends Array<PacketCaptureResult>
 */
export interface PacketCaptureListResult extends Array<PacketCaptureResult> {
}

/**
 * @interface
 * Response for ListPublicIpAddresses API service call.
 * @extends Array<PublicIPAddress>
 */
export interface PublicIPAddressListResult extends Array<PublicIPAddress> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListRouteFilters API service call.
 * @extends Array<RouteFilter>
 */
export interface RouteFilterListResult extends Array<RouteFilter> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListRouteFilterRules API service call
 * @extends Array<RouteFilterRule>
 */
export interface RouteFilterRuleListResult extends Array<RouteFilterRule> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListRouteTable API service call.
 * @extends Array<RouteTable>
 */
export interface RouteTableListResult extends Array<RouteTable> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListRoute API service call
 * @extends Array<Route>
 */
export interface RouteListResult extends Array<Route> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListServiceCommunity API service call.
 * @extends Array<BgpServiceCommunity>
 */
export interface BgpServiceCommunityListResult extends Array<BgpServiceCommunity> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list usages operation response.
 * @extends Array<Usage>
 */
export interface UsagesListResult extends Array<Usage> {
  /**
   * URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListVirtualNetworks API service call.
 * @extends Array<VirtualNetwork>
 */
export interface VirtualNetworkListResult extends Array<VirtualNetwork> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the virtual networks GetUsage API service call.
 * @extends Array<VirtualNetworkUsage>
 */
export interface VirtualNetworkListUsageResult extends Array<VirtualNetworkUsage> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network
 * @extends Array<Subnet>
 */
export interface SubnetListResult extends Array<Subnet> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual
 * network.
 * @extends Array<VirtualNetworkPeering>
 */
export interface VirtualNetworkPeeringListResult extends Array<VirtualNetworkPeering> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Response for the ListVirtualNetworkGateways API service call.
 * @extends Array<VirtualNetworkGateway>
 */
export interface VirtualNetworkGatewayListResult extends Array<VirtualNetworkGateway> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for the VirtualNetworkGatewayListConnections API service call
 * @extends Array<VirtualNetworkGatewayConnectionListEntity>
 */
export interface VirtualNetworkGatewayListConnectionsResult extends Array<VirtualNetworkGatewayConnectionListEntity> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for the ListVirtualNetworkGatewayConnections API service call
 * @extends Array<VirtualNetworkGatewayConnection>
 */
export interface VirtualNetworkGatewayConnectionListResult extends Array<VirtualNetworkGatewayConnection> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response for ListLocalNetworkGateways API service call.
 * @extends Array<LocalNetworkGateway>
 */
export interface LocalNetworkGatewayListResult extends Array<LocalNetworkGateway> {
  /**
   * The URL to get the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for TransportProtocol.
 * Possible values include: 'Udp', 'Tcp'
 * @readonly
 * @enum {string}
 */
export type TransportProtocol = 'Udp' | 'Tcp';

/**
 * Defines values for IPAllocationMethod.
 * Possible values include: 'Static', 'Dynamic'
 * @readonly
 * @enum {string}
 */
export type IPAllocationMethod = 'Static' | 'Dynamic';

/**
 * Defines values for IPVersion.
 * Possible values include: 'IPv4', 'IPv6'
 * @readonly
 * @enum {string}
 */
export type IPVersion = 'IPv4' | 'IPv6';

/**
 * Defines values for SecurityRuleProtocol.
 * Possible values include: 'Tcp', 'Udp', '*'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleProtocol = 'Tcp' | 'Udp' | '*';

/**
 * Defines values for SecurityRuleAccess.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleAccess = 'Allow' | 'Deny';

/**
 * Defines values for SecurityRuleDirection.
 * Possible values include: 'Inbound', 'Outbound'
 * @readonly
 * @enum {string}
 */
export type SecurityRuleDirection = 'Inbound' | 'Outbound';

/**
 * Defines values for RouteNextHopType.
 * Possible values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance',
 * 'None'
 * @readonly
 * @enum {string}
 */
export type RouteNextHopType = 'VirtualNetworkGateway' | 'VnetLocal' | 'Internet' | 'VirtualAppliance' | 'None';

/**
 * Defines values for PublicIPAddressSkuName.
 * Possible values include: 'Basic', 'Standard'
 * @readonly
 * @enum {string}
 */
export type PublicIPAddressSkuName = 'Basic' | 'Standard';

/**
 * Defines values for ApplicationGatewayProtocol.
 * Possible values include: 'Http', 'Https'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayProtocol = 'Http' | 'Https';

/**
 * Defines values for ApplicationGatewayCookieBasedAffinity.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayCookieBasedAffinity = 'Enabled' | 'Disabled';

/**
 * Defines values for ApplicationGatewayBackendHealthServerHealth.
 * Possible values include: 'Unknown', 'Up', 'Down', 'Partial', 'Draining'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayBackendHealthServerHealth = 'Unknown' | 'Up' | 'Down' | 'Partial' | 'Draining';

/**
 * Defines values for ApplicationGatewaySkuName.
 * Possible values include: 'Standard_Small', 'Standard_Medium', 'Standard_Large', 'WAF_Medium',
 * 'WAF_Large'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySkuName = 'Standard_Small' | 'Standard_Medium' | 'Standard_Large' | 'WAF_Medium' | 'WAF_Large';

/**
 * Defines values for ApplicationGatewayTier.
 * Possible values include: 'Standard', 'WAF'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayTier = 'Standard' | 'WAF';

/**
 * Defines values for ApplicationGatewaySslProtocol.
 * Possible values include: 'TLSv1_0', 'TLSv1_1', 'TLSv1_2'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySslProtocol = 'TLSv1_0' | 'TLSv1_1' | 'TLSv1_2';

/**
 * Defines values for ApplicationGatewaySslPolicyType.
 * Possible values include: 'Predefined', 'Custom'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySslPolicyType = 'Predefined' | 'Custom';

/**
 * Defines values for ApplicationGatewaySslPolicyName.
 * Possible values include: 'AppGwSslPolicy20150501', 'AppGwSslPolicy20170401',
 * 'AppGwSslPolicy20170401S'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySslPolicyName = 'AppGwSslPolicy20150501' | 'AppGwSslPolicy20170401' | 'AppGwSslPolicy20170401S';

/**
 * Defines values for ApplicationGatewaySslCipherSuite.
 * Possible values include: 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
 * 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',
 * 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA', 'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
 * 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256', 'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
 * 'TLS_DHE_RSA_WITH_AES_128_CBC_SHA', 'TLS_RSA_WITH_AES_256_GCM_SHA384',
 * 'TLS_RSA_WITH_AES_128_GCM_SHA256', 'TLS_RSA_WITH_AES_256_CBC_SHA256',
 * 'TLS_RSA_WITH_AES_128_CBC_SHA256', 'TLS_RSA_WITH_AES_256_CBC_SHA',
 * 'TLS_RSA_WITH_AES_128_CBC_SHA', 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
 * 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256', 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
 * 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256', 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
 * 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA', 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256',
 * 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256', 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA',
 * 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA', 'TLS_RSA_WITH_3DES_EDE_CBC_SHA',
 * 'TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA', 'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
 * 'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewaySslCipherSuite = 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384' | 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' | 'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA' | 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA' | 'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384' | 'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256' | 'TLS_DHE_RSA_WITH_AES_256_CBC_SHA' | 'TLS_DHE_RSA_WITH_AES_128_CBC_SHA' | 'TLS_RSA_WITH_AES_256_GCM_SHA384' | 'TLS_RSA_WITH_AES_128_GCM_SHA256' | 'TLS_RSA_WITH_AES_256_CBC_SHA256' | 'TLS_RSA_WITH_AES_128_CBC_SHA256' | 'TLS_RSA_WITH_AES_256_CBC_SHA' | 'TLS_RSA_WITH_AES_128_CBC_SHA' | 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384' | 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256' | 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384' | 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256' | 'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA' | 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA' | 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256' | 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256' | 'TLS_DHE_DSS_WITH_AES_256_CBC_SHA' | 'TLS_DHE_DSS_WITH_AES_128_CBC_SHA' | 'TLS_RSA_WITH_3DES_EDE_CBC_SHA' | 'TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA' | 'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256' | 'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384';

/**
 * Defines values for ApplicationGatewayRequestRoutingRuleType.
 * Possible values include: 'Basic', 'PathBasedRouting'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayRequestRoutingRuleType = 'Basic' | 'PathBasedRouting';

/**
 * Defines values for ApplicationGatewayRedirectType.
 * Possible values include: 'Permanent', 'Found', 'SeeOther', 'Temporary'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayRedirectType = 'Permanent' | 'Found' | 'SeeOther' | 'Temporary';

/**
 * Defines values for ApplicationGatewayOperationalState.
 * Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayOperationalState = 'Stopped' | 'Starting' | 'Running' | 'Stopping';

/**
 * Defines values for ApplicationGatewayFirewallMode.
 * Possible values include: 'Detection', 'Prevention'
 * @readonly
 * @enum {string}
 */
export type ApplicationGatewayFirewallMode = 'Detection' | 'Prevention';

/**
 * Defines values for AuthorizationUseStatus.
 * Possible values include: 'Available', 'InUse'
 * @readonly
 * @enum {string}
 */
export type AuthorizationUseStatus = 'Available' | 'InUse';

/**
 * Defines values for ExpressRouteCircuitPeeringAdvertisedPublicPrefixState.
 * Possible values include: 'NotConfigured', 'Configuring', 'Configured', 'ValidationNeeded'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = 'NotConfigured' | 'Configuring' | 'Configured' | 'ValidationNeeded';

/**
 * Defines values for Access.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type Access = 'Allow' | 'Deny';

/**
 * Defines values for ExpressRouteCircuitPeeringType.
 * Possible values include: 'AzurePublicPeering', 'AzurePrivatePeering', 'MicrosoftPeering'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitPeeringType = 'AzurePublicPeering' | 'AzurePrivatePeering' | 'MicrosoftPeering';

/**
 * Defines values for ExpressRouteCircuitPeeringState.
 * Possible values include: 'Disabled', 'Enabled'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitPeeringState = 'Disabled' | 'Enabled';

/**
 * Defines values for ExpressRouteCircuitSkuTier.
 * Possible values include: 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitSkuTier = 'Standard' | 'Premium';

/**
 * Defines values for ExpressRouteCircuitSkuFamily.
 * Possible values include: 'UnlimitedData', 'MeteredData'
 * @readonly
 * @enum {string}
 */
export type ExpressRouteCircuitSkuFamily = 'UnlimitedData' | 'MeteredData';

/**
 * Defines values for ServiceProviderProvisioningState.
 * Possible values include: 'NotProvisioned', 'Provisioning', 'Provisioned', 'Deprovisioning'
 * @readonly
 * @enum {string}
 */
export type ServiceProviderProvisioningState = 'NotProvisioned' | 'Provisioning' | 'Provisioned' | 'Deprovisioning';

/**
 * Defines values for LoadBalancerSkuName.
 * Possible values include: 'Basic', 'Standard'
 * @readonly
 * @enum {string}
 */
export type LoadBalancerSkuName = 'Basic' | 'Standard';

/**
 * Defines values for LoadDistribution.
 * Possible values include: 'Default', 'SourceIP', 'SourceIPProtocol'
 * @readonly
 * @enum {string}
 */
export type LoadDistribution = 'Default' | 'SourceIP' | 'SourceIPProtocol';

/**
 * Defines values for ProbeProtocol.
 * Possible values include: 'Http', 'Tcp'
 * @readonly
 * @enum {string}
 */
export type ProbeProtocol = 'Http' | 'Tcp';

/**
 * Defines values for NetworkOperationStatus.
 * Possible values include: 'InProgress', 'Succeeded', 'Failed'
 * @readonly
 * @enum {string}
 */
export type NetworkOperationStatus = 'InProgress' | 'Succeeded' | 'Failed';

/**
 * Defines values for EffectiveSecurityRuleProtocol.
 * Possible values include: 'Tcp', 'Udp', 'All'
 * @readonly
 * @enum {string}
 */
export type EffectiveSecurityRuleProtocol = 'Tcp' | 'Udp' | 'All';

/**
 * Defines values for EffectiveRouteSource.
 * Possible values include: 'Unknown', 'User', 'VirtualNetworkGateway', 'Default'
 * @readonly
 * @enum {string}
 */
export type EffectiveRouteSource = 'Unknown' | 'User' | 'VirtualNetworkGateway' | 'Default';

/**
 * Defines values for EffectiveRouteState.
 * Possible values include: 'Active', 'Invalid'
 * @readonly
 * @enum {string}
 */
export type EffectiveRouteState = 'Active' | 'Invalid';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Succeeded' | 'Updating' | 'Deleting' | 'Failed';

/**
 * Defines values for AssociationType.
 * Possible values include: 'Associated', 'Contains'
 * @readonly
 * @enum {string}
 */
export type AssociationType = 'Associated' | 'Contains';

/**
 * Defines values for Direction.
 * Possible values include: 'Inbound', 'Outbound'
 * @readonly
 * @enum {string}
 */
export type Direction = 'Inbound' | 'Outbound';

/**
 * Defines values for Protocol.
 * Possible values include: 'TCP', 'UDP'
 * @readonly
 * @enum {string}
 */
export type Protocol = 'TCP' | 'UDP';

/**
 * Defines values for NextHopType.
 * Possible values include: 'Internet', 'VirtualAppliance', 'VirtualNetworkGateway', 'VnetLocal',
 * 'HyperNetGateway', 'None'
 * @readonly
 * @enum {string}
 */
export type NextHopType = 'Internet' | 'VirtualAppliance' | 'VirtualNetworkGateway' | 'VnetLocal' | 'HyperNetGateway' | 'None';

/**
 * Defines values for PcProtocol.
 * Possible values include: 'TCP', 'UDP', 'Any'
 * @readonly
 * @enum {string}
 */
export type PcProtocol = 'TCP' | 'UDP' | 'Any';

/**
 * Defines values for PcStatus.
 * Possible values include: 'NotStarted', 'Running', 'Stopped', 'Error', 'Unknown'
 * @readonly
 * @enum {string}
 */
export type PcStatus = 'NotStarted' | 'Running' | 'Stopped' | 'Error' | 'Unknown';

/**
 * Defines values for PcError.
 * Possible values include: 'InternalError', 'AgentStopped', 'CaptureFailed', 'LocalFileFailed',
 * 'StorageFailed'
 * @readonly
 * @enum {string}
 */
export type PcError = 'InternalError' | 'AgentStopped' | 'CaptureFailed' | 'LocalFileFailed' | 'StorageFailed';

/**
 * Defines values for Origin.
 * Possible values include: 'Local', 'Inbound', 'Outbound'
 * @readonly
 * @enum {string}
 */
export type Origin = 'Local' | 'Inbound' | 'Outbound';

/**
 * Defines values for Severity.
 * Possible values include: 'Error', 'Warning'
 * @readonly
 * @enum {string}
 */
export type Severity = 'Error' | 'Warning';

/**
 * Defines values for IssueType.
 * Possible values include: 'Unknown', 'AgentStopped', 'GuestFirewall', 'DnsResolution',
 * 'SocketBind', 'NetworkSecurityRule', 'UserDefinedRoute', 'PortThrottled', 'Platform'
 * @readonly
 * @enum {string}
 */
export type IssueType = 'Unknown' | 'AgentStopped' | 'GuestFirewall' | 'DnsResolution' | 'SocketBind' | 'NetworkSecurityRule' | 'UserDefinedRoute' | 'PortThrottled' | 'Platform';

/**
 * Defines values for ConnectionStatus.
 * Possible values include: 'Unknown', 'Connected', 'Disconnected', 'Degraded'
 * @readonly
 * @enum {string}
 */
export type ConnectionStatus = 'Unknown' | 'Connected' | 'Disconnected' | 'Degraded';

/**
 * Defines values for VirtualNetworkPeeringState.
 * Possible values include: 'Initiated', 'Connected', 'Disconnected'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkPeeringState = 'Initiated' | 'Connected' | 'Disconnected';

/**
 * Defines values for VirtualNetworkGatewayType.
 * Possible values include: 'Vpn', 'ExpressRoute'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayType = 'Vpn' | 'ExpressRoute';

/**
 * Defines values for VpnType.
 * Possible values include: 'PolicyBased', 'RouteBased'
 * @readonly
 * @enum {string}
 */
export type VpnType = 'PolicyBased' | 'RouteBased';

/**
 * Defines values for VirtualNetworkGatewaySkuName.
 * Possible values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance', 'VpnGw1',
 * 'VpnGw2', 'VpnGw3'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewaySkuName = 'Basic' | 'HighPerformance' | 'Standard' | 'UltraPerformance' | 'VpnGw1' | 'VpnGw2' | 'VpnGw3';

/**
 * Defines values for VirtualNetworkGatewaySkuTier.
 * Possible values include: 'Basic', 'HighPerformance', 'Standard', 'UltraPerformance', 'VpnGw1',
 * 'VpnGw2', 'VpnGw3'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewaySkuTier = 'Basic' | 'HighPerformance' | 'Standard' | 'UltraPerformance' | 'VpnGw1' | 'VpnGw2' | 'VpnGw3';

/**
 * Defines values for VpnClientProtocol.
 * Possible values include: 'IkeV2', 'SSTP'
 * @readonly
 * @enum {string}
 */
export type VpnClientProtocol = 'IkeV2' | 'SSTP';

/**
 * Defines values for BgpPeerState.
 * Possible values include: 'Unknown', 'Stopped', 'Idle', 'Connecting', 'Connected'
 * @readonly
 * @enum {string}
 */
export type BgpPeerState = 'Unknown' | 'Stopped' | 'Idle' | 'Connecting' | 'Connected';

/**
 * Defines values for ProcessorArchitecture.
 * Possible values include: 'Amd64', 'X86'
 * @readonly
 * @enum {string}
 */
export type ProcessorArchitecture = 'Amd64' | 'X86';

/**
 * Defines values for AuthenticationMethod.
 * Possible values include: 'EAPTLS', 'EAPMSCHAPv2'
 * @readonly
 * @enum {string}
 */
export type AuthenticationMethod = 'EAPTLS' | 'EAPMSCHAPv2';

/**
 * Defines values for VirtualNetworkGatewayConnectionStatus.
 * Possible values include: 'Unknown', 'Connecting', 'Connected', 'NotConnected'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayConnectionStatus = 'Unknown' | 'Connecting' | 'Connected' | 'NotConnected';

/**
 * Defines values for VirtualNetworkGatewayConnectionType.
 * Possible values include: 'IPsec', 'Vnet2Vnet', 'ExpressRoute', 'VPNClient'
 * @readonly
 * @enum {string}
 */
export type VirtualNetworkGatewayConnectionType = 'IPsec' | 'Vnet2Vnet' | 'ExpressRoute' | 'VPNClient';

/**
 * Defines values for IpsecEncryption.
 * Possible values include: 'None', 'DES', 'DES3', 'AES128', 'AES192', 'AES256', 'GCMAES128',
 * 'GCMAES192', 'GCMAES256'
 * @readonly
 * @enum {string}
 */
export type IpsecEncryption = 'None' | 'DES' | 'DES3' | 'AES128' | 'AES192' | 'AES256' | 'GCMAES128' | 'GCMAES192' | 'GCMAES256';

/**
 * Defines values for IpsecIntegrity.
 * Possible values include: 'MD5', 'SHA1', 'SHA256', 'GCMAES128', 'GCMAES192', 'GCMAES256'
 * @readonly
 * @enum {string}
 */
export type IpsecIntegrity = 'MD5' | 'SHA1' | 'SHA256' | 'GCMAES128' | 'GCMAES192' | 'GCMAES256';

/**
 * Defines values for IkeEncryption.
 * Possible values include: 'DES', 'DES3', 'AES128', 'AES192', 'AES256'
 * @readonly
 * @enum {string}
 */
export type IkeEncryption = 'DES' | 'DES3' | 'AES128' | 'AES192' | 'AES256';

/**
 * Defines values for IkeIntegrity.
 * Possible values include: 'MD5', 'SHA1', 'SHA256', 'SHA384'
 * @readonly
 * @enum {string}
 */
export type IkeIntegrity = 'MD5' | 'SHA1' | 'SHA256' | 'SHA384';

/**
 * Defines values for DhGroup.
 * Possible values include: 'None', 'DHGroup1', 'DHGroup2', 'DHGroup14', 'DHGroup2048', 'ECP256',
 * 'ECP384', 'DHGroup24'
 * @readonly
 * @enum {string}
 */
export type DhGroup = 'None' | 'DHGroup1' | 'DHGroup2' | 'DHGroup14' | 'DHGroup2048' | 'ECP256' | 'ECP384' | 'DHGroup24';

/**
 * Defines values for PfsGroup.
 * Possible values include: 'None', 'PFS1', 'PFS2', 'PFS2048', 'ECP256', 'ECP384', 'PFS24'
 * @readonly
 * @enum {string}
 */
export type PfsGroup = 'None' | 'PFS1' | 'PFS2' | 'PFS2048' | 'ECP256' | 'ECP384' | 'PFS24';

/**
 * Contains response data for the get operation.
 */
export type ApplicationGatewaysGetResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ApplicationGatewaysCreateOrUpdateResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ApplicationGatewaysListResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type ApplicationGatewaysListAllResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the backendHealth operation.
 */
export type ApplicationGatewaysBackendHealthResponse = ApplicationGatewayBackendHealth & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayBackendHealth;
    };
};

/**
 * Contains response data for the listAvailableWafRuleSets operation.
 */
export type ApplicationGatewaysListAvailableWafRuleSetsResponse = ApplicationGatewayAvailableWafRuleSetsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayAvailableWafRuleSetsResult;
    };
};

/**
 * Contains response data for the listAvailableSslOptions operation.
 */
export type ApplicationGatewaysListAvailableSslOptionsResponse = ApplicationGatewayAvailableSslOptions & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayAvailableSslOptions;
    };
};

/**
 * Contains response data for the listAvailableSslPredefinedPolicies operation.
 */
export type ApplicationGatewaysListAvailableSslPredefinedPoliciesResponse = ApplicationGatewayAvailableSslPredefinedPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayAvailableSslPredefinedPolicies;
    };
};

/**
 * Contains response data for the getSslPredefinedPolicy operation.
 */
export type ApplicationGatewaysGetSslPredefinedPolicyResponse = ApplicationGatewaySslPredefinedPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewaySslPredefinedPolicy;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ApplicationGatewaysBeginCreateOrUpdateResponse = ApplicationGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGateway;
    };
};

/**
 * Contains response data for the beginBackendHealth operation.
 */
export type ApplicationGatewaysBeginBackendHealthResponse = ApplicationGatewayBackendHealth & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayBackendHealth;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ApplicationGatewaysListNextResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type ApplicationGatewaysListAllNextResponse = ApplicationGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayListResult;
    };
};

/**
 * Contains response data for the listAvailableSslPredefinedPoliciesNext operation.
 */
export type ApplicationGatewaysListAvailableSslPredefinedPoliciesNextResponse = ApplicationGatewayAvailableSslPredefinedPolicies & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationGatewayAvailableSslPredefinedPolicies;
    };
};

/**
 * Contains response data for the checkDnsNameAvailability operation.
 */
export type CheckDnsNameAvailabilityResponse = DnsNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DnsNameAvailabilityResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AvailableEndpointServicesListResponse = EndpointServicesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EndpointServicesListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailableEndpointServicesListNextResponse = EndpointServicesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EndpointServicesListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitAuthorizationsGetResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitAuthorization;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitAuthorizationsCreateOrUpdateResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitAuthorization;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitAuthorizationsListResponse = AuthorizationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCircuitAuthorizationsBeginCreateOrUpdateResponse = ExpressRouteCircuitAuthorization & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitAuthorization;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitAuthorizationsListNextResponse = AuthorizationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitPeeringsGetResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeering;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitPeeringsCreateOrUpdateResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeering;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitPeeringsListResponse = ExpressRouteCircuitPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeeringListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCircuitPeeringsBeginCreateOrUpdateResponse = ExpressRouteCircuitPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeering;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitPeeringsListNextResponse = ExpressRouteCircuitPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitPeeringListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExpressRouteCircuitsGetResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExpressRouteCircuitsCreateOrUpdateResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the listArpTable operation.
 */
export type ExpressRouteCircuitsListArpTableResponse = ExpressRouteCircuitsArpTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsArpTableListResult;
    };
};

/**
 * Contains response data for the listRoutesTable operation.
 */
export type ExpressRouteCircuitsListRoutesTableResponse = ExpressRouteCircuitsRoutesTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableListResult;
    };
};

/**
 * Contains response data for the listRoutesTableSummary operation.
 */
export type ExpressRouteCircuitsListRoutesTableSummaryResponse = ExpressRouteCircuitsRoutesTableSummaryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableSummaryListResult;
    };
};

/**
 * Contains response data for the getStats operation.
 */
export type ExpressRouteCircuitsGetStatsResponse = ExpressRouteCircuitStats & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitStats;
    };
};

/**
 * Contains response data for the getPeeringStats operation.
 */
export type ExpressRouteCircuitsGetPeeringStatsResponse = ExpressRouteCircuitStats & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitStats;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteCircuitsListResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type ExpressRouteCircuitsListAllResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ExpressRouteCircuitsBeginCreateOrUpdateResponse = ExpressRouteCircuit & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuit;
    };
};

/**
 * Contains response data for the beginListArpTable operation.
 */
export type ExpressRouteCircuitsBeginListArpTableResponse = ExpressRouteCircuitsArpTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsArpTableListResult;
    };
};

/**
 * Contains response data for the beginListRoutesTable operation.
 */
export type ExpressRouteCircuitsBeginListRoutesTableResponse = ExpressRouteCircuitsRoutesTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableListResult;
    };
};

/**
 * Contains response data for the beginListRoutesTableSummary operation.
 */
export type ExpressRouteCircuitsBeginListRoutesTableSummaryResponse = ExpressRouteCircuitsRoutesTableSummaryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitsRoutesTableSummaryListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteCircuitsListNextResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type ExpressRouteCircuitsListAllNextResponse = ExpressRouteCircuitListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteCircuitListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExpressRouteServiceProvidersListResponse = ExpressRouteServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteServiceProviderListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExpressRouteServiceProvidersListNextResponse = ExpressRouteServiceProviderListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressRouteServiceProviderListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancersGetResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LoadBalancersCreateOrUpdateResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type LoadBalancersListAllResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancersListResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LoadBalancersBeginCreateOrUpdateResponse = LoadBalancer & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancer;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type LoadBalancersListAllNextResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancersListNextResponse = LoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerBackendAddressPoolsListResponse = LoadBalancerBackendAddressPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerBackendAddressPoolListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerBackendAddressPoolsGetResponse = BackendAddressPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BackendAddressPool;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerBackendAddressPoolsListNextResponse = LoadBalancerBackendAddressPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerBackendAddressPoolListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerFrontendIPConfigurationsListResponse = LoadBalancerFrontendIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerFrontendIPConfigurationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerFrontendIPConfigurationsGetResponse = FrontendIPConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FrontendIPConfiguration;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerFrontendIPConfigurationsListNextResponse = LoadBalancerFrontendIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerFrontendIPConfigurationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type InboundNatRulesListResponse = InboundNatRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type InboundNatRulesGetResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type InboundNatRulesCreateOrUpdateResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRule;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type InboundNatRulesBeginCreateOrUpdateResponse = InboundNatRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type InboundNatRulesListNextResponse = InboundNatRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InboundNatRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerLoadBalancingRulesListResponse = LoadBalancerLoadBalancingRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerLoadBalancingRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerLoadBalancingRulesGetResponse = LoadBalancingRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancingRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerLoadBalancingRulesListNextResponse = LoadBalancerLoadBalancingRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerLoadBalancingRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerNetworkInterfacesListResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerNetworkInterfacesListNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LoadBalancerProbesListResponse = LoadBalancerProbeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerProbeListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LoadBalancerProbesGetResponse = Probe & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Probe;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LoadBalancerProbesListNextResponse = LoadBalancerProbeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LoadBalancerProbeListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfacesGetResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkInterfacesCreateOrUpdateResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkInterfacesListAllResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfacesListResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the getEffectiveRouteTable operation.
 */
export type NetworkInterfacesGetEffectiveRouteTableResponse = EffectiveRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveRouteListResult;
    };
};

/**
 * Contains response data for the listEffectiveNetworkSecurityGroups operation.
 */
export type NetworkInterfacesListEffectiveNetworkSecurityGroupsResponse = EffectiveNetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveNetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMNetworkInterfaces operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetNetworkInterfaces operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the getVirtualMachineScaleSetNetworkInterface operation.
 */
export type NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type NetworkInterfacesBeginCreateOrUpdateResponse = NetworkInterface & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterface;
    };
};

/**
 * Contains response data for the beginGetEffectiveRouteTable operation.
 */
export type NetworkInterfacesBeginGetEffectiveRouteTableResponse = EffectiveRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveRouteListResult;
    };
};

/**
 * Contains response data for the beginListEffectiveNetworkSecurityGroups operation.
 */
export type NetworkInterfacesBeginListEffectiveNetworkSecurityGroupsResponse = EffectiveNetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EffectiveNetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkInterfacesListAllNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfacesListNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMNetworkInterfacesNext operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetNetworkInterfacesNext operation.
 */
export type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesNextResponse = NetworkInterfaceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfaceIPConfigurationsListResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfigurationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkInterfaceIPConfigurationsGetResponse = NetworkInterfaceIPConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfiguration;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfaceIPConfigurationsListNextResponse = NetworkInterfaceIPConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceIPConfigurationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkInterfaceLoadBalancersListResponse = NetworkInterfaceLoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceLoadBalancerListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkInterfaceLoadBalancersListNextResponse = NetworkInterfaceLoadBalancerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkInterfaceLoadBalancerListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkSecurityGroupsGetResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkSecurityGroupsCreateOrUpdateResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkSecurityGroupsListAllResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkSecurityGroupsListResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type NetworkSecurityGroupsBeginCreateOrUpdateResponse = NetworkSecurityGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroup;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type NetworkSecurityGroupsListAllNextResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type NetworkSecurityGroupsListNextResponse = NetworkSecurityGroupListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkSecurityGroupListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SecurityRulesGetResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SecurityRulesCreateOrUpdateResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SecurityRulesListResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SecurityRulesBeginCreateOrUpdateResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SecurityRulesListNextResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DefaultSecurityRulesListResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DefaultSecurityRulesGetResponse = SecurityRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRule;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type DefaultSecurityRulesListNextResponse = SecurityRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityRuleListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type NetworkWatchersCreateOrUpdateResponse = NetworkWatcher & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkWatcher;
    };
};

/**
 * Contains response data for the get operation.
 */
export type NetworkWatchersGetResponse = NetworkWatcher & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkWatcher;
    };
};

/**
 * Contains response data for the list operation.
 */
export type NetworkWatchersListResponse = NetworkWatcherListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkWatcherListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type NetworkWatchersListAllResponse = NetworkWatcherListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NetworkWatcherListResult;
    };
};

/**
 * Contains response data for the getTopology operation.
 */
export type NetworkWatchersGetTopologyResponse = Topology & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Topology;
    };
};

/**
 * Contains response data for the verifyIPFlow operation.
 */
export type NetworkWatchersVerifyIPFlowResponse = VerificationIPFlowResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VerificationIPFlowResult;
    };
};

/**
 * Contains response data for the getNextHop operation.
 */
export type NetworkWatchersGetNextHopResponse = NextHopResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NextHopResult;
    };
};

/**
 * Contains response data for the getVMSecurityRules operation.
 */
export type NetworkWatchersGetVMSecurityRulesResponse = SecurityGroupViewResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityGroupViewResult;
    };
};

/**
 * Contains response data for the getTroubleshooting operation.
 */
export type NetworkWatchersGetTroubleshootingResponse = TroubleshootingResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TroubleshootingResult;
    };
};

/**
 * Contains response data for the getTroubleshootingResult operation.
 */
export type NetworkWatchersGetTroubleshootingResultResponse = TroubleshootingResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TroubleshootingResult;
    };
};

/**
 * Contains response data for the setFlowLogConfiguration operation.
 */
export type NetworkWatchersSetFlowLogConfigurationResponse = FlowLogInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlowLogInformation;
    };
};

/**
 * Contains response data for the getFlowLogStatus operation.
 */
export type NetworkWatchersGetFlowLogStatusResponse = FlowLogInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlowLogInformation;
    };
};

/**
 * Contains response data for the checkConnectivity operation.
 */
export type NetworkWatchersCheckConnectivityResponse = ConnectivityInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectivityInformation;
    };
};

/**
 * Contains response data for the beginVerifyIPFlow operation.
 */
export type NetworkWatchersBeginVerifyIPFlowResponse = VerificationIPFlowResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VerificationIPFlowResult;
    };
};

/**
 * Contains response data for the beginGetNextHop operation.
 */
export type NetworkWatchersBeginGetNextHopResponse = NextHopResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NextHopResult;
    };
};

/**
 * Contains response data for the beginGetVMSecurityRules operation.
 */
export type NetworkWatchersBeginGetVMSecurityRulesResponse = SecurityGroupViewResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SecurityGroupViewResult;
    };
};

/**
 * Contains response data for the beginGetTroubleshooting operation.
 */
export type NetworkWatchersBeginGetTroubleshootingResponse = TroubleshootingResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TroubleshootingResult;
    };
};

/**
 * Contains response data for the beginGetTroubleshootingResult operation.
 */
export type NetworkWatchersBeginGetTroubleshootingResultResponse = TroubleshootingResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TroubleshootingResult;
    };
};

/**
 * Contains response data for the beginSetFlowLogConfiguration operation.
 */
export type NetworkWatchersBeginSetFlowLogConfigurationResponse = FlowLogInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlowLogInformation;
    };
};

/**
 * Contains response data for the beginGetFlowLogStatus operation.
 */
export type NetworkWatchersBeginGetFlowLogStatusResponse = FlowLogInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlowLogInformation;
    };
};

/**
 * Contains response data for the beginCheckConnectivity operation.
 */
export type NetworkWatchersBeginCheckConnectivityResponse = ConnectivityInformation & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectivityInformation;
    };
};

/**
 * Contains response data for the create operation.
 */
export type PacketCapturesCreateResponse = PacketCaptureResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PacketCapturesGetResponse = PacketCaptureResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureResult;
    };
};

/**
 * Contains response data for the getStatus operation.
 */
export type PacketCapturesGetStatusResponse = PacketCaptureQueryStatusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureQueryStatusResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PacketCapturesListResponse = PacketCaptureListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type PacketCapturesBeginCreateResponse = PacketCaptureResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureResult;
    };
};

/**
 * Contains response data for the beginGetStatus operation.
 */
export type PacketCapturesBeginGetStatusResponse = PacketCaptureQueryStatusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PacketCaptureQueryStatusResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PublicIPAddressesGetResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PublicIPAddressesCreateOrUpdateResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type PublicIPAddressesListAllResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PublicIPAddressesListResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetPublicIPAddresses operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMPublicIPAddresses operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the getVirtualMachineScaleSetPublicIPAddress operation.
 */
export type PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PublicIPAddressesBeginCreateOrUpdateResponse = PublicIPAddress & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddress;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type PublicIPAddressesListAllNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PublicIPAddressesListNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetPublicIPAddressesNext operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the listVirtualMachineScaleSetVMPublicIPAddressesNext operation.
 */
export type PublicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesNextResponse = PublicIPAddressListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PublicIPAddressListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RouteFiltersGetResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilter;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteFiltersCreateOrUpdateResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilter;
    };
};

/**
 * Contains response data for the update operation.
 */
export type RouteFiltersUpdateResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilter;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type RouteFiltersListByResourceGroupResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RouteFiltersListResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RouteFiltersBeginCreateOrUpdateResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilter;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type RouteFiltersBeginUpdateResponse = RouteFilter & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilter;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type RouteFiltersListByResourceGroupNextResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RouteFiltersListNextResponse = RouteFilterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RouteFilterRulesGetResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteFilterRulesCreateOrUpdateResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRule;
    };
};

/**
 * Contains response data for the update operation.
 */
export type RouteFilterRulesUpdateResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRule;
    };
};

/**
 * Contains response data for the listByRouteFilter operation.
 */
export type RouteFilterRulesListByRouteFilterResponse = RouteFilterRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRuleListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RouteFilterRulesBeginCreateOrUpdateResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRule;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type RouteFilterRulesBeginUpdateResponse = RouteFilterRule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRule;
    };
};

/**
 * Contains response data for the listByRouteFilterNext operation.
 */
export type RouteFilterRulesListByRouteFilterNextResponse = RouteFilterRuleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteFilterRuleListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RouteTablesGetResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RouteTablesCreateOrUpdateResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RouteTablesListResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type RouteTablesListAllResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RouteTablesBeginCreateOrUpdateResponse = RouteTable & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTable;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RouteTablesListNextResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type RouteTablesListAllNextResponse = RouteTableListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteTableListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RoutesGetResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RoutesCreateOrUpdateResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RoutesListResponse = RouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RoutesBeginCreateOrUpdateResponse = Route & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Route;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RoutesListNextResponse = RouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RouteListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type BgpServiceCommunitiesListResponse = BgpServiceCommunityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BgpServiceCommunityListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type BgpServiceCommunitiesListNextResponse = BgpServiceCommunityListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BgpServiceCommunityListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type UsagesListResponse = UsagesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsagesListNextResponse = UsagesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsagesListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworksGetResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the listAll operation.
 */
export type VirtualNetworksListAllResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworksListResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the checkIPAddressAvailability operation.
 */
export type VirtualNetworksCheckIPAddressAvailabilityResponse = IPAddressAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IPAddressAvailabilityResult;
    };
};

/**
 * Contains response data for the listUsage operation.
 */
export type VirtualNetworksListUsageResponse = VirtualNetworkListUsageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListUsageResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworksBeginCreateOrUpdateResponse = VirtualNetwork & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetwork;
    };
};

/**
 * Contains response data for the listAllNext operation.
 */
export type VirtualNetworksListAllNextResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworksListNextResponse = VirtualNetworkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListResult;
    };
};

/**
 * Contains response data for the listUsageNext operation.
 */
export type VirtualNetworksListUsageNextResponse = VirtualNetworkListUsageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkListUsageResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SubnetsGetResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SubnetsCreateOrUpdateResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SubnetsListResponse = SubnetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubnetListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SubnetsBeginCreateOrUpdateResponse = Subnet & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Subnet;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SubnetsListNextResponse = SubnetListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SubnetListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkPeeringsGetResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeering;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkPeeringsCreateOrUpdateResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeering;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkPeeringsListResponse = VirtualNetworkPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeeringListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkPeeringsBeginCreateOrUpdateResponse = VirtualNetworkPeering & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeering;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkPeeringsListNextResponse = VirtualNetworkPeeringListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkPeeringListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkGatewaysCreateOrUpdateResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkGatewaysGetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkGatewaysListResponse = VirtualNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the listConnections operation.
 */
export type VirtualNetworkGatewaysListConnectionsResponse = VirtualNetworkGatewayListConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListConnectionsResult;
    };
};

/**
 * Contains response data for the reset operation.
 */
export type VirtualNetworkGatewaysResetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the generatevpnclientpackage operation.
 */
export type VirtualNetworkGatewaysGeneratevpnclientpackageResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the generateVpnProfile operation.
 */
export type VirtualNetworkGatewaysGenerateVpnProfileResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the getVpnProfilePackageUrl operation.
 */
export type VirtualNetworkGatewaysGetVpnProfilePackageUrlResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the getBgpPeerStatus operation.
 */
export type VirtualNetworkGatewaysGetBgpPeerStatusResponse = BgpPeerStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BgpPeerStatusListResult;
    };
};

/**
 * Contains response data for the getLearnedRoutes operation.
 */
export type VirtualNetworkGatewaysGetLearnedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the getAdvertisedRoutes operation.
 */
export type VirtualNetworkGatewaysGetAdvertisedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkGatewaysBeginCreateOrUpdateResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the beginReset operation.
 */
export type VirtualNetworkGatewaysBeginResetResponse = VirtualNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGateway;
    };
};

/**
 * Contains response data for the beginGeneratevpnclientpackage operation.
 */
export type VirtualNetworkGatewaysBeginGeneratevpnclientpackageResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the beginGenerateVpnProfile operation.
 */
export type VirtualNetworkGatewaysBeginGenerateVpnProfileResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the beginGetVpnProfilePackageUrl operation.
 */
export type VirtualNetworkGatewaysBeginGetVpnProfilePackageUrlResponse = {
  /**
   * The parsed response body.
   */
  body: string;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: string;
    };
};

/**
 * Contains response data for the beginGetBgpPeerStatus operation.
 */
export type VirtualNetworkGatewaysBeginGetBgpPeerStatusResponse = BgpPeerStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BgpPeerStatusListResult;
    };
};

/**
 * Contains response data for the beginGetLearnedRoutes operation.
 */
export type VirtualNetworkGatewaysBeginGetLearnedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the beginGetAdvertisedRoutes operation.
 */
export type VirtualNetworkGatewaysBeginGetAdvertisedRoutesResponse = GatewayRouteListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GatewayRouteListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkGatewaysListNextResponse = VirtualNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the listConnectionsNext operation.
 */
export type VirtualNetworkGatewaysListConnectionsNextResponse = VirtualNetworkGatewayListConnectionsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayListConnectionsResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type VirtualNetworkGatewayConnectionsCreateOrUpdateResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualNetworkGatewayConnectionsGetResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the setSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsSetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the getSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsGetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the list operation.
 */
export type VirtualNetworkGatewayConnectionsListResponse = VirtualNetworkGatewayConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnectionListResult;
    };
};

/**
 * Contains response data for the resetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsResetSharedKeyResponse = ConnectionResetSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionResetSharedKey;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type VirtualNetworkGatewayConnectionsBeginCreateOrUpdateResponse = VirtualNetworkGatewayConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnection;
    };
};

/**
 * Contains response data for the beginSetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsBeginSetSharedKeyResponse = ConnectionSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionSharedKey;
    };
};

/**
 * Contains response data for the beginResetSharedKey operation.
 */
export type VirtualNetworkGatewayConnectionsBeginResetSharedKeyResponse = ConnectionResetSharedKey & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionResetSharedKey;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type VirtualNetworkGatewayConnectionsListNextResponse = VirtualNetworkGatewayConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualNetworkGatewayConnectionListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LocalNetworkGatewaysCreateOrUpdateResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LocalNetworkGatewaysGetResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the list operation.
 */
export type LocalNetworkGatewaysListResponse = LocalNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGatewayListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LocalNetworkGatewaysBeginCreateOrUpdateResponse = LocalNetworkGateway & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGateway;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type LocalNetworkGatewaysListNextResponse = LocalNetworkGatewayListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LocalNetworkGatewayListResult;
    };
};
