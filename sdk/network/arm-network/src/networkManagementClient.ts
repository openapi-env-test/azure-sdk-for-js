/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { NetworkManagementClientContext } from "./networkManagementClientContext";


class NetworkManagementClient extends NetworkManagementClientContext {
  // Operation groups
  applicationGateways: operations.ApplicationGateways;
  expressRouteCircuits: operations.ExpressRouteCircuits;
  expressRouteServiceProviders: operations.ExpressRouteServiceProviders;
  expressRouteCircuitPeerings: operations.ExpressRouteCircuitPeerings;
  loadBalancers: operations.LoadBalancers;
  localNetworkGateways: operations.LocalNetworkGateways;
  networkInterfaces: operations.NetworkInterfaces;
  routeTables: operations.RouteTables;
  networkSecurityGroups: operations.NetworkSecurityGroups;
  publicIpAddresses: operations.PublicIpAddresses;
  routes: operations.Routes;
  securityRules: operations.SecurityRules;
  expressRouteCircuitAuthorizations: operations.ExpressRouteCircuitAuthorizations;
  subnets: operations.Subnets;
  usages: operations.Usages;
  virtualNetworkGatewayConnections: operations.VirtualNetworkGatewayConnections;
  virtualNetworkGateways: operations.VirtualNetworkGateways;
  virtualNetworks: operations.VirtualNetworks;

  /**
   * Initializes a new instance of the NetworkManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
   * subscription. The subscription ID forms part of the URI for every service call.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.NetworkManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.applicationGateways = new operations.ApplicationGateways(this);
    this.expressRouteCircuits = new operations.ExpressRouteCircuits(this);
    this.expressRouteServiceProviders = new operations.ExpressRouteServiceProviders(this);
    this.expressRouteCircuitPeerings = new operations.ExpressRouteCircuitPeerings(this);
    this.loadBalancers = new operations.LoadBalancers(this);
    this.localNetworkGateways = new operations.LocalNetworkGateways(this);
    this.networkInterfaces = new operations.NetworkInterfaces(this);
    this.routeTables = new operations.RouteTables(this);
    this.networkSecurityGroups = new operations.NetworkSecurityGroups(this);
    this.publicIpAddresses = new operations.PublicIpAddresses(this);
    this.routes = new operations.Routes(this);
    this.securityRules = new operations.SecurityRules(this);
    this.expressRouteCircuitAuthorizations = new operations.ExpressRouteCircuitAuthorizations(this);
    this.subnets = new operations.Subnets(this);
    this.usages = new operations.Usages(this);
    this.virtualNetworkGatewayConnections = new operations.VirtualNetworkGatewayConnections(this);
    this.virtualNetworkGateways = new operations.VirtualNetworkGateways(this);
    this.virtualNetworks = new operations.VirtualNetworks(this);
  }

  /**
   * Checks whether a domain name in the cloudapp.net zone is available for use.
   * @param location The location of the domain name
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckDnsNameAvailabilityResponse>
   */
  checkDnsNameAvailability(location: string, options?: Models.NetworkManagementClientCheckDnsNameAvailabilityOptionalParams): Promise<Models.CheckDnsNameAvailabilityResponse>;
  /**
   * @param location The location of the domain name
   * @param callback The callback
   */
  checkDnsNameAvailability(location: string, callback: msRest.ServiceCallback<Models.DnsNameAvailabilityResult>): void;
  /**
   * @param location The location of the domain name
   * @param options The optional parameters
   * @param callback The callback
   */
  checkDnsNameAvailability(location: string, options: Models.NetworkManagementClientCheckDnsNameAvailabilityOptionalParams, callback: msRest.ServiceCallback<Models.DnsNameAvailabilityResult>): void;
  checkDnsNameAvailability(location: string, options?: Models.NetworkManagementClientCheckDnsNameAvailabilityOptionalParams | msRest.ServiceCallback<Models.DnsNameAvailabilityResult>, callback?: msRest.ServiceCallback<Models.DnsNameAvailabilityResult>): Promise<Models.CheckDnsNameAvailabilityResponse> {
    return this.sendOperationRequest(
      {
        location,
        options
      },
      checkDnsNameAvailabilityOperationSpec,
      callback) as Promise<Models.CheckDnsNameAvailabilityResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkDnsNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability",
  urlParameters: [
    Parameters.location1,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.domainNameLabel,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DnsNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

export {
  NetworkManagementClient,
  NetworkManagementClientContext,
  Models as NetworkManagementModels,
  Mappers as NetworkManagementMappers
};
export * from "./operations";
