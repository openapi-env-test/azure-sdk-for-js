/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/dataConnectorsCheckRequirementsOperationsMappers";
import * as Parameters from "../models/parameters";
import { SecurityInsightsContext } from "../securityInsightsContext";

/** Class representing a DataConnectorsCheckRequirementsOperations. */
export class DataConnectorsCheckRequirementsOperations {
  private readonly client: SecurityInsightsContext;

  /**
   * Create a DataConnectorsCheckRequirementsOperations.
   * @param {SecurityInsightsContext} client Reference to the service client.
   */
  constructor(client: SecurityInsightsContext) {
    this.client = client;
  }

  /**
   * Get requirements state for a data connector type.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param dataConnectorsCheckRequirements The parameters for requirements check message
   * @param [options] The optional parameters
   * @returns Promise<Models.DataConnectorsCheckRequirementsPostResponse>
   */
  post(resourceGroupName: string, workspaceName: string, operationalInsightsResourceProvider: string, dataConnectorsCheckRequirements: Models.DataConnectorsCheckRequirementsUnion, options?: msRest.RequestOptionsBase): Promise<Models.DataConnectorsCheckRequirementsPostResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param dataConnectorsCheckRequirements The parameters for requirements check message
   * @param callback The callback
   */
  post(resourceGroupName: string, workspaceName: string, operationalInsightsResourceProvider: string, dataConnectorsCheckRequirements: Models.DataConnectorsCheckRequirementsUnion, callback: msRest.ServiceCallback<Models.DataConnectorRequirementsState>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param dataConnectorsCheckRequirements The parameters for requirements check message
   * @param options The optional parameters
   * @param callback The callback
   */
  post(resourceGroupName: string, workspaceName: string, operationalInsightsResourceProvider: string, dataConnectorsCheckRequirements: Models.DataConnectorsCheckRequirementsUnion, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataConnectorRequirementsState>): void;
  post(resourceGroupName: string, workspaceName: string, operationalInsightsResourceProvider: string, dataConnectorsCheckRequirements: Models.DataConnectorsCheckRequirementsUnion, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataConnectorRequirementsState>, callback?: msRest.ServiceCallback<Models.DataConnectorRequirementsState>): Promise<Models.DataConnectorsCheckRequirementsPostResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        operationalInsightsResourceProvider,
        dataConnectorsCheckRequirements,
        options
      },
      postOperationSpec,
      callback) as Promise<Models.DataConnectorsCheckRequirementsPostResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const postOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectorsCheckRequirements",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.operationalInsightsResourceProvider
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "dataConnectorsCheckRequirements",
    mapper: {
      ...Mappers.DataConnectorsCheckRequirements,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DataConnectorRequirementsState
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
