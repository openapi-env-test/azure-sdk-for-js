/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/threatIntelligenceIndicatorMappers";
import * as Parameters from "../models/parameters";
import { SecurityInsightsContext } from "../securityInsightsContext";

/** Class representing a ThreatIntelligenceIndicator. */
export class ThreatIntelligenceIndicator {
  private readonly client: SecurityInsightsContext;

  /**
   * Create a ThreatIntelligenceIndicator.
   * @param {SecurityInsightsContext} client Reference to the service client.
   */
  constructor(client: SecurityInsightsContext) {
    this.client = client;
  }

  /**
   * Create a new threat intelligence indicator.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
   * update.
   * @param [options] The optional parameters
   * @returns Promise<Models.ThreatIntelligenceIndicatorCreateIndicatorResponse>
   */
  createIndicator(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, threatIntelligenceProperties: Models.ThreatIntelligenceIndicatorModelForRequestBody, options?: msRest.RequestOptionsBase): Promise<Models.ThreatIntelligenceIndicatorCreateIndicatorResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
   * update.
   * @param callback The callback
   */
  createIndicator(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, threatIntelligenceProperties: Models.ThreatIntelligenceIndicatorModelForRequestBody, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
   * update.
   * @param options The optional parameters
   * @param callback The callback
   */
  createIndicator(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, threatIntelligenceProperties: Models.ThreatIntelligenceIndicatorModelForRequestBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): void;
  createIndicator(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, threatIntelligenceProperties: Models.ThreatIntelligenceIndicatorModelForRequestBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>, callback?: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): Promise<Models.ThreatIntelligenceIndicatorCreateIndicatorResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        threatIntelligenceProperties,
        options
      },
      createIndicatorOperationSpec,
      callback) as Promise<Models.ThreatIntelligenceIndicatorCreateIndicatorResponse>;
  }

  /**
   * View a threat intelligence indicator by name.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param [options] The optional parameters
   * @returns Promise<Models.ThreatIntelligenceIndicatorGetResponse>
   */
  get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.ThreatIntelligenceIndicatorGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param callback The callback
   */
  get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): void;
  get(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>, callback?: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): Promise<Models.ThreatIntelligenceIndicatorGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ThreatIntelligenceIndicatorGetResponse>;
  }

  /**
   * Update a threat Intelligence indicator.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
   * update.
   * @param [options] The optional parameters
   * @returns Promise<Models.ThreatIntelligenceIndicatorCreateResponse>
   */
  create(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceProperties: Models.ThreatIntelligenceIndicatorModelForRequestBody, options?: msRest.RequestOptionsBase): Promise<Models.ThreatIntelligenceIndicatorCreateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
   * update.
   * @param callback The callback
   */
  create(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceProperties: Models.ThreatIntelligenceIndicatorModelForRequestBody, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param threatIntelligenceProperties Properties of threat intelligence indicators to create and
   * update.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceProperties: Models.ThreatIntelligenceIndicatorModelForRequestBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): void;
  create(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceProperties: Models.ThreatIntelligenceIndicatorModelForRequestBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>, callback?: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): Promise<Models.ThreatIntelligenceIndicatorCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        name,
        threatIntelligenceProperties,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ThreatIntelligenceIndicatorCreateResponse>;
  }

  /**
   * Delete a threat intelligence indicator.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        name,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Query threat intelligence indicators as per filtering criteria.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param threatIntelligenceFilteringCriteria Filtering criteria for querying threat intelligence
   * indicators.
   * @param [options] The optional parameters
   * @returns Promise<Models.ThreatIntelligenceIndicatorQueryIndicatorsResponse>
   */
  queryIndicators(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, threatIntelligenceFilteringCriteria: Models.ThreatIntelligenceFilteringCriteria, options?: msRest.RequestOptionsBase): Promise<Models.ThreatIntelligenceIndicatorQueryIndicatorsResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param threatIntelligenceFilteringCriteria Filtering criteria for querying threat intelligence
   * indicators.
   * @param callback The callback
   */
  queryIndicators(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, threatIntelligenceFilteringCriteria: Models.ThreatIntelligenceFilteringCriteria, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationList>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param threatIntelligenceFilteringCriteria Filtering criteria for querying threat intelligence
   * indicators.
   * @param options The optional parameters
   * @param callback The callback
   */
  queryIndicators(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, threatIntelligenceFilteringCriteria: Models.ThreatIntelligenceFilteringCriteria, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationList>): void;
  queryIndicators(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, threatIntelligenceFilteringCriteria: Models.ThreatIntelligenceFilteringCriteria, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ThreatIntelligenceInformationList>, callback?: msRest.ServiceCallback<Models.ThreatIntelligenceInformationList>): Promise<Models.ThreatIntelligenceIndicatorQueryIndicatorsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        threatIntelligenceFilteringCriteria,
        options
      },
      queryIndicatorsOperationSpec,
      callback) as Promise<Models.ThreatIntelligenceIndicatorQueryIndicatorsResponse>;
  }

  /**
   * Append tags to a threat intelligence indicator.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param threatIntelligenceAppendTags The threat intelligence append tags request body
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  appendTags(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceAppendTags: Models.ThreatIntelligenceAppendTags, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param threatIntelligenceAppendTags The threat intelligence append tags request body
   * @param callback The callback
   */
  appendTags(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceAppendTags: Models.ThreatIntelligenceAppendTags, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param threatIntelligenceAppendTags The threat intelligence append tags request body
   * @param options The optional parameters
   * @param callback The callback
   */
  appendTags(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceAppendTags: Models.ThreatIntelligenceAppendTags, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  appendTags(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceAppendTags: Models.ThreatIntelligenceAppendTags, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        name,
        threatIntelligenceAppendTags,
        options
      },
      appendTagsOperationSpec,
      callback);
  }

  /**
   * Replace tags added to a threat intelligence indicator.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param threatIntelligenceReplaceTags Tags in the threat intelligence indicator to be replaced.
   * @param [options] The optional parameters
   * @returns Promise<Models.ThreatIntelligenceIndicatorReplaceTagsResponse>
   */
  replaceTags(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceReplaceTags: Models.ThreatIntelligenceIndicatorModelForRequestBody, options?: msRest.RequestOptionsBase): Promise<Models.ThreatIntelligenceIndicatorReplaceTagsResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param threatIntelligenceReplaceTags Tags in the threat intelligence indicator to be replaced.
   * @param callback The callback
   */
  replaceTags(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceReplaceTags: Models.ThreatIntelligenceIndicatorModelForRequestBody, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param operationalInsightsResourceProvider The namespace of workspaces resource provider-
   * Microsoft.OperationalInsights.
   * @param workspaceName The name of the workspace.
   * @param name Threat intelligence indicator name field.
   * @param threatIntelligenceReplaceTags Tags in the threat intelligence indicator to be replaced.
   * @param options The optional parameters
   * @param callback The callback
   */
  replaceTags(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceReplaceTags: Models.ThreatIntelligenceIndicatorModelForRequestBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): void;
  replaceTags(resourceGroupName: string, operationalInsightsResourceProvider: string, workspaceName: string, name: string, threatIntelligenceReplaceTags: Models.ThreatIntelligenceIndicatorModelForRequestBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>, callback?: msRest.ServiceCallback<Models.ThreatIntelligenceInformationUnion>): Promise<Models.ThreatIntelligenceIndicatorReplaceTagsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        operationalInsightsResourceProvider,
        workspaceName,
        name,
        threatIntelligenceReplaceTags,
        options
      },
      replaceTagsOperationSpec,
      callback) as Promise<Models.ThreatIntelligenceIndicatorReplaceTagsResponse>;
  }

  /**
   * Query threat intelligence indicators as per filtering criteria.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ThreatIntelligenceIndicatorQueryIndicatorsNextResponse>
   */
  queryIndicatorsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ThreatIntelligenceIndicatorQueryIndicatorsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  queryIndicatorsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  queryIndicatorsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ThreatIntelligenceInformationList>): void;
  queryIndicatorsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ThreatIntelligenceInformationList>, callback?: msRest.ServiceCallback<Models.ThreatIntelligenceInformationList>): Promise<Models.ThreatIntelligenceIndicatorQueryIndicatorsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      queryIndicatorsNextOperationSpec,
      callback) as Promise<Models.ThreatIntelligenceIndicatorQueryIndicatorsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createIndicatorOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/createIndicator",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "threatIntelligenceProperties",
    mapper: {
      ...Mappers.ThreatIntelligenceIndicatorModelForRequestBody,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ThreatIntelligenceInformation
    },
    201: {
      bodyMapper: Mappers.ThreatIntelligenceInformation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ThreatIntelligenceInformation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "threatIntelligenceProperties",
    mapper: {
      ...Mappers.ThreatIntelligenceIndicatorModelForRequestBody,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ThreatIntelligenceInformation
    },
    201: {
      bodyMapper: Mappers.ThreatIntelligenceInformation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const queryIndicatorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/queryIndicators",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "threatIntelligenceFilteringCriteria",
    mapper: {
      ...Mappers.ThreatIntelligenceFilteringCriteria,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ThreatIntelligenceInformationList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const appendTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}/appendTags",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "threatIntelligenceAppendTags",
    mapper: {
      ...Mappers.ThreatIntelligenceAppendTags,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const replaceTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/indicators/{name}/replaceTags",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationalInsightsResourceProvider,
    Parameters.workspaceName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "threatIntelligenceReplaceTags",
    mapper: {
      ...Mappers.ThreatIntelligenceIndicatorModelForRequestBody,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ThreatIntelligenceInformation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const queryIndicatorsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ThreatIntelligenceInformationList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
