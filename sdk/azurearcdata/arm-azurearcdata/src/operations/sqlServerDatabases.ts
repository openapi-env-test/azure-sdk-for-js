/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SqlServerDatabases } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureArcDataManagementClient } from "../azureArcDataManagementClient";
import {
  SqlServerDatabaseResource,
  SqlServerDatabasesListNextOptionalParams,
  SqlServerDatabasesListOptionalParams,
  SqlServerDatabasesCreateOptionalParams,
  SqlServerDatabasesCreateResponse,
  SqlServerDatabasesDeleteOptionalParams,
  SqlServerDatabasesGetOptionalParams,
  SqlServerDatabasesGetResponse,
  SqlServerDatabaseUpdate,
  SqlServerDatabasesUpdateOptionalParams,
  SqlServerDatabasesUpdateResponse,
  SqlServerDatabasesListResponse,
  SqlServerDatabasesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlServerDatabases operations. */
export class SqlServerDatabasesImpl implements SqlServerDatabases {
  private readonly client: AzureArcDataManagementClient;

  /**
   * Initialize a new instance of the class SqlServerDatabases class.
   * @param client Reference to the service client
   */
  constructor(client: AzureArcDataManagementClient) {
    this.client = client;
  }

  /**
   * List the databases associated with the given Arc Sql Server.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerDatabasesListOptionalParams
  ): PagedAsyncIterableIterator<SqlServerDatabaseResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      sqlServerInstanceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          resourceGroupName,
          sqlServerInstanceName,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerDatabasesListOptionalParams
  ): AsyncIterableIterator<SqlServerDatabaseResource[]> {
    let result = await this._list(
      resourceGroupName,
      sqlServerInstanceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        sqlServerInstanceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerDatabasesListOptionalParams
  ): AsyncIterableIterator<SqlServerDatabaseResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      sqlServerInstanceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates or replaces an Arc Sql Server Database.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param databaseName Name of the database
   * @param sqlServerDatabaseResource The request body for database resource.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    databaseName: string,
    sqlServerDatabaseResource: SqlServerDatabaseResource,
    options?: SqlServerDatabasesCreateOptionalParams
  ): Promise<SqlServerDatabasesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        databaseName,
        sqlServerDatabaseResource,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Deletes an Arc Sql Server database resource.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param databaseName Name of the database
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    databaseName: string,
    options?: SqlServerDatabasesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, databaseName, options },
      deleteOperationSpec
    );
  }

  /**
   * Retrieves an Arc Sql Server database.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param databaseName Name of the database
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    databaseName: string,
    options?: SqlServerDatabasesGetOptionalParams
  ): Promise<SqlServerDatabasesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, databaseName, options },
      getOperationSpec
    );
  }

  /**
   * Updates an existing database.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param databaseName Name of the database
   * @param sqlServerDatabaseUpdate The requested database resource state.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    databaseName: string,
    sqlServerDatabaseUpdate: SqlServerDatabaseUpdate,
    options?: SqlServerDatabasesUpdateOptionalParams
  ): Promise<SqlServerDatabasesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        databaseName,
        sqlServerDatabaseUpdate,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * List the databases associated with the given Arc Sql Server.
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    options?: SqlServerDatabasesListOptionalParams
  ): Promise<SqlServerDatabasesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    sqlServerInstanceName: string,
    nextLink: string,
    options?: SqlServerDatabasesListNextOptionalParams
  ): Promise<SqlServerDatabasesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, sqlServerInstanceName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/databases/{databaseName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerDatabaseResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.sqlServerDatabaseResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/databases/{databaseName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/databases/{databaseName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerDatabaseResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/databases/{databaseName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerDatabaseResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.sqlServerDatabaseUpdate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName,
    Parameters.databaseName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}/databases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ArcSqlServerDatabaseListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ArcSqlServerDatabaseListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
