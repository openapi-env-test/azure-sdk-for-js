/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const Events: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Events",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Event"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventPropertiesArticle: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventPropertiesArticle",
    modelProperties: {
      articleContent: {
        serializedName: "articleContent",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Link: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Link",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      displayText: {
        serializedName: "displayText",
        type: {
          name: "Composite",
          className: "LinkDisplayText"
        }
      },
      extensionName: {
        serializedName: "extensionName",
        type: {
          name: "String"
        }
      },
      bladeName: {
        serializedName: "bladeName",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const LinkDisplayText: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinkDisplayText",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Impact: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Impact",
    modelProperties: {
      impactedService: {
        serializedName: "impactedService",
        type: {
          name: "String"
        }
      },
      impactedRegions: {
        serializedName: "impactedRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImpactedServiceRegion"
            }
          }
        }
      }
    }
  }
};

export const ImpactedServiceRegion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImpactedServiceRegion",
    modelProperties: {
      impactedRegion: {
        serializedName: "impactedRegion",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      impactedSubscriptions: {
        serializedName: "impactedSubscriptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      lastUpdateTime: {
        serializedName: "lastUpdateTime",
        type: {
          name: "DateTime"
        }
      },
      updates: {
        serializedName: "updates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Update"
            }
          }
        }
      }
    }
  }
};

export const Update: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Update",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "String"
        }
      },
      updateDateTime: {
        serializedName: "updateDateTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EventPropertiesRecommendedActions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventPropertiesRecommendedActions",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventPropertiesRecommendedActionsItem"
            }
          }
        }
      },
      localeCode: {
        serializedName: "localeCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventPropertiesRecommendedActionsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventPropertiesRecommendedActionsItem",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        type: {
          name: "Number"
        }
      },
      actionText: {
        serializedName: "actionText",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Faq: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Faq",
    modelProperties: {
      question: {
        serializedName: "question",
        type: {
          name: "String"
        }
      },
      answer: {
        serializedName: "answer",
        type: {
          name: "String"
        }
      },
      localeCode: {
        serializedName: "localeCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventPropertiesAdditionalInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventPropertiesAdditionalInformation",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Event: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Event",
    modelProperties: {
      ...Resource.type.modelProperties,
      eventType: {
        serializedName: "properties.eventType",
        type: {
          name: "String"
        }
      },
      eventSource: {
        serializedName: "properties.eventSource",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "properties.title",
        type: {
          name: "String"
        }
      },
      summary: {
        serializedName: "properties.summary",
        type: {
          name: "String"
        }
      },
      header: {
        serializedName: "properties.header",
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "properties.level",
        type: {
          name: "String"
        }
      },
      eventLevel: {
        serializedName: "properties.eventLevel",
        type: {
          name: "String"
        }
      },
      article: {
        serializedName: "properties.article",
        type: {
          name: "Composite",
          className: "EventPropertiesArticle"
        }
      },
      links: {
        serializedName: "properties.links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Link"
            }
          }
        }
      },
      impactStartTime: {
        serializedName: "properties.impactStartTime",
        type: {
          name: "DateTime"
        }
      },
      impactMitigationTime: {
        serializedName: "properties.impactMitigationTime",
        type: {
          name: "DateTime"
        }
      },
      impact: {
        serializedName: "properties.impact",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Impact"
            }
          }
        }
      },
      recommendedActions: {
        serializedName: "properties.recommendedActions",
        type: {
          name: "Composite",
          className: "EventPropertiesRecommendedActions"
        }
      },
      faqs: {
        serializedName: "properties.faqs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Faq"
            }
          }
        }
      },
      isHIR: {
        serializedName: "properties.isHIR",
        type: {
          name: "Boolean"
        }
      },
      enableMicrosoftSupport: {
        serializedName: "properties.enableMicrosoftSupport",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      platformInitiated: {
        serializedName: "properties.platformInitiated",
        type: {
          name: "Boolean"
        }
      },
      enableChatWithUs: {
        serializedName: "properties.enableChatWithUs",
        type: {
          name: "Boolean"
        }
      },
      priority: {
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      lastUpdateTime: {
        serializedName: "properties.lastUpdateTime",
        type: {
          name: "DateTime"
        }
      },
      hirStage: {
        serializedName: "properties.hirStage",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "properties.duration",
        type: {
          name: "Number"
        }
      },
      impactType: {
        serializedName: "properties.impactType",
        type: {
          name: "String"
        }
      },
      additionalInformation: {
        serializedName: "properties.additionalInformation",
        type: {
          name: "Composite",
          className: "EventPropertiesAdditionalInformation"
        }
      }
    }
  }
};
