/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** The List events operation response. */
export interface Events {
  /** The list of event. */
  value: Event[];
  /** The URI to fetch the next page of events. Call ListNext() with this URI to fetch the next page of events. */
  nextLink?: string;
}

/** Article of event. */
export interface EventPropertiesArticle {
  /** Article content of event. */
  articleContent?: string;
}

/** Useful links for service health event. */
export interface Link {
  /** Type of link. */
  type?: LinkTypeValues;
  /** Display text of link. */
  displayText?: LinkDisplayText;
  /** It provides the name of portal extension to produce link for given service health event. */
  extensionName?: string;
  /** It provides the name of portal extension blade to produce link for given service health event. */
  bladeName?: string;
  /** It provides a map of parameter name and value for portal extension blade to produce lik for given service health event. */
  parameters?: Record<string, unknown>;
}

/** Display text of link. */
export interface LinkDisplayText {
  /** Display text of link. */
  value?: string;
  /** Localized display text of link. */
  localizedValue?: string;
}

/** Azure service impacted by the service health event. */
export interface Impact {
  /** Impacted service name. */
  impactedService?: string;
  /** List regions impacted by the service health event. */
  impactedRegions?: ImpactedServiceRegion[];
}

/** Azure region impacted by the service health event. */
export interface ImpactedServiceRegion {
  /** Impacted region name. */
  impactedRegion?: string;
  /** Current status of event in the region. */
  status?: EventStatusValues;
  /** List subscription impacted by the service health event. */
  impactedSubscriptions?: string[];
  /** It provides the Timestamp for when the last update for the service health event. */
  lastUpdateTime?: Date;
  /** List of updates for given service health event. */
  updates?: Update[];
}

/** Update for service health event. */
export interface Update {
  /** Summary text for the given update for the service health event. */
  summary?: string;
  /** It provides the Timestamp for the given update for the service health event. */
  updateDateTime?: Date;
}

/** Recommended actions of event. */
export interface EventPropertiesRecommendedActions {
  /** Recommended action title for the service health event. */
  message?: string;
  /** Recommended actions for the service health event. */
  actions?: EventPropertiesRecommendedActionsItem[];
  /** Recommended action locale for the service health event. */
  localeCode?: string;
}

/** Recommended action for the service health event. */
export interface EventPropertiesRecommendedActionsItem {
  /** Recommended action group Id for the service health event. */
  groupId?: number;
  /** Recommended action text */
  actionText?: string;
}

/** Frequently asked question for the service health event */
export interface Faq {
  /** FAQ question for the service health event. */
  question?: string;
  /** FAQ answer for the service health event. */
  answer?: string;
  /** FAQ locale for the service health event. */
  localeCode?: string;
}

/** Contains additional information regarding the event. */
export interface EventPropertiesAdditionalInformation {
  /** Additional information message. */
  message?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Error details. */
export interface ErrorResponse {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** Lists the operations response. */
export interface OperationListResult {
  /** List of operations available in the resourcehealth resource provider. */
  value: Operation[];
}

/** Operation available in the resourcehealth resource provider. */
export interface Operation {
  /** Name of the operation. */
  name?: string;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
  /** Properties of the operation. */
  display?: OperationDisplay;
}

/** Properties of the operation. */
export interface OperationDisplay {
  /** Provider name. */
  provider?: string;
  /** Resource name. */
  resource?: string;
  /** Operation name. */
  operation?: string;
  /** Description of the operation. */
  description?: string;
}

/** Service health event */
export type Event = Resource & {
  /** Type of event. */
  eventType?: EventTypeValues;
  /** Source of event. */
  eventSource?: EventSourceValues;
  /** Current status of event. */
  status?: EventStatusValues;
  /** Title text of event. */
  title?: string;
  /** Summary text of event. */
  summary?: string;
  /** Header text of event. */
  header?: string;
  /** Level of insight. */
  level?: LevelValues;
  /** Level of event. */
  eventLevel?: EventLevelValues;
  /** Article of event. */
  article?: EventPropertiesArticle;
  /** Useful links of event. */
  links?: Link[];
  /** It provides the Timestamp for when the health impacting event started. */
  impactStartTime?: Date;
  /** It provides the Timestamp for when the health impacting event resolved. */
  impactMitigationTime?: Date;
  /** List services impacted by the service health event. */
  impact?: Impact[];
  /** Recommended actions of event. */
  recommendedActions?: EventPropertiesRecommendedActions;
  /** Frequently asked questions for the service health event. */
  faqs?: Faq[];
  /** It provides information if the event is High incident rate event or not. */
  isHIR?: boolean;
  /** Tells if we want to enable or disable Microsoft Support for this event. */
  enableMicrosoftSupport?: boolean;
  /** Contains the communication message for the event, that could include summary, root cause and other details. */
  description?: string;
  /** Is true if the event is platform initiated. */
  platformInitiated?: boolean;
  /** Tells if we want to enable or disable Microsoft Support for this event. */
  enableChatWithUs?: boolean;
  /** Priority level of the event. Has value from 0 to 23. 0 is the highest priority. Service issue events have higher priority followed by planned maintenance and health advisory. Critical events have higher priority followed by error, warning and informational. Furthermore, active events have higher priority than resolved. */
  priority?: number;
  /** It provides the Timestamp for when the health impacting event was last updated. */
  lastUpdateTime?: Date;
  /** Stage for HIR Document */
  hirStage?: string;
  /** The expected duration of the event in seconds. */
  duration?: number;
  /** The event's impact type */
  impactType?: string;
  /** Contains additional information regarding the event. */
  additionalInformation?: EventPropertiesAdditionalInformation;
};

/** Known values of {@link EventTypeValues} that the service accepts. */
export enum KnownEventTypeValues {
  ServiceIssue = "ServiceIssue",
  PlannedMaintenance = "PlannedMaintenance",
  HealthAdvisory = "HealthAdvisory",
  RCA = "RCA",
  EmergingIssues = "EmergingIssues",
  SecurityAdvisory = "SecurityAdvisory"
}

/**
 * Defines values for EventTypeValues. \
 * {@link KnownEventTypeValues} can be used interchangeably with EventTypeValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServiceIssue** \
 * **PlannedMaintenance** \
 * **HealthAdvisory** \
 * **RCA** \
 * **EmergingIssues** \
 * **SecurityAdvisory**
 */
export type EventTypeValues = string;

/** Known values of {@link EventSourceValues} that the service accepts. */
export enum KnownEventSourceValues {
  ResourceHealth = "ResourceHealth",
  ServiceHealth = "ServiceHealth"
}

/**
 * Defines values for EventSourceValues. \
 * {@link KnownEventSourceValues} can be used interchangeably with EventSourceValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ResourceHealth** \
 * **ServiceHealth**
 */
export type EventSourceValues = string;

/** Known values of {@link EventStatusValues} that the service accepts. */
export enum KnownEventStatusValues {
  Active = "Active",
  Resolved = "Resolved"
}

/**
 * Defines values for EventStatusValues. \
 * {@link KnownEventStatusValues} can be used interchangeably with EventStatusValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Resolved**
 */
export type EventStatusValues = string;

/** Known values of {@link LevelValues} that the service accepts. */
export enum KnownLevelValues {
  Critical = "Critical",
  Warning = "Warning"
}

/**
 * Defines values for LevelValues. \
 * {@link KnownLevelValues} can be used interchangeably with LevelValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Warning**
 */
export type LevelValues = string;

/** Known values of {@link EventLevelValues} that the service accepts. */
export enum KnownEventLevelValues {
  Critical = "Critical",
  Error = "Error",
  Warning = "Warning",
  Informational = "Informational"
}

/**
 * Defines values for EventLevelValues. \
 * {@link KnownEventLevelValues} can be used interchangeably with EventLevelValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Error** \
 * **Warning** \
 * **Informational**
 */
export type EventLevelValues = string;

/** Known values of {@link LinkTypeValues} that the service accepts. */
export enum KnownLinkTypeValues {
  Button = "Button",
  Hyperlink = "Hyperlink"
}

/**
 * Defines values for LinkTypeValues. \
 * {@link KnownLinkTypeValues} can be used interchangeably with LinkTypeValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Button** \
 * **Hyperlink**
 */
export type LinkTypeValues = string;

/** Optional parameters. */
export interface EventsListBySubscriptionIdOptionalParams
  extends coreClient.OperationOptions {
  /** A valid odata query to limit the events returned. The logical operators and, or, equal, not equal, and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq 'PlannedMaintenance' OR %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27 */
  filter?: string;
  /** Specifies from when to return events, based on the lastUpdateTime property. For example, queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020 */
  queryStartTime?: string;
  /** setting view=full expands the article parameters */
  view?: string;
}

/** Contains response data for the listBySubscriptionId operation. */
export type EventsListBySubscriptionIdResponse = Events;

/** Optional parameters. */
export interface EventsListBySingleResourceOptionalParams
  extends coreClient.OperationOptions {
  /** A valid odata query to limit the events returned. The logical operators and, or, equal, not equal, and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq 'PlannedMaintenance' OR %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27 */
  filter?: string;
  /** setting view=full expands the article parameters */
  view?: string;
}

/** Contains response data for the listBySingleResource operation. */
export type EventsListBySingleResourceResponse = Events;

/** Optional parameters. */
export interface EventsListBySubscriptionIdNextOptionalParams
  extends coreClient.OperationOptions {
  /** A valid odata query to limit the events returned. The logical operators and, or, equal, not equal, and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq 'PlannedMaintenance' OR %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27 */
  filter?: string;
  /** Specifies from when to return events, based on the lastUpdateTime property. For example, queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020 */
  queryStartTime?: string;
  /** setting view=full expands the article parameters */
  view?: string;
}

/** Contains response data for the listBySubscriptionIdNext operation. */
export type EventsListBySubscriptionIdNextResponse = Events;

/** Optional parameters. */
export interface EventsListBySingleResourceNextOptionalParams
  extends coreClient.OperationOptions {
  /** A valid odata query to limit the events returned. The logical operators and, or, equal, not equal, and top are supported. For example, $filter=Properties/EventType eq 'ServiceIssue' or Properties/EventType eq 'PlannedMaintenance' OR %24filter=Properties%2FEventType%20eq%20%27ServiceIssue%27%20or%20Properties%2FEventType%20eq%20%27PlannedMaintenance%27 */
  filter?: string;
  /** setting view=full expands the article parameters */
  view?: string;
}

/** Contains response data for the listBySingleResourceNext operation. */
export type EventsListBySingleResourceNextResponse = Events;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface MicrosoftResourceHealthOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
