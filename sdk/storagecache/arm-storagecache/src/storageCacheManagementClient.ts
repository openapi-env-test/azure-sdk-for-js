/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  SkusImpl,
  UsageModelsImpl,
  AscOperationsImpl,
  AscUsagesImpl,
  CachesImpl,
  StorageTargetsImpl,
  StorageTargetOperationsImpl,
  AmlFilesystemsImpl
} from "./operations";
import {
  Operations,
  Skus,
  UsageModels,
  AscOperations,
  AscUsages,
  Caches,
  StorageTargets,
  StorageTargetOperations,
  AmlFilesystems
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  StorageCacheManagementClientOptionalParams,
  CheckAmlFSSubnetsOptionalParams
} from "./models";

export class StorageCacheManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the StorageCacheManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.
   *                       The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: StorageCacheManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: StorageCacheManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-storagecache/6.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
      if (!bearerTokenAuthenticationPolicyFound) {
        this.pipeline.removePolicy({
          name: coreRestPipeline.bearerTokenAuthenticationPolicyName
        });
        this.pipeline.addPolicy(
          coreRestPipeline.bearerTokenAuthenticationPolicy({
            scopes: `${optionsWithDefaults.baseUri}/.default`,
            challengeCallbacks: {
              authorizeRequestOnChallenge:
                coreClient.authorizeRequestOnClaimChallenge
            }
          })
        );
      }
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.operations = new OperationsImpl(this);
    this.skus = new SkusImpl(this);
    this.usageModels = new UsageModelsImpl(this);
    this.ascOperations = new AscOperationsImpl(this);
    this.ascUsages = new AscUsagesImpl(this);
    this.caches = new CachesImpl(this);
    this.storageTargets = new StorageTargetsImpl(this);
    this.storageTargetOperations = new StorageTargetOperationsImpl(this);
    this.amlFilesystems = new AmlFilesystemsImpl(this);
  }

  /**
   * Check that subnets will be valid for AML Filesystem create or update calls.
   * @param options The options parameters.
   */
  checkAmlFSSubnets(options?: CheckAmlFSSubnetsOptionalParams): Promise<void> {
    return this.sendOperationRequest(
      { options },
      checkAmlFSSubnetsOperationSpec
    );
  }

  operations: Operations;
  skus: Skus;
  usageModels: UsageModels;
  ascOperations: AscOperations;
  ascUsages: AscUsages;
  caches: Caches;
  storageTargets: StorageTargets;
  storageTargetOperations: StorageTargetOperations;
  amlFilesystems: AmlFilesystems;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkAmlFSSubnetsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.StorageCache/checkAmlFSSubnets",
  httpMethod: "POST",
  responses: {
    200: {},
    400: {
      bodyMapper: Mappers.AmlFilesystemCheckSubnetError,
      isError: true
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.amlFilesystemSubnetInfo,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
