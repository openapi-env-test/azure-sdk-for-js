/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/certificatesMappers";
import * as Parameters from "../models/parameters";
import { AppPlatformManagementClientContext } from "../appPlatformManagementClientContext";

/** Class representing a Certificates. */
export class Certificates {
  private readonly client: AppPlatformManagementClientContext;

  /**
   * Create a Certificates.
   * @param {AppPlatformManagementClientContext} client Reference to the service client.
   */
  constructor(client: AppPlatformManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the certificate resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesGetResponse>
   */
  get(resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, certificateName: string, callback: msRest.ServiceCallback<Models.CertificateResource>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceName: string, certificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateResource>): void;
  get(resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateResource>, callback?: msRest.ServiceCallback<Models.CertificateResource>): Promise<Models.CertificatesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        certificateName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.CertificatesGetResponse>;
  }

  /**
   * Create or update certificate resource.
   * @param certificateResource Parameters for the create or update operation
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesCreateOrUpdateResponse>
   */
  createOrUpdate(certificateResource: Models.CertificateResource, resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(certificateResource,resourceGroupName,serviceName,certificateName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.CertificatesCreateOrUpdateResponse>;
  }

  /**
   * Delete the certificate resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesDeleteMethodResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, certificateName: string, callback: msRest.ServiceCallback<Models.CertificateResource>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceName: string, certificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateResource>): void;
  deleteMethod(resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateResource>, callback?: msRest.ServiceCallback<Models.CertificateResource>): Promise<Models.CertificatesDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        certificateName,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.CertificatesDeleteMethodResponse>;
  }

  /**
   * List all the certificates of one user.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificatesListResponse>
   */
  list(resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param callback The callback
   */
  list(resourceGroupName: string, serviceName: string, certificateName: string, callback: msRest.ServiceCallback<Models.CertificateResourceCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, serviceName: string, certificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateResourceCollection>): void;
  list(resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateResourceCollection>, callback?: msRest.ServiceCallback<Models.CertificateResourceCollection>): Promise<Models.CertificatesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceName,
        certificateName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.CertificatesListResponse>;
  }

  /**
   * Create or update certificate resource.
   * @param certificateResource Parameters for the create or update operation
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serviceName The name of the Service resource.
   * @param certificateName The name of the certificate resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(certificateResource: Models.CertificateResource, resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        certificateResource,
        resourceGroupName,
        serviceName,
        certificateName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.certificateName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.certificateName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResource
    },
    204: {
      bodyMapper: Mappers.CertificateResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.certificateName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResourceCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceName,
    Parameters.certificateName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "certificateResource",
    mapper: {
      ...Mappers.CertificateResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CertificateResource
    },
    201: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
