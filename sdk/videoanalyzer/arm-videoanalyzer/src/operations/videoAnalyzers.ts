/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { VideoAnalyzers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { VideoAnalyzerContext } from "../videoAnalyzerContext";
import {
  VideoAnalyzersListOptionalParams,
  VideoAnalyzersListResponse,
  VideoAnalyzersGetOptionalParams,
  VideoAnalyzersGetResponse,
  VideoAnalyzer,
  VideoAnalyzersCreateOrUpdateOptionalParams,
  VideoAnalyzersCreateOrUpdateResponse,
  VideoAnalyzersDeleteOptionalParams,
  VideoAnalyzerUpdate,
  VideoAnalyzersUpdateOptionalParams,
  VideoAnalyzersUpdateResponse,
  SyncStorageKeysInput,
  VideoAnalyzersSyncStorageKeysOptionalParams,
  VideoAnalyzersListBySubscriptionOptionalParams,
  VideoAnalyzersListBySubscriptionResponse
} from "../models";

/** Class representing a VideoAnalyzers. */
export class VideoAnalyzersImpl implements VideoAnalyzers {
  private readonly client: VideoAnalyzerContext;

  /**
   * Initialize a new instance of the class VideoAnalyzers class.
   * @param client Reference to the service client
   */
  constructor(client: VideoAnalyzerContext) {
    this.client = client;
  }

  /**
   * Lists the Video Analyzer accounts in the specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: VideoAnalyzersListOptionalParams
  ): Promise<VideoAnalyzersListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * Get the details of the specified Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    options?: VideoAnalyzersGetOptionalParams
  ): Promise<VideoAnalyzersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update an instance of a Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    parameters: VideoAnalyzer,
    options?: VideoAnalyzersCreateOrUpdateOptionalParams
  ): Promise<VideoAnalyzersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete the specified Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    options?: VideoAnalyzersDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      deleteOperationSpec
    );
  }

  /**
   * Updates an existing instance of Video Analyzer account
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    parameters: VideoAnalyzerUpdate,
    options?: VideoAnalyzersUpdateOptionalParams
  ): Promise<VideoAnalyzersUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Synchronizes storage account keys for a storage account associated with the Video Analyzer account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Video Analyzer account name.
   * @param parameters The request parameters.
   * @param options The options parameters.
   */
  syncStorageKeys(
    resourceGroupName: string,
    accountName: string,
    parameters: SyncStorageKeysInput,
    options?: VideoAnalyzersSyncStorageKeysOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, parameters, options },
      syncStorageKeysOperationSpec
    );
  }

  /**
   * Lists the Video Analyzer accounts in the specific subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: VideoAnalyzersListBySubscriptionOptionalParams
  ): Promise<VideoAnalyzersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzerCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    201: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const syncStorageKeysOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/syncStorageKeys",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Media/videoAnalyzers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VideoAnalyzerCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
