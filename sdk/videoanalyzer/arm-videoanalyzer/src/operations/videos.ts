/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Videos } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { VideoAnalyzerContext } from "../videoAnalyzerContext";
import {
  VideoEntity,
  VideosListNextOptionalParams,
  VideosListOptionalParams,
  VideosListResponse,
  VideosGetOptionalParams,
  VideosGetResponse,
  VideosCreateOrUpdateOptionalParams,
  VideosCreateOrUpdateResponse,
  VideosDeleteOptionalParams,
  VideosUpdateOptionalParams,
  VideosUpdateResponse,
  VideosListStreamingTokenOptionalParams,
  VideosListStreamingTokenResponse,
  VideosListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a Videos. */
export class VideosImpl implements Videos {
  private readonly client: VideoAnalyzerContext;

  /**
   * Initialize a new instance of the class Videos class.
   * @param client Reference to the service client
   */
  constructor(client: VideoAnalyzerContext) {
    this.client = client;
  }

  /**
   * List all existing video resources in the specified account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    accountName: string,
    options?: VideosListOptionalParams
  ): PagedAsyncIterableIterator<VideoEntity> {
    const iter = this.listPagingAll(resourceGroupName, accountName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroupName, accountName, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: VideosListOptionalParams
  ): AsyncIterableIterator<VideoEntity[]> {
    let result = await this._list(resourceGroupName, accountName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: VideosListOptionalParams
  ): AsyncIterableIterator<VideoEntity> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      accountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all existing video resources in the specified account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    accountName: string,
    options?: VideosListOptionalParams
  ): Promise<VideosListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listOperationSpec
    );
  }

  /**
   * Retrieves an existing video resource within an account with a given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    videoName: string,
    options?: VideosGetOptionalParams
  ): Promise<VideosGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, videoName, options },
      getOperationSpec
    );
  }

  /**
   * Creates a new video resource or updates an existing one in an account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to create or update.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    videoName: string,
    parameters: VideoEntity,
    options?: VideosCreateOrUpdateOptionalParams
  ): Promise<VideosCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, videoName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes an existing video resource and its underlying data. This operation is irreversible.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to delete.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    videoName: string,
    options?: VideosDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, videoName, options },
      deleteOperationSpec
    );
  }

  /**
   * Updates individual properties of an existing video resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to update.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    videoName: string,
    parameters: VideoEntity,
    options?: VideosUpdateOptionalParams
  ): Promise<VideosUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, videoName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Generates a streaming token used for authenticating video playback.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param videoName The name of the video to generate a token for playback.
   * @param options The options parameters.
   */
  listStreamingToken(
    resourceGroupName: string,
    accountName: string,
    videoName: string,
    options?: VideosListStreamingTokenOptionalParams
  ): Promise<VideosListStreamingTokenResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, videoName, options },
      listStreamingTokenOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The Azure Video Analyzer account name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: VideosListNextOptionalParams
  ): Promise<VideosListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VideoEntityCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos/{videoName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VideoEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.videoName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos/{videoName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VideoEntity
    },
    201: {
      bodyMapper: Mappers.VideoEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.videoName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos/{videoName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.videoName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos/{videoName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.VideoEntity
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.videoName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listStreamingTokenOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/videos/{videoName}/listStreamingToken",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VideoStreamingToken
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.videoName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VideoEntityCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
